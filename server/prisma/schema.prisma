generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model activities {
  activityId  Int           @id @unique() @default(autoincrement())
  ownerId     Int
  name        String
  createdAt   DateTime      @default(now())
  lastEdited  DateTime      @default(now())
  imagePath   String?
  isPublic    Boolean       @default(false)
  isDeleted   Boolean       @default(false)
  owner       users         @relation(fields: [ownerId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  assignments assignments[]
  documents   documents[]

  @@index([ownerId])
}

model assignmentDocuments {
  assignmentId               Int
  docId                      Int
  docVersionId               Int
  assignment                 assignments                  @relation(fields: [assignmentId], references: [assignmentId], onDelete: NoAction, onUpdate: NoAction)
  documentVersion            documentVersions             @relation(fields: [docId, docVersionId], references: [docId, version], onDelete: NoAction, onUpdate: NoAction)
  documentState              documentState[]
  documentSubmittedResponses documentSubmittedResponses[]

  @@id([assignmentId, docId, docVersionId])
  @@index([assignmentId])
  @@index([docId, docVersionId])
}

model assignments {
  assignmentId        Int                   @id @unique @default(autoincrement())
  classCode           String?               @db.VarChar(45)
  codeValidUntil      DateTime?
  activityId          Int
  ownerId             Int
  name                String
  imagePath           String?
  createdAt           DateTime              @default(now())
  isDeleted           Boolean               @default(false)
  assignmentDocuments assignmentDocuments[]
  activity            activities            @relation(fields: [activityId], references: [activityId], onDelete: NoAction, onUpdate: NoAction)
  owner               users                 @relation(fields: [ownerId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  assignmentScores    assignmentScores[]

  @@index([activityId])
  @@index([ownerId])
  @@index([classCode])
}

model documentVersions {
  docId               Int
  version             Int
  cid                 String
  name                String
  activityName        String
  content             String
  createdAt           DateTime              @default(now())
  doenetmlVersionId   Int
  assignmentDocuments assignmentDocuments[]
  document            documents             @relation(fields: [docId], references: [docId], onDelete: NoAction, onUpdate: NoAction)
  doenetmlVersion     doenetmlVersions      @relation(fields: [doenetmlVersionId], references: [versionId], onDelete: NoAction, onUpdate: NoAction)
  contributorHistory  contributorHistory[]

  @@id([docId, version])
  @@unique([docId, cid])
  @@index([docId])
}

model documents {
  docId              Int                  @id @unique @default(autoincrement())
  activityId         Int
  content            String
  createdAt          DateTime             @default(now())
  lastEdited         DateTime             @default(now())
  name               String
  isDeleted          Boolean              @default(false)
  doenetmlVersionId  Int
  documentVersions   documentVersions[]
  activity           activities           @relation(fields: [activityId], references: [activityId], onDelete: NoAction, onUpdate: NoAction)
  doenetmlVersion    doenetmlVersions     @relation(fields: [doenetmlVersionId], references: [versionId], onDelete: NoAction, onUpdate: NoAction)
  contributorHistory contributorHistory[]
}

model contributorHistory {
  docId          Int
  prevDocId      Int
  prevDocVersion Int
  timestamp      DateTime         @default(now())
  document       documents        @relation(fields: [docId], references: [docId], onDelete: NoAction, onUpdate: NoAction)
  prevDoc        documentVersions @relation(fields: [prevDocId, prevDocVersion], references: [docId, version], onDelete: NoAction, onUpdate: NoAction)

  @@id([docId, prevDocId])
  @@index([prevDocId, prevDocVersion])
}

model doenetmlVersions {
  versionId          Int                @id @unique @default(autoincrement())
  displayedVersion   String             @unique
  fullVersion        String
  default            Boolean            @default(false)
  deprecated         Boolean            @default(false)
  removed            Boolean            @default(false)
  deprecationMessage String             @default("")
  documents          documents[]
  documentVersions   documentVersions[]
}

model assignmentScores {
  assignmentId  Int
  userId        Int
  score         Float           @default(0)
  assignment    assignments     @relation(fields: [assignmentId], references: [assignmentId], onDelete: NoAction, onUpdate: NoAction)
  user          users           @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  documentState documentState[]

  @@id([assignmentId, userId])
  @@index([assignmentId])
  @@index([userId])
}

model documentState {
  assignmentId       Int
  docId              Int
  docVersionId       Int
  userId             Int
  isLatest           Boolean             @default(true)
  hasMaxScore        Boolean             @default(false)
  state              String?
  score              Float               @default(0)
  assignmentScore    assignmentScores    @relation(fields: [assignmentId, userId], references: [assignmentId, userId], onDelete: NoAction, onUpdate: NoAction)
  assignmentDocument assignmentDocuments @relation(fields: [assignmentId, docId, docVersionId], references: [assignmentId, docId, docVersionId], onDelete: NoAction, onUpdate: NoAction)
  user               users               @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([assignmentId, docId, docVersionId, userId, isLatest])
  @@unique([assignmentId, docId, docVersionId, userId, hasMaxScore])
  @@index([assignmentId, docId, docVersionId])
  @@index([userId])
}

model documentSubmittedResponses {
  id                     Int                 @id @default(autoincrement())
  assignmentId           Int
  docId                  Int
  docVersionId           Int
  userId                 Int
  answerId               String
  response               String
  answerNumber           Int?
  itemNumber             Int
  creditAchieved         Float
  itemCreditAchieved     Float
  documentCreditAchieved Float
  submittedAt            DateTime            @default(now())
  assignmentDocument     assignmentDocuments @relation(fields: [assignmentId, docId, docVersionId], references: [assignmentId, docId, docVersionId], onDelete: NoAction, onUpdate: NoAction)
  user                   users               @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@index([assignmentId, docId, docVersionId, answerId])
  @@index([userId])
}

model users {
  userId                     Int                          @id @default(autoincrement())
  email                      String                       @unique @db.VarChar(45)
  name                       String
  isAdmin                    Boolean                      @default(false)
  anonymous                  Boolean                      @default(false)
  activities                 activities[]
  assignments                assignments[]
  assignmentScores           assignmentScores[]
  documentState              documentState[]
  documentSubmittedResponses documentSubmittedResponses[]
}
