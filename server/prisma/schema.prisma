generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}

model content {
  id                    Bytes                    @id @default(dbgenerated("(uuid_to_bin(uuid(),1))")) @db.Binary(16)
  ownerId               Bytes                    @db.Binary(16)
  isFolder              Boolean
  parentFolderId        Bytes?                   @db.Binary(16)
  name                  String
  createdAt             DateTime                 @default(now())
  lastEdited            DateTime                 @default(now())
  imagePath             String?
  isAssigned            Boolean                  @default(false)
  classCode             String?                  @db.VarChar(45)
  codeValidUntil        DateTime?
  isPublic              Boolean                  @default(false)
  isDeleted             Boolean                  @default(false)
  sortIndex             BigInt
  licenseCode           String?                  @default("CCDUAL") @db.VarChar(10)
  owner                 users                    @relation(fields: [ownerId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  parentFolder          content?                 @relation("folderStructure", fields: [parentFolderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subFolders            content[]                @relation("folderStructure")
  documents             documents[]
  license               licenses?                @relation(fields: [licenseCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
  contentFeatures       contentFeatures[]
  assignmentScores      assignmentScores[]
  promotedContent       promotedContent[]
  sharedWith            contentShares[]
  classifications       contentClassifications[]
  contentViews          contentViews[]
  librarySource         libraryActivityInfos?    @relation("source")
  libraryActivity       libraryActivityInfos?    @relation("activity")
  librarySourceEvents   libraryEvents[]          @relation("source")
  libraryActivityEvents libraryEvents[]          @relation("activity")

  @@index([ownerId, parentFolderId, sortIndex])
  @@index([classCode])
  @@index([parentFolderId, isFolder])
  @@fulltext([name])
}

model documents {
  id                 Bytes                @id @default(dbgenerated("(uuid_to_bin(uuid(),1))")) @db.Binary(16)
  activityId         Bytes                @db.Binary(16)
  source             String               @db.MediumText
  createdAt          DateTime             @default(now())
  lastEdited         DateTime             @default(now())
  name               String
  isDeleted          Boolean              @default(false)
  assignedVersionNum Int?
  doenetmlVersionId  Int
  assignedVersion    documentVersions?    @relation("assignedVersion", fields: [id, assignedVersionNum], references: [docId, versionNum], onDelete: NoAction, onUpdate: NoAction)
  documentVersions   documentVersions[]
  activity           content              @relation(fields: [activityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  doenetmlVersion    doenetmlVersions     @relation(fields: [doenetmlVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contributorHistory contributorHistory[]

  @@unique([id, assignedVersionNum]) // needed for the 1-1 relation "assignedVersion" with documentVersions
  @@fulltext([source])
}

model documentVersions {
  docId                      Bytes                        @db.Binary(16)
  versionNum                 Int
  cid                        String
  source                     String                       @db.MediumText
  createdAt                  DateTime                     @default(now())
  doenetmlVersionId          Int
  document                   documents                    @relation(fields: [docId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  doenetmlVersion            doenetmlVersions             @relation(fields: [doenetmlVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contributorHistory         contributorHistory[]
  documentState              documentState[]
  documentSubmittedResponses documentSubmittedResponses[]
  assignedDocument           documents?                   @relation("assignedVersion")

  @@id([docId, versionNum])
  @@unique([docId, cid])
  @@index([docId])
}

model licenses {
  code               String                @id @db.VarChar(10)
  name               String
  description        String                @db.Text
  imageURL           String?
  smallImageURL      String?
  licenseURL         String?
  composedOf         licenseCompositions[] @relation("composeOf")
  includedIn         licenseCompositions[] @relation("includedIn")
  content            content[]
  sortIndex          Int
  contributorHistory contributorHistory[]
}

model licenseCompositions {
  composedOfCode String   @db.VarChar(10)
  composedOf     licenses @relation("includedIn", fields: [composedOfCode], references: [code])
  includedInCode String   @db.VarChar(10)
  includedIn     licenses @relation("composeOf", fields: [includedInCode], references: [code])

  @@id([composedOfCode, includedInCode])
}

model contentFeatures {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  term        String    @unique
  description String
  sortIndex   Int
  content     content[]
}

model contributorHistory {
  docId             Bytes            @db.Binary(16)
  prevDocId         Bytes            @db.Binary(16)
  prevDocVersionNum Int
  withLicenseCode   String?          @db.VarChar(10)
  timestampDoc      DateTime         @default(now())
  timestampPrevDoc  DateTime         @default(now())
  document          documents        @relation(fields: [docId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prevDoc           documentVersions @relation(fields: [prevDocId, prevDocVersionNum], references: [docId, versionNum], onDelete: NoAction, onUpdate: NoAction)
  withLicense       licenses?        @relation(fields: [withLicenseCode], references: [code], onDelete: NoAction, onUpdate: NoAction)

  @@id([docId, prevDocId])
  @@index([prevDocId, prevDocVersionNum])
}

model contentShares {
  contentId Bytes   @db.Binary(16)
  userId    Bytes   @db.Binary(16)
  content   content @relation(fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      users   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([contentId, userId])
  @@index([userId])
}

model doenetmlVersions {
  id                 Int                @id @default(autoincrement())
  displayedVersion   String             @unique
  fullVersion        String
  default            Boolean            @default(false)
  deprecated         Boolean            @default(false)
  removed            Boolean            @default(false)
  deprecationMessage String             @default("")
  documents          documents[]
  documentVersions   documentVersions[]
}

model assignmentScores {
  activityId    Bytes           @db.Binary(16)
  userId        Bytes           @db.Binary(16)
  score         Float           @default(0)
  activity      content         @relation(fields: [activityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          users           @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  documentState documentState[]

  @@id([activityId, userId])
  @@index([activityId])
  @@index([userId])
}

model documentState {
  activityId      Bytes            @db.Binary(16)
  docId           Bytes            @db.Binary(16)
  docVersionNum   Int
  userId          Bytes            @db.Binary(16)
  isLatest        Boolean          @default(true)
  hasMaxScore     Boolean          @default(false)
  state           String?          @db.MediumText
  score           Float            @default(0)
  assignmentScore assignmentScores @relation(fields: [activityId, userId], references: [activityId, userId], onDelete: NoAction, onUpdate: NoAction)
  documentVersion documentVersions @relation(fields: [docId, docVersionNum], references: [docId, versionNum], onDelete: NoAction, onUpdate: NoAction)
  user            users            @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([activityId, docId, docVersionNum, userId, isLatest])
  @@unique([activityId, docId, docVersionNum, userId, hasMaxScore])
  @@index([activityId, docId, docVersionNum])
  @@index([userId])
}

model documentSubmittedResponses {
  id                     Int              @id @default(autoincrement())
  activityId             Bytes            @db.Binary(16)
  docId                  Bytes            @db.Binary(16)
  docVersionNum          Int
  userId                 Bytes            @db.Binary(16)
  answerId               String
  response               String           @db.Text
  answerNumber           Int?
  itemNumber             Int
  creditAchieved         Float
  itemCreditAchieved     Float
  documentCreditAchieved Float
  submittedAt            DateTime         @default(now())
  documentVersion        documentVersions @relation(fields: [docId, docVersionNum], references: [docId, versionNum], onDelete: NoAction, onUpdate: NoAction)
  user                   users            @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@index([activityId, docId, docVersionNum, answerId])
  @@index([userId])
}

model contentViews {
  id         Int      @id @default(autoincrement())
  activityId Bytes    @db.Binary(16)
  date       DateTime @default(dbgenerated("(curdate())")) @db.Date
  userId     Bytes    @db.Binary(16)
  activity   content  @relation(fields: [activityId], references: [id])

  @@unique([date, activityId, userId])
}

model users {
  userId                     Bytes                        @id @default(dbgenerated("(uuid_to_bin(uuid(),1))")) @db.Binary(16)
  email                      String                       @unique
  firstNames                 String?
  lastNames                  String
  isAdmin                    Boolean                      @default(false)
  isLibrary                  Boolean                      @default(false)
  isAnonymous                Boolean                      @default(false)
  cardView                   Boolean                      @default(false)
  content                    content[]
  assignmentScores           assignmentScores[]
  documentState              documentState[]
  documentSubmittedResponses documentSubmittedResponses[]
  sharedWithMe               contentShares[]
  libraryEvents              libraryEvents[]

  @@fulltext([firstNames, lastNames])
}

model promotedContentGroups {
  id                Int               @id @default(autoincrement())
  groupName         String            @unique
  currentlyFeatured Boolean           @default(false)
  homepage          Boolean           @default(false)
  sortIndex         BigInt
  promotedContent   promotedContent[]
}

model promotedContent {
  activityId      Bytes                 @db.Binary(16)
  promotedGroupId Int
  sortIndex       BigInt
  activity        content               @relation(fields: [activityId], references: [id])
  promotedGroup   promotedContentGroups @relation(fields: [promotedGroupId], references: [id])

  @@id([activityId, promotedGroupId])
}

model contentClassifications {
  contentId        Bytes           @db.Binary(16)
  classificationId Int
  content          content         @relation(fields: [contentId], references: [id])
  classification   classifications @relation(fields: [classificationId], references: [id])

  @@id([contentId, classificationId])
}

model classificationSystems {
  id                      Int                        @id @default(autoincrement())
  name                    String                     @unique
  shortName               String                     @unique
  categoryLabel           String
  subCategoryLabel        String
  descriptionLabel        String
  sortIndex               Int
  type                    String
  categoriesInDescription Boolean                    @default(false)
  categories              classificationCategories[]

  @@fulltext([name])
}

model classificationCategories {
  id            Int                           @id @default(autoincrement())
  category      String
  systemId      Int
  sortIndex     Int
  system        classificationSystems         @relation(fields: [systemId], references: [id])
  subCategories classificationSubCategories[]

  @@unique([category, systemId])
  @@fulltext([category])
}

model classificationSubCategories {
  id           Int                          @id @default(autoincrement())
  categoryId   Int
  subCategory  String                       @db.Text
  sortIndex    Int
  category     classificationCategories     @relation(fields: [categoryId], references: [id])
  descriptions classificationDescriptions[]

  @@unique([subCategory(length: 200), categoryId])
  @@fulltext([subCategory])
}

model classificationDescriptions {
  id               Int                         @id @default(autoincrement())
  subCategoryId    Int
  classificationId Int
  description      String                      @db.Text
  sortIndex        Int
  isPrimary        Boolean                     @default(true)
  subCategory      classificationSubCategories @relation(fields: [subCategoryId], references: [id])
  classification   classifications             @relation(fields: [classificationId], references: [id])

  @@unique([classificationId, subCategoryId])
  @@unique([description(length: 200), subCategoryId])
  @@fulltext([description])
}

model classifications {
  id                     Int                          @id @default(autoincrement())
  code                   String
  descriptions           classificationDescriptions[]
  contentClassifications contentClassifications[]

  @@fulltext([code])
}

model libraryActivityInfos {
  sourceId       Bytes         @id @db.Binary(16)
  activityId     Bytes?        @unique @db.Binary(16)
  ownerRequested Boolean
  status         LibraryStatus
  comments       String        @default("")
  source         content       @relation(name: "source", fields: [sourceId], references: [id])
  activity       content?      @relation(name: "activity", fields: [activityId], references: [id])
}

enum LibraryStatus {
  PENDING_REVIEW
  REQUEST_REMOVED
  PUBLISHED
  NEEDS_REVISION
}

model libraryEvents {
  id         Bytes            @id @default(dbgenerated("(uuid_to_bin(uuid(),1))")) @db.Binary(16)
  sourceId   Bytes            @db.Binary(16)
  activityId Bytes?           @db.Binary(16)
  eventType  LibraryEventType
  dateTime   DateTime
  comments   String           @default("")
  userId     Bytes            @db.Binary(16)
  user       users            @relation(fields: [userId], references: [userId])
  source     content          @relation(name: "source", fields: [sourceId], references: [id])
  activity   content?         @relation(name: "activity", fields: [activityId], references: [id])
}

enum LibraryEventType {
  // Activity owners can:
  SUBMIT_REQUEST
  CANCEL_REQUEST
  // Admins can:
  ADD_DRAFT
  DELETE_DRAFT
  PUBLISH
  UNPUBLISH
  // And admins can communicate with owner
  MARK_NEEDS_REVISION
  MODIFY_COMMENTS
}
