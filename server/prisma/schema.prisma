generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}

model content {
  // General metadata
  id                  Bytes                    @id @default(dbgenerated("(uuid_to_bin(uuid(),1))")) @db.Binary(16)
  type                ContentType              @default(singleDoc)
  ownerId             Bytes                    @db.Binary(16)
  name                String
  parentId            Bytes?                   @db.Binary(16)
  isPublic            Boolean                  @default(false)
  isDeleted           Boolean                  @default(false)
  createdAt           DateTime                 @default(now())
  sortIndex           BigInt
  licenseCode         String?                  @default("CCDUAL") @db.VarChar(10)
  lastEdited          DateTime                 @default(now())
  // Specific to document type
  source              String?                  @db.MediumText
  doenetmlVersionId   Int?
  numVariants         Int                      @default(1)
  // Specific to sequence type
  shuffle             Boolean                  @default(false)
  paginate            Boolean                  @default(false)
  // Specific to select type
  numToSelect         Int                      @default(1) @db.UnsignedSmallInt
  selectByVariant     Boolean                  @default(false)
  // Assignments
  nonRootAssignmentId Bytes?                   @db.Binary(16)
  nonRootAssignment   assignments?             @relation("nonRootAssignment", fields: [nonRootAssignmentId], references: [rootContentId], onDelete: SetNull, onUpdate: NoAction)
  rootAssignment      assignments?             @relation("rootAssignment")
  owner               users                    @relation(fields: [ownerId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  parent              content?                 @relation("childParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children            content[]                @relation("childParent")
  license             licenses?                @relation(fields: [licenseCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
  doenetmlVersion     doenetmlVersions?        @relation(fields: [doenetmlVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contentFeatures     contentFeatures[]
  promotedContent     promotedContent[]
  sharedWith          contentShares[]
  classifications     contentClassifications[]
  contentViews        contentViews[]
  recentContent       recentContent[]
  librarySourceInfo   libraryActivityInfos?    @relation("source")
  libraryActivityInfo libraryActivityInfos?    @relation("activity")
  contentRevisions    contentRevisions[]
  submittedResponses  submittedResponses[]

  @@index([ownerId, parentId, sortIndex])
  @@index([parentId, type])
  @@fulltext([name])
  @@fulltext([source])
}

enum ContentType {
  singleDoc
  select
  sequence
  folder
}

model recentContent {
  id        Int        @id @default(autoincrement())
  userId    Bytes      @db.Binary(16)
  contentId Bytes      @db.Binary(16)
  accessed  DateTime   @default(now())
  mode      RecentMode
  user      users      @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  content   content    @relation(fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, mode, contentId])
}

enum RecentMode {
  edit
  view
}

model contentRevisions {
  contentId                  Bytes                @db.Binary(16)
  revisionNum                Int
  revisionName               String
  note                       String?              @db.Text
  autoGenerated              Boolean              @default(true)
  cid                        String
  source                     String               @db.MediumText
  createdAt                  DateTime             @default(now())
  numVariants                Int                  @default(1)
  doenetmlVersionId          Int?
  content                    content              @relation(fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  doenetmlVersion            doenetmlVersions?    @relation(fields: [doenetmlVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contributorHistoryAsOrigin contributorHistory[] @relation("originContent")
  contributorHistoryAsRemix  contributorHistory[] @relation("remixContent")

  @@id([contentId, revisionNum])
  @@index([contentId, cid])
}

model licenses {
  code               String                @id @db.VarChar(10)
  name               String
  description        String                @db.Text
  imageURL           String?
  smallImageURL      String?
  licenseURL         String?
  composedOf         licenseCompositions[] @relation("composeOf")
  includedIn         licenseCompositions[] @relation("includedIn")
  content            content[]
  sortIndex          Int
  contributorHistory contributorHistory[]
}

model licenseCompositions {
  composedOfCode String   @db.VarChar(10)
  composedOf     licenses @relation("includedIn", fields: [composedOfCode], references: [code])
  includedInCode String   @db.VarChar(10)
  includedIn     licenses @relation("composeOf", fields: [includedInCode], references: [code])

  @@id([composedOfCode, includedInCode])
}

model contentFeatures {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  term        String    @unique
  description String
  sortIndex   Int
  content     content[]
}

model contributorHistory {
  remixContentId               Bytes            @db.Binary(16)
  remixContentRevisionNum      Int
  originContentId              Bytes            @db.Binary(16)
  originContentRevisionNum     Int
  withLicenseCode              String?          @db.VarChar(10)
  timestampRemixContent        DateTime         @default(now())
  timestampOriginContent       DateTime         @default(now())
  directCopy                   Boolean          @default(false)
  subscribeOriginContentChange Boolean          @default(true)
  subscribeRemixContentChange  Boolean          @default(false)
  remixContent                 contentRevisions @relation("remixContent", fields: [remixContentId, remixContentRevisionNum], references: [contentId, revisionNum], onDelete: NoAction, onUpdate: NoAction)
  originContent                contentRevisions @relation("originContent", fields: [originContentId, originContentRevisionNum], references: [contentId, revisionNum], onDelete: NoAction, onUpdate: NoAction)
  withLicense                  licenses?        @relation(fields: [withLicenseCode], references: [code], onDelete: NoAction, onUpdate: NoAction)

  @@id([remixContentId, originContentId])
  @@index([originContentId, originContentRevisionNum])
}

model contentShares {
  contentId Bytes   @db.Binary(16)
  userId    Bytes   @db.Binary(16)
  content   content @relation(fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      users   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([contentId, userId])
  @@index([userId])
}

model doenetmlVersions {
  id                 Int                @id @default(autoincrement())
  displayedVersion   String             @unique
  fullVersion        String
  default            Boolean            @default(false)
  deprecated         Boolean            @default(false)
  removed            Boolean            @default(false)
  deprecationMessage String             @default("")
  content            content[]
  contentRevisions   contentRevisions[]
}

model assignments {
  rootContentId          Bytes              @id @db.Binary(16)
  assigned               Boolean            @default(false)
  mode                   AssignmentMode     @default(formative)
  classCode              String             @db.VarChar(45)
  codeValidUntil         DateTime?
  maxAttempts            Int                @default(1) @db.UnsignedSmallInt
  individualizeByStudent Boolean            @default(false)
  rootContent            content            @relation("rootAssignment", fields: [rootContentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nonRootContent         content[]          @relation("nonRootAssignment")
  contentState           contentState[]
  assignmentScores       assignmentScores[]

  @@index([classCode])
}

enum AssignmentMode {
  formative
  summative
}

model assignmentScores {
  contentId               Bytes       @db.Binary(16)
  userId                  Bytes       @db.Binary(16)
  cachedScore             Float?
  cachedBestAttemptNumber Int         @db.UnsignedSmallInt
  cachedItemScores        String?     @db.Text
  cachedLatestAttempt     String?     @db.Text
  assignment              assignments @relation(fields: [contentId], references: [rootContentId], onDelete: NoAction, onUpdate: NoAction)
  user                    users       @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([contentId, userId])
  @@index([userId])
}

model contentState {
  contentId         Bytes              @db.Binary(16)
  userId            Bytes              @db.Binary(16)
  variant           Int                @db.UnsignedMediumInt
  attemptNumber     Int                @db.UnsignedSmallInt
  score             Float?
  state             String?            @db.MediumText
  assignment        assignments        @relation(fields: [contentId], references: [rootContentId], onDelete: NoAction, onUpdate: NoAction)
  user              users              @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  contentItemStates contentItemState[]

  @@id([contentId, userId, attemptNumber])
  @@index([userId])
}

model contentItemState {
  contentId            Bytes        @db.Binary(16)
  userId               Bytes        @db.Binary(16)
  variant              Int          @db.UnsignedMediumInt
  contentAttemptNumber Int          @db.UnsignedSmallInt
  itemNumber           Int          @db.UnsignedSmallInt
  shuffledItemNumber   Int          @db.UnsignedSmallInt
  itemAttemptNumber    Int          @db.UnsignedSmallInt
  docId                Bytes        @db.Binary(16)
  score                Float        @default(0)
  state                String?      @db.MediumText
  contentState         contentState @relation(fields: [contentId, userId, contentAttemptNumber], references: [contentId, userId, attemptNumber], onDelete: NoAction, onUpdate: NoAction)

  @@id([contentId, userId, contentAttemptNumber, itemNumber, itemAttemptNumber])
  @@unique([contentId, userId, contentAttemptNumber, shuffledItemNumber, itemAttemptNumber])
}

model submittedResponses {
  id                      Int      @id @default(autoincrement())
  contentId               Bytes    @db.Binary(16)
  userId                  Bytes    @db.Binary(16)
  contentAttemptNumber    Int      @db.UnsignedSmallInt
  itemAttemptNumber       Int?     @db.UnsignedSmallInt
  answerId                String
  response                String   @db.Text
  answerNumber            Int?     @db.UnsignedSmallInt
  componentNumber         Int      @db.UnsignedSmallInt
  itemNumber              Int      @db.UnsignedSmallInt
  shuffledItemNumber      Int      @db.UnsignedSmallInt
  answerCreditAchieved    Float
  componentCreditAchieved Float
  itemCreditAchieved      Float
  submittedAt             DateTime @default(now())
  content                 content  @relation(fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                    users    @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@index([contentId, contentAttemptNumber, itemAttemptNumber, userId, answerId])
}

model contentViews {
  id        Int      @id @default(autoincrement())
  contentId Bytes    @db.Binary(16)
  date      DateTime @default(dbgenerated("(curdate())")) @db.Date
  userId    Bytes    @db.Binary(16)
  content   content  @relation(fields: [contentId], references: [id])

  @@unique([date, contentId, userId])
}

model users {
  userId             Bytes                  @id @default(dbgenerated("(uuid_to_bin(uuid(),1))")) @db.Binary(16)
  email              String                 @unique
  firstNames         String?
  lastNames          String
  isAdmin            Boolean                @default(false)
  isLibrary          Boolean                @default(false)
  isAnonymous        Boolean                @default(false)
  isAuthor           Boolean                @default(false)
  content            content[]
  contentState       contentState[]
  submittedResponses submittedResponses[]
  sharedWithMe       contentShares[]
  recentContent      recentContent[]
  assignmentScores   assignmentScores[]
  libraryEvents      libraryEvents[]
  libraryEditorInfos libraryActivityInfos[]

  @@fulltext([firstNames, lastNames])
}

model promotedContentGroups {
  id                Int               @id @default(autoincrement())
  groupName         String            @unique
  currentlyFeatured Boolean           @default(false)
  homepage          Boolean           @default(false)
  sortIndex         BigInt
  promotedContent   promotedContent[]
}

model promotedContent {
  contentId       Bytes                 @db.Binary(16)
  promotedGroupId Int
  sortIndex       BigInt
  activity        content               @relation(fields: [contentId], references: [id])
  promotedGroup   promotedContentGroups @relation(fields: [promotedGroupId], references: [id])

  @@id([contentId, promotedGroupId])
}

model contentClassifications {
  contentId        Bytes           @db.Binary(16)
  classificationId Int
  content          content         @relation(fields: [contentId], references: [id])
  classification   classifications @relation(fields: [classificationId], references: [id])

  @@id([contentId, classificationId])
}

model classificationSystems {
  id                      Int                        @id @default(autoincrement())
  name                    String                     @unique
  shortName               String                     @unique
  categoryLabel           String
  subCategoryLabel        String
  descriptionLabel        String
  sortIndex               Int
  type                    String
  categoriesInDescription Boolean                    @default(false)
  categories              classificationCategories[]

  @@fulltext([name])
}

model classificationCategories {
  id            Int                           @id @default(autoincrement())
  category      String
  systemId      Int
  sortIndex     Int
  system        classificationSystems         @relation(fields: [systemId], references: [id])
  subCategories classificationSubCategories[]

  @@unique([category, systemId])
  @@fulltext([category])
}

model classificationSubCategories {
  id           Int                          @id @default(autoincrement())
  categoryId   Int
  subCategory  String                       @db.Text
  sortIndex    Int
  category     classificationCategories     @relation(fields: [categoryId], references: [id])
  descriptions classificationDescriptions[]

  @@unique([subCategory(length: 200), categoryId])
  @@fulltext([subCategory])
}

model classificationDescriptions {
  id               Int                         @id @default(autoincrement())
  subCategoryId    Int
  classificationId Int
  description      String                      @db.Text
  sortIndex        Int
  isPrimary        Boolean                     @default(true)
  subCategory      classificationSubCategories @relation(fields: [subCategoryId], references: [id])
  classification   classifications             @relation(fields: [classificationId], references: [id])

  @@unique([classificationId, subCategoryId])
  @@unique([description(length: 200), subCategoryId])
  @@fulltext([description])
}

model classifications {
  id                     Int                          @id @default(autoincrement())
  code                   String
  descriptions           classificationDescriptions[]
  contentClassifications contentClassifications[]

  @@fulltext([code])
}

model libraryActivityInfos {
  sourceId        Bytes           @id @db.Binary(16)
  contentId       Bytes           @unique @db.Binary(16)
  primaryEditorId Bytes?          @db.Binary(16)
  ownerRequested  Boolean
  requestedOn     DateTime
  status          LibraryStatus
  source          content         @relation(name: "source", fields: [sourceId], references: [id])
  activity        content         @relation(name: "activity", fields: [contentId], references: [id])
  primaryEditor   users?          @relation(fields: [primaryEditorId], references: [userId])
  events          libraryEvents[]
}

enum LibraryStatus {
  PENDING
  UNDER_REVIEW
  PUBLISHED
  REJECTED
}

model libraryEvents {
  id        Bytes                @id @default(dbgenerated("(uuid_to_bin(uuid(),1))")) @db.Binary(16)
  infoId    Bytes                @db.Binary(16)
  eventType LibraryEventType
  dateTime  DateTime
  comment   String?
  userId    Bytes                @db.Binary(16)
  info      libraryActivityInfos @relation(fields: [infoId], references: [sourceId])
  user      users                @relation(fields: [userId], references: [userId])
}

enum LibraryEventType {
  // Anyone can:
  SUGGEST_REVIEW

  // Editors can:
  TAKE_OWNERSHIP
  PUBLISH
  UNPUBLISH
  REJECT

  // Editors and owners can:
  ADD_COMMENT
  // EDIT_COMMENT
}
