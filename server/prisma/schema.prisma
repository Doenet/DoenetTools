generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}

model content {
  // General metadata
  id                    Bytes                    @id @default(dbgenerated("(uuid_to_bin(uuid(),1))")) @db.Binary(16)
  type                  ContentType              @default(singleDoc)
  ownerId               Bytes                    @db.Binary(16)
  name                  String
  parentId              Bytes?                   @db.Binary(16)
  isPublic              Boolean                  @default(false)
  isDeleted             Boolean                  @default(false)
  createdAt             DateTime                 @default(now())
  sortIndex             BigInt
  licenseCode           String?                  @default("CCDUAL") @db.VarChar(10)
  imagePath             String?
  lastEdited            DateTime                 @default(now())
  // Specific to document type
  source                String?                  @db.MediumText
  doenetmlVersionId     Int?
  numVariants           Int                      @default(1)
  baseComponentCounts   String?                  @db.Text
  // Specific to sequence type
  shuffle               Boolean                  @default(false)
  paginate              Boolean                  @default(false)
  activityLevelAttempts Boolean                  @default(false)
  itemLevelAttempts     Boolean                  @default(false)
  // Specific to select type
  numToSelect           Int                      @default(1) @db.UnsignedSmallInt
  selectByVariant       Boolean                  @default(false)
  // Assignments
  isAssigned            Boolean                  @default(false)
  assignedRevisionNum   Int?
  classCode             String?                  @db.VarChar(45)
  codeValidUntil        DateTime?
  owner                 users                    @relation(fields: [ownerId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  parent                content?                 @relation("childParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children              content[]                @relation("childParent")
  license               licenses?                @relation(fields: [licenseCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
  assignedRevision      activityRevisions?       @relation("assignedRevision", fields: [id, assignedRevisionNum], references: [contentId, revisionNum], onDelete: NoAction, onUpdate: NoAction)
  doenetmlVersion       doenetmlVersions?        @relation(fields: [doenetmlVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contentFeatures       contentFeatures[]
  assignmentScores      assignmentScores[]
  promotedContent       promotedContent[]
  sharedWith            contentShares[]
  classifications       contentClassifications[]
  contentViews          contentViews[]
  recentContent         recentContent[]
  librarySourceInfo     libraryActivityInfos?    @relation("source")
  libraryActivityInfo   libraryActivityInfos?    @relation("activity")
  librarySourceEvents   libraryEvents[]          @relation("source")
  libraryActivityEvents libraryEvents[]          @relation("activity")
  activityRevisions     activityRevisions[]
  contributorHistory    contributorHistory[]

  @@unique([id, assignedRevisionNum]) // needed for the 1-1 relation "assignedRevision" with activityRevisions
  @@index([ownerId, parentId, sortIndex])
  @@index([classCode])
  @@index([parentId, type])
  @@fulltext([name])
  @@fulltext([source])
}

enum ContentType {
  singleDoc
  select
  sequence
  folder
}

model recentContent {
  id        Int        @id @default(autoincrement())
  userId    Bytes      @db.Binary(16)
  contentId Bytes      @db.Binary(16)
  accessed  DateTime   @default(now())
  mode      RecentMode
  user      users      @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  content   content    @relation(fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, mode, contentId])
}

enum RecentMode {
  edit
  view
}

model activityRevisions {
  contentId           Bytes                @db.Binary(16)
  revisionNum         Int
  cid                 String
  source              String               @db.MediumText
  createdAt           DateTime             @default(now())
  numVariants         Int                  @default(1)
  baseComponentCounts String?              @db.Text
  doenetmlVersionId   Int?
  activity            content              @relation(fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  doenetmlVersion     doenetmlVersions?    @relation(fields: [doenetmlVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contributorHistory  contributorHistory[]
  activityState       activityState[]
  submittedResponses  submittedResponses[]
  assignedContent     content?             @relation("assignedRevision")

  @@id([contentId, revisionNum])
  @@unique([contentId, cid])
}

model licenses {
  code               String                @id @db.VarChar(10)
  name               String
  description        String                @db.Text
  imageURL           String?
  smallImageURL      String?
  licenseURL         String?
  composedOf         licenseCompositions[] @relation("composeOf")
  includedIn         licenseCompositions[] @relation("includedIn")
  content            content[]
  sortIndex          Int
  contributorHistory contributorHistory[]
}

model licenseCompositions {
  composedOfCode String   @db.VarChar(10)
  composedOf     licenses @relation("includedIn", fields: [composedOfCode], references: [code])
  includedInCode String   @db.VarChar(10)
  includedIn     licenses @relation("composeOf", fields: [includedInCode], references: [code])

  @@id([composedOfCode, includedInCode])
}

model contentFeatures {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  term        String    @unique
  description String
  sortIndex   Int
  content     content[]
}

model contributorHistory {
  contentId               Bytes             @db.Binary(16)
  prevContentId           Bytes             @db.Binary(16)
  prevActivityRevisionNum Int
  withLicenseCode         String?           @db.VarChar(10)
  timestampActivity       DateTime          @default(now())
  timestampPrevActivity   DateTime          @default(now())
  directCopy              Boolean           @default(false)
  activity                content           @relation(fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prevActivity            activityRevisions @relation(fields: [prevContentId, prevActivityRevisionNum], references: [contentId, revisionNum], onDelete: NoAction, onUpdate: NoAction)
  withLicense             licenses?         @relation(fields: [withLicenseCode], references: [code], onDelete: NoAction, onUpdate: NoAction)

  @@id([contentId, prevContentId])
  @@index([prevContentId, prevActivityRevisionNum])
}

model contentShares {
  contentId Bytes   @db.Binary(16)
  userId    Bytes   @db.Binary(16)
  content   content @relation(fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      users   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([contentId, userId])
  @@index([userId])
}

model doenetmlVersions {
  id                 Int                 @id @default(autoincrement())
  displayedVersion   String              @unique
  fullVersion        String
  default            Boolean             @default(false)
  deprecated         Boolean             @default(false)
  removed            Boolean             @default(false)
  deprecationMessage String              @default("")
  content            content[]
  activityRevisions  activityRevisions[]
}

model assignmentScores {
  contentId     Bytes           @db.Binary(16)
  userId        Bytes           @db.Binary(16)
  score         Float           @default(0)
  activity      content         @relation(fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          users           @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  activityState activityState[]

  @@id([contentId, userId])
  @@index([contentId])
  @@index([userId])
}

model activityState {
  contentId           Bytes             @db.Binary(16)
  userId              Bytes             @db.Binary(16)
  isLatest            Boolean           @default(true)
  hasMaxScore         Boolean           @default(false)
  score               Float             @default(0)
  activityRevisionNum Int
  state               String?           @db.MediumText
  assignmentScore     assignmentScores  @relation(fields: [contentId, userId], references: [contentId, userId], onDelete: NoAction, onUpdate: NoAction)
  activityRevision    activityRevisions @relation(fields: [contentId, activityRevisionNum], references: [contentId, revisionNum], onDelete: NoAction, onUpdate: NoAction)
  user                users             @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([contentId, userId, isLatest])
  @@unique([contentId, userId, hasMaxScore])
  @@index([userId])
}

model submittedResponses {
  id                     Int               @id @default(autoincrement())
  contentId              Bytes             @db.Binary(16)
  activityRevisionNum    Int
  userId                 Bytes             @db.Binary(16)
  answerId               String
  response               String            @db.Text
  answerNumber           Int?
  itemNumber             Int
  creditAchieved         Float
  itemCreditAchieved     Float
  activityCreditAchieved Float
  submittedAt            DateTime          @default(now())
  activityRevision       activityRevisions @relation(fields: [contentId, activityRevisionNum], references: [contentId, revisionNum], onDelete: NoAction, onUpdate: NoAction)
  user                   users             @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@index([contentId, activityRevisionNum, answerId])
  @@index([userId])
}

model contentViews {
  id        Int      @id @default(autoincrement())
  contentId Bytes    @db.Binary(16)
  date      DateTime @default(dbgenerated("(curdate())")) @db.Date
  userId    Bytes    @db.Binary(16)
  activity  content  @relation(fields: [contentId], references: [id])

  @@unique([date, contentId, userId])
}

model users {
  userId             Bytes                @id @default(dbgenerated("(uuid_to_bin(uuid(),1))")) @db.Binary(16)
  email              String               @unique
  firstNames         String?
  lastNames          String
  isAdmin            Boolean              @default(false)
  isLibrary          Boolean              @default(false)
  isAnonymous        Boolean              @default(false)
  cardView           Boolean              @default(false)
  content            content[]
  assignmentScores   assignmentScores[]
  activityState      activityState[]
  submittedResponses submittedResponses[]
  sharedWithMe       contentShares[]
  recentContent      recentContent[]
  libraryEvents      libraryEvents[]

  @@fulltext([firstNames, lastNames])
}

model promotedContentGroups {
  id                Int               @id @default(autoincrement())
  groupName         String            @unique
  currentlyFeatured Boolean           @default(false)
  homepage          Boolean           @default(false)
  sortIndex         BigInt
  promotedContent   promotedContent[]
}

model promotedContent {
  contentId       Bytes                 @db.Binary(16)
  promotedGroupId Int
  sortIndex       BigInt
  activity        content               @relation(fields: [contentId], references: [id])
  promotedGroup   promotedContentGroups @relation(fields: [promotedGroupId], references: [id])

  @@id([contentId, promotedGroupId])
}

model contentClassifications {
  contentId        Bytes           @db.Binary(16)
  classificationId Int
  content          content         @relation(fields: [contentId], references: [id])
  classification   classifications @relation(fields: [classificationId], references: [id])

  @@id([contentId, classificationId])
}

model classificationSystems {
  id                      Int                        @id @default(autoincrement())
  name                    String                     @unique
  shortName               String                     @unique
  categoryLabel           String
  subCategoryLabel        String
  descriptionLabel        String
  sortIndex               Int
  type                    String
  categoriesInDescription Boolean                    @default(false)
  categories              classificationCategories[]

  @@fulltext([name])
}

model classificationCategories {
  id            Int                           @id @default(autoincrement())
  category      String
  systemId      Int
  sortIndex     Int
  system        classificationSystems         @relation(fields: [systemId], references: [id])
  subCategories classificationSubCategories[]

  @@unique([category, systemId])
  @@fulltext([category])
}

model classificationSubCategories {
  id           Int                          @id @default(autoincrement())
  categoryId   Int
  subCategory  String                       @db.Text
  sortIndex    Int
  category     classificationCategories     @relation(fields: [categoryId], references: [id])
  descriptions classificationDescriptions[]

  @@unique([subCategory(length: 200), categoryId])
  @@fulltext([subCategory])
}

model classificationDescriptions {
  id               Int                         @id @default(autoincrement())
  subCategoryId    Int
  classificationId Int
  description      String                      @db.Text
  sortIndex        Int
  isPrimary        Boolean                     @default(true)
  subCategory      classificationSubCategories @relation(fields: [subCategoryId], references: [id])
  classification   classifications             @relation(fields: [classificationId], references: [id])

  @@unique([classificationId, subCategoryId])
  @@unique([description(length: 200), subCategoryId])
  @@fulltext([description])
}

model classifications {
  id                     Int                          @id @default(autoincrement())
  code                   String
  descriptions           classificationDescriptions[]
  contentClassifications contentClassifications[]

  @@fulltext([code])
}

model libraryActivityInfos {
  sourceId       Bytes         @id @db.Binary(16)
  contentId      Bytes?        @unique @db.Binary(16)
  ownerRequested Boolean
  status         LibraryStatus
  comments       String        @default("")
  source         content       @relation(name: "source", fields: [sourceId], references: [id])
  activity       content?      @relation(name: "activity", fields: [contentId], references: [id])
}

enum LibraryStatus {
  PENDING_REVIEW
  REQUEST_REMOVED
  PUBLISHED
  NEEDS_REVISION
}

model libraryEvents {
  id        Bytes            @id @default(dbgenerated("(uuid_to_bin(uuid(),1))")) @db.Binary(16)
  sourceId  Bytes            @db.Binary(16)
  contentId Bytes?           @db.Binary(16)
  eventType LibraryEventType
  dateTime  DateTime
  comments  String           @default("")
  userId    Bytes            @db.Binary(16)
  user      users            @relation(fields: [userId], references: [userId])
  source    content          @relation(name: "source", fields: [sourceId], references: [id])
  activity  content?         @relation(name: "activity", fields: [contentId], references: [id])
}

enum LibraryEventType {
  // Activity owners can:
  SUBMIT_REQUEST
  CANCEL_REQUEST
  // Admins can:
  ADD_DRAFT
  DELETE_DRAFT
  PUBLISH
  UNPUBLISH
  // And admins can communicate with owner
  MARK_NEEDS_REVISION
  MODIFY_COMMENTS
}
