generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}

model content {
  id               Int                @id @unique() @default(autoincrement())
  ownerId          Int
  isFolder         Boolean
  parentFolderId   Int?
  name             String
  createdAt        DateTime           @default(now())
  lastEdited       DateTime           @default(now())
  imagePath        String?
  isAssigned       Boolean            @default(false)
  classCode        String?            @db.VarChar(45)
  codeValidUntil   DateTime?
  isPublic         Boolean            @default(false)
  isDeleted        Boolean            @default(false)
  sortIndex        BigInt
  licenseCode      String?            @default("CCDUAL") @db.VarChar(10)
  owner            users              @relation(fields: [ownerId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  parentFolder     content?           @relation("folderStructure", fields: [parentFolderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subFolders       content[]          @relation("folderStructure")
  documents        documents[]
  license          licenses?          @relation(fields: [licenseCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
  assignmentScores assignmentScores[]
  promotedContent  promotedContent[]
  sharedWith       contentShares[]

  @@index([ownerId, parentFolderId, sortIndex])
  @@index([classCode])
  @@index([parentFolderId, isFolder])
}

model documents {
  id                 Int                  @id @unique @default(autoincrement())
  activityId         Int
  source             String               @db.MediumText
  createdAt          DateTime             @default(now())
  lastEdited         DateTime             @default(now())
  name               String
  isDeleted          Boolean              @default(false)
  assignedVersionNum Int?
  doenetmlVersionId  Int
  assignedVersion    documentVersions?    @relation("assignedVersion", fields: [id, assignedVersionNum], references: [docId, versionNum], onDelete: NoAction, onUpdate: NoAction)
  documentVersions   documentVersions[]
  activity           content              @relation(fields: [activityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  doenetmlVersion    doenetmlVersions     @relation(fields: [doenetmlVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contributorHistory contributorHistory[]

  @@unique([id, assignedVersionNum]) // needed for the 1-1 relation "assignedVersion" with documentVersions
}

model documentVersions {
  docId                      Int
  versionNum                 Int
  cid                        String
  source                     String                       @db.MediumText
  createdAt                  DateTime                     @default(now())
  doenetmlVersionId          Int
  document                   documents                    @relation(fields: [docId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  doenetmlVersion            doenetmlVersions             @relation(fields: [doenetmlVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contributorHistory         contributorHistory[]
  documentState              documentState[]
  documentSubmittedResponses documentSubmittedResponses[]
  assignedDocument           documents?                   @relation("assignedVersion")

  @@id([docId, versionNum])
  @@unique([docId, cid])
  @@index([docId])
}

model licenses {
  code               String                @id @db.VarChar(10)
  name               String
  description        String                @db.Text
  imageURL           String?
  smallImageURL      String?
  licenseURL         String?
  composedOf         licenseCompositions[] @relation("composeOf")
  includedIn         licenseCompositions[] @relation("includedIn")
  content            content[]
  sortIndex          Int
  contributorHistory contributorHistory[]
}

model licenseCompositions {
  composedOfCode String   @db.VarChar(10)
  composedOf     licenses @relation("includedIn", fields: [composedOfCode], references: [code])
  includedInCode String   @db.VarChar(10)
  includedIn     licenses @relation("composeOf", fields: [includedInCode], references: [code])

  @@id([composedOfCode, includedInCode])
}

model contributorHistory {
  docId             Int
  prevDocId         Int
  prevDocVersionNum Int
  withLicenseCode   String?          @db.VarChar(10)
  timestampDoc      DateTime         @default(now())
  timestampPrevDoc  DateTime         @default(now())
  document          documents        @relation(fields: [docId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prevDoc           documentVersions @relation(fields: [prevDocId, prevDocVersionNum], references: [docId, versionNum], onDelete: NoAction, onUpdate: NoAction)
  withLicense       licenses?        @relation(fields: [withLicenseCode], references: [code], onDelete: NoAction, onUpdate: NoAction)

  @@id([docId, prevDocId])
  @@index([prevDocId, prevDocVersionNum])
}

model contentShares {
  contentId Int
  userId    Int
  content   content @relation(fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      users   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([contentId, userId])
  @@index([userId])
}

model doenetmlVersions {
  id                 Int                @id @unique @default(autoincrement())
  displayedVersion   String             @unique
  fullVersion        String
  default            Boolean            @default(false)
  deprecated         Boolean            @default(false)
  removed            Boolean            @default(false)
  deprecationMessage String             @default("")
  documents          documents[]
  documentVersions   documentVersions[]
}

model assignmentScores {
  activityId    Int
  userId        Int
  score         Float           @default(0)
  activity      content         @relation(fields: [activityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          users           @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  documentState documentState[]

  @@id([activityId, userId])
  @@index([activityId])
  @@index([userId])
}

model documentState {
  activityId      Int
  docId           Int
  docVersionNum   Int
  userId          Int
  isLatest        Boolean          @default(true)
  hasMaxScore     Boolean          @default(false)
  state           String?          @db.MediumText
  score           Float            @default(0)
  assignmentScore assignmentScores @relation(fields: [activityId, userId], references: [activityId, userId], onDelete: NoAction, onUpdate: NoAction)
  documentVersion documentVersions @relation(fields: [docId, docVersionNum], references: [docId, versionNum], onDelete: NoAction, onUpdate: NoAction)
  user            users            @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([activityId, docId, docVersionNum, userId, isLatest])
  @@unique([activityId, docId, docVersionNum, userId, hasMaxScore])
  @@index([activityId, docId, docVersionNum])
  @@index([userId])
}

model documentSubmittedResponses {
  id                     Int              @id @default(autoincrement())
  activityId             Int
  docId                  Int
  docVersionNum          Int
  userId                 Int
  answerId               String
  response               String           @db.Text
  answerNumber           Int?
  itemNumber             Int
  creditAchieved         Float
  itemCreditAchieved     Float
  documentCreditAchieved Float
  submittedAt            DateTime         @default(now())
  documentVersion        documentVersions @relation(fields: [docId, docVersionNum], references: [docId, versionNum], onDelete: NoAction, onUpdate: NoAction)
  user                   users            @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@index([activityId, docId, docVersionNum, answerId])
  @@index([userId])
}

model users {
  userId                     Int                          @id @default(autoincrement())
  email                      String                       @unique
  firstNames                 String?
  lastNames                  String
  isAdmin                    Boolean                      @default(false)
  isAnonymous                Boolean                      @default(false)
  content                    content[]
  assignmentScores           assignmentScores[]
  documentState              documentState[]
  documentSubmittedResponses documentSubmittedResponses[]
  sharedWithMe               contentShares[]
}

model promotedContentGroups {
  promotedGroupId   Int               @id @default(autoincrement())
  groupName         String            @unique
  currentlyFeatured Boolean           @default(false)
  homepage          Boolean           @default(false)
  sortIndex         BigInt
  promotedContent   promotedContent[]
}

model promotedContent {
  activityId      Int
  promotedGroupId Int
  sortIndex       BigInt
  activity        content               @relation(fields: [activityId], references: [id])
  promotedGroup   promotedContentGroups @relation(fields: [promotedGroupId], references: [promotedGroupId])

  @@id([activityId, promotedGroupId])
}
