generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model activities {
  activityId  Int           @id @unique() @default(autoincrement())
  ownerId     Int
  name        String
  createdAt   DateTime      @default(now())
  lastEdited  DateTime      @default(now())
  imagePath   String?
  isPublic    Boolean       @default(false)
  isDeleted   Boolean       @default(false)
  owner       users         @relation(fields: [ownerId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  assignments assignments[]
  documents   documents[]

  @@index([ownerId])
}

model assignmentDocuments {
  assignmentId    Int
  docVersionId    Int
  docId           Int
  assignment      assignments      @relation(fields: [assignmentId], references: [assignmentId], onDelete: NoAction, onUpdate: NoAction)
  documentVersion documentVersions @relation(fields: [docVersionId, docId], references: [version, docId], onDelete: NoAction, onUpdate: NoAction)
  documentState   documentState[]

  @@id([assignmentId, docVersionId, docId])
  @@index([assignmentId])
  @@index([docVersionId, docId])
}

model assignments {
  assignmentId        Int                   @id @unique @default(autoincrement())
  classCode           String?               @db.VarChar(45)
  codeValidUntil      DateTime?
  activityId          Int
  ownerId             Int
  name                String
  imagePath           String?
  createdAt           DateTime              @default(now())
  isDeleted           Boolean               @default(false)
  assignmentDocuments assignmentDocuments[]
  activity            activities            @relation(fields: [activityId], references: [activityId], onDelete: NoAction, onUpdate: NoAction)
  owner               users                 @relation(fields: [ownerId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  assignmentScores    assignmentScores[]

  @@index([activityId])
  @@index([ownerId])
  @@index([classCode])
}

model documentVersions {
  version             Int
  docId               Int
  cid                 String
  name                String
  activityName        String
  content             String
  createdAt           DateTime              @default(now())
  doenetmlVersionId   Int
  assignmentDocuments assignmentDocuments[]
  document            documents             @relation(fields: [docId], references: [docId], onDelete: NoAction, onUpdate: NoAction)
  doenetmlVersion     doenetmlVersions      @relation(fields: [doenetmlVersionId], references: [versionId], onDelete: NoAction, onUpdate: NoAction)
  contributorHistory  contributorHistory[]

  @@id([version, docId])
  @@unique([docId, cid])
  @@index([docId])
}

model documents {
  docId              Int                  @id @unique @default(autoincrement())
  activityId         Int
  content            String
  createdAt          DateTime             @default(now())
  lastEdited         DateTime             @default(now())
  name               String
  isDeleted          Boolean              @default(false)
  doenetmlVersionId  Int
  documentVersions   documentVersions[]
  activity           activities           @relation(fields: [activityId], references: [activityId], onDelete: NoAction, onUpdate: NoAction)
  doenetmlVersion    doenetmlVersions     @relation(fields: [doenetmlVersionId], references: [versionId], onDelete: NoAction, onUpdate: NoAction)
  contributorHistory contributorHistory[]
}

model contributorHistory {
  docId          Int
  prevDocId      Int
  prevDocVersion Int
  timestamp      DateTime         @default(now())
  document       documents        @relation(fields: [docId], references: [docId], onDelete: NoAction, onUpdate: NoAction)
  prevDoc        documentVersions @relation(fields: [prevDocId, prevDocVersion], references: [docId, version], onDelete: NoAction, onUpdate: NoAction)

  @@id([docId, prevDocId])
  @@index([prevDocId, prevDocVersion])
}

model doenetmlVersions {
  versionId          Int                @id @unique @default(autoincrement())
  displayedVersion   String             @unique
  fullVersion        String
  default            Boolean            @default(false)
  deprecated         Boolean            @default(false)
  removed            Boolean            @default(false)
  deprecationMessage String             @default("")
  documents          documents[]
  documentVersions   documentVersions[]
}

model assignmentScores {
  assignmentId  Int
  userId        Int
  score         Float           @default(0)
  assignment    assignments     @relation(fields: [assignmentId], references: [assignmentId], onDelete: NoAction, onUpdate: NoAction)
  user          users           @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  documentState documentState[]

  @@id([assignmentId, userId])
  @@index([assignmentId])
  @@index([userId])
}

model documentState {
  assignmentId       Int
  docVersionId       Int
  docId              Int
  userId             Int
  state              String?
  score              Float               @default(0)
  assignmentScore    assignmentScores    @relation(fields: [assignmentId, userId], references: [assignmentId, userId], onDelete: NoAction, onUpdate: NoAction)
  assignmentDocument assignmentDocuments @relation(fields: [assignmentId, docVersionId, docId], references: [assignmentId, docVersionId, docId], onDelete: NoAction, onUpdate: NoAction)
  user               users               @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@id([assignmentId, docVersionId, docId, userId])
  @@index([assignmentId, docVersionId, docId])
  @@index([userId])
}

model users {
  userId           Int                @id @default(autoincrement())
  email            String             @unique @db.VarChar(45)
  name             String
  isAdmin          Boolean            @default(false)
  anonymous        Boolean            @default(false)
  activities       activities[]
  assignments      assignments[]
  assignmentScores assignmentScores[]
  documentState    documentState[]
}
