<ref createButton="true" uri="doenet:doenetId=DG5JOeFNTc5rpWuf2uA-q">Back to Component Index</ref>



<document><title><tag>feedback</tag> component</title>

<section><title>Associated Attributes</title>
<ul>
  <li><attr>condition</attr>  <em>(boolean)</em></li>
  <li><attr>updateWithTName</attr>  <em>(string)</em></li>
</ul>

</section>


<section><title>Description</title>
<!--use <ref> on all component names (other than the one indexed from this file) in this section only-->
  <p>The <tag>feedback</tag><idx><tag>feedback</tag></idx> component defines a boxed section of content that can be triggered by predefined user interactions.  See examples below.</p>
</section> 


<!--******************************************************-->
  
<section><title>Usage Examples</title>

<subsection><title>Example 1: <tag>feedback</tag> based on <tag>choice</tag> selected</title>
<p>In the sample code below, the <tag>feedback</tag> provided to the user is tied to the <ref><tag>choice</tag></ref> selected within a multiple-choice block that has been defined with a <ref><tag>choiceInput</tag></ref> component. In this example, the choices are not referenced by a user-defined name (see Example 5), but by the default DoenetML name for each choice, which is <c>_choice#</c>.  These references occur within the <attr>condition</attr> attribute of the <tag>feedback</tag> component.</p>

<example boxed="true"><title>Sample DoenetML code (Example 1)</title>
<pre>
&lt;p&gt;Select animal: 
  &lt;answer name="ans"&gt;
    &lt;choiceinput&gt;
      &lt;choice credit="0.8"&gt;cat&lt;/choice&gt;
      &lt;choice credit="1"&gt;dog&lt;/choice&gt;
      &lt;choice credit="0.5"&gt;cow&lt;/choice&gt;
      &lt;choice credit="0.2"&gt;mouse&lt;/choice&gt;
      &lt;choice&gt;banana&lt;/choice&gt;
    &lt;/choiceinput&gt;
  &lt;/answer&gt;
&lt;/p&gt;

&lt;feedback condition="&dollar;_choice1"&gt;Meow&lt;/feedback&gt;

&lt;feedback condition="&dollar;_choice2"&gt;Ruff&lt;/feedback&gt;
  
&lt;feedback condition="&dollar;_choice3"&gt;Moo&lt;/feedback&gt;
  
&lt;feedback condition="&dollar;_choice4"&gt;Squeak&lt;/feedback&gt;
  
&lt;feedback condition="&dollar;_choice5"&gt;Huh?&lt;/feedback&gt;
</pre>
 
        </example>  
      </subsection>

<!--*******************************************************-->

<example newNameSpace><title>What Doenet Renders (Example 1)</title>
<p>Select animal: 
  <answer name="ans">
    <choiceinput>
    <choice credit="0.8">cat</choice>
    <choice credit="1">dog</choice>
    <choice credit="0.5">cow</choice>
    <choice credit="0.2">mouse</choice>
    <choice>banana</choice>
    </choiceinput>
  </answer>
</p>

<feedback condition="$_choice1">Meow</feedback>

<feedback condition="$_choice2">Ruff</feedback>
  
<feedback condition="$_choice3">Moo</feedback>
  
<feedback condition="$_choice4">Squeak</feedback>
  
<feedback condition="$_choice5">Huh?</feedback>
</example>


<!--*******************************************************-->
<!--New example 2-->


<subsection><title>Example 2: <tag>feedback</tag> defined in <tag>choice</tag> with <attr>feedbackText</attr> attribute</title>
<p>In the sample code below, the feedback is defined within each <tag>choice</tag> with the <attr>feedbackText</attr> attribute.  Below the <tag>answer</tag> block, the feedback text is rendered to the viewer with the <tag>copy</tag> component. In the <tag>copy</tag> component, the attribute <attr>tname</attr> is set equal to the target name, in this case the <tag>answer</tag> named <c>ans</c>, and the property to display to the viewer is established with the <attr>prop</attr> attribute set to <c>"feedbacks"</c>.</p>

<example boxed="true"><title>Sample DoenetML code (Example 2)</title>
<pre>
&lt;p&gt;Select animal: &lt;answer name="ans"&gt;
    &lt;choiceinput&gt;
      &lt;choice credit="1" feedbackText="Meow"&gt;cat&lt;/choice&gt;
      &lt;choice credit="0.8" feedbackText="Ruff"&gt;dog&lt;/choice&gt;
      &lt;choice credit="0.2" feedbackText="Moo"&gt;cow&lt;/choice&gt;
      &lt;choice credit="0.5" feedbackText="Squeak"&gt;mouse&lt;/choice&gt;
      &lt;choice feedbackText="Huh?"&gt;banana&lt;/choice&gt;
    &lt;/choiceinput&gt;
  &lt;/answer&gt;
&lt;/p&gt;

&lt;copy prop="feedbacks" tname="ans" /&gt;
</pre>
 
        </example>  
      </subsection>

<!--*******************************************************-->


<example newNameSpace><title>What Doenet Renders (Example 2)</title>
<p>Select animal: <answer name="ans">
    <choiceinput>
      <choice credit="1" feedbackText="Meow">cat</choice>
      <choice credit="0.8" feedbackText="Ruff">dog</choice>
      <choice credit="0.2" feedbackText="Moo">cow</choice>
      <choice credit="0.5" feedbackText="Squeak">mouse</choice>
      <choice feedbackText="Huh?">banana</choice>
    </choiceinput>
  </answer>
</p>

<copy prop="feedbacks" tname="ans" />
      </example>
 



<!--*******************************************************-->

<subsection><title>Example 3: <tag>feedback</tag> for any arbitrary incorrect answer</title>
<p>In the sample code below, the <attr>condition</attr> for triggering the <tag>feedback</tag> consists of a boolean that has two parts:</p>
<p>Part 1:  <alert>&dollar;(ans{prop='creditAchieved'}) != 1</alert></p>
<p>This states that the <c>creditAchieved</c> property of the <tag>answer</tag> named <c>"ans"</c> is not equal to 1, i.e. that full credit has not been achieved.</p>
<p>Part 2:  <alert>&dollar;(ans{prop='responseHasBeenSubmitted'})</alert></p>
  <p>This states that the <c>responseHasBeenSubmitted</c> property of the <tag>answer</tag> named <c>"ans"</c> is true, i.e. that the user has responded at least once.</p>
<p>If the user types in "hello there" correctly, no feedback is returned but credit is awarded.</p>

<example boxed="true"><title>Sample DoenetML code (Example 3)</title>
<pre>
&lt;p&gt;Enter &lt;em&gt;hello there&lt;/em&gt;: 
  &lt;answer name="ans" type="text"&gt;hello there&lt;/answer&gt;
&lt;/p&gt;
  
  &lt;feedback condition="&dollar;(ans{prop='creditAchieved'}) != 1 and &dollar;(ans{prop='responseHasBeenSubmitted'}) "&gt;
    Your response &lt;em&gt;&lt;copy prop="submittedresponse" tname="ans" /&gt;&lt;/em&gt; is incorrect.&lt;/p&gt;
  &lt;/feedback&gt;
</pre>
 
        </example>  
      </subsection>
  
<!--*******************************************************-->

<example newNameSpace><title>What Doenet Renders (Example 3)</title>
<p>Enter <em>hello there</em>: <answer name="ans" type="text">hello there</answer></p>
  <feedback condition="$(ans{prop='creditAchieved'}) != 1 and $(ans{prop='responseHasBeenSubmitted'})">
    <p>Your response <em><copy prop="submittedresponse" tname="ans" /></em> is incorrect.</p>
  </feedback>
      </example>


<!--*******************************************************-->  
  
<subsection><title>Example 4:  <tag>feedback</tag> based on <c>creditAchieved</c> in <tag>answer</tag></title>
<p>In the sample code below, three ways to trigger specific <tag>feedback</tag> are illustrated.  In the first case, the <tag>feedback</tag> <attr>condition</attr> attribute is satisfied when the <c>creditAchieved</c> property of the <ref><tag>answer</tag></ref> named <c>ans</c> is equal to 1.  This triggers the feedback "You got full credit!" for display.  In the second case, the <attr>condition</attr> attribute consists of a boolean which redefines the correct answer explicitly.  If this boolean is satisfied, the feedback "You typed the right answer!" is triggered for display.  Finally, in the third case, the <attr>condition</attr> attribute again contains a boolean, in this case an "and" statement that ensures the feedback is not triggered until the user has both typed in an incorrect answer and has submitted their response.                                                                                                                                                                                                                  </p>

<example boxed="true"><title>Sample DoenetML code (Example 4)</title>
<pre>
&lt;p&gt;Enter &lt;m&gt;x+y&lt;/m&gt;: &lt;answer name="ans"&gt;x+y&lt;/answer&gt;&lt;/p&gt;

  &lt;feedback condition="&dollar;(ans{prop='creditAchieved'}) = 1"&gt;
    &lt;p&gt;You got full credit!&lt;/p&gt;
  &lt;/feedback&gt;
  
  &lt;feedback condition="&dollar;ans = x+y"&gt;
    &lt;p&gt;You typed the right answer!&lt;/p&gt;
  &lt;/feedback&gt;
  
  &lt;feedback condition="&dollar;ans != x+y & $dollar;(ans{prop='responseHasBeenSubmitted'})"&gt;
    &lt;p&gt;That's a bad answer.&lt;/p&gt;
  &lt;/feedback&gt;
</pre>
 
        </example>
      </subsection>

<!--*******************************************************-->
 
<example><title>What Doenet Renders (Example 4)</title>
<p>Enter <m>x+y</m>: <answer name="ans">x+y</answer></p>

  <feedback condition="$(ans{prop='creditAchieved'}) = 1">
    <p>You got full credit!</p>
  </feedback>
  <feedback condition="$ans = x+y">
    <p>You typed the right answer!</p>
  </feedback>
  <feedback condition="$ans != x+y & $(ans{prop='responseHasBeenSubmitted'})" >
    <p>That's a bad answer.</p>
  </feedback>
      </example>


<!--******************************************************-->

<subsection><title>Example 5: <tag>feedback</tag> tailored to named <tag>award</tag></title>
<p>In the sample code below, individualized feedback is provided to specific combinations of responses by assigning each distinct <ref><tag>award</tag></ref> a name, and then referencing this name using &dollar;name within the <tag>feedback</tag> <attr>condition</attr> attribute.</p>

<example boxed="true"><title>Sample DoenetML code (Example 5)</title>
<pre>
&lt;p&gt;Entering your answer as a sequence of numbers separated by commas, list all factors of 12:
    &lt;answer name="ans"&gt;
      &lt;award unorderedCompare name="fullCredit"&gt;
        &lt;mathList&gt;1,2,3,4,6,12&lt;/mathList&gt;
      &lt;/award&gt;
      
      &lt;award unorderedCompare credit="2/3" name="missing1_12"&gt;
        &lt;mathList&gt;2,3,4,6&lt;/mathList&gt;
      &lt;/award&gt;
      
      &lt;award unorderedCompare credit="2/3" name="missing3_4"&gt;
        &lt;mathList&gt;1,2,6,12&lt;/mathList&gt;
      &lt;/award&gt;
      
      &lt;award unorderedCompare credit="2/3" name="missing2_6"&gt;
        &lt;mathList&gt;1,3,4,12&lt;/mathList&gt;
      &lt;/award&gt;
      
      &lt;award unorderedCompare credit="1/3" name="only2_6"&gt;
        &lt;mathList&gt;2,6&lt;/mathList&gt;
      &lt;/award&gt;
      
      &lt;award unorderedCompare credit="1/3" name="only3_4"&gt;
        &lt;mathList&gt;3,4&lt;/mathList&gt;
      &lt;/award&gt;
    &lt;/answer&gt;
&lt;/p&gt;
  
&lt;feedback condition="&dollar;fullCredit"&gt;
  &lt;p&gt;Nice work! That's all of the factors!&lt;/p&gt;
&lt;/feedback&gt;
  
&lt;feedback condition="&dollar;missing1_12"&gt;
  &lt;p&gt;Can 12 also be divided by 1?&lt;/p&gt;
&lt;/feedback&gt;
  
&lt;feedback condition="&dollar;missing3_4"&gt;
  &lt;p&gt;Can 12 also be divided by 3?&lt;/p&gt;
&lt;/feedback&gt;
  
&lt;feedback condition="&dollar;missing2_6"&gt;
  &lt;p&gt;Can 12 also be divided by 2?&lt;/p&gt;
&lt;/feedback&gt;
  
&lt;feedback condition="&dollar;only2_6"&gt;
  &lt;p&gt;Can 12 also be divided by 1 or 3?&lt;/p&gt;
&lt;/feedback&gt;
  
&lt;feedback condition="&dollar;only3_4"&gt;
  &lt;p&gt;Can 12 also be divided by 1 or 2?&lt;/p&gt;
&lt;/feedback&gt;

</pre>
 
  </example>
</subsection>

<!--*******************************************************-->
 
<example newNameSpace><title>What Doenet Renders (Example 5)</title>
  <p>Entering your answer as a sequence of numbers separated by commas, list all factors of 12:
    <answer name="ans">
      <award unorderedCompare name="fullCredit">
        <mathList>1,2,3,4,6,12</mathList>
      </award>
      
      <award unorderedCompare credit="2/3" name="missing1_12">
        <mathList>2,3,4,6</mathList>
      </award>
      
      <award unorderedCompare credit="2/3" name="missing3_4">
        <mathList>1,2,6,12</mathList>
      </award>
      
      <award unorderedCompare credit="2/3" name="missing2_6">
        <mathList>1,3,4,12</mathList>
      </award>
      
      <award unorderedCompare credit="1/3" name="only2_6">
        <mathList>2,6</mathList>
      </award>
      
      <award unorderedCompare credit="1/3" name="only3_4">
        <mathList>3,4</mathList>
      </award>
    </answer>
</p>
  
<feedback condition="$fullCredit">
  <p>Nice work! That's all of the factors!</p>
</feedback>
  
<feedback condition="$missing1_12">
  <p>Can 12 also be divided by 1?</p>
</feedback>
  
<feedback condition="$missing3_4">
  <p>Can 12 also be divided by 3?</p>
</feedback>
  
<feedback condition="$missing2_6">
  <p>Can 12 also be divided by 2?</p>
</feedback>
  
<feedback condition="$only2_6">
  <p>Can 12 also be divided by 1 or 3?</p>
</feedback>
  
<feedback condition="$only3_4">
  <p>Can 12 also be divided by 1 or 2?</p>
</feedback>
      </example>
  
 

<!--******************************************************-->
 
<subsection><title>Example 6: feedback displayed with the <attr>feedbackText</attr> attribute within an <tag>award</tag> & with <tag>conditionalContent</tag></title>
<p>In the sample code below, the feedback for the first two cases is defined within the <ref><tag>award</tag></ref> component with the <attr>feedbackText</attr> attribute.  This text is later rendered in the viewer with the <ref><tag>copy</tag></ref> component using the <c>"feedbacks"</c> property of the <ref><tag>answer</tag></ref> with name <c>trigAnswer</c>.  The case for an incorrect response is defined within the third and final <tag>award</tag> component and is based on a boolean condition that uses a <ref><tag>when</tag></ref> component.</p>
<p>The <tag>award</tag> named <c>incorrect</c> is then used to trigger <ref><tag>conditionalContent</tag></ref> that includes an <ref><tag>image</tag></ref> within the <tag>feedback</tag>.</p>

<example boxed="true"><title>Sample DoenetML code (Example 6)</title>
<pre>
&lt;p&gt;Enter &lt;m&gt;\sin(\frac{\pi}{2})&lt;/m&gt;: 
  &lt;answer name="trigAnswer"&gt;
    
    &lt;award feedbacktext="Good job!"&gt;
      &lt;math&gt;sin(pi/2)&lt;/math&gt;
    &lt;/award&gt;
  
    &lt;award credit="0.7" feedbacktext="Could you be thinking of the... 
        ...wrong trignometric function?"&gt;
        &lt;math&gt;cos(pi/2)&lt;/math&gt;
    &lt;/award&gt;
    
    &lt;award credit="0" name="incorrect"&gt;
        &lt;when&gt;
          &dollar;trigAnswer != sin(pi/2) & &dollar;trigAnswer != cos(pi/2)
        &lt;/when&gt;
    &lt;/award&gt;
  
  &lt;/answer&gt;
&lt;/p&gt;

 
&lt;conditionalContent&gt;
  &lt;case condition="&dollar;incorrect"&gt;
    &lt;feedback&gt;Let's review the unit circle:
    &lt;image width="400" source="https://upload.wikimedia.org/wikipedia/...
      ...Unit_circle_angles_color.svg.png"/&gt;
    &lt;/feedback&gt;
  &lt;/case&gt;
&lt;/conditionalContent&gt;
  
&lt;copy prop="feedbacks" tname="trigAnswer"/&gt;
</pre>
 
        </example>
      </subsection>
 
<!--*******************************************************-->

<example newNameSpace><title>What Doenet Renders (Example 6)</title>

<p>Enter <m>\sin(\frac{\pi}{2})</m>: 
  <answer name="trigAnswer">
    
    <award feedbackText="Good job!">
      <math>sin(pi/2)</math>
    </award>

    <award feedbackText="Could you be thinking of a different trigonometric function?" credit="0.7">
      <math>cos(pi/2)</math>
    </award>
    
    <award credit="0" name="incorrect">
        <when>
          $trigAnswer != sin(pi/2) & $trigAnswer != cos(pi/2)
        </when>
    </award>
  
  </answer>
</p>

<conditionalContent>
  <case condition="$incorrect">
    <feedback>Let's review the unit circle:
    <image width="400" source="https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Unit_circle_angles_color.svg/1920px-Unit_circle_angles_color.svg.png"/>
    </feedback>
  </case>
</conditionalContent>
  
<copy prop="feedbacks" tname="trigAnswer"/>

</example>
 
 
</section>
</document>





