<document>
<title>Create Randomly-Generated Graphs with DoenetML:  Finding Extrema of a Function</title> 
  <aside boxed="true"><title>How to Use this Content Example</title>
    <ul>In this page you can,
      <li><p>Explore the sample content below and how it functions</p></li>
      <li><p>Review the design overview and code snippets below the applet which describe how the DoenetML code works.</p></li>
      <li><p>Change the source code in the editor panel on the right then click the blue "Update" button to see your changes immediately displayed in the viewer on the left.</p></li>
      <li><p>User tip: you can click the two little bars in the middle to open, close, and resize the editor panel.</p></li>
    </ul>
  </aside>

<setup>
    <selectFromSequence assignNames="x1 x2" from="-8" to="8" step="2" numberToSelect="2" />
    <selectFromSequence assignNames="y1 y2" from="-7" to="9" numberToSelect="2" withReplacement />
  
    <!-- Note: function will have a minimum between the two maxima whose "depth"
    is determined by the yscale attribute. -->
    <function name="f" maxima="($x1, $y1) ($x2, $y2)" yscale="2" />
</setup>
 
<subsection boxed="true"><title>Graphing Activity:  Find the Extrema of a Function</title>
  <p><alert>Instructions: The graph of the function <m>f</m> is graphed below. Locate the extrema of the function.</alert></p>  

  <sideBySide>
<ol>
  <li><p>Move the <copy prop="styleDescriptionWithNoun" tname="A1" />s to the locations of the maxima of <m>f</m></p></li>
  <li><p>Move the <copy prop="styleDescriptionWithNoun" tname="B" /> to the location of the minimum of <m>f</m>. Notice how the points are attracted to the graph.</p></li>
  <li><p>Check your solution, feedback is conditional upon the number and character of each part of your response.</p></li>
  <li><p>Click on the Variant Menu in the navigation panel on the left-hand side. Change the Variant Name in the pulldown menu to a different letter for a new randomly-generated function to tinker with!</p></li>
  </ol>

    <graph grid>
      $f

      <point name="A1" x="1.5" y="2.5" styleNumber="2" >
        <constraints>
          <attractTo>
            <copy prop="extrema" tname="f" />
          </attractTo>
        </constraints>
      </point>

      <point name="A2" x="-1.5" y="2.5" styleNumber="2" >
        <constraints>
          <attractTo>
            <copy prop="extrema" tname="f" />
          </attractTo>
        </constraints>
      </point>

      <point name="B" x="-0.5" y="2.5" styleNumber="3" >
        <constraints>
          <attractTo>
            <copy prop="extrema" tname="f" />
          </attractTo>
        </constraints>
      </point>

    </graph>
  </sideBySide>

    <!-- 
    answer with two awards, where both can be credited simultaneously
    in order to achieve full credit.
    The first award will be credited when points A1 and A2 are at the maxima in either order.
    The second award will be credited when point B is at the minimum.
    -->
      
    <answer nAwardsCredited="2" name="ans">
      <award credit="2/3" name="gotMax" matchPartial>
        <when><mathlist unordered>$A1 $A2</mathlist>
          =
          <mathlist><copy prop="maxima" tname="f" /></mathlist>
        </when>
      </award>
      <award credit="1/3" name="gotMin">
        <when>$B = <copy prop="minimum1" tname="f" /></when>
      </award>

      <!--
      <considerAsResponses> is strictly for data collection.
      Since the <answer> can't determine which quantities in the formulas should
      be regarded as the user's response, we indicate the 3 points are the responses.
      -->
      <considerAsResponses>
        $A1$A2$B
      </considerAsResponses>
    </answer>


    <!--
    The <feedback> tags include some advanced features to get them to appear
    at under just the right conditions.
    The expressions $gotMin and $gotMax refer to the above two awards
    and the expression $ans refers to the answer itself
    -->
    
    <feedback condition="$(ans{prop='responseHasBeenSubmitted'}) and not $gotMin">
      <p>The minimum is incorrect.</p>
    </feedback>

    <feedback condition="$(ans{prop='responseHasBeenSubmitted'}) and not $gotMax">
      <p>The maxima are incorrect.</p>
    </feedback>

    <feedback condition="$(gotMax{prop='fractionSatisfied'}) = 0.5" updateWithTname="ans">
      <p>One of the maxima is incorrect.</p>
    </feedback>
</subsection>


<section><title>DoenetML Graphing Activity Design Process - a general overview</title>
<ol>
  <li><p>In the <tag>setup</tag> of the activity, define a range of values from which to select parameters for the randomly generated functions using the <tag>selectFromSequence</tag> component:</p>
<p><pre>
&lt;setup&gt;
    &lt;selectFromSequence assignNames="x1 x2" from="-8" to="8" step="2" numberToSelect="2" /&gt;
    &lt;selectFromSequence assignNames="y1 y2" from="-8" to="8" numberToSelect="2" withReplacement /&gt;
  ...    
&lt;/setup&gt;</pre></p></li>

<li><p>Using the <attr>maxima</attr> attribute in the <tag>function</tag> component, the random <c>x1</c>, <c>x2</c> and <c>y1</c>, <c>y2</c> are passed as inputs to generate the curve.  By default, Doenet will generate 100 different variants of the document, where each variant is a different sample of all the random parameters.</p> 
<p>To see other variations created by this process, select another "Variant Name" from the Variant pulldown menu on the left-side navigation panel:</p>
<p><pre>
  ...
    &lt;function name="f" maxima="(&dollar;x1, &dollar;y1) (&dollar;x2, &dollar;y2)" yscale="2" /&gt;
&lt;/setup&gt;
</pre></p></li>

<li><p>Create the graph of the randomly-generated function, using the <tag>graph</tag> component and calling the function by name:</p>
<p><pre>
  &lt;graph grid&gt;
      &dollar;f
  ...
  </pre></p></li>

<li><p>Within the same <tag>graph</tag> block, control the behavior of each draggable <tag>point</tag> with the <tag>attractTo</tag> and <tag>constraints</tag> components.  In this example, DoenetML calculates the numerical solution for the correct locations for the extrema of <c>f</c>.  These values can then be <q>called</q> with the <tag>copy</tag> component: </p>
<p><pre>
  &lt;point name="A1" x="1.5" y="2.5" styleNumber="2" &gt;
    &lt;constraints&gt;
      &lt;attractTo&gt;
          &lt;copy prop="extrema" tname="f" /&gt;
        &lt;/attractTo&gt;
    &lt;/constraints&gt;
  &lt;/point&gt;
</pre></p></li>

<li><p>Evaluate user-responses based on the number of correctly placed points using the <tag>when</tag> component to describe the conditions for awarding credit. In the code sample below, the predefined points <c>A1</c> and <c>A2</c> are compared to the <attr>maxima</attr> of the function:</p>
<p><pre>

  &lt;answer nAwardsCredited="2" name="ans"&gt;
      &lt;award credit="2/3" name="gotMax" matchPartial&gt;
        &lt;when&gt;
          &lt;mathlist unordered&gt;&dollar;A1 &dollar;A2&lt;/mathlist&gt;
          =
          &lt;mathlist&gt;&lt;copy prop="maxima" tname="f" /&gt;&lt;/mathlist&gt;
        &lt;/when&gt;
      &lt;/award&gt;
  ...
  &lt;/answer&gt;
</pre></p></li>
<li><p>Use the <attr>condition</attr> attribute in the <tag>feedback</tag> component to fine-tune constructive hints that are revealed based on the user's submitted responses.  In the code sample below, the user has not correctly located the minimum point.  Try it and see how the feedback appears...</p>
<p><pre>
&lt;feedback condition="&dollar;(ans{prop='responseHasBeenSubmitted'}) 
  and not &dollar;gotMin" &gt;
      &lt;p&gt;The minimum is incorrect.&lt;/p&gt;
&lt;/feedback&gt;
</pre></p></li>

<li><p>See if you can locate these steps in the editor on the right. You can edit the contents of the source code and click the blue <alert>update</alert> button in the corner of the viewer to see your changes reflected immediately!</p></li>
                 
</ol>


</section>

  </document>