<title>Invalid target behavior in math and boolean</title>

<p name="p">The general behavior of invalid targets is that they don't return anything. For example, an invalid reference looks like "$invalid" or "<copy prop="invalid" tname="p" />".</p>

<p>However, inside a math or a boolean, this behavior gave confusing results.  So, now copies always return something inside a math or boolean.  This mean, in a math, a missing factor isn't treated like multiplication by 1, but instead one gets a long underscore: <math>3 $invalid x</math>.  In a boolean, a logic tree containing a reference to a missing object will still be well formed and can return true: <boolean>$invalid != 1</boolean>.  (If the invalid target didn't return anything, we'd have a boolean <boolean> != 1</boolean>, which returns false as that is its default behavior.</p>

<p>With this convention, feedback such as the following works as expected.</p>

<p>Enter x: <answer name="ans">x</answer></p>

<hint hide="$(ans{prop='nSubmissions'}) < 2 or $ans =x">The correct answer is <m>x</m>.</hint>

