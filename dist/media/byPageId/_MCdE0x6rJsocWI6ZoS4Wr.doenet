<ref createButton="true" uri="doenet:doenetId=DG5JOeFNTc5rpWuf2uA-q">Back to Component Index</ref>

<document><title><tage>triangle</tage> component</title>

<section><title>Associated Attributes</title>
<ul>
  <li>none exclusive to this component</li>
  <ul><title><alert>Inherited from parent component/  <tag><ref>polyline</ref></tag>:</alert></title>
  <li><attr>draggable</attr> <em>(boolean)</em></li>
  <li><attr>vertices</attr> <em>(_pointListComponent)</em></li>
  </ul>
  <aside><title><alert>Inherited from parent component/  <c>GraphicalComponent</c>:</alert></title>
  <li><attr>label</attr> <em>(text)</em></li>
  <li><attr>showLabel</attr> <em>(boolean)</em></li>
  <li><attr>layer</attr> <em>(number)</em></li>
  </aside>
</ul>

</section>


<section><title>Description</title>
  <p>The <tage>triangle</tage><idx><tage>triangle</tage></idx> component renders a triangle when nested inside a <ref><tag>graph</tag></ref> component. The <tage>triangle</tage> tag is self-closing and the <attr>vertices</attr> attribute is required. Triangles are by default draggable for interactive activities.  See examples below for details on specific attribute usage. </p>
</section> 
  
<section><title>Usage Examples</title>

<subsection newNameSpace><title>Example 1: <triangle/> inside a <tag>graph</tag></title> 
<p>In the sample code below, the <tage>triangle</tage> component is defined directly within the graph</p>
<example boxed="true"><title>Sample DoenetML code (Example 1)</title>
<pre> 
&lt;graph width="300px" height="300px"&gt;
    &lt;triangle vertices="(0,0) (2,2) (-1,5)"/&gt;
&lt;/graph&gt;
</pre>
</example>
</subsection>
 
<!--*******************************************************-->

<example><title>What Doenet Renders (Example 1)</title>
<graph width="300px" height="300px">
    <triangle vertices="(0,0) (2,2) (-1,5)"/>
</graph>
  
</example>


<!--*******************************************************-->

<subsection newNameSpace><title>Example 2: <triangle/> with user-placed vertices</title> 
<p>In the sample code below, the three points used in the <attr>vertices</attr> attribute of the <tage>triangle</tage> component are initialized in a <ref uri="doenet:doenetId=gHn9-Jhc4JFQpUKxVPCE2"><tag>setup</tag></ref> block. The user is prompted to drag the <ref uri="doenet:doenetId=gN8NlDY3WLRc7jgAvXKXm"><tag>point</tag></ref>s to a specified location, at which point the <tage>triangle</tage> is revealed.  Within the <ref uri="doenet:doenetID=W7UM-eMckhRS3ktGSUR6B"><tag>graph</tag></ref>, the <tage>triangle</tage> is hidden with the <attr>hide</attr> attribute based on the <ref uri="doenet:doenetId=NyyVAjdloVrablDyGwaJu"><tag>boolean</tag></ref> named <c>"notAllPlaced"</c>.  Finally, the <attr>draggable</attr> attribute is set to false to force the specific solution desired.(See also, <ref><tag>constraints</tag></ref>, <ref><tag>attractToGrid</tag></ref>.)

</p>
<example boxed="true"><title>Sample DoenetML code (Example 2)</title>
<pre> 
&lt;setup&gt;
  &lt;point name="A" label="A"&gt;(-1,8)&lt;constraints&gt;&lt;attractToGrid/&gt;&lt;/constraints&gt;&lt;/point&gt;
  &lt;point name="B" label="B"&gt;(-1,6)&lt;constraints&gt;&lt;attractToGrid/&gt;&lt;/constraints&gt;&lt;/point&gt;
  &lt;point name="C" label="C"&gt;(-1,4)&lt;constraints&gt;&lt;attractToGrid/&gt;&lt;/constraints&gt;&lt;/point&gt;
  &lt;point name="finalA"&gt;(0,0)&lt;/point&gt;
  &lt;point name="finalB"&gt;(6,2)&lt;/point&gt;
  &lt;point name="finalC"&gt;(1,7)&lt;/point&gt;
  &lt;boolean name="pointA_Placed"&gt;&dollar;A = &dollar;finalA&lt;/boolean&gt;
  &lt;boolean name="pointB_Placed"&gt;&dollar;B = &dollar;finalB&lt;/boolean&gt;
  &lt;boolean name="pointC_Placed"&gt;&dollar;C = &dollar;finalC&lt;/boolean&gt;
  &lt;boolean name="notAllPlaced">
    !&dollar;pointA_Placed or !&dollar;pointB_Placed or !&dollar;pointC_Placed
  &lt;/boolean&gt;
&lt;/setup&gt;


&lt;p&gt;&lt;alert&gt;Click and Drag points &lt;m&gt;A, B&lt;/m&gt; and &lt;m&gt;C&lt;/m&gt; 
  to the locations shown below to make a triangle:&lt;/alert&gt;&lt;/p&gt;
&lt;p&gt;Move &lt;m&gt;A&lt;/m&gt; to &dollar;finalA.  Current location: &lt;m&gt;A = &dollar;A&lt;/m&gt;&lt;/p&gt;
&lt;p&gt;Move &lt;m&gt;B&lt;/m&gt; to &dollar;finalB.  Current location: &lt;m&gt;B = &dollar;B&lt;/m&gt;&lt;/p&gt;
&lt;p&gt;Move &lt;m&gt;C&lt;/m&gt; to &dollar;finalC.  Current location: &lt;m&gt;C = &dollar;C&lt;/m&gt;&lt;/p&gt;
&lt;p hide="&dollar;notAllPlaced"&gt;&lt;alert&gt;Nice Work!&lt;/alert&gt;&lt;/p&gt;

&lt;graph grid="medium" width="600" height="600" xmin="-2" ymin="-2"&gt;
  &dollar;A &dollar;B &dollar;C
  &lt;triangle hide="&dollar;notAllPlaced" vertices="&dollar;A &dollar;B &dollar;C" draggable="false" label="bingo"/&gt;
&lt;/graph&gt;

</pre>
</example>
</subsection>

<!--*******************************************************-->
 
<example newNameSpace><title>What Doenet Renders (Example 2)</title>
<setup>
  <point name="A" label="A">(-1,8)<constraints><attractToGrid/></constraints></point>
  <point name="B" label="B">(-1,6)<constraints><attractToGrid/></constraints></point>
  <point name="C" label="C">(-1,4)<constraints><attractToGrid/></constraints></point>
  <point name="finalA">(0,0)</point>
  <point name="finalB">(6,2)</point>
  <point name="finalC">(1,7)</point>
  <boolean name="pointA_Placed">$A = $finalA</boolean>
  <boolean name="pointB_Placed">$B = $finalB</boolean>
  <boolean name="pointC_Placed">$C = $finalC</boolean>
  <boolean name="notAllPlaced">!$pointA_Placed or !$pointB_Placed or !$pointC_Placed</boolean>
</setup>


<p><alert>Click and Drag points <m>A, B</m> and <m>C</m> to the locations shown below to make a triangle:</alert></p>
<p>Move <m>A</m> to $finalA.  Current location: <m>A = $A</m></p>
<p>Move <m>B</m> to $finalB.  Current location: <m>B = $B</m></p>
<p>Move <m>C</m> to $finalC.  Current location: <m>C = $C</m></p>
<p hide="$notAllPlaced"><alert>Nice Work!</alert></p>

<graph grid="medium" width="600" height="600" xmin="-2" ymin="-2">
  $A $B $C
  <triangle hide="$notAllPlaced" vertices="$A $B $C" draggable="false" label="bingo"/>
</graph>
    
</example>

</section>
</document>


 