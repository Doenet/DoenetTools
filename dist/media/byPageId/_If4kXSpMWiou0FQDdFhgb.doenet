<point name = "george">(2,3)</point>
<point name = "albert">(6,7)</point>
<point name = "sarah">(1,0,5)</point>
<copy prop = "value" tname = "albert" />

<!--interesting if point is given in 3 dimensions the projected point is shown...-->
<!--remember how to make a dashed line?-->

<!--if no through point spec'd but slope is spec'd, the line defaults through the origin-->

<graph>
  $albert
  $george
  $sarah
  <line through = '$albert $george' name = "fred" styleNumber = '3'></line>
  <line slope = '2' name = "kevin" styleNumber = '5' through = "(5,2)" />
</graph>
$(george{prop='value'})
$(george{prop = 'draggable'})

<!--creates circular dependency
$(george{prop='styleDescription'})-->

<!--when not inside a graph the <line></line> component gives the equation-->
<line through = '$albert $george'></line>

<!--this always works for the attribute state-->

<p>$(fred{prop='draggable'})</p>
<p><copy prop = "draggable" tname = "fred" /></p>
<p>the styleNumber for fred $(fred{prop = 'styleNumber'})</p>
<p>the slope for kevin $(kevin{prop = 'slope'})</p>

<!--?but sometimes it seems like you can call a statevariable and sometimes not...how do you know when it will work?-->
<p>the nDimensions for fred $(fred{prop = 'nDimensions'})</p>
<p>nPointsPrescribed for fred: $(fred{prop = 'nPointsPrescribed'})</p>
<p>nPoints for fred: $(fredthroughAttr.stateValues{prop = 'nPoints'})</p>
<p>the nDimensions for sarah $(sarah{prop = 'nDimensions'})</p>
<p>$(kevin{prop = 'slope'})</p>
<p>kevin's dForSlope:  $(kevin{prop = 'dForSlope'})</p>




