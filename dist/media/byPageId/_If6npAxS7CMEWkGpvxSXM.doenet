<module>
  <setup>
  </setup>
  <p>
    Before we finish this module for today, let's look at one application of the 
    Chinese remainder theorem (CRT).
    The CRT provides a way to perform computer arithmetic with large integers.
    To store very large integers and do arithmetic with them requires special techniques.
    CRT tells us that given pairwise relatively prime moduli <m>m_1, m_2, \ldots, m_k</m>,
    a positive integer <m>n &lt; M=m_1m_2m_3\cdots m_k</m> is determined by its 
    least positive residues modulo <m>m_j</m> for <m>j=1,2,\ldots, k</m>.
    Suppose that the word size of a computer is only 100,
    but we wish to do arithmetic with integers as large as <m>10^6</m>.
    First we find pairwise relatively prime integers less than 100 with a product
    exceeding 10^6; for instance, we can take <m>m_1=99, m_2 = 98, m_3 = 97, </m>
    and <m>m_4=95</m>. We convert integers less than <m>10^6</m> into 4-tuples
    consisting of their least positive residues modulo <m>m_1, m_2, m_3,</m> and <m>m_4</m>.
  </p>
  <p>
    <aside>
      <title>Conversion note</title>
      To convert integers as large as <m>10^6</m> into their list of least positive
      residues, we need to work with large integers using multiprecision techniques.
      However, this is done only once for each integer in the input and once for the output.
    </aside>
  </p>
  <p>
    Then, for instance, to add integers, we simply add their respective least positive residues
    modulo <m>m_1, m_2, m_3,</m> and <m>m_4</m>, making use of the fact that if 
    <m>x\equiv x_i \mod m_i</m> and <m>y\equiv y_i \mod m_i</m>, then 
    <m>x+y\equiv x_i+y_i \mod m_i</m>. 
    We can then use the CRT to convert the set of four least positive residues 
    for the sum back to a large integer when needed.
  </p>

  <p>
    <row><alert>Example</alert></row>
    We wish to add <m>x=123,684</m> and <m>y=413,456</m> on a computer of word size 100.
    We have
    <me>
      \begin{align*}
        x &amp; \equiv 33 \mod 99 &amp; \qquad y &amp; \equiv 32 \mod 99, \\
        x &amp; \equiv \phantom{0}8 \mod 98 &amp; y &amp; \equiv 92 \mod 98, \\
        x &amp; \equiv \phantom{0}9 \mod 97 &amp; y &amp; \equiv 42 \mod 97, \\
        x &amp; \equiv 89 \mod 95 &amp; y &amp; \equiv 16 \mod 95.
      \end{align*}
    </me>
    so that
    <me>
      \begin{align*}
        x + y &amp; \equiv 65 \mod 99,\\
        x + y &amp; \equiv \phantom{0}2 \mod 98, \\
        x + y &amp; \equiv 51 \mod 97, \\
        x + y &amp; \equiv 10 \mod 95.
      \end{align*}
    </me>
    This is fine to continue doing operations with. In order to output the answer though,
    we would need to apply the CRT to find the large integer version of the number.
    First, we then need to find solutions <m>y_1, y_2, y_3,</m>
    and <m>y_4</m> to the equations
    <me>
      \begin{align*}
        903,070y_1 &amp; \equiv 91y_1 &amp; \equiv 1 \mod 99,\\
        912,285y_2 &amp; \equiv \phantom{0}3y_2 &amp; \equiv 1 \mod 98, \\
        921,690y_3 &amp; \equiv 93y_3 &amp; \equiv 1 \mod 97, \\
        941,094y_4 &amp; \equiv 24y_4 &amp; \equiv 1 \mod 95.
      \end{align*}
    </me>
    This can be easily and efficiently done using the Euclidean Algorithm, so we find
    <me>
      \begin{align*}
        y_1 &amp; \equiv 37 \mod 99,\\
        y_2 &amp; \equiv 35 \mod 98, \\
        y_3 &amp; \equiv 24 \mod 97, \\
        y_4 &amp; \equiv \phantom{0}4 \mod 95.
      \end{align*}
    </me>
    Therefore, by CRT, we have
    <me>
      \begin{split}
        x+y &amp; \equiv
        65 \cdot 903,070 \cdot 37 +
        2  \cdot 912,285 \cdot 33 +
        51 \cdot 921,690 \cdot 24 +
        10 \cdot 941,094 \cdot 4 \\
        &amp; = 3,397,886,480 \\
        &amp; \equiv 537,140 \mod 89,403,930.
      \end{split}
    </me>
    Since <m>0< x+y< 89,403,930</m>, we conclude that <m>x+y=537,140</m>.
    <alert>Note:</alert> this conversion was not required in order to do more calculations, only to display
    the output at this step.
  </p>
    

  <p>
    <row><alert>In Practice</alert></row>
    On most computers, the word size is a large power of 2, with <m>2^{35}</m> being a common value.
    Hence, to use modular arithmetic and the Chinese remainder theorem to do computer 
    arithmetic, we need integers less than <m>2^{35}</m> that are pairwise relatively prime 
    and that multiply together to give a large integer.
    To find such integers, we use numbers of the form <m>2^m-1</m>, where <m>m</m> is a 
    positive integer. Computer arithmetic with these numbers turns out to be relatively simple.
    There are several lemmas related to this, and would make a good textbook section.
    Feel free to ask for references if interested.
  </p>

</module>
