<title>Function definition</title>

<section>
  <title>Overview</title>
  
  <p>When creating a function based on a formula such as
  &lt;function&gt;&lt;formula&gt;&dollar;a x^2&lt;/formula&lt;/function&gt;
  we choose to do the steps in the following order.</p>
  
  <ol><li>Expand any copies and <c>&lt;math&gt;</c>s inside
  <c>&lt;formula&gt;</c> to calculate the mathematical
  expression.</li>
  
  <li>Locate any occurrences of the variable (default is x)
  inside the resulting mathematical expression.
  When the function is evaluated,
  replace all these occurrences with the function argument.</li>
  
</ol>

</section>
<section newNamespace>
  <title>Example</title>

<p>Given the following DoenetML:</p>

<p><c>Subexpression: &lt;math name=&quot;a&quot;&gt;xy&lt;/math&gt;.  Function:
&lt;function name=&quot;f&quot; variable=&quot;x&quot; symbolic&gt;&lt;formula&gt;&dollar;a x&lt;/formula&gt;&lt;/function&gt;.  Evaluation at &lt;m&gt;z&lt;/m&gt;: &dollar;&dollar;f(z).</c></p>

<p>In this case, the <m>x</m> from inside the definition of <m>f</m> is replaced with <m>z</m>, along with the explicit <m>x</m> given directly in the formula, as shown in this rendering of the DoenetML.</p>

<p>Subexpression: <math name="a">xy</math>.  Function:
<function name="f" variable="x" symbolic><formula>$a x</formula></function>.  Evaluation at <m>z</m>: $$f(z).</p>

</section>

<section newNamespace>
  <title>Key advantage</title>

<p>You can create functions based on user input, randomization, or other variables.</p>

<p>Choose variable for function: <mathinput name="x" prefill="x" />.  Let <m>f($x) =</m> <mathinput name="fformula" prefill="ax" />.  Let <m>u = </m> <mathinput name="u" prefill="3v" />.  Then <m>f(u) = f($u) = $$f($u).</m></p>

<p hide><function name="f" variable="$x" symbolic simplify expand><formula>$fformula</formula></function></p>

</section>

<section newNamespace>
  <title>Possible confusion</title>

  <p>Define <c>&lt;math name=&quot;a&quot;&gt;xy&lt;/math&gt;</c> = <math name="a">xy</math>.  Now these three functions have different behavior, even though they look the same in their definition.
  </p>

  <ol>
    <li><p><m>f(x) =</m> <c>&lt;function symbolic simplify name=&quot;f&quot; variable=&quot;x&quot;&gt;&lt;formula&gt;&dollar;a x&lt;/formula&gt;&lt;/function&gt;</c></p>

    <p><m>f(u) = $$f(u)</m></p>
    
    <p hide><function symbolic simplify name="f" variable="x"><formula>$a x</formula></function></p>
    </li>

    <li><p><m>g(y) =</m> <c>&lt;function symbolic simplify name=&quot;g&quot; variable=&quot;y&quot;&gt;&lt;formula&gt;&dollar;a y&lt;/formula&gt;&lt;/function&gt;</c></p>

    <p><m>g(u) = $$g(u)</m></p>
    
    <p hide><function symbolic simplify name="g" variable="y"><formula>$a y</formula></function></p>
    </li>

    <li><p><m>h(z) =</m> <c>&lt;function symbolic simplify name=&quot;h&quot; variable=&quot;z&quot;&gt;&lt;formula&gt;&dollar;a z&lt;/formula&gt;&lt;/function&gt;</c></p>

    <p><m>h(u) = $$h(u)</m></p>
    
    <p hide><function symbolic simplify name="h" variable="u"><formula>$a u</formula></function></p>
    </li>

  </ol>

  <p>However, the advantage of functions based on user input seems to greatly outweight this confusion.</p>

</section>