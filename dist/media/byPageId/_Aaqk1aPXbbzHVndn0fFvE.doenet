<ref createButton="true" uri="doenet:doenetId=DG5JOeFNTc5rpWuf2uA-q">Back to Component Index</ref>

<document><title><tag>aside</tag> component</title>

<section><title>Associated Attributes</title>
<ul>
  <li><attr>startOpen</attr>  <em>(boolean)</em></li>
</ul>

</section>


<section><title>Description</title>
<!--use <ref> on all component names (other than the one indexed from this file) in this section only-->
  <p>The <tag>aside</tag><idx><tag>aside</tag></idx> component renders a collapsible, boxed section of content that is expanded when the user clicks the banner to display supplementary material.  See examples below.</p>
</section> 

  
<section><title>Usage Examples</title>

<subsection><title>Example 1: <tag>aside</tag> without attributes, with nested <tag>title</tag></title>
<p>In the sample code below, the <tag>aside</tag> component is used with a nested <tag><ref>title</ref></tag> in order to overwrite the existing default aside title.</p>
<example boxed="true"><title>Sample DoenetML code (Example 1)</title>
<pre>
&lt;p&gt;This is the main page content...&lt;/p&gt;
  &lt;aside&gt;
    &lt;title&gt;Additional Information&lt;/title&gt;
    Here is some supplementary material that the viewer can see when they click the banner.
  &lt;/aside&gt;

</pre>
        </example>
      </subsection>

<!--*******************************************************-->
 
<example><title>What Doenet Renders (Example 1)</title>
<p>This is the main page content...</p>
  <aside>
    <title>Additional Information</title>
    Here is some supplementary material that the viewer can see when they click the banner.
  </aside>
</example>

<!--******************************************************-->
    

<subsection><title>Example 2:  <tag>aside</tag> with application of the <tag>startOpen</tag> attribute</title>
<p>The sample code below illustrates an advanced application of the
  <tag>aside</tag> block with the <tag><ref>triggerSet</ref></tag> 
  component, the <tag><ref>booleanInput</ref></tag> component, and 
  the <tag><ref>conditionalContent</ref></tag> component all combined
  to create an interactive story.  The first user-selection in the story is
  rendered within an <tag>aside</tag> that uses the <attr>startOpen</attr>
  attribute set to <c>"true"</c>. The viewer can minimize once that
  part of the story has been completed to view just the user-selected 
  content.</p>
<example boxed="true"><title>Sample DoenetML code (Example 2)</title>
<pre>

&lt;setup&gt;
    &lt;text name="heroineName"&gt;&lt;/text&gt;
  
    &lt;triggerSet triggerWhen="&dollar;Belle"&gt;
      &lt;updateValue tname="heroineName" newValue="Belle"/&gt;
    &lt;/triggerSet&gt;

    &lt;triggerSet triggerWhen="&dollar;Rapunzel"&gt;
      &lt;updateValue tname="heroineName" newValue="Rapunzel"/&gt;
    &lt;/triggerSet&gt;

    &lt;triggerSet triggerWhen="&dollar;Cinderella"&gt;
      &lt;updateValue tname="heroineName" newValue="Cinderella"/&gt;
    &lt;/triggerSet&gt;
&lt;/setup&gt;

  
&lt;p&gt;Once upon a time...&lt;/p&gt;
  
&lt;aside startOpen="true" boxed="true"&gt;
  &lt;title&gt;ðŸ“– Choose what comes next...&lt;/title&gt;
    
    &lt;p&gt;&lt;booleanInput name="Belle"/&gt;
      &lt;text name="belleStory"&gt;an enchanted prince lived in a 
      dark castle.  In the nearby village, our heroine loved to read
      and help her father with his crazy inventions.&lt;/text&gt;
    &lt;/p&gt;
    
    &lt;p&gt;&lt;booleanInput name="Rapunzel" /&gt;
      &lt;text name="rapunzelStory"&gt;a young girl with long hair was 
      trapped in a tower, and dreamed of unravelling the mystery of the
      glowing lights in the sky.&lt;/text&gt;
    &lt;/p&gt;
    
    &lt;p&gt;&lt;booleanInput name="Cinderella" /&gt;
      &lt;text name="cinderellaStory"&gt;two evil stepsisters made the 
      young girl work from morning until night, but she never lost her
      cheerful kindness.&lt;/text&gt;
    &lt;/p&gt;

&lt;/aside&gt;
  
&lt;p&gt;
  &lt;conditionalContent condition="&dollar;Belle"&gt;&dollar;belleStory
  &lt;/conditionalContent&gt;

  &lt;conditionalContent condition="&dollar;Rapunzel"&gt;&dollar;rapunzelStory
  &lt;/conditionalContent&gt;

  &lt;conditionalContent condition="&dollar;Cinderella"&gt;&dollar;cinderellaStory
  &lt;/conditionalContent&gt;
  
The girl's name was &dollar;heroineName.&lt;/p&gt;
</pre>
        </example>
      </subsection>

<!--*******************************************************-->

<example><title>What Doenet Renders (Example 2)</title>
<setup>
    <text name="heroineName"></text>
  <triggerSet triggerWhen="$Belle">
    <updateValue tname="heroineName" newValue="Belle"/>
  </triggerSet>

  <triggerSet triggerWhen="$Rapunzel">
    <updateValue tname="heroineName" newValue="Rapunzel"/>
  </triggerSet>

  <triggerSet triggerWhen="$Cinderella">
    <updateValue tname="heroineName" newValue="Cinderella"/>
  </triggerSet>
</setup>

  
<p>Once upon a time...</p>
  <aside startOpen="true" boxed="true"><title>ðŸ“– Choose what comes next...</title>
    


    <p><booleanInput name="Belle"/>
      <text name="belleStory">an enchanted prince lived in a dark castle.  In the nearby village, our heroine loved to read and help her father with his crazy inventions.</text>
    </p>
    
    <p><booleanInput name="Rapunzel" />
      <text name="rapunzelStory">a young girl with long hair was trapped in a tower, and dreamed of unravelling the mystery of the glowing lights in the sky.</text>
    </p>
    
    <p><booleanInput name="Cinderella" />
      <text name="cinderellaStory">two evil stepsisters made the young girl work from morning until night, but she never lost her cheerful kindness.</text>
    </p>

  </aside>
  
<p>
  <conditionalContent condition="$Belle">$belleStory
  </conditionalContent>

  <conditionalContent condition="$Rapunzel">$rapunzelStory
  </conditionalContent>

  <conditionalContent condition="$Cinderella">$cinderellaStory
  </conditionalContent>
  
The girl's name was $heroineName.</p>

</example>
  
</section>
</document>














