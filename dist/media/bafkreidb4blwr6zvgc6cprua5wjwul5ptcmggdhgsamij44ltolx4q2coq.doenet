<title>More details on solving linear discrete dynamical systems</title>
<variantControl nVariants="1" />

<section><title>The linear discrete dynamical system</title>

<p>When discussing 
<ref uri='doenet:discrete_dynamical_system_function_iteration'>discrete dynamical systems as function iteration</ref>
, we described the simplest type of discrete dynamical system, where the 
<ref uri='doenet:state_space|page_type=definition'>state space</ref>
 was one-dimensional and the evolution rule at each time point depended just on the values of the 
<ref uri='doenet:state_variable|page_type=definition'>state variables</ref>
 at that time.  If we let <m>x_t</m> be the snapshot of the state variable at time <m>t</m>, then then the 
<ref uri='doenet:trajectory_dynamical_systems|page_type=definition'>trajectory</ref>
 of a given initial state <m>x_0</m> is determined by iterating some function <m>f(x)</m>.  The result is a dynamical system in written 
<ref uri='doenet:function_iteration_form|page_type=definition'>function iteration form</ref>
, i.e., 
<ref uri='doenet:discrete_dynamical_system_function_iteration'>equation (tag) from that page</ref>
, which we rewrite here as:
<men>x_{t+1}=f(x_t) \quad \text{for $ t=0,1,2,3, \ldots. $  }  \label{recursion}</men>
</p>

<p>What is the simplest form for the function <m>f(x)</m>?  The boring simplest case would be <m>f(x)=c</m> for some constant <m>c</m>.  But in those cases, nothing much happens, as all <m>x_t=c</m>.</p>

<p>In the next simplest case <m>f(x)</m> is a linear function of the form
<me>f(x) = Rx</me>
where <m>R</m> is some fixed positive constant.
In this case, the state variable <m>x_{t+1}</m> at time <m>t+1</m> is proportional to the state variable <m>x_t</m> at the previous time.   We have a 
<ref uri='doenet:solving_linear_discrete_dynamical_systems'>linear discrete dynamical system</ref>
.</p>

<p>The behavior of the trajectory <m>x_1,x_2,x_3, \ldots</m> depends on whether <m>R</m> is larger or small than one.  The case <m>R=1</m> is a special case since then <m>x_{t+1}=x_t</m>.  Since in this case, the state variable doesn't change from one snapshot in time to the next, we immediately know that <m>x_t=x_0</m> for all <m>t</m> and we never move from the initial condition value <m>x_0</m>. </p>

<p>The more interesting cases are when <m>R \ne 1</m> so that the state variables change over time.  If <m>R \gt 1</m>, then the state variable becomes larger in magnitude after each time step.  But if <m>0 \lt R \lt 1</m>, then the state variable decreases in magnitude after each time step.  As we will show, these cases correspond to 
<ref uri='doenet:exponential_growth_decay_discrete'>exponential growth and exponential decay</ref>
, respectively, of the state variable as time increases.</p>

</section>


<section><title>Solving the dynamical system</title>


<p>If <m>f(x)=Rx</m>, we can write the discrete dynamical system as
<mdn>
  <mrow name="linear_dynamical_system">x_{t+1}\amp = Rx_t \quad \text{for $ t=0,1,2,3,\ldots. $ }</mrow>
  <mrow number='false'>x_0\amp = \text{a known value}.  

</mrow>
</mdn>
A 
<ref uri='doenet:solving_linear_discrete_dynamical_systems'><em>solution</em></ref>
 to the dynamical system <ref tname="linear_dynamical_system" /> is a formula for computing <m>x_t</m> solely in terms of the time <m>t</m> and initial conditions <m>x_0</m>.  The given system <ref tname="linear_dynamical_system" /> is a recipe for computing all <m>x_t</m>, but it is not considered a solution since it is not a formula that lets us directly compute <m>x_t</m> for any <m>t</m>.</p>

<p>As described when discussing 
<ref uri='doenet:discrete_dynamical_system_function_iteration'>discrete dynamical systems as function iteration</ref>
, we can compute the value of <m>x_t</m> for any <m>t</m> by starting with the initial condition <m>x_0</m> and iterating the function many times.  In the general case, the expression for the iteration got pretty messy.  But, for our special case of <m>f(x)=Rx</m>, we can write the result with a nice formula.</p>

<p>Starting with <m>x_0</m>, we see that 
<me>x_{1}=Rx_0,</me>
which is just equation <ref tname='linear_dynamical_system' /> for case when <m>t=0</m>.  Since equation <ref tname="linear_dynamical_system" /> for case when <m>t=1</m> is <m>x_2=Rx_1</m>, we just need to multiply by <m>R</m> twice to go from <m>x_0</m> to <m>x_2</m>:
<me>x_{2}=Rx_1 = R(Rx_0)= R^2x_0.</me>
We can continue this procedure to calculate <m>x_t</m> for later times <m>t</m>:
<md>
  <mrow>x_{3}\amp =Rx_2 = R(Rx_1) = R(R(Rx_0))= R^3x_0</mrow>
  <mrow>x_{4}\amp =Rx_3 = R(Rx_2) = R(R(Rx_1))= R(R(R(Rx_0)))=R^4x_0.</mrow>
</md>
</p>

<p>There's no need to stop at <m>t=4</m> or any particular value of <m>t</m>, as we can continue this process as long as we want.  For any positive integer <m>n</m>, if we want to know <m>x_n</m>, the state variable for <m>t=n</m>, we would just start with <m>x_0</m> and continuing multiplying by <m>R</m> until we've done it <m>n</m> times.  We have the simple formula
<me>x_n = R^n x_0.</me>
Or, if we prefer, we can write it in terms of the integer time <m>t</m>
<men name='solution'>x_t = R^t x_0</men>

Equation <ref tname='solution' /> is the solution to the dynamical system <ref tname='linear_dynamical_system'/>.  It is a simple formula that allows us to immediately compute <m>x_t</m> from the initial condition <m>x_0</m>.</p>

<p>Sometimes, it is more natural to think of the dynamical system <ref tname="linear_dynamical_system" /> in terms of the <em>change</em> of the state variable in time <m>t</m>: <m>x_{t+1}-x_t</m>.  In that case, we can rewrite <ref tname='linear_dynamical_system' /> in 
<ref uri='doenet:difference_form|page_type=definition'>difference form</ref>
 by subtracting <m>x_t</m> from both sides of the equation.  The result is
<mdn>
  <mrow name="linear_dynamical_system_change">x_{t+1} -x_t\amp = rx_t \quad \text{for $ t=0,1,2,3,\ldots. $ }</mrow>
  <mrow number='false'>x_0\amp = \text{a known value}.</mrow>
</mdn>
where <m>r=R-1</m>.  We can rewrite the solution <ref tname="solution" /> in terms of <m>r</m> as
<men name="solution2">x_t = (r+1)^t x_0.</men>
</p>

<p>The case <m>r \gt 0</m> corresponds <m>R \gt 1</m>, and the solution exhibits 
<ref uri='doenet:exponential_growth_decay_discrete'>exponential growth</ref>
.  The state variable <m>x_t</m> will blow up to very large magnitude numbers as the time <m>t</m> increases.  The case <m>-1 \lt r \lt 0</m> corresponds to <m>0 \lt R \le 1</m>, and the solution exhibits 
<ref uri='doenet:exponential_growth_decay_discrete'>exponential decay</ref>
.  The state variable <m>x_t</m> will decay toward zero as the time <m>t</m> increases.</p>

</section>
