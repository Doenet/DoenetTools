<document>
<title>Create Hands-On Exploratory Activities with DoenetML: 
 Cobweb Applet</title> 
  <section><title><em>(Advanced application of DoenetML)</em></title></section>
  <aside boxed="true"><title>How to Use this Content Example</title>
    <ul>In this page you can,
      <li><p>Explore the sample content below and how it functions</p></li>
      <li><p>Review the design overview and code snippets below the applet which describe how the DoenetML code works.</p></li>
      <li><p>Change the source code in the editor panel on the right then click the blue "Update" button to see your changes immediately displayed in the viewer on the left.</p></li>
      <li><p>User tip: you can click the two little bars in the middle to open, close, and resize the editor panel.</p></li>
    </ul>
  </aside>
    


<!--Copied from 1241/Applets/Initial cobweb tutorial-->
  
<module name="initialCobwebTutorial">
  <setup>
    <customAttribute componentType="function" attribute="function" defaultValue="2x-x^2/3" assignNames="f" />
    <customAttribute componentType="number" attribute="x0" defaultValue="1" assignNames="x0" />

    <customAttribute componentType="_componentSize" attribute="width" defaultValue="300px" assignNames="width" />
    <customAttribute componentType="_componentSize" attribute="height" defaultValue="300px" assignNames="height" />
    <customAttribute componentType="number" attribute="xmin" defaultValue="-1" assignNames="xmin" />
    <customAttribute componentType="number" attribute="xmax" defaultValue="5" assignNames="xmax" />
    <customAttribute componentType="number" attribute="ymin" defaultValue="-1" assignNames="ymin" />
    <customAttribute componentType="number" attribute="ymax" defaultValue="5" assignNames="ymax" />
    <customAttribute componentType="boolean" attribute="showNavigation" defaultValue="true" assignNames="showNavigation" />
    <customAttribute componentType="variable" attribute="variable" defaultValue="x" assignNames="variable" />
    <customAttribute componentType="number" attribute="attractThreshold" defaultValue="0.1" assignNames="attractThreshold" />
    <customAttribute componentType="number" attribute="answerWeight" defaultValue="1" assignNames="answerWeight" />


    <number name="step">0</number>
    <number name="stepCompleted">0</number>
    <boolean name="stepBegun">true</boolean>
    <number name="nPoints">0</number>
    <number name="nVlines">0</number>
    <number name="nHlines">0</number>

    <math name="x1" displayDecimals="2">$$f($x0)</math>
    <math name="x2" displayDecimals="2">$$f($x1)</math>
    <boolean name="showX1Result">false</boolean>
    <boolean name="showX2Result">false</boolean>
    <number name="initX">($xmin+$xmax)/2</number>
    <number name="initY">($ymin+$ymax)/2</number>
    <number name="P1StyleNum">1</number>
    <boolean name="P1Placed">$nPoints >= 1 and $P1 = ($x0,0)</boolean>
    <number name="v1StyleNum">1</number>
    <boolean name="v1Placed">$nVlines >= 1 and $(pv11{prop='x'}) = $x0</boolean>
    <number name="h1StyleNum">1</number>
    <boolean name="h1Placed">$nHlines >= 1 and $(ph11{prop='y'}) = $x1</boolean>
    <number name="P2StyleNum">1</number>
    <boolean name="P2Placed">$nPoints >= 2 and $P2 = (0,$x1)</boolean>
    <number name="P3StyleNum">1</number>
    <boolean name="P3Placed">$nPoints >= 2 and $P3 = ($x1,0)</boolean>
    <number name="v2StyleNum">1</number>
    <boolean name="v2Placed">$nVlines >= 2 and $(pv21{prop='x'}) = $x1</boolean>
    <number name="h2StyleNum">1</number>
    <boolean name="h2Placed">$nHlines >= 2 and $(ph21{prop='y'}) = $x2</boolean>
    <number name="P4StyleNum">1</number>
    <boolean name="P4Placed">$nPoints >= 4 and $P4 = (0,$x2)</boolean>
    <boolean name="previewShortcut">false</boolean>

    <triggerSet triggerWhen="$P1Placed">
      <updateValue tname="stepCompleted" newvalue="1" />
      <updateValue tname="P1StyleNum" newvalue="2" />
    </triggerSet>

    <triggerSet triggerWhen="not $P1Placed">
      <updateValue tname="stepCompleted" newvalue="0" />
      <updateValue tname="P1StyleNum" newvalue="1" />
    </triggerSet>

    <triggerSet triggerWhen="$v1Placed">
      <updateValue tname="stepCompleted" newvalue="2" />
      <updateValue tname="v1StyleNum" newvalue="2" />
    </triggerSet>
    <triggerSet triggerWhen="not $v1Placed">
      <updateValue tname="stepCompleted" newvalue="1" />
      <updateValue tname="v1StyleNum" newvalue="1" />
    </triggerSet>

    <updateValue triggerWhen="$h1Placed" tname="h1StyleNum" newvalue="2" />
    <updateValue triggerWhen="not $h1Placed" tname="h1StyleNum" newvalue="1" />

    <triggerSet triggerWhen="$P2Placed">
      <updateValue tname="stepCompleted" newvalue="3" />
      <updateValue tname="P2StyleNum" newvalue="2" />
    </triggerSet>
    <triggerSet triggerWhen="not $P2Placed">
      <updateValue tname="stepCompleted" newvalue="2" />
      <updateValue tname="P2StyleNum" newvalue="1" />
    </triggerSet>

    <triggerSet triggerWhen="$P3Placed">
      <updateValue tname="stepCompleted" newvalue="4" />
      <updateValue tname="P3StyleNum" newvalue="2" />
    </triggerSet>
    <triggerSet triggerWhen="not $P3Placed">
      <updateValue tname="stepCompleted" newvalue="3" />
      <updateValue tname="P3StyleNum" newvalue="1" />
    </triggerSet>

    <triggerSet triggerWhen="$v2Placed">
      <updateValue tname="stepCompleted" newvalue="5" />
      <updateValue tname="v2StyleNum" newvalue="2" />
    </triggerSet>
    <triggerSet triggerWhen="not $v2Placed">
      <updateValue tname="stepCompleted" newvalue="4" />
      <updateValue tname="v2StyleNum" newvalue="1" />
    </triggerSet>

    <updateValue triggerWhen="$h2Placed" tname="h2StyleNum" newvalue="2" />
    <updateValue triggerWhen="not $h2Placed" tname="h2StyleNum" newvalue="1" />

    <triggerSet triggerWhen="$P4Placed">
      <updateValue tname="P4StyleNum" newvalue="2" />
      <updateValue tname="stepCompleted" newvalue="6" />
    </triggerSet>
    <triggerSet triggerWhen="not $P4Placed">
      <updateValue tname="P4StyleNum" newvalue="1" />
      <updateValue tname="stepCompleted" newvalue="5" />
    </triggerSet>


    <point name="pv11" x="0" y="0">
      <constraints>
        <attractTo threshold="$attractThreshold"><line equation="x=$x0" /></attractTo>
      </constraints>
    </point>
    <point name="pv12" x="0" y="1" >
      <constraints>
        <attractTo threshold="$attractThreshold"><line equation="x=$x0" /></attractTo>
      </constraints>
    </point>

    <point name="ph11" x="0" y="0">
      <constraints>
        <attractTo threshold="$attractThreshold"><line equation="y=$x1" /></attractTo>
      </constraints>
    </point>
    <point name="ph12" x="1" y="0" >
      <constraints>
        <attractTo threshold="$attractThreshold"><line equation="y=$x1" /></attractTo>
      </constraints>
    </point>

    <point name="pv21" x="0" y="0">
      <constraints>
        <attractTo threshold="$attractThreshold"><line equation="x=$x1" /></attractTo>
      </constraints>
    </point>
    <point name="pv22" x="0" y="1" >
      <constraints>
        <attractTo threshold="$attractThreshold"><line equation="x=$x1" /></attractTo>
      </constraints>
    </point>

    <point name="ph21" x="0" y="0">
      <constraints>
        <attractTo threshold="$attractThreshold"><line equation="y=$x2" /></attractTo>
      </constraints>
    </point>
    <point name="ph22" x="1" y="0" >
      <constraints>
        <attractTo threshold="$attractThreshold"><line equation="y=$x2" /></attractTo>
      </constraints>
    </point>

    <copy tname="P1" prop="coords" assignNames="P1coords" />
    <copy tname="P2" prop="coords" assignNames="P2coords" />
    <copy tname="P3" prop="coords" assignNames="P3coords" />
    <copy tname="P4" prop="coords" assignNames="P4coords" />
    <copy tname="pv11" prop="coords" assignNames="pv11coords" />
    <copy tname="pv12" prop="coords" assignNames="pv12coords" />
    <copy tname="pv21" prop="coords" assignNames="pv21coords" />
    <copy tname="pv22" prop="coords" assignNames="pv22coords" />
    <copy tname="ph11" prop="coords" assignNames="ph11coords" />
    <copy tname="ph12" prop="coords" assignNames="ph12coords" />
    <copy tname="ph21" prop="coords" assignNames="ph21coords" />
    <copy tname="ph22" prop="coords" assignNames="ph22coords" />

    <number name="pflash">1</number>
    <boolean name="flashShortcut">false</boolean>
    <animateFromSequence name="animatePflash" animationMode='increase once' animationOn='$flashShortcut' tName='pflash' animationInterval='500' from="1" to="5" />

  </setup>

  <sideBySide widths="75% 25%">

  <graph width="$width" height="$height" xmin="$xmin" xmax="$xmax" ymin="$ymin" ymax="$ymax" xlabel="$(variable)_n" ylabel="$(variable)_{n+1}" showNavigation="$showNavigation" identicalAxisScales >

    <curve styleNumber="3" fixed><copy tname="f" /></curve>
    <line styleNumber="4" equation="y=x" fixed />
  
    <point label="($(variable)_0,0)" name="P1" hide="$nPoints < 1" x="$(initX{prop='value' link='false'})" y="$(initY{prop='value' link='false'})" fixed='$step > 1' styleNumber='$P1StyleNum'>
      <constraints>
        <attractTo threshold="$attractThreshold"><point x="$x0" y="0" ></point></attractTo>
      </constraints>
    </point>

    <line name="v1" through="$pv11 $pv12" hide="$nVlines < 1" fixed="$step > 2" styleNumber="$v1StyleNum" />

    <line name="h1" through="$ph11 $ph12" hide="$nHlines < 1" fixed="$nPoints > 1" styleNumber="$h1StyleNum" />

    <point label="(0, $(variable)_1)" name="P2" hide="$nPoints < 2" x="$(initX{prop='value' link='false'})" y="$(initY{prop='value' link='false'})" fixed='$step > 3' styleNumber='$P2StyleNum'>
      <constraints>
        <attractTo threshold="$attractThreshold"><point x="0" y="$x1" ></point></attractTo>
      </constraints>
    </point>

    <point label="($(variable)_1,0)" name="P3" hide="$nPoints < 3" x="$(initX{prop='value' link='false'})" y="$(initY{prop='value' link='false'})" fixed='$step > 4' styleNumber='$P3StyleNum'>
      <constraints>
        <attractTo threshold="$attractThreshold"><point x="$x1" y="0" ></point></attractTo>
      </constraints>
    </point>

    <line name="v2" through="$pv21 $pv22" hide="$nVlines < 2" fixed="$step > 5" styleNumber="$v2StyleNum" />

    <line name="h2" through="$ph21 $ph22" hide="$nHlines < 2" fixed="$nPoints > 3" styleNumber="$h2StyleNum" />

    <point label="(0, $(variable)_2)" name="P4" hide="$nPoints < 4" x="$(initX{prop='value' link='false'})" y="$(initY{prop='value' link='false'})" fixed='$step > 6' styleNumber='$P4StyleNum'>
      <constraints>
        <attractTo threshold="$attractThreshold"><point x="0" y="$x2" ></point></attractTo>
      </constraints>
    </point>

    <polyline styleNumber="1" vertices="($x0,0) ($x0, $x1) ($x1, $x1) ($x1, $x2)" hide="mod($pflash, 2) = 0 or not $previewShortcut" fixed />

  </graph>

  <subsection>
    <title>Results</title>

    <md>
      <mrow hide="not $P1Placed">
        $(variable)_0 \amp = $(x0{displayDecimals="2"})
      </mrow>
      <mrow hide="not $P2Placed">
        $(variable)_1 \amp = $x1
      </mrow>
      <mrow hide="not $P4Placed">
        $(variable)_2 \amp = $(x2{displayDecimals="2"})
      </mrow>
    </md>

  </subsection>
  </sideBySide>

  <sideBySide>
  <aside boxed collapsible="false">
    <title>Goal</title>

    <conditionalContent>
      <case condition="$step = 0">
        <p>This tutorial will give step-by-step instructions for using the graph of the function <m>f($variable) = <evaluate forceSymbolic function="$f" input="$variable" /></m> to iterate the dynamical system
        <md>
          <mrow>$(variable)_{n+1} \amp = <evaluate forceSymbolic function="$f" input="$(variable)_n" /></mrow>
          <mrow>$(variable)_0 \amp = $x0.</mrow>
        </md>
        </p>
      </case>
      <case condition="$step = 1">
        <p>The first step is to create a point for the initial condition <m>$(variable)_0 = $x0</m>.</p>
      </case>
      <case condition="$step = 2">
          <p>We want to graphically apply the function to the initial condition <m>$(variable)_0 = $x0</m> to determine the value of <m>f($(variable)_0).</m> </p>
          
          <p>For this step, we'll draw a vertical line through the initial condition which will intersect the graph of the function at <m>f($(variable)_0)</m>. </p>
      </case>
      <case condition="$step = 3"> 
          <p>The value of <m>$(variable)_1 = f($(variable)_0)</m> is where the vertical line intersects the graph of the function.  We'll draw a horizontal line at that height and place a point where it hits the <m>y</m>-axis to read the value of <m>$(variable)_1</m> off the <m>y</m>-axis.</p>
      </case>
      <case condition="$step = 4">
        <p>Now that we know that <m>$(variable)_1 = $x1</m>, we can repeat the previous steps to calculate <m>$(variable)_2 = f($(variable)_1)</m>.</p>

        <p>So far, we have the value of <m>$(variable)_1</m> shown by a point on the <m>y</m>-axis.  In this step, we'll translate the value of <m>$(variable)_1</m> into a point on the <m>x</m>-axis.</p>
        
      </case>
      <case condition="$step = 5">
        <p>To estimate the value of <m>$(variable)_2 = f($(variable)_1)</m>, draw a vertical line through the point <m>($x1,0)</m> to see where it intersects the graph of the function.</p>
      </case>
      <case condition="$step=6">
        <p>We need to determine the height of the function where the vertical line through <m>($x1,0)</m> hits the graph of the function.  This height will be the value of <m>$(variable)_2</m>.</p>
        
        <p>We'll draw a horizontal line and a point along the <m>y</m>-axis to determine this height.</p>
      </case>
      <case condition="$step=7">

        <p>The graph is getting a bit busy, so we won't keep going to <m>$(variable)_3</m> or beyond with drawing all these lines.</p>

        <p>Here, you can just get a gimpse of the simpler strategy we'll use to iterate the system more efficiently.</p>

      </case>
    </conditionalContent>

    <updateValue label="Begin step" name="beginStep" disabled="$stepBegun" type="boolean" tname="stepBegun" newValue="true" />

  </aside>
  <aside boxed collapsible="false">
    <title>Instructions</title>

    <conditionalContent maximumNumberToShow="1">
      <case condition="$step = 0">

        <p>Click Next to begin.</p>

      </case>
      <case condition="$step = 1 and $stepBegun">
        <conditionalContent maximumNumberToShow="1">
          <case condition="$nPoints = 0">
            <p>Click 
              <updateValue label="add point" name="addPoint1"  tName="nPoints" newValue="1" />
              to create a point for the initial condition.</p>
          </case>
          <case condition="not $P1Placed">
            <p>Now move the point to the <m>x</m>-axis and the location of the initial condition <m>$(variable)_0=$x0</m>.</p>
          </case>
          <else>
            <p>Great!  We'll use the Results panel to keep track of the values of <m>$(variable)_n</m>.  It now shows that <m>$(variable)_0=$x0</m>.</p>
            
            <p>Click Next to move on to the next step.</p>
          </else>
        </conditionalContent>
      </case>
      <case condition="$step = 2 and $stepBegun">
        <conditionalContent maximumNumberToShow="1">
          <case condition="$nVlines = 0" >
            <p>Click
            <updateValue label="add vertical line" name="addVline1" tName="nVlines" newValue="1" />
            to create the line.</p>
          </case>
          <case condition="not $v1Placed" >
            <p>Move the line to <m>$variable=$x0</m>. </p>
          </case>
          <else>
            <p>Line is in place.  Click Next to continue.</p>
          </else>
        </conditionalContent>

      </case>
      <case condition="$step = 3 and $stepBegun">
        <conditionalContent maximumNumberToShow="1">
          <case condition="$nHlines = 0" >
            <p>Click 
              <updateValue label="add horizontal line" name="addHline1" tName="nHlines" newValue="1" />
            to create the line.</p>
          </case>

          <case condition="not $h1Placed">
            <p>Move the line to the height of <m>f($(variable)_0).</m></p>
          </case>

          <case condition="$nPoints < 2">
            <p>The horizontal line is in place. Click
              <updateValue label="add point" name="addPoint2"  tName="nPoints" newValue="2" />
             to create a point.</p>
          </case>

          <case condition="not $P2Placed">
            <p>Move that point to where the horizontal line intersects the <m>y</m>-axis.</p>
          </case>

          <else>
            <p>Good job! The coordinates of that point are <m>(0, $(variable)_1) = (0,$x1)</m>. The value <m>$(variable)_1=$x1</m> now appears in the results.</p>
            
            <p>Click Next to move on to the next step.</p>
          </else>
        </conditionalContent>

      </case>
      <case condition="$step = 4 and $stepBegun">
        <conditionalContent maximumNumberToShow="1">
          <case condition="$nPoints = 2" >
            <p>Click
              <updateValue label="add point" name="addPoint3" tName="nPoints" newValue="3" />
            to create a point.</p>
          </case>
          <case condition="not $P3Placed">
            <p>Move the point to the location <m>($x1,0)</m>, which is on the <m>x</m>-axis.</p>
          </case>
          <else>
            <p>Way to go!  Now we're set to estimate the value of <m>f($(variable)_1)</m>.  Click Next to continue.</p>
          </else>
        </conditionalContent>
        
      </case>

      <case condition="$step=5 and $stepBegun">
        <conditionalContent maximumNumberToShow="1">
          <case condition="$nVlines = 1" >
            <p>Click
              <updateValue label="add vertical line" name="addVline2" tName="nVlines" newValue="2" />
            to create a vertical line.</p>
          </case>
          <case condition="not $v2Placed">
            <p>Move the line so it goes through the point <m>($x1,0)</m>.</p>
          </case>
          <else>
            <p>Making progress! Click Next to move on to the next step.</p>
          </else>
        </conditionalContent>
      </case>

      <case condition="$step=6 and $stepBegun">
        <conditionalContent maximumNumberToShow="1">
          <case condition="$nHlines = 1" >
            <p>Click 
              <updateValue label="add horizontal line" name="addHline2" tName="nHlines" newValue="2" />
              to create a horizontal line.</p>
          </case>
          <case condition="not $h2Placed">
            <p>Move the line to the point where the vertical line through <m>($x1,0)</m> intersects the function.</p>
          </case>
          <case condition="$nPoints = 3">
            <p>The line is where we want it.  Now, create a point by clicking
              <updateValue label="add point" name="addPoint4" tName="nPoints" newValue="4" />.</p>
          </case>
          <case condition="not $P4Placed">
            <p>Move the point to where that horizontal line crosses the <m>y</m>-axis.</p>
          </case>
          <else>
            <p>Awesome! The coordinates of that point are <m>(0, $(variable)_2) = (0,$x2)</m>. We added <m>$(variable)_2=$x2</m> to the results.</p>
            <p>Click Next to continue.</p>
          </else>
        </conditionalContent>
      </case>

      <case condition="$step=7 and $stepBegun">
        <conditionalContent maximumNumberToShow="1">
          <case condition="not $previewShortcut" >
            <p>Click this 
              <triggerSet label="preview shortcut" name="shortcutButton">
                <updateValue tName="flashShortcut" newValue="true" type="boolean" />
                <updateValue tname="previewShortcut" newValue="true" type="boolean" /> 
              </triggerSet>
              button to reveal the shortcut on the graph.</p>
          </case>
          <else>
            <p>Congratulations, you've finished this introductory tutorial on cobwebbing!</p>
          </else>
        </conditionalContent>

      </case>

    </conditionalContent>

    <triggerSet label="Reset tutorial" name="resetTutorial" disabled="$step = 0">
      <updateValue tname="step" newValue="0" />
      <updateValue tname="stepBegun" newValue="true" type="boolean" />
      <updateValue tname="nPoints" newValue="0" />
      <updateValue tname="nHlines" newValue="0" />
      <updateValue tname="nVlines" newValue="0" />
      <updateValue tname="P1coords" newValue="($initX, $initY)" />
      <updateValue tname="P2coords" newValue="($initX, $initY)" />
      <updateValue tname="P3coords" newValue="($initX, $initY)" />
      <updateValue tname="P4coords" newValue="($initX, $initY)" />
      <updateValue tname="pv11coords" newValue="(0,0)" />
      <updateValue tname="pv12coords" newValue="(0,1)" />
      <updateValue tname="pv21coords" newValue="(0,0)" />
      <updateValue tname="pv22coords" newValue="(0,1)" />
      <updateValue tname="ph11coords" newValue="(0,0)" />
      <updateValue tname="ph12coords" newValue="(1,0)" />
      <updateValue tname="ph21coords" newValue="(0,0)" />
      <updateValue tname="ph22coords" newValue="(1,0)" />
      <updateValue tname="P1StyleNum" newValue="1" />
      <updateValue tname="P2StyleNum" newValue="1" />
      <updateValue tname="P3StyleNum" newValue="1" />
      <updateValue tname="P4StyleNum" newValue="1" />
      <updateValue tname="v1StyleNum" newValue="1" />
      <updateValue tname="v2StyleNum" newValue="1" />
      <updateValue tname="h1StyleNum" newValue="1" />
      <updateValue tname="h2StyleNum" newValue="1" />
      <updateValue tName="previewShortcut" newValue="false" type="boolean" />
      <updateValue tname="stepCompleted" newValue="0" />
    </triggerSet>
    <callAction triggerWithTNames="resetTutorial" tName="ans" actionName="submitAnswer" />
    
    <updateValue label="Next" name="next" disabled="$stepCompleted < $step" tname="step" newValue="$step+1" />
    <callAction triggerWithTNames="next" tName="ans" actionName="submitAnswer" />
    <updateValue name="startStep" type="booelan" tname="stepBegun" newValue="false" triggerWithTnames="next" />

    <answer name="ans" hide weight="$answerWeight">
      <award credit="$stepCompleted/6"><when>true</when></award>
    </answer>


  </aside>

  </sideBySide>
</module>

<section><title>DoenetML Applet Design Process - A general overview</title>
<ol>
  <li><p>In the <tag>setup</tag> section, define initial parameters for the problem, including the <tag>function</tag> and the initial <m>x_0</m> using a <tag>number</tag> component, along with any other required initial conditions.  In this case, these values are initialized with the <tag>customAttribute</tag> component:</p>
  <p><pre>
&lt;setup&gt;
    &lt;customAttribute componentType="function"
    attribute="function" defaultValue="2x-x^2/3" 
    assignNames="f" /&gt;
    &lt;customAttribute componentType="number" attribute="x0"
    defaultValue="1" assignNames="x0" /&gt;
    ...
&lt;/setup&gt;</pre></p></li>
  <li><p>Establish an indexing variable using the <tag>number</tag> component to track the current step in the process, and <tag>boolean</tag> variables to indicate when the user has placed a point in the correct location:</p>
  <p><pre>
    &lt;number name="step"&gt;0&lt;/number&gt;
    &lt;number name="stepCompleted"&gt;0&lt;/number&gt;
    &lt;boolean name="stepBegun"&gt;true&lt;/boolean&gt; 
  </pre></p></li>
  <li><p>Define the events which trigger a change to the step index or the booleans that create the logic flow of the activity using the <tag>triggerSet</tag> and <tag>updateValue</tag> components:</p> 
  <p><pre>
    &lt;triggerSet triggerWhen="&dollar;P1Placed"&gt;
      &lt;updateValue tname="stepCompleted" newvalue="1" /&gt;
      &lt;updateValue tname="P1StyleNum" newvalue="2" /&gt;
    &lt;/triggerSet&gt;</pre></p></li>
  <li><p>Code the behavior of the named points to attract them to the desired locations on the graph using the <tag>constraints</tag> and the <tag>attractTo</tag> components:</p>
    <p><pre>
    &lt;point name="pv11" x="0" y="0"&gt;
      &lt;constraints&gt;
        &lt;attractTo threshold="&dollar;attractThreshold"&gt;
          &lt;line equation="x=&dollar;x0" /&gt;
        &lt;/attractTo&gt;
      &lt;/constraints&gt;
    &lt;/point&gt;</pre></p></li>
  <li><p>Using the <tag>graph</tag> component, construct the activity.  The graph is like a canvas that contains all of the information needed throughout the activity, but with the display of the points and lines in each individual step of the sequence hidden until the required boolean conditions are met.</p>
<p>For example, in the code sample below, the line passing through <c>pv11</c> and <c>pv12</c> remains hidden until the number of vertical lines described by the predefined <tag>number</tag> <c>nVlines</c> is greater than 1 and the <tag>number</tag> <c>step</c> is greater than 2.</p>
    <pre>
&lt;graph width="300px" height="300px" xmin="-1" xmax="5"
      ymin="-1" ymax="5" xlabel="x_{n}" ylabel="x_{n+1}"
      showNavigation="true" identicalAxisScales &gt;
      ...
      
    &lt;line name="v1" through="&dollar;pv11 &dollar;pv12"
      hide="&dollar;nVlines &lt; 1" fixed="&dollar;step &gt;
      2" styleNumber="&dollar;v1StyleNum" /&gt;</pre></li>
  <li><p>Lastly, provide the text instructions to guide the user along each step of the way using the <tag>conditionalContent</tag> block and the <tag>case</tag> components.</p>
    <p><pre>
    &lt;conditionalContent&gt;
      &lt;case condition="&dollar;step = 0"&gt;
        &lt;p&gt;This tutorial will give step-by-step instructions for 
        using the graph of the function &lt;m&gt;f(&dollar;variable) = &lt;evaluate
        forceSymbolic function="&dollar;f" input="&dollar;variable" /&gt;&lt;/m&gt; to 
        iterate the dynamical system...
      &lt;/case&gt;
      ...
    &lt;/conditionalContent&gt;
      
    </pre></p></li>
  <li><p>See if you can locate these steps in the editor on the right. You can edit the contents of the source code and click the blue <alert>update</alert> button in the corner of the viewer to see your changes reflected immediately!</p></li>
 
</ol>
  
</section>







  
</document>
