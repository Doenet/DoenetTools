<ref createButton="true" uri="doenet:doenetId=DG5JOeFNTc5rpWuf2uA-q">Back to Component Index</ref>

<document><title><tage>line</tage> component</title>

<section><title>Associated Attributes</title>
<ul>
  <li><attr>through</attr> <em>(_pointListComponent)</em></li>
  <li><attr>slope</attr> <em>(number)</em></li>
  <li><attr>draggable</attr> <em>(boolean)</em></li>
  <li><attr>equation</attr> <em>(math)</em></li>
  <li><attr>variables</attr> <em>(variables)</em></li>
  <aside startOpen="true"><title><alert>Inherited from parent component/  <c>GraphicalComponent</c>:</alert></title>
  <li><attr>label</attr> <em>(text)</em></li>
  <li><attr>showLabel</attr> <em>(boolean)</em></li>
  <li><attr>layer</attr> <em>(number)</em></li>
  </aside>
</ul>

</section>


<section><title>Description</title>
  <p>The <tage>line</tage><idx><tage>line</tage></idx> component renders a line when nested inside a <ref uri="doenet:doenetID=W7UM-eMckhRS3ktGSUR6B"><tag>graph</tag></ref> component, and renders an equation otherwise.  Current functionality supports generation of lines in <m>\mathbb{R^2}</m> through user-specification of:  (1) a single pair of <ref uri="doenet:doenetId=gN8NlDY3WLRc7jgAvXKXm"><tag>point</tag></ref>s, or (2) through a single point and a specified slope, or (3) with an equation, or <ref uri="doenet:doenetId=Jwl0ys4sdoUIkguMBx0he"><tag>function</tag></ref>. Lines are by default draggable for interactive activities.  See examples below for details on specific attribute usage. </p>
</section> 
  
<section><title>Usage Examples</title>

<subsection newNameSpace><title>Example 1: 
 Basic Line using the "through" attribute</title>
<p>In the sample code below, the <tage>line</tage> component is specified along
with two points it passes through using the <attr>through</attr> attribute.</p>

<example boxed="true"><title>Sample DoenetML code</title>  
<pre> 
&lt;graph width="300px" height="300px"&gt;
    &lt;line name="line" through="(4,2) (2,1)" /&gt;
&lt;/graph&gt;

&lt;p&gt;The equation of the line is:  &lt;copy prop="equation" tname="line" displayDecimals="2"/&gt;
&lt;/p&gt;
</pre>
  </example>
</subsection>
    
<!--*******************************************************-->
 
<example><title>What Doenet Renders (Example 1)</title>
<graph width="300px" height="300px">
    <line name="line" through="(4,2) (2,1)" />
  </graph>
  <p>The equation of the line is:  <copy prop="equation" tname="line" displayDecimals="2"/></p>
</example>
  
<!--*******************************************************-->
 
<subsection><title>Example 2:  Construct a line using the "through" attribute, using the setup block and named points</title>
<p>In the sample code below, two points are defined with the <ref uri="doenet:doenetId=gN8NlDY3WLRc7jgAvXKXm"><tag>point</tag></ref> component, and named within a <ref uri="doenet:doenetId=gHn9-Jhc4JFQpUKxVPCE2"><tag>setup</tag></ref> block.  The <tage>line</tage> is also defined and named within the <tag>setup</tag>.  These graphical components are then used as inputs within the <tag>graph</tag>.</p>

<example boxed="true"><title>Sample DoenetML code (Example 2)</title>
    <pre>
&lt;setup&gt;
    &lt;point name="A" label="A"&gt;(1,1)&lt;/point&gt;
    &lt;point name="B" label="B"&gt;(-2,5)&lt;/point&gt;
    &lt;line name="AB" through="&dollar;A &dollar;B" label="Line AB"/&gt;
&lt;/setup&gt;

&lt;graph&gt;
    &dollar;A
    &dollar;B
    &dollar;AB
&lt;/graph&gt;
&lt;p&gt;The equation of the line through points A and B is:  &dollar;AB&lt;/p&gt;
</pre>
  </example>
</subsection>
  
<!--*******************************************************-->

<example><title>What Doenet Renders (Example 2)</title>
<setup>
    <point name="A" label="A">(1,1)</point>
    <point name="B" label="B">(-2,5)</point>
    <line name="AB" through="$A $B" label="Line AB"/>
  </setup>

  <graph width="300px" height="300px">
    $A
    $B
    $AB
  </graph>
  <p>The equation of the line through points A and B is:  $AB</p>
</example>

<!--*******************************************************-->

<aside newNameSpace><title>Edge case: More than two points</title>
  <p>DoenetML will always draw a line through the first 2 points listed. Three or more points may be named when specifying the attribute, but this command will not perform a linear regression.  For linear regression, see <ref><tage>bestFitLine</tage></ref>. Notice the behavior of point C when you drag the line around.</p>

<subsection><title>Sample DoenetML code:  Edge case with more than two points</title>
    <pre>
<tag>setup</tag>
    <tag>point name="A" label="A"</tag>(1,1)<tag>/point</tag>
    <tag>point name="B" label="B"</tag>(-1,5)<tag>/point</tag>
    <tag>point name="C" label="C"</tag>(4,-3)<tag>/point</tag>
    <tag>line name="ABC" through="<text>$</text>A <text>$</text>B <text>$</text>C" label="Line ABC"/</tag>
<tag>/setup</tag>

<tag>graph</tag>
    <text>$</text>A
    <text>$</text>B
    <text>$</text>C
    <text>$</text>ABC
<tag>/graph</tag>
    </pre>
</subsection>

  
<example><title>What Doenet Renders</title>
  <setup>
    <point name="A" label="A">(1,1)</point>
    <point name="B" label="B">(-1,5)</point>
    <point name="C" label="C">(4,-3)</point>
    <line name="ABC" through="$A $B $C" label="Line ABC"/>
  </setup>

  <graph>
    $A
    $B
    $C
    $ABC
  </graph>
</example>
        
</aside>
    
     
<!--*******************************************************--> 
 
<subsection><title>Example 3:  Construct a basic line with prescribed "slope" and "through" attributes</title>
<p>In the sample code below, a <tage>line</tage> is graphed using both the <attr>slope</attr> and <attr>through</attr> attributes.  The equation of the line graphed is rendered below the graph with the <ref><tage>copy</tage></ref> component.</p>

<example boxed="true"><title>Sample DoenetML (Example 3)</title>
    <pre>
&lt;graph width="300px" height="300px"&gt;
    &lt;line name="line" through="(4,2)" slope="1"/&gt;
    &lt;point&gt;(4,2)&lt;/point&gt;
&lt;/graph&gt;

&lt;p&gt;The equation of the line is:  &lt;copy prop="equation" tname="line" displayDecimals="2"/&gt;

</pre>
  </example>
</subsection>
   
<!--*******************************************************-->  

<example newNameSpace><title>What Doenet Renders (Example 3)</title>
 
  <graph width="300px" height="300px">
    <line name="line" through="(4,2)" slope="1"/>
    <point>(4,2)</point>
  </graph>
  <p>The equation of the line is:  <copy prop="equation" tname="line" displayDecimals="2"/></p>
      </example>
   


<!--*******************************************************--> 
  
<subsection><title>Example 4:  Construct a line with user-input slope and point values</title>
<p>In the sample code below, user-input is collected with the <ref><tag>mathInput</tag></ref> component, and a <tage>line</tage> is graphed by referencing the named input for the coordinates of a point and the slope.  The equation of the line graphed is rendered below the graph with the <ref><tage>copy</tage></ref> component.</p>

<example boxed="true"><title>Sample DoenetML code (Example 4)</title>
    <pre>
&lt;p&gt;Choose the coordinates for point A:
  (&lt;mathInput name="Ax"/&gt;,&lt;mathInput name="Ay"/&gt;)
&lt;/p&gt;

&lt;p&gt;Point A coordinates = 
    &lt;point name="pointA"&gt;(&dollar;Ax,&dollar;Ay)&lt;/point&gt;
&lt;/p&gt;

&lt;p&gt;Choose a slope, m, for the line:
    &lt;mathInput name="m"&gt;&lt;/mathInput&gt;
&lt;/p&gt;
  
&lt;graph width="300px" height="300px"&gt;
    &lt;point label="A"&gt;&dollar;pointA&lt;/point&gt;
    &lt;line name="lineA" through="&dollar;pointA" slope="&dollar;m" label="Line A"/&gt;    
&lt;/graph&gt;
  
&lt;p&gt;The equation of the line through point &dollar;pointA with slope &dollar;m is:  
      &lt;copy prop="equation" tname="lineA" displayDecimals="2"/&gt;
&lt;/p&gt;

</pre>
  </example>
</subsection>
  
<!--*******************************************************-->  

<example newNameSpace><title>What Doenet Renders (Example 4)</title>
<p>Choose the coordinates for point A:
  (<mathInput name="Ax"/>,<mathInput name="Ay"/>)
</p>
<p>Point A coordinates =   
  <point name="pointA">($Ax,$Ay)</point>
</p>
<p>Choose a slope, m, for the line:
    <mathInput name="m"></mathInput>
</p>
  <graph width="300px" height="300px">
    <point label="A">$pointA</point>
    <line name="lineA" through="$pointA" slope="$m" label="Line A"/>    
  </graph>
  <p>The equation of the line through point $pointA with slope $m is:  <copy prop="equation" tname="lineA" displayDecimals="2"/></p>
</example>
 
<!--*******************************************************-->
 
<subsection><title>Example 5:  Construct a non-draggable line with <attr>draggable</attr> and <attr>equation</attr> attributes</title>
<p>In the sample code below, the <attr>draggable</attr> attribute has been set to false; note that lines are draggable by default in Doenet.  In the <tag>graph</tag> component, the <tage>line</tage> is specified with the <attr>equation</attr> attribute.</p>

<example boxed="true"><title>Sample DoenetML code (Example 5)</title>
<pre>
&lt;graph&gt;
  &lt;line draggable="false" equation="y=2x+5" /&gt;
&lt;/graph&gt;
</pre>
  </example>
</subsection>
 
<!--*******************************************************-->  

<example newNameSpace><title>What Doenet Renders (Example 5)</title>
<graph>
  <line draggable="false" equation="y=2x+5" />
</graph>
</example>

<!--*******************************************************-->
 
<subsection><title>Example 6:  Construct a line with the <attr>variables</attr> and <attr>equation</attr> attributes</title>
<p>In the sample code below, variables other than <m>x</m> and <m>y</m> are specified with the <attr>variables</attr> attribute.  Note that the specification of <attr>variables</attr> should list the independent variable first, followed by the dependent variable.  The <attr>equation</attr> attribute is then used to define the line to be graphed with the alternate variables.</p>

<example boxed="true"><title>Sample DoenetML code (Example 6)</title>
<pre>
&lt;graph&gt;
  &lt;line  variables="r q" equation="2q+4=4r-2" label="A"/&gt;
  &lt;line variables="q r" equation="2q+4=4r-2" label="B"/&gt;
&lt;/graph&gt;
</pre>
  </example>
</subsection>
 
<!--*******************************************************-->  

<example newNameSpace><title>What Doenet Renders (Example 6)</title>
<graph>
  <line  variables="r q" equation="2q+4=4r-2" label="A"/>
  <line variables="q r" equation="2q+4=4r-2" label="B"/>
</graph>
</example>


<!--*******************************************************-->
  
<subsection><title>Example 7:  An alternative way to graph a line</title>
<p>In the sample code below, the line component is not utilized.  Instead, an altername means of graphing a line is shown.  A <tag>function</tag> of a line is defined within the <tag>setup</tag> block, and then referenced by name within the <tag>graph</tag> component.</p>

<example boxed="true"><title>Sample DoenetML code (Example 7)</title>
<pre>
&lt;setup&gt;
  &lt;function variables="t" name="f"&gt;-2t + 3&lt;/function&gt;
&lt;/setup&gt;
  
&lt;graph&gt;
  &dollar;f
&lt;/graph&gt;
</pre>
  </example>
</subsection>

<!--*******************************************************-->  

<example newNameSpace><title>What Doenet Renders (Example 7)</title>

<setup>
  <function variables="t" name="f">-2t + 3</function>
</setup>
<graph>
  $f
</graph>
  
</example>
 

</section>
</document>

