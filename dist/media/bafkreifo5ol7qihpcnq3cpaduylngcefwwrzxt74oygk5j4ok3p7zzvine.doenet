<ref createButton="true" uri="doenet:doenetId=DG5JOeFNTc5rpWuf2uA-q">Back to Component Index</ref>

<document><title><tage>collect</tage> component</title>

<section><title>Associated Attributes</title>
<ul>
  <li><attr>assignNamesSkip</attr>  <em>(number)</em></li>
  <li><attr>prop</attr>  <em>(string)</em></li>
  <li><attr>maximumNumber</attr>  <em>(number)</em></li>
  <li><attr>componentIndex</attr>  <em>(number)</em></li>
  <li><attr>propIndex</attr>  <em>(number)</em></li>
  <li><attr>targetAttributesToIgnore</attr>  <em>(textList)</em></li>
  <li><attr>componentTypes</attr>  <em>(textList)</em></li>
</ul>

</section>


<section><title>Description</title>
<!--use <ref> on all component names (other than the one indexed from this file) in this section only-->
  <p>The <tag>collect</tag><idx><tage>collect</tage></idx> component gathers data from a graph or sectional component and stores it in a list.  The types of components that can be stored include points, lines and functions, among others. 
 See examples below.</p>
</section> 

  
<section><title>Usage Examples</title>

<subsection><title>Example 1:  Collecting point data from a graph</title>
<p>In the sample code below, the <tage>collect</tage> component is used to store data on the coordinates of the points using the <attr>componentTypes</attr> attribute with the specification <c>"point"</c>.  The target name, or the location from which these points are to be taken, is specified with the <attr>tname</attr> attribute, and refers to the <ref><tag>graph</tag></ref> named <c>"pointGraph"</c>.  Below the graph, the collected coordinates are rendered in the viewer using the <ref><tag>asList</tag></ref> component and by reference to the name of the collection, <c>"pointGroup"</c>. </p>

<example boxed="true"><title>Sample DoenetML code (Example 1)</title>
<pre>
&lt;setup&gt;
  &lt;collect name="pointGroup" componentTypes="point" tname="pointGraph"/&gt;
&lt;/setup&gt;

&lt;graph name="pointGraph"&gt;
  &lt;point name="p1" displayDecimals="2" label="p1"&gt;(0,2)&lt;/point&gt;
  &lt;point name="p2" displayDecimals="2" label="p2"&gt;(7,3)&lt;/point&gt;
  &lt;point name="p3" displayDecimals="2" label="p3"&gt;(6,4)&lt;/point&gt;
&lt;/graph&gt;

&lt;p&gt;Click and drag the points to see how the collected list of coordinates is updated:&lt;/p&gt;
&lt;p&gt;The set of graphed points, &lt;m&gt;\{p1, p2, p3 \}&lt;/m&gt; =
  &lt;m&gt;\{&lt;/m&gt;
    &lt;asList&gt;&dollar;pointGroup&lt;/asList&gt;
  &lt;m&gt;\}&lt;/m&gt;
&lt;/p&gt;
</pre>
 
  </example>  
</subsection>
<!--*******************************************************-->
 
<example><title>What Doenet Renders (Example 1)</title>
<setup>
  <collect name="pointGroup" componentTypes="point" tname="pointGraph"/>
</setup>

<graph name="pointGraph">
  <point name="p1" displayDecimals="2" label="p1">(0,2)</point>
  <point name="p2" displayDecimals="2" label="p2">(7,3)</point>
  <point name="p3" displayDecimals="2" label="p3">(6,4)</point>
</graph>

<p>Click and drag the points to see how the collected list of coordinates is updated:</p>
<p>The set of graphed points, <m>\{p1, p2, p3 \}</m> = <m>\{</m><asList>$pointGroup</asList><m>\}</m></p>
</example>


<!--******************************************************-->

<subsection><title>Example 2: <tage>collect</tage> can store multiple component types</title>
<p>In the sample code below, the <tage>collect</tage> component is used in a similar capacity to what is illustrated in Example 1.  In this example, however, both <ref><tag>point</tag></ref> and <ref><tage>line</tage></ref> components are collected with the attribute <attr>componentTypes</attr>.</p>

<example boxed="true"><title>Sample DoenetML code (Example 2)</title>
<pre>
&lt;setup&gt;
  &lt;collect name="group1" componentTypes="point line" tname="linesGraph"/&gt;
  &lt;point name="a" displayDecimals="1" label="a"&gt;(2,1)&lt;/point&gt;
  &lt;point name="b" displayDecimals="1" label="b"&gt;(-3,2)&lt;/point&gt;
  &lt;point name="c" displayDecimals="1" label="c"&gt;(5,1)&lt;/point&gt;
&lt;/setup&gt;

&lt;graph name="linesGraph"&gt;
  &dollar;a &dollar;b &dollar;c
  &lt;line name="line_ab" through="&dollar;a &dollar;b" label="Line-ab" /&gt;
  &lt;line name="line_bc" through="&dollar;b &dollar;c" label="Line-bc" /&gt;
&lt;/graph&gt;

&lt;p&gt;Click and drag the lines or points to see how the collected list of coordinates and lines is updated:&lt;/p&gt;
&lt;p&gt;The set of graphed points and lines, &lt;/p&gt;
  &lt;m&gt;\{a, b, c, &lt;/m&gt;Line-ab, Line-bc &lt;m&gt; \}&lt;/m&gt;
  = &lt;m&gt;\{&lt;/m&gt;&lt;asList&gt;&dollar;group1&lt;/asList&gt;&lt;m&gt;\}&lt;/m&gt;
&lt;p&gt;The point of intersection of the two lines is:
  &lt;m&gt;b = &dollar;b&lt;/m&gt;
&lt;/p&gt;
</pre>
 
  </example>  
</subsection>

<!--*******************************************************-->

<example newNameSpace><title>What Doenet Renders (Example 2)</title>
<setup>
  <collect name="group1" componentTypes="point line" tname="linesGraph"/>
  <point name="a" displayDecimals="1" label="a">(2,1)</point>
  <point name="b" displayDecimals="1" label="b">(-3,2)</point>
  <point name="c" displayDecimals="1" label="c">(5,1)</point>
</setup>

<graph name="linesGraph" grid="true">
  $a $b $c
  <line name="line_ab" through="$a $b" label="Line-ab" />
  <line name="line_bc" through="$b $c" label="Line-bc" />
</graph>

<p>Click and drag the lines or points to see how the collected list of coordinates and lines is updated:</p>
<p>The set of graphed points and lines, </p>
  <m>\{a, b, c, </m>Line-ab, Line-bc <m> \}</m>
  = <m>\{</m><asList>$group1</asList><m>\}</m>
<p>The point of intersection of the two lines is:
  <m>b = $b</m>
</p>

</example>


<!--******************************************************-->
    
<subsection><title>Example 3: Collect function data</title>
<p>The sample code below illustrates that <tage>collect</tage> can be used for <ref><tag>function</tag></ref> components as well as graphical components and that the set of data collected need not be contained in a <ref><tag>graph</tag></ref>.  Any sectional component or module can be used with the <attr>tname</attr> attribute inside the <tage>collect</tage> component.</p>

<example boxed="true"><title>Sample DoenetML code (Example 3)</title>
<pre>
&lt;setup&gt;
  &lt;collect name="quadraticFunctions" componentTypes="function" tname="defineQuadratics"/&gt;
&lt;/setup&gt;

&lt;subsection name="defineQuadratics" hide="true"&gt;
  &lt;function name="f"&gt;x^2 - 2&lt;/function&gt;
  &lt;function name="g"&gt;-(x^2)/2+4&lt;/function&gt;
  &lt;function name="h"&gt;(x^2)/3-1&lt;/function&gt;
&lt;/subsection&gt;

&lt;p&gt;The collected functions are: &lt;m&gt;\{f(x),g(x),h(x)\} = 
  \{&lt;/m&gt;
    &lt;asList&gt;&dollar;quadraticFunctions&lt;/asList&gt;
  &lt;m&gt;\}&lt;/m&gt;
&lt;/p&gt;

&lt;graph&gt;
  &dollar;quadraticFunctions
&lt;/graph&gt;
</pre>
 
        </example>  
      </subsection>

<!--*******************************************************-->
 
<example newNameSpace><title>What Doenet Renders (Example 3)</title>
<setup>
  <collect name="quadraticFunctions" componentTypes="function" tname="defineQuadratics"/>
</setup>

<subsection name="defineQuadratics" hide="true">
<function name="f">x^2 - 2</function>
<function name="g">-(x^2)/2+4</function>
<function name="h">(x^2)/3-1</function>
</subsection>

<p>The collected functions are: <m>\{f(x),g(x),h(x)\} =   
\{</m><asList>$quadraticFunctions</asList><m>\}</m></p>

<graph>
  $quadraticFunctions
</graph>
</example>



<!--******************************************************-->

<subsection><title>Example 4:  <tage>collect</tage> with <tag>map</tag> generated points</title>
<p>In the sample code below, the points collected from the graph are generated by a <ref><tag>map</tag></ref>.  This map takes the number of points specified by the user in a <ref><tag>mathInput</tag></ref>, and applies a <ref><tag>template</tag></ref> to a sequence generated by this input to establish the points' initial coordinates.  The steps of this process are as follows:  </p>
<ol>
  <li><p>First, within <ref><tag>sources</tag></ref> (Line[17]) , the <tag>mathInput</tag> named <c>"n"</c> specified by the user is used to construct a <ref><tag>sequence</tag></ref> whose <attr>length</attr> is <c>"n"</c> (note, the step-size for this <tag>sequence</tag> defaults to one unless specified otherwise.)  The elements in this sequence are the input for the <ref><tag>sources</tag></ref>, and are given the <attr>alias</attr> <c>"i"</c> for use within the <tag>map</tag> block.</p></li>
  <li><p>Next, within the <tag>template</tag>, the single index value <c>"i"</c> is used to generate two independent indexing values (namely <c>"j"</c> and <c>"k"</c>) for the <m>x</m> and <m>y</m> coordinates with the <ref><tag>copy</tag></ref> component and the <attr>assignNames</attr> attribute (Lines [11-12]).  These separated, independent indices now allow for the user to freely move the points in any direction after they have been sent to their initial positions.</p></li>  
  <li><p>Next, the <ref><tag>point</tag></ref> component within the <tag>template</tag> sets the initial positions of each point by referencing the two index sequence values (<c>"j"</c> and <c>"k"</c>) within its <attr>x</attr> and <attr>y</attr> attributes (Line [14]).</p></li>
  <li><p>The positional data for each point (both initial position and after the user repositions each point), are then gathered from the <tag>graph</tag> named <c>"pointsGraph"</c> with the <tag>collect</tag> component. (Line [2]).</p></li>
  <li><p>This collection of positional data, named "<c>positions</c>", is referenced by the <ref><tag>bestFitLine</tag></ref> in the <attr>points</attr> attribute and is called within the <tag>graph</tag> (Line [21]) in order to render the line.</p></li>
  <li><p>Finally, the equation for the line of best fit, named <c>"bestLine</c>" is rendered to the viewer using the <tag>copy</tag> component below the graph (Line [26]) with the target name or <attr>tname</attr> attribute set equal to <c>"bestLine"</c>.</p></li>
</ol>

<example boxed="true"><title>Sample DoenetML code (Example 4)</title>
<pre>
[1]  &lt;setup&gt;
[2]    &lt;collect name="positions" componentTypes="point" tname="g" /&gt;
[3]  &lt;/setup&gt;
[4]
[5]  &lt;p&gt;Number of points &lt;mathInput name="n" prefill="4" /&gt;&lt;/p&gt;
[6]
[7]  &lt;graph name="g"&gt;
[8]    &lt;map&gt;
[9]    &lt;template&gt;
[10]      &lt;setup&gt;
[11]        &lt;copy prop="value" link="false" tname="i" assignNames="j" /&gt;
[12]        &lt;copy prop="value" link="false" tname="i" assignNames="k" /&gt;
[13]      &lt;/setup&gt;
[14]      &lt;point x="-10+&dollar;j/2" y="10-&dollar;k/2" /&gt;
[15]    &lt;/template&gt;
[16]    &lt;sources alias="i"&gt;
[17]          &lt;sequence length="&dollar;n"/&gt;
[18]    &lt;/sources&gt;
[19]  &lt;/map&gt;
[20]
[21]    &lt;bestFitLine points="&dollar;positions" name="bestLine" /&gt;
[22]
[23]  &lt;/graph&gt;
[24]
[25]  &lt;p&gt;Equation of best fit line: 
[26]    &lt;copy prop="equation" tname="bestLine" displayDecimals="3"   /&gt;
[27]  &lt;/p&gt;
</pre>
 
        </example>  
      </subsection>

<!--*******************************************************-->

<example><title>What Doenet Renders (Example 4)</title>
<setup>
  <collect name="positions" componentTypes="point" tname="pointsGraph" />
</setup>

<p>Number of points <mathInput name="n" prefill="4" /></p>

<graph name="pointsGraph">
  <map>
    <template>
      <setup>
        <copy prop="value" link="false" tname="i" assignNames="j" />
        <copy prop="value" link="false" tname="i" assignNames="k" />
      </setup>
      <point x="-10+$j/2" y="10-$k/2" />
    </template>
    <sources alias="i"><sequence length="$n" /></sources>
  </map>

  <bestFitLine points="$positions" name="bestLine" />

</graph>

<p>Equation of best fit line: <copy prop="equation" tname="bestLine" displayDecimals="3" /></p>
</example>

  
</section>
</document>














