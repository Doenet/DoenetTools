<problem>
<!-- <title>Forward Euler - pure time introduction</title> -->

<setup>


<math name="dxdt" functionSymbols="x">x '(t)</math>
<function name='ff' variables='t'>2*t-1</function>
<math name='x0'>-5</math>
<evaluate name="f0" function="$ff" input="0" />
<math name='x0_sym' functionSymbols="x">x (0)</math>

<math name='xp0_sym' functionSymbols="x">x '(0)</math>
<math name='f0_sym'>f(0)</math>
<math name="dxdt_a" functionSymbols="x">x '(a)</math>
<math name='tans'>t</math>
<number name='end'>4</number>
<number name='mid'>$end /2</number>
<number name='end_in_one'>$x0 +$f0 *$end </number>
<number name='mid_in_one'>$x0 +$f0 *$mid </number>
<number name='f_mid'>$$ff($mid )</number>
<number name='end_in_two'>$mid_in_one +$f_mid *$mid </number>
<function name='t_minus_mid' variables='t'>t-$mid </function>
<function name='xfun' variables='t'>t^2-t+$x0 </function>
<number name='xfun_end'>$$xfun($end )</number>
<number name='almostend'>$end -.001</number>

<math name="deltat">Delta t</math>
<math name='numsteps' simplify='numbers' >(T-a)/($deltat )</math>
<math name='xone' simplify='numbers' functionSymbols="x" >x (a+$deltat )</math>
<math name='xtwo' simplify='numbers' functionSymbols="x" >x (a+2*$deltat )</math>
<math name='deltat_set' simplify='numbers' >$end /8</math>
<number name='x1'>$x0 +$f0 *$deltat_set </number>
<evaluate function="$ff" input="$deltat_set" name="f1" />
<number name='x2'>$x1  + $f1 *$deltat_set </number>
<number name='t2'>$deltat_set *2</number>
<evaluate function="$ff" input="$t2" name="f2" />
<number name='x3'>$x2 +$f2 *$deltat_set </number>
<number name='t3'>$deltat_set *3</number>
<evaluate function="$ff" input="$t3" name="f3" />
<number name='x4'>$x3 +$f3 *$deltat_set </number>
<evaluate function="$ff" input="4*$deltat_set" name="f4" />
<evaluate function="$ff" input="5*$deltat_set" name="f5" />
<evaluate function="$ff" input="6*$deltat_set" name="f6" />
<evaluate function="$ff" input="7*$deltat_set" name="f7" />
<number name='x5'>$x4 +$f4 *$deltat_set </number>
<number name='x6'>$x5 +$f5 *$deltat_set </number>
<number name='x7'>$x6 +$f6 *$deltat_set </number>
<number name='x8'>$x7 +$f7 *$deltat_set </number>
<number name='xfun_mid'>$$xfun($mid )</number>
<number name='deltat_setb'>$end /4</number>
<number name='x1b'>$x0 +$f0 *$deltat_setb </number>
<evaluate function="$ff" input="$deltat_setb" name="f1b" />
<number name='x2b'>$x1b  + $f1b *$deltat_setb </number>
<number name='t2b'>2*$deltat_setb </number>
<evaluate function="$ff" input="$t2b" name="f2b" />
<number name='x3b'>$x2b  + $f2b *$deltat_setb </number>
<number name='t3b'>3*$deltat_setb </number>
<evaluate function="$ff" input="$t3b" name="f3b" />
<number name='x4b'>$x3b  + $f3b *$deltat_setb </number>
<number name='t4b'>4*$deltat_setb </number>

</setup>


In this problem, we will explore a method for approximating solutions to differential equations.  Let's consider the pure-time differential equation

<md>
  <mrow>$dxdt \amp = f(t)</mrow>
  <mrow>x (0)\amp = $x0 </mrow>
</md>

where <m>f(t) = <copy prop="formula" tname="ff" /></m>.


<ol>

<li>
<p>Recall that the derivative, along with a point, can be used to find the 
<ref uri='doenet:doenetId=lMhfI0xiRJlj87G0kasvH'>linear approximation</ref>
 (or tangent line) to a function.  Even though we might not know what <m>x (t)</m> is, we can still use the initial condition and the derivative to find the linear approximation.  Remember that the formula for the linear approximation at <m>t=a</m> is <m>L_a(t) = x (a)+$dxdt_a  (t-a)</m>.  Write down the linear approximation for <m>x (t)</m> at <m>t=0</m>.
</p>
<p>

<m>L_0(t) =</m> 
<mathinput functionSymbols="x" name="L0a" />
 <m>+</m> 
 <mathinput functionSymbols="x f" name="L0b" />
 <m>\cdot \, (</m> 
 <mathinput name="L0c" />
 <m>) = </m> <mathinput name="L0d" />

<answer matchPartial nAwardsCredited="4" name="L0">
  <award targetsAreResponses="L0a L0b L0c L0d">
    <when>
      $L0a = $x0 and $L0b = $f0 and $L0c=t and $L0d = <math>$x0+$f0*t</math>
    </when>
  </award>
  <award credit="0" name="awardX0"><when>$L0a = $x0_sym</when></award>
  <award credit='0' name='awardxp0'><when>$L0b = $xp0_sym </when></award>
  <award credit='0' name='awardf0'><when>$L0b = $f0_sym </when></award>
</answer>
</p>


<feedback condition="$awardX0">Right idea for the first answer blank, but according to the given information, what is the value of <m>x(0)</m>?</feedback>
<feedback condition="$awardxp0">Right idea for the second answer blank, but according to pure-time differential equation, what is the value of <m>x'(0)</m>?</feedback>
<feedback condition="$awardf0">Yes, the pure-time differential equation says that <m>x'(0)=f(0)</m>.  Now use the formula for <m>f(t)</m> to calculate a number for <m>f(0)</m>.</feedback>

<hint hide="$(L0{prop='nSubmissions'}) <3">

  <p>The formula for the 
<ref uri='doenet:doenetId=lMhfI0xiRJlj87G0kasvH'>linear approximation</ref>
 of a function <m>x(t)</m> at <m>t=0</m> is <m>L_0(t) = x(0) + x'(0)(t-0)</m>.  Now, you just need to figure out the values of <m>x(0)</m> and <m>x'(0)</m>.</p>
  
  <p>How are you going to determine what <m>x(0)</m> is?  It's given to you directly as the initial condition. <m>x(0) = </m> <answer weight="0">$x0</answer></p>

  <p> How are you going to determine what <m>x'(0)</m> is?  Plugging in <m>t=0</m> into the differential equation gives you a formula for <m>x'(0)</m>.  And, since you know what the function <m>f(t)</m> is, you can plug in the formula for <m>f(t)</m> to get a number for <m>x'(0)</m>.
 <m>x'(0) =</m> <answer weight="0">
    <award>$f0</award>
   <award credit="0" name="awardf0hint">$f0_sym</award>
  </answer>
  </p>

  <feedback condition="$awardf0hint                ">Yes, the pure-time differential equation says that <m>x'(0)=f(0)</m>.  Now use the formula for <m>f(t)</m> to calculate a number for <m>f(0)</m>.</feedback>

  <p>Substituting those two numbers in <m>x(0)+x'(0)(t-0)</m> will give the formula for <m>L_0(t)</m>.</p>
</hint>

<hint>
<p>Plug in <m>a=0</m> into the linear approximation formula and then substitute values for <m>x'(0)</m> and <m>x(0)</m> from the pure-time differential equation.</p>
<p>
Even though the linear approximation involves a derivative, you will not need to take any derivatives, as you are given the formula for the derivative in the statement of the differential equation. <!--  The hard part isn't determining the derivative <m>x '(t)</m>, instead it is estimating the values of the function <m>x (t)</m> itself. -->
</p>
</hint>

<p>Suppose we want to know what <m>x  ($end )</m> is.  We could estimate it by plugging <m>$end </m> into the linear approximation.  What does that give us?
</p>
<p>

<m>L_0($end ) =</m> 
<answer>
<award>$end_in_one </award>
</answer>
</p>

<p>In general, what do we know about the error of the linear approximation (in other words, the difference between a function and its linear approximation)? 
<answer inline='true'>
<choiceinput>
<choice credit='1'>The error is small when t is close to a and get larger as t moves away from a.</choice>
<choice>The error is the same for all t.</choice>
<choice>The error is larger when t is close to a and gets smaller as t moves away from a.</choice>
</choiceinput>
</answer>
</p>




</li>

<li>
<p>Is this close to the actual value?  Probably not, because we assumed that the linear approximation calculated at <m>t=0</m> was still valid all the way until <m>t=$end</m>.</p>

<p>Rather than taking one large step from <m>0</m> all the way to <m>$end </m>, we could break up the approximation into two steps, where each step is smaller.   We could use the linear approximation at <m>t=0</m> to find an estimate for <m>t=$mid </m>.  Once we have an estimate for <m>x ($mid )</m>, we can calculate another linear approximate based on that new value and use that new linear approximation to estimate <m>x ($end )</m>.</p>

<p>For the first step, we plug <m>t=$mid </m> into the linear approximation we found at <m>t=0</m> (i.e., the formula you calculated in part 1):
</p>
<p>

<m>L_0($mid )=</m> 
<answer>
<award>$mid_in_one </award>
</answer>
 </p>

<p>We use the value of <m>L_0($mid)</m> as an estimate of <m>x($mid)</m>, i.e., we approximate <m>x($mid) \approx </m> <answer>$mid_in_one</answer>.</p>

<p>For the second step, use this estimate of <m>x ($mid )</m> and create a new linear approximation at <m>t=$mid </m>:
</p>
<p>

<me>L_$mid (t)=x ($mid ) + x '($mid ) (t-$mid )</me>
</p>
  
<p>Given this estimate of <m>x($mid)</m>, the only new information you'll need is the derivative <m>x '($mid )</m>.  You can look up that value directly from the differential equation, above.  (Again, no taking derivatives here.)  Plugging in <m>t=$mid</m> in to the differential equation, you can calculate that <m>x'($mid)=</m> <answer>$f_mid</answer>.</p>

  
<p>
<m>L_$mid (t)=</m> 
<answer>
<award>$mid_in_one+$f_mid*$t_minus_mid</award>
</answer>
</p>

<hint>
<p>What do we use for <m>x($mid)</m>?  We use the estimate <m>L_0(2)=</m> <answer weight="0">$mid_in_one</answer>.</p>

<p>We know what <m>x'($mid )</m> is from the differential equation. <m>x'($mid) = </m> <answer>$f_mid</answer>.</p>

<p>Plug those two numbers into the formula 
  <me>L_$mid (t)=x ($mid ) + x '($mid ) (t-$mid ).</me></p>
</hint>

<p>
Use <m>L_2(t)</m> to estimate <m>x ($end )</m>.
</p>
<p>

<m>L_$mid ($end ) =</m> 
<answer>
<award>$end_in_two </award>
</answer>

</p>

<p>This estimate is quite different from the estimate in part 1.  Does that necessarily mean that it is a better estimate? 
<answer inline='true'>
<choiceinput>
<choice credit='1'>no</choice>
<choice>yes</choice>
</choiceinput>
</answer>
</p>





</li>

<li>
<p>To determine which answer is better, we will cheat and calculate the answer from the solution to our particular differential equation, which is <m>x (t)=<copy prop="formula" tname="xfun" /></m>.  (In more difficult cases, we won't know the actual solution, which is why we'd use the Forward Euler algorithm.)   Given the solution, the actual value is <m>x  ($end ) =</m> 
<answer symbolicEquality>
<award>$xfun_end </award>
</answer>
.  Which of our estimates is closer? 
<answer inline='true'>
<choiceinput>
<choice>The estimate from part 1 is closer</choice>
<choice credit='1'>The estimate from part 2 is closer.</choice>
<choice>The two estimates are equally close.</choice>
</choiceinput>
</answer>
 Is either one a good estimate? 
<answer inline='true'>
<choiceinput>
<choice name='choice52'>yes</choice>
<choice credit='1'>no</choice>
</choiceinput>
</answer>.</p>
<feedback condition="$choice52" >Technically, that would depend on your definition of good, but when your estimate is not even the same sign, it's probably not a good one.</feedback>

<p>The problem with the second estimate is it assumes each linear approximation is valid over time intervals of length <m>$mid</m>, i.e., it assumed that <m>L_0(t)</m> was valid all the way until <m>t=$mid</m> and it assumed that <m>L_$mid(t)</m> was valid all the way until <m>t=$end</m>.</p>

<p>How can we fix this problem? 
<answer inline='true'>
<choiceinput>
<choice>Do nothing.</choice>
<choice credit='1'>Repeat the process with smaller time intervals.</choice>
<choice>Cross your fingers, hope you made a mistake in your calculations, and redo them.</choice>
</choiceinput>
</answer></p>

<p>If we use each linear approximation for just a short time interval, we'll need to calculate many different linear approximations to get all the way to <m>t=$end</m>.  But, if we do that, the estimate for <m>x  ($end )</m> will approach the actual value.  If we wanted to, we could take the time intervals to be very small (perhaps getting estimates at <m>t=.001</m>, <m>t=.002</m>, <m>t=.003</m>, all the way up to <m>t=$almostend </m> and <m>t=$end </m>), which would result in a very close estimate. What is the problem with this approach? 
<answer inline='true'>
<choiceinput>
<choice credit='1'>It will take much more time to find our estimate with such a small time step.</choice>
<choice name='choice29'>We have to deal with decimals.</choice>
<choice>There is no problem with this.</choice>
</choiceinput>
</answer>
</p>
<feedback condition="$choice29" >While true, this is not the real problem.</feedback>

<p>Typically we'll use a computer program so we don't have to do all these repetitive steps manually.  Even so, we often have to struggle with a tradeoff between accuracy and computational time, especially with <q>difficult problems</q> where the time step we want for accuracy might make the computer program take too long to run.</p>



</li>

<li name="sketchdt2" newNamespace>

<p>This approach to estimating solutions with successive linear approximations is known as the <em>Forward Euler algorithm</em> for solving differential equations.</p>  

<p>The following applet will help you sketch your Forward Euler approximation for <m>\Delta t=2</m>.  Follow the instructions to sketch the above two linear approximation to end up with the estimate of <m>x(4)</m> you calculated above.</p> 

<p>For comparison, the exact solution <m>x (t)=<copy prop="formula" tname="../xfun" /></m> is also shown, along with the tangent lines that you can use to estimate the slopes of the linear approximations.</p>

<setup>
  <number name="step">1</number>
  <number name="Nsteps">4</number>
  <number name="deltat">2</number>
  <number name="two_deltat">2*$deltat</number>


  <evaluate name="x1Exact" function="$(../xfun)" input="$deltat" />

  <copy tname="../x0" assignNames="x0" />


  <point name="T1" x="$deltat" y="$(../mid_in_one)" />
  <point name="T2" x="2$deltat" y="$(../end_in_two)" />


  <number name="m1Target">-1</number>
<!--   <number name="x1Target">$x0 + $m1Target*$deltat</number> -->
  <number name="m2Target">3</number>
<!--   <number name="x2Target">$x1Target + $m2Target*$deltat</number> -->


  <conditionalContent assignNames="(t1 x1)">
    <case condition="$step <= 2">
      <copy prop="x" tname="P1b" displayDigits="3" />
      <copy prop="y" tname="P1b" displayDigits="3" />
    </case>
    <else>
      $deltat $(../x1b)
    </else>
  </conditionalContent>

  <conditionalContent assignNames="(t2 x2)">
    <case condition="$step > 2 and $step <= 4">
      <copy prop="x" tname="P2b" displayDigits="3" />
      <copy prop="y" tname="P2b" displayDigits="3" />
    </case>
    <else>
      <number>2$deltat</number> $(../x2b)
    </else>
  </conditionalContent>


  <updateValue triggerWhen="$m1 = $m1Target" tname="l1Style" newValue="4" />
  <updateValue triggerWhen="$m1 != $m1Target" tname="l1Style" newValue="5" />

  <updateValue triggerWhen="$m2 = $m2Target" tname="l2Style" newValue="4" />
  <updateValue triggerWhen="$m2 != $m2Target" tname="l2Style" newValue="5" />

  <boolean name="disableNext">
    ($step=1 and $m1 != $m1Target) or
    ($step=2 and $t1 != $deltat) or
    ($step=3 and $m2 != $m2Target) or
    $step=4
  </boolean>
</setup>



<graph width='500' height='400' xmin='-1' xmax='6' ymin='-11' ymax='9' fixAxes xlabel="t" ylabel="x" >
  <function fixed styleNumber="4">$(../xfun)</function>
  <line hide="$step !=1" styleNumber="6" fixed>y=$x0 + $m1Target*x</line>
  <line hide="$step !=3" styleNumber="6" fixed>y=$x1Exact + $m2Target*(x-$deltat)</line>
  <line hide="$step !=3" styleNumber="6" fixed>x=$deltat</line>


  <point fixed x="0" y="$x0" name="IC" />


  <conditionalContent condition="$step <= 2">
    <setup>
      <copy prop="slope" tname="l1" displayDigits="3" assignNames="m1" />
      <number name="l1Style">5</number>
    </setup>

    <line name="lineSlope1" through="$IC" slope="$m1Target" hide />
    <point hide="$step !=1" x="1" y="2" name="P1" styleNumber="1" layer="1">
      <constraints>
        <attractTo>$lineSlope1</attractTo>
      </constraints>
    </point>
    <line through="$IC $P1" styleNumber="$l1Style" draggable="false" label="slope = $m1" name="l1" hide="$step=2 and $P1b = $T1" layer="1" />

    <point hide="$step < 2" fixed="$step != 2" name="P1b" styleNumber="1" x="0.5" y="-6" layer="1">
      <constraints>
        <constrainTo>$l1</constrainTo>
        <attractTo threshold="0.2">$T1</attractTo>
        <constrainToGraph />
      </constraints>
    </point>

  </conditionalContent>

  <conditionalContent assignNames="(seg1)">
    <case condition="$step <= 2">
      <lineSegment fixed hide="$step < 2" endpoints="$IC $P1b" styleNumber="1" layer="1" />
    </case>
    <else>
      <lineSegment fixed endpoints="$IC $T1" styleNumber="1" layer="1" />
    </else>
  </conditionalContent>


  <conditionalContent condition="$step > 2">
    <setup>
      <copy prop="slope" tname="l2" displayDigits="3" assignNames="m2" />
      <number name="l2Style">5</number>
    </setup>

    <line name="lineSlope2" through="$T1" slope="$m2Target" hide />
    <point hide="$step !=3" x="5" y="-4" name="P2" styleNumber="1" layer="1">
      <constraints>
        <attractTo>$lineSlope2</attractTo>
      </constraints>
    </point>
    <line through="$T1 $P2" styleNumber="$l2Style" draggable="false" label="slope = $m2" name="l2" hide="$step = 4 and $P2b = $T2" layer="1" />

    <point hide="$step < 4" fixed="$step != 4" name="P2b" styleNumber="1" x="1.1" y="-3" layer="1">
      <constraints>
        <constrainTo>$l2</constrainTo>
        <attractTo threshold="0.2">$T2</attractTo>
        <constrainToGraph />
      </constraints>
    </point>
  </conditionalContent>

  <conditionalContent assignNames="(seg2)">
    <case condition="$step = 4">
      <lineSegment fixed endpoints="$T1 $P2b" styleNumber="1" layer="1" />
    </case>
  </conditionalContent>
  

</graph>



<sideBySide>
<aside boxed collapsible="false">
  <title>Instructions</title>

<conditionalContent>
  <case condition="$step = 1">

    <p>Step 1 of $Nsteps: draw the linear approximation at <m>t=0</m>.</p>

    <p>Move the point so that the line has the slope <m>x'(0)</m> and represents <m>L_0(t)</m>.</p>

    <p>Line drawn is <m>L_0(t) = <math displayDigits="3" simplify="numbersPreserveOrder">$x0 + $m1 t</math></m>.</p>

    <p hide="$m1 != $m1Target">Line is correct!  Click Next to continue.</p>
  </case>
  <case condition="$step=2">
    <p>Step 2 of $Nsteps.  Use the linear approximation <m>L_0(t)</m> to estimate <m>x($deltat)</m>.</p>

    <p>Move the point along the line <m>x = L_0(t)</m> to estimate <m>x($deltat)</m>.</p>

    <p>Estimate from <m>L_0(t)</m>:  <m>x($t1) = $x1</m></p>

    <p hide="$t1 != $deltat">Estimate completed!  Click Next to continue.</p>
  </case>
  <case condition="$step = 3">

    <p>Step 3 of $Nsteps: draw the linear approximation at <m>t=$deltat</m>.</p>

    <p>Move the point so that the line has the slope <m>x'($deltat)</m> and represents <m>L_$deltat(t)</m>.</p>

    <p>Line drawn is <m>L_$deltat(t) = <math displayDigits="3" simplify="numbersPreserveOrder">$x1 + $m2 (t-$deltat)</math></m>.</p>

    <p hide="$m2 != $m2Target">Line is correct!  Click Next to continue.</p>
  </case>

  <case condition="$step=4">
    <p>Step 4 of $Nsteps.  Use the linear approximation <m>L_$deltat(t)</m> to estimate <m>x($two_deltat)</m>.</p>

    <p>Move the point along the line <m>x = L_$deltat(t)</m> to estimate <m>x($two_deltat)</m>.</p>

    <p>Estimate from <m>L_$deltat(t)</m>:  <m>x($t2) = $x2</m></p>

    <p hide="$t2 != $two_deltat">
      You have finished estimating <m>x($t2)</m> using the Forward Euler algorithm with <m>\Delta t = $deltat</m>!
     
    </p>
  </case>
</conditionalContent>

  <updateValue label="Prev" tname="step" newValue="$step-1" disabled="$step=1" name="prev" />
  <updateValue label="Next" tname="step" newValue="$step+1" disabled="$disableNext" name="next" />
  <answer disabled="$step < 4 or $t2 != $two_deltat"><award><when>true</when></award></answer>
</aside>

<aside boxed collapsible="false">
  <title>Results</title>

    <md>
      <mrow>
        x(0) \amp = $x0
      </mrow>
      <mrow hide="$step < 2">
        x($t1) \amp \approx $x1
      </mrow>
      <mrow hide="$step < 4">
        x($t2) \amp \approx $x2
      </mrow>
    </md>

</aside>
</sideBySide>



</li>

<li>
<p>Let's derive a formula for the Forward Euler algorithm.</p>

<p>The first step is to choose a step size, which we'll call <m>\Delta t</m> (pronounced <q>Delta t</q>).   Then, if we start at <m>t_0=0</m>, we add <m>\Delta t</m> to get that the first time step will be <m>t_1 =</m> 
<answer symbolicEquality>
<award>$deltat </award>
</answer>
.</p>

<hint>To enter a <m>\Delta</m>, type <c>\Delta</c> followed by a space or copy the symbol <c>Δ</c>.</hint>


<p>  We add another <m>\Delta t</m> to compute that  the second time step is <m>t_2=</m> 
<answer symbolicEquality>
<award>2$deltat </award>
<award>$deltat 2</award>
</answer>
.  In general the <m>n</m>-th time step will be <m>t_n =</m> 
<answer symbolicEquality>
<award>n$deltat </award>
<award>$deltat n</award>
</answer>
.  We'll denote our estimate of <m>x (t)</m> at time <m>t=t_n</m> as <m>\hat{ x  }(t_n)</m>.</p>

<p>If we have the estimate <m>\hat{ x  }(t_n)</m> at time <m>t=t_n</m>, then the linear approximate at <m>t=t_n</m> is
<m>L_{t_n}(t) = \hat{ x  }(t_n) + x '(t_n) (t - t_n).</m>
We calculate a new estimate at the next time step <m>t=t_{n+1}</m> by plugging in <m>t=t_{n+1}</m>:
<me>\hat{ x  }(t_{n+1})  = L_{t_{n}} (t_{n+1})  = 
 \hat{ x  }(t_n) + x '(t_n) (t_{n+1} - t_n).</me>
Since <m>t_{n+1}-t_n = \Delta t</m>, the formula for the Forward Euler step simplifies to
<me>\hat{ x  }(t_{n+1})  =  \hat{ x  }(t_n) + x '(t_n) \Delta t.</me></p>

<p>To use the Forward Euler algorithm to estimate the solution, you just keep using the above equation for <m>n=0,1,2, \ldots</m> .</p>

<p>Let's look at how this connects to parts 1 and 2, above.  In part 1, <m>\Delta t =</m> 
<answer>
<award>$end </award>
</answer>
 and we had to take 
<answer>1</answer>
 step(s) to reach the desired value.  In part 2, <m>\Delta t =</m> 
<answer>
<award>$mid </award>
</answer>
 and we had to take 
<answer>2</answer>
 step(s) to reach the desired value.</p>


</li>

<li>
<p>Use <m>\Delta t = $deltat_setb </m> to estimate <m>x ($end )</m> for the differential equation from the start of this problem.   With this step size, we'll need to take four steps.  Our time steps are therefore
<m>t_1=</m> 
<answer name="user_t1b">
<award>$deltat_setb </award>
</answer>
, 
<m>t_2=</m> 
<answer name="user_t2b">
<award>$t2b </award>
</answer>
,
<m>t_3=</m> 
<answer name="user_t3b">
<award>$t3b </award>
</answer>
, and
<m>t_4=</m> 
<answer name="user_t4b">
<award>$t4b </award>
</answer>

</p>

<hint>
<p><m>t_1</m> is the time after taking one time step of length <m>\Delta t=1</m>, starting from 0.</p>
<p><m>t_2</m> is the time after taking two time steps of length <m>\Delta t=1</m>, starting from 0.</p>
</hint>

<p>
<m>\hat{ x  }(t_1) =\hat{ x  }(<copy prop="submittedResponse" tname="user_t1b" componentType="math" />) =</m> 
<mathinput functionSymbols="x" name="xh1a" />
 <m>+</m> 
<mathinput functionSymbols="x f" name="xh1b" />
 <m>\times</m> 
<mathinput name="xh1c" />
 <m>=</m> 
<mathinput name="xh1d" />
 
 <answer matchPartial nAwardsCredited="4" name="xh1">
  <award targetsAreResponses="xh1a xh1b xh1c xh1d">
    <when>
      $xh1a = $x0 and $xh1b = $f0 and $xh1c=$deltat_setb and $xh1d = $x1b
    </when>
  </award>
  <award credit="0" name="awardX0c"><when>$xh1a = $x0_sym</when></award>
  <award credit='0' name='awardxp0c'><when>$xh1b = $xp0_sym </when></award>
  <award credit='0' name='awardf0c'><when>$xh1b = $f0_sym </when></award>
</answer>

</p>

<feedback condition="$awardX0c">Right idea for the first answer blank, but according to the given information, what is the value of <m>x(0)</m>?</feedback>
<feedback condition="$awardxp0c">Right idea for the second answer blank, but according to pure-time differential equation, what is the value of <m>x'(0)</m>?</feedback>
<feedback condition="$awardf0c">Yes, the pure-time differential equation says that <m>x'(0)=f(0)</m>.  Now use the formula for <m>f(t)</m> to calculate a number for <m>f(0)</m>.</feedback>

<hint>
For each line, enter the components of the equation <m>\hat{ x  }(t_{n+1}) = \hat{ x  }(t_n) + x '(t_n) \Delta t,</m> starting with <m>n=0</m>. This means, in the first blank, you should enter the estimate, <m>\hat{ x  }(t_n)</m>, from the previous step (or the initial condition if <m>n=0</m>).   In the second blank, enter the slope calculated from the differential equation plugging in <m>t=t_n</m>.   In third blank, just before the equals sign, enter the value of <m>\Delta t</m>, which is always the same.  In the last blank, enter the value of your estimate, which you'll reenter in the first blank of the next line.
</hint>

<hint>
  <p>You need to translate the Forward Euler formula 
  <me>\hat{ x  }(t_{n+1})  =  \hat{ x  }(t_n) + x '(t_n) \Delta t</me>
  to the current situation.</p>

  <p>For this case, <m>\Delta t  = </m> <answer weight="0" name="dtuser1">$deltat_setb</answer>.</p>

  <p>Which value of <m>n</m> (between 0 and 3) would you like help with? <mathinput name="nuser1" /></p>

  <conditionalContent condition="$dtuser1=1 and $nuser1 elementof {0,1,2,3}">


  <p>For <m>n=$nuser1</m>, what is the value of <m>t_n = t_$nuser1</m>?  <answer weight="0" name="tnuser1">$nuser1</answer>  What is the value of <m>t_{n+1} = t_<number>$nuser1+1</number></m>? <answer weight="0" name="tnp1user1">$nuser1+1</answer> 
  </p>

  <conditionalContent condition="$(tnuser1{prop='creditAchieved'})=1 and $(tnp1user1{prop='creditAchieved'})=1 and $(tnuser1{prop='justSubmitted'}) and $(tnp1user1{prop='justSubmitted'})">

  <p>The Forward Euler formula with these values becomes
  <me>\hat{ x  }(<number>$nuser1+1</number>)  =  \hat{ x  }($nuser1) + x '($nuser1) \times $deltat_setb.</me></p>


  <conditionalContent>
    <case condition="$nuser1=0">
      <p>For the value <m>\hat{ x  }(0)</m>, use the initial condition <m>x(0) = </m> <answer weight="0">$x0</answer>.</p>

      <p>The value of <m>x'(0)</m> is <m>f(0) = </m> <answer weight="0">$f0</answer>.</p>

    </case>
    <else>
      <p>For the value <m>\hat{ x  }($nuser1)</m>, use the value that you calculated from the previous step.</p>

      <setup>
      <conditionalContent assignNames='(fnuser1)'>
        <case condition="$nuser1=1">$f1b</case>
        <case condition="$nuser1=2">$f2b</case>
        <else>$f3b</else>
      </conditionalContent>
      </setup>

      <p>The value of <m>x'($nuser1)</m> is <m>f($nuser1)=</m> <answer weight="0">$fnuser1</answer>.</p>
    </else>
  
  </conditionalContent>

  </conditionalContent>

  </conditionalContent>

</hint>

<p>

<m>\hat{ x  }(t_2) = \hat{ x  }(<copy prop="submittedResponse" tname="user_t2b" componentType="math" />) =</m> 
<mathinput name="xh2a" />
 <m>+</m> 
<mathinput name="xh2b" />
 <m>\times</m> 
<mathinput name="xh2c" />
 <m>=</m> 
<mathinput name="xh2d" />
 
<answer matchPartial nAwardsCredited="4" name="xh2">
  <award targetsAreResponses="xh2a xh2b xh2c xh2d">
    <when>
      $xh2a = $x1b and $xh2b = $f1b and $xh2c=$deltat_setb and $xh2d = $x2b
    </when>
  </award>
</answer>
</p>

<p>
<m>\hat{ x  }(t_3) = \hat{ x  }(<copy prop="submittedResponse" tname="user_t3b" componentType="math" />) =</m> 
<mathinput name="xh3a" />
 <m>+</m> 
<mathinput name="xh3b" />
 <m>\times</m> 
<mathinput name="xh3c" />
 <m>=</m> 
<mathinput name="xh3d" />
 
<answer matchPartial nAwardsCredited="4" name="xh3">
  <award targetsAreResponses="xh3a xh3b xh3c xh3d">
    <when>
      $xh3a = $x2b and $xh3b = $f2b and $xh3c=$deltat_setb and $xh3d = $x3b
    </when>
  </award>
</answer>
</p>

<p>
<m>\hat{ x  }(t_4) = \hat{ x  }(<copy prop="submittedResponse" tname="user_t4b" componentType="math" />) =</m> 
<mathinput name="xh4a" />
 <m>+</m> 
<mathinput name="xh4b" />
 <m>\times</m> 
<mathinput name="xh4c" />
 <m>=</m> 
<mathinput name="xh4d" />
 
<answer matchPartial nAwardsCredited="4" name="xh4">
  <award targetsAreResponses="xh4a xh4b xh4c xh4d">
    <when>
      $xh4a = $x3b and $xh4b = $f3b and $xh4c=$deltat_setb and $xh4d = $x4b
    </when>
  </award>
</answer>
 </p>



</li>


<li name="sketchdt1" newNamespace>


<p>Sketch your Forward Euler approximation for <m>\Delta t=1</m> using the below applet.  The slopes you calculate in odd numbered steps should match the second columns of numbers entered above.  The points calculated in even steps should match the values of the time steps and the estimates entered in the last column above.</p> 

<p>The exact solution <m>x (t)=<copy prop="formula" tname="../xfun" /></m> and the previous Forward Euler solution with <m>\Delta t= 2</m> are also displayed.</p>

<setup>
  <number name="step">1</number>
  <number name="Nsteps">8</number>
  <number name="deltat">1</number>
  <number name="two_deltat">2*$deltat</number>
  <number name="three_deltat">3*$deltat</number>
  <number name="four_deltat">4*$deltat</number>


  <evaluate name="x1Exact" function="$(../xfun)" input="$deltat" />
  <evaluate name="x2Exact" function="$(../xfun)" input="$two_deltat" />
  <evaluate name="x3Exact" function="$(../xfun)" input="$three_deltat" />

  <copy tname="../x0" assignNames="x0" />

  <point name="T1" x="$deltat" y="$(../x1b)" />
  <point name="T2" x="2$deltat" y="$(../x2b)" />
  <point name="T3" x="3$deltat" y="$(../x3b)" />
  <point name="T4" x="4$deltat" y="$(../x4b)" />


  <number name="m1Target">-1</number>
<!--   <number name="x1Target">$x0 + $m1Target*$deltat</number> -->
  <number name="m2Target">1</number>
<!--   <number name="x2Target">$x1Target + $m2Target*$deltat</number> -->
  <number name="m3Target">3</number>
<!--   <number name="x3Target">$x2Target + $m3Target*$deltat</number> -->
  <number name="m4Target">5</number>
<!--   <number name="x4Target">$x3Target + $m4Target*$deltat</number> -->


  <conditionalContent assignNames="(t1 x1)">
    <case condition="$step <= 2">
      <copy prop="x" tname="P1b" displayDigits="3" />
      <copy prop="y" tname="P1b" displayDigits="3" />
    </case>
    <else>
      $deltat $(../x1b)
    </else>
  </conditionalContent>

  <conditionalContent assignNames="(t2 x2)">
    <case condition="$step > 2 and $step <= 4">
      <copy prop="x" tname="P2b" displayDigits="3" />
      <copy prop="y" tname="P2b" displayDigits="3" />
    </case>
    <else>
      <number>2$deltat</number> $(../x2b)
    </else>
  </conditionalContent>

  <conditionalContent assignNames="(t3 x3)">
    <case condition="$step > 4 and $step <= 6">
      <copy prop="x" tname="P3b" displayDigits="3" />
      <copy prop="y" tname="P3b" displayDigits="3" />
    </case>
    <else>
      <number>3$deltat</number> $(../x3b)
    </else>
  </conditionalContent>

  <conditionalContent assignNames="(t4 x4)">
    <case condition="$step > 6">
      <copy prop="x" tname="P4b" displayDigits="3" />
      <copy prop="y" tname="P4b" displayDigits="3" />
    </case>
    <else>
      <number>4$deltat</number> $(../x4b)
    </else>
  </conditionalContent>


  <updateValue triggerWhen="$m1 = $m1Target" tname="l1Style" newValue="4" />
  <updateValue triggerWhen="$m1 != $m1Target" tname="l1Style" newValue="5" />

  <updateValue triggerWhen="$m2 = $m2Target" tname="l2Style" newValue="4" />
  <updateValue triggerWhen="$m2 != $m2Target" tname="l2Style" newValue="5" />

  <updateValue triggerWhen="$m3 = $m3Target" tname="l3Style" newValue="4" />
  <updateValue triggerWhen="$m3 != $m3Target" tname="l3Style" newValue="5" />

  <updateValue triggerWhen="$m4 = $m4Target" tname="l4Style" newValue="4" />
  <updateValue triggerWhen="$m4 != $m4Target" tname="l4Style" newValue="5" />

  <boolean name="disableNext">
    ($step=1 and $m1 != $m1Target) or
    ($step=2 and $t1 != $deltat) or
    ($step=3 and $m2 != $m2Target) or
    ($step=4 and $t2 != $two_deltat) or
    ($step=5 and $m3 != $m3Target) or
    ($step=6 and $t3 != $three_deltat) or
    ($step=7 and $m4 != $m4Target) or
    $step=8
  </boolean>
</setup>



<graph width='500' height='400' xmin='-1' xmax='6' ymin='-11' ymax='9' fixAxes xlabel="t" ylabel="x" >
  <function fixed styleNumber="4">$(../xfun)</function>
  <line hide="$step !=1" styleNumber="6" fixed>y=$x0 + $m1Target*x</line>
  <line hide="$step !=3" styleNumber="6" fixed>y=$x1Exact + $m2Target*(x-$deltat)</line>
  <line hide="$step !=3" styleNumber="6" fixed>x=$deltat</line> 




  <copy tname="../sketchdt2/seg1" fixed />
  <copy tname="../sketchdt2/seg2" fixed />

  <point fixed x="0" y="$x0" name="IC" />

  <conditionalContent condition="$step <= 2">
    <setup>
      <copy prop="slope" tname="l1" displayDigits="3" assignNames="m1" />
      <number name="l1Style">5</number>
    </setup>

    <line name="lineSlope1" through="$IC" slope="$m1Target" hide />
    <point hide="$step !=1" x="1" y="2" name="P1" styleNumber="2" layer="2">
      <constraints>
        <attractTo>$lineSlope1</attractTo>
      </constraints>
    </point>
    <line through="$IC $P1" styleNumber="$l1Style" draggable="false" label="slope = $m1" name="l1" hide="$step=2 and $P1b = $T1" layer="2" />

    <point hide="$step < 2" fixed="$step != 2" name="P1b" styleNumber="2" x="0.5" y="-6" layer="2">
      <constraints>
        <constrainTo>$l1</constrainTo>
        <attractTo threshold="0.2">$T1</attractTo>
        <constrainToGraph />
      </constraints>
    </point>

  </conditionalContent>

  <conditionalContent assignNames="(seg1)">
    <case condition="$step <= 2">
      <lineSegment fixed hide="$step < 2" endpoints="$IC $P1b" styleNumber="2" layer="2" />
    </case>
    <else>
      <lineSegment fixed endpoints="$IC $T1" styleNumber="2" layer="2" />
    </else>
  </conditionalContent>


  <conditionalContent condition="$step > 2 and $step <= 4">
    <setup>
      <copy prop="slope" tname="l2" displayDigits="3" assignNames="m2" />
      <number name="l2Style">5</number>
    </setup>

    <line name="lineSlope2" through="$T1" slope="$m2Target" hide />
    <point hide="$step !=3" x="5" y="-4" name="P2" styleNumber="2" layer="2">
      <constraints>
        <attractTo>$lineSlope2</attractTo>
      </constraints>
    </point>
    <line through="$T1 $P2" styleNumber="$l2Style" draggable="false" label="slope = $m2" name="l2" hide="$step=4 and $P2b = $T2" layer="2" />

    <point hide="$step < 4" fixed="$step != 4" name="P2b" styleNumber="2" x="1.1" y="-3" layer="2">
      <constraints>
        <constrainTo>$l2</constrainTo>
        <attractTo threshold="0.2">$T2</attractTo>
        <constrainToGraph />
      </constraints>
    </point>
  </conditionalContent>

  <conditionalContent assignNames="(seg2)">
    <case condition="$step = 4">
      <lineSegment fixed endpoints="$T1 $P2b" styleNumber="2" layer="2" />
    </case>
    <case condition="$step > 4">
      <lineSegment fixed endpoints="$T1 $T2" styleNumber="2" layer="2" />
    </case>
  </conditionalContent>
  
  <conditionalContent condition="$step > 4 and $step <= 6">
    <setup>
      <copy prop="slope" tname="l3" displayDigits="3" assignNames="m3" />
      <number name="l3Style">5</number>
    </setup>
    <line hide="$step !=5" styleNumber="6" fixed>y=$x2Exact + $m3Target*(x-$two_deltat)</line>
    <line hide="$step !=5" styleNumber="6" fixed>x=$two_deltat</line>
    <line name="lineSlope3" through="$T2" slope="$m3Target" hide />
    <point hide="$step !=5" x="5" y="-4" name="P3" styleNumber="2" layer="2">
      <constraints>
        <attractTo>$lineSlope3</attractTo>
      </constraints>
    </point>

    <line through="$T2 $P3" styleNumber="$l3Style" draggable="false" label="slope = $m3" name="l3" hide="$step=6 and $P3b = $T3" layer="2" />
    <point hide="$step < 6" fixed="$step != 6" name="P3b" styleNumber="2" x="2.1" y="-3" layer="2">
      <constraints>
        <constrainTo>$l3</constrainTo>
        <attractTo threshold="0.2">$T3</attractTo>
        <constrainToGraph />
      </constraints>
    </point>
  </conditionalContent>

  <conditionalContent assignNames="(seg3)">
    <case condition="$step = 6">
      <lineSegment fixed hide="$step < 6" endpoints="$T2 $P3b" styleNumber="2" layer="2" />
    </case>
    <case condition="$step > 6">
      <lineSegment fixed hide="$step < 6" endpoints="$T2 $T3" styleNumber="2" layer="2" />
    </case>
  </conditionalContent>

  <conditionalContent condition="$step > 6">
    <setup>
      <copy prop="slope" tname="l4" displayDigits="3" assignNames="m4" />
      <number name="l4Style">5</number>
    </setup>


    <line hide="$step !=7" styleNumber="6" fixed>y=$x3Exact + $m4Target*(x-$three_deltat)</line>
    <line hide="$step !=7" styleNumber="6" fixed>x=$three_deltat</line>

    <line name="lineSlope4" through="$T3" slope="$m4Target" hide />
    <point hide="$step !=7" x="5" y="-4" name="P4" styleNumber="2" layer="2">
      <constraints>
        <attractTo>$lineSlope4</attractTo>
      </constraints>
    </point>
    <line through="$T3 $P4" styleNumber="$l4Style" draggable="false" label="slope = $m4" name="l4" hide="$step=8 and $P4b = $T4" />

    <point hide="$step < 8" fixed="$step != 8" name="P4b" styleNumber="2" x="3.1" y="0" layer="2">
      <constraints>
        <constrainTo>$l4</constrainTo>
        <attractTo threshold="0.2">$T4</attractTo>
        <constrainToGraph />
      </constraints>
    </point>
    
    <lineSegment fixed hide="$step < 8" endpoints="$T3 $P4b" styleNumber="2" layer="2" name="seg4" />
  </conditionalContent>

</graph>



<sideBySide>
<aside boxed collapsible="false">
  <title>Instructions</title>

<conditionalContent>
  <case condition="$step = 1">

    <p>Step 1 of $Nsteps: Move the point to draw the linear approximation for the first Forward Euler step at <m>t=0</m>.</p>

    <p hide="$m1 != $m1Target">Line is correct!  Click Next to continue.</p>
  </case>
  <case condition="$step=2">
    <p>Step 2 of $Nsteps.  Move the point along the line to estimate <m>\hat{x}($deltat)</m>.</p>

    <p><m>\hat{x}($t1) = $x1</m></p>

    <p hide="$t1 != $deltat">Estimate completed!  Click Next to continue.</p>
  </case>
  <case condition="$step = 3">

    <p>Step 3 of $Nsteps: Move the point to draw the linear approximation for the second Forward Euler step at <m>t=$deltat</m>.</p>

    <p hide="$m2 != $m2Target">Line is correct!  Click Next to continue.</p>
  </case>

  <case condition="$step=4">
    <p>Step 4 of $Nsteps.   Move the point along the line to estimate <m>\hat{x}($two_deltat)</m>.</p>

    <p><m>\hat{x}($t2) = $x2</m></p>

    <p hide="$t2 != $two_deltat">Estimate completed!  Click Next to continue.</p>
  </case>

  <case condition="$step = 5">

    <p>Step 5 of $Nsteps: Move the point to draw the linear approximation for the third Forward Euler step at <m>t=$two_deltat</m>.</p>

    <p hide="$m3 != $m3Target">Line is correct!  Click Next to continue.</p>
  </case>

  <case condition="$step=6">
    <p>Step 6 of $Nsteps.   Move the point along the line to estimate <m>\hat{x}($three_deltat)</m>.</p>

    <p><m>\hat{x}($t3) = $x3</m></p>

    <p hide="$t3 != $three_deltat">Estimate completed!  Click Next to continue.</p>
  </case>

  <case condition="$step = 7">

    <p>Step 7 of $Nsteps: Move the point to draw the linear approximation for the fourth Forward Euler step at <m>t=$three_deltat</m>.</p>

    <p hide="$m4 != $m4Target">Line is correct!  Click Next to continue.</p>
  </case>


  <case condition="$step=8">
    <p>Step 8 of $Nsteps.   Move the point along the line to estimate <m>\hat{x}($four_deltat)</m>.</p>

    <p><m>\hat{x}($t4) = $x4</m></p>

    <p hide="$t4 != $four_deltat">Estimate completed!
    </p>
  </case>
</conditionalContent>

  <updateValue label="Prev" tname="step" newValue="$step-1" disabled="$step=1" name="prev" />
  <updateValue label="Next" tname="step" newValue="$step+1" disabled="$disableNext" name="next" />
  <answer disabled="$step < 8 or $t4 != $four_deltat"><award><when>true</when></award></answer>

</aside>

<aside boxed collapsible="false">
  <title>Results</title>

    <md>
      <mrow>
        x(0) \amp = $x0
      </mrow>
      <mrow hide="$step < 2">
        \hat{x}($t1) \amp = $x1
      </mrow>
      <mrow hide="$step < 4">
        \hat{x}($t2) \amp = $x2
      </mrow>
      <mrow hide="$step < 6">
        \hat{x}($t3) \amp = $x3
      </mrow>
      <mrow hide="$step < 8">
        \hat{x}($t4) \amp = $x4
      </mrow>
    </md>

</aside>
</sideBySide>



</li>


<li>
<p>Use <m>\Delta t = $deltat_set </m> to estimate <m>x ($end )</m> for the differential equation from the start of this problem. The time steps are <m>t_1=</m> 
<answer>
<award>$deltat_set </award>
</answer>
,
<m>t_2=</m> 
<answer>
<award>$t2 </award>
</answer>
, <m>t_3=</m> 
<answer>
<award>$t3 </award>
</answer>
, 
etc. and we can stop when <m>t_n=4</m>, which is when <m>n=</m> 
<answer>8</answer>
.
</p>

<p>
<m>\hat{ x  }(t_1) =\hat{x}\left(\frac{1}{2}\right)=</m> 
<mathinput functionSymbols="x" name="xhh1a" />
 <m>+</m> 
<mathinput functionSymbols="x f" name="xhh1b" />
 <m>\times</m> 
<mathinput name="xhh1c" />
 <m>=</m> 
<mathinput name="xhh1d" />
 
 <answer matchPartial nAwardsCredited="4" name="xhh1">
  <award targetsAreResponses="xhh1a xhh1b xhh1c xhh1d">
    <when>
      $xhh1a = $x0 and $xhh1b = $f0 and $xhh1c=$deltat_set and $xhh1d = $x1
    </when>
  </award>
  <award credit="0" name="awardX0d"><when>$xhh1a = $x0_sym</when></award>
  <award credit='0' name='awardxp0d'><when>$xhh1b = $xp0_sym </when></award>
  <award credit='0' name='awardf0d'><when>$xhh1b = $f0_sym </when></award>
</answer>

</p>

<feedback condition="$awardX0d">Right idea for the first answer blank, but according to the given information, what is the value of <m>x(0)</m>?</feedback>
<feedback condition="$awardxp0d">Right idea for the second answer blank, but according to pure-time differential equation, what is the value of <m>x'(0)</m>?</feedback>
<feedback condition="$awardf0d">Yes, the pure-time differential equation says that <m>x'(0)=f(0)</m>.  Now use the formula for <m>f(t)</m> to calculate a number for <m>f(0)</m>.</feedback>

<p>
<m>\hat{ x  }(t_2) =\hat{x}(1)=</m> 
<mathinput name="xhh2a" />
 <m>+</m> 
<mathinput name="xhh2b" />
 <m>\times</m> 
<mathinput name="xhh2c" />
 <m>=</m> 
<mathinput name="xhh2d" />
 
<answer matchPartial nAwardsCredited="4" name="xhh2">
  <award targetsAreResponses="xhh2a xhh2b xhh2c xhh2d">
    <when>
      $xhh2a = $x1 and $xhh2b = $f1 and $xhh2c=$deltat_set and $xhh2d = $x2
    </when>
  </award>
</answer>
</p>

<p>
<m>\hat{ x  }(t_3) = \hat{x} \left(\frac{3}{2}\right)=</m> 
<mathinput name="xhh3a" />
 <m>+</m> 
<mathinput name="xhh3b" />
 <m>\times</m> 
<mathinput name="xhh3c" />
 <m>=</m> 
<mathinput name="xhh3d" />
 
<answer matchPartial nAwardsCredited="4" name="xhh3">
  <award targetsAreResponses="xhh3a xhh3b xhh3c xhh3d">
    <when>
      $xhh3a = $x2 and $xhh3b = $f2 and $xhh3c=$deltat_set and $xhh3d = $x3
    </when>
  </award>
</answer>
</p>

<p>
<m>\hat{ x  }(t_4) =\hat{x}(2)=</m> 
<mathinput name="xhh4a" />
 <m>+</m> 
<mathinput name="xhh4b" />
 <m>\times</m> 
<mathinput name="xhh4c" />
 <m>=</m> 
<mathinput name="xhh4d" />
 
<answer matchPartial nAwardsCredited="4" name="xhh4">
  <award targetsAreResponses="xhh4a xhh4b xhh4c xhh4d">
    <when>
      $xhh4a = $x3 and $xhh4b = $f3 and $xhh4c=$deltat_set and $xhh4d = $x4
    </when>
  </award>
</answer>
</p>

<p>
<m>\hat{ x  }(t_5) = \hat{x}\left(\frac{5}{2}\right)=</m> 
<mathinput name="xhh5a" />
 <m>+</m> 
<mathinput name="xhh5b" />
 <m>\times</m> 
<mathinput name="xhh5c" />
 <m>=</m> 
<mathinput name="xhh5d" />
 
<answer matchPartial nAwardsCredited="4" name="xhh5">
  <award targetsAreResponses="xhh5a xhh5b xhh5c xhh5d">
    <when>
      $xhh5a = $x4 and $xhh5b = $f4 and $xhh5c=$deltat_set and $xhh5d = $x5
    </when>
  </award>
</answer>
</p>

<p>
<m>\hat{ x  }(t_6) =\hat{x}(3)=</m> 
<mathinput name="xhh6a" />
 <m>+</m> 
<mathinput name="xhh6b" />
 <m>\times</m> 
<mathinput name="xhh6c" />
 <m>=</m> 
<mathinput name="xhh6d" />
 
<answer matchPartial nAwardsCredited="4" name="xhh6">
  <award targetsAreResponses="xhh6a xhh6b xhh6c xhh6d">
    <when>
      $xhh6a = $x5 and $xhh6b = $f5 and $xhh6c=$deltat_set and $xhh6d = $x6
    </when>
  </award>
</answer>
</p>

<p>
<m>\hat{ x  }(t_7) =\hat{x}\left(\frac{7}{2}\right)=</m> 
<mathinput name="xhh7a" />
 <m>+</m> 
<mathinput name="xhh7b" />
 <m>\times</m> 
<mathinput name="xhh7c" />
 <m>=</m> 
<mathinput name="xhh7d" />
 
<answer matchPartial nAwardsCredited="4" name="xhh7">
  <award targetsAreResponses="xhh7a xhh7b xhh7c xhh7d">
    <when>
      $xhh7a = $x6 and $xhh7b = $f6 and $xhh7c=$deltat_set and $xhh7d = $x7
    </when>
  </award>
</answer>
</p>

<p>
<m>\hat{ x  }(t_8) = \hat{x}(4)=</m> 
<mathinput name="xhh8a" />
 <m>+</m> 
<mathinput name="xhh8b" />
 <m>\times</m> 
<mathinput name="xhh8c" />
 <m>=</m> 
<mathinput name="xhh8d" />
 
<answer matchPartial nAwardsCredited="4" name="xhh8">
  <award targetsAreResponses="xhh8a xhh8b xhh8c xhh8d">
    <when>
      $xhh8a = $x7 and $xhh8b = $f7 and $xhh8c=$deltat_set and $xhh8d = $x8
    </when>
  </award>
</answer>
 </p>

  <p>In this graph, the <copy prop="styleDescription" tname="ls05_1" /> line and <copy prop="styleDescriptionWithNoun" tname="pt05_1" />s show your Forward Euler approximation with <m>\Delta t = 0.5</m>.  The exact solution and your Forward Euler approximations for <m>\Delta t= 1</m> and <m>\Delta t = 2</m> are also shown.</p>

<graph width='500' height='400' xmin='-1' xmax='6' ymin='-11' ymax='9' fixAxes xlabel="t" ylabel="x" >

  <function styleNumber="4">$xfun</function>

  <copy tname="sketchdt2/seg1" fixed />
  <copy tname="sketchdt2/seg2" fixed />

  <copy tname="sketchdt1/seg1" fixed />
  <copy tname="sketchdt1/seg2" fixed />
  <copy tname="sketchdt1/seg3" fixed />
  <copy tname="sketchdt1/seg4" fixed />
 
  <lineSegment styleNumber="3" fixed endpoints="(0, $x0) (0.5,$xhh1d)" name="ls05_1" />
  <lineSegment styleNumber="3" fixed endpoints="(0.5,$xhh1d) (1, $xhh2d)" />
  <lineSegment styleNumber="3" fixed endpoints="(1, $xhh2d) (1.5, $xhh3d)" />
  <lineSegment styleNumber="3" fixed endpoints="(1.5, $xhh3d) (2, $xhh4d)" />
  <lineSegment styleNumber="3" fixed endpoints="(2, $xhh4d) (2.5, $xhh5d)" />
  <lineSegment styleNumber="3" fixed endpoints="(2.5, $xhh5d) (3, $xhh6d)" />
  <lineSegment styleNumber="3" fixed endpoints="(3, $xhh6d) (3.5, $xhh7d)" />
  <lineSegment styleNumber="3" fixed endpoints="(3.5, $xhh7d) (4, $xhh8d)" />

  <point fixed styleNumber="3" name="pt05_1">(0.5,$xhh1d)</point>
  <point fixed styleNumber="3">(1, $xhh2d)</point>
  <point fixed styleNumber="3">(1.5, $xhh3d)</point>
  <point fixed styleNumber="3">(2, $xhh4d)</point>
  <point fixed styleNumber="3">(2.5, $xhh5d)</point>
  <point fixed styleNumber="3">(3, $xhh6d)</point>
  <point fixed styleNumber="3">(3.5, $xhh7d)</point>
  <point fixed styleNumber="3">(4, $xhh8d)</point>

</graph>


</li>

<!-- 
<li name="sketchdt05" newNamespace>


<p>Sketch your Forward Euler approximation for <m>\Delta t=\frac{1}{2}</m> using the below applet.</p> 

<p>To see this exact solution <m>x (t)=<copy prop="formula" tname="../xfun" /></m> superimposed on the Forward Euler estimate, check this box <booleanInput name="showExact" />.  (Checking this box will also show the tangent lines that you can use to estimate the slopes of the linear approximations.)</p>

<setup>
  <number name="step">1</number>
  <number name="Nsteps">16</number>
  <number name="deltat">0.5</number>
  <number name="two_deltat">2*$deltat</number>
  <number name="three_deltat">3*$deltat</number>
  <number name="four_deltat">4*$deltat</number>
  <number name="five_deltat">5*$deltat</number>
  <number name="six_deltat">6*$deltat</number>
  <number name="seven_deltat">7*$deltat</number>
  <number name="eight_deltat">8*$deltat</number>


  <evaluate name="x1Exact" function="$(../xfun)" input="$deltat" />
  <evaluate name="x2Exact" function="$(../xfun)" input="$two_deltat" />
  <evaluate name="x3Exact" function="$(../xfun)" input="$three_deltat" />
  <evaluate name="x4Exact" function="$(../xfun)" input="$four_deltat" />
  <evaluate name="x5Exact" function="$(../xfun)" input="$five_deltat" />
  <evaluate name="x6Exact" function="$(../xfun)" input="$six_deltat" />
  <evaluate name="x7Exact" function="$(../xfun)" input="$seven_deltat" />

  <copy tname="../x0" assignNames="x0" />


  <number name="m1Target">-1</number>
  <number name="x1Target">$x0 + $m1Target*$deltat</number>
  <number name="m2Target">0</number>
  <number name="x2Target">$x1Target + $m2Target*$deltat</number>
  <number name="m3Target">1</number>
  <number name="x3Target">$x2Target + $m3Target*$deltat</number>
  <number name="m4Target">2</number>
  <number name="x4Target">$x3Target + $m4Target*$deltat</number>
  <number name="m5Target">3</number>
  <number name="x5Target">$x4Target + $m5Target*$deltat</number>
  <number name="m6Target">4</number>
  <number name="x6Target">$x5Target + $m6Target*$deltat</number>
  <number name="m7Target">5</number>
  <number name="x7Target">$x6Target + $m7Target*$deltat</number>
  <number name="m8Target">6</number>
  <number name="x8Target">$x7Target + $m8Target*$deltat</number>

  <copy prop="slope" tname="l1" displayDigits="3" assignNames="m1" />
  <copy prop="slope" tname="l2" displayDigits="3" assignNames="m2" />
  <copy prop="slope" tname="l3" displayDigits="3" assignNames="m3" />
  <copy prop="slope" tname="l4" displayDigits="3" assignNames="m4" />
  <copy prop="slope" tname="l5" displayDigits="3" assignNames="m5" />
  <copy prop="slope" tname="l6" displayDigits="3" assignNames="m6" />
  <copy prop="slope" tname="l7" displayDigits="3" assignNames="m7" />
  <copy prop="slope" tname="l8" displayDigits="3" assignNames="m8" />

  <copy prop="x" tname="P1b" displayDigits="3" assignNames="t1" />
  <copy prop="y" tname="P1b" displayDigits="3" assignNames="x1" />
  <copy prop="x" tname="P2b" displayDigits="3" assignNames="t2" />
  <copy prop="y" tname="P2b" displayDigits="3" assignNames="x2" />
  <copy prop="x" tname="P3b" displayDigits="3" assignNames="t3" />
  <copy prop="y" tname="P3b" displayDigits="3" assignNames="x3" />
  <copy prop="x" tname="P4b" displayDigits="3" assignNames="t4" />
  <copy prop="y" tname="P4b" displayDigits="3" assignNames="x4" />
  <copy prop="x" tname="P5b" displayDigits="3" assignNames="t5" />
  <copy prop="y" tname="P5b" displayDigits="3" assignNames="x5" />
  <copy prop="x" tname="P6b" displayDigits="3" assignNames="t6" />
  <copy prop="y" tname="P6b" displayDigits="3" assignNames="x6" />
  <copy prop="x" tname="P7b" displayDigits="3" assignNames="t7" />
  <copy prop="y" tname="P7b" displayDigits="3" assignNames="x7" />
  <copy prop="x" tname="P8b" displayDigits="3" assignNames="t8" />
  <copy prop="y" tname="P8b" displayDigits="3" assignNames="x8" />

  <number name="l1Style">5</number>
  <number name="l2Style">5</number>
  <number name="l3Style">5</number>
  <number name="l4Style">5</number>
  <number name="l5Style">5</number>
  <number name="l6Style">5</number>
  <number name="l7Style">5</number>
  <number name="l8Style">5</number>

  <updateValue triggerWhen="$m1 = $m1Target" tname="l1Style" newValue="4" />
  <updateValue triggerWhen="$m1 != $m1Target" tname="l1Style" newValue="5" />

  <updateValue triggerWhen="$m2 = $m2Target" tname="l2Style" newValue="4" />
  <updateValue triggerWhen="$m2 != $m2Target" tname="l2Style" newValue="5" />

  <updateValue triggerWhen="$m3 = $m3Target" tname="l3Style" newValue="4" />
  <updateValue triggerWhen="$m3 != $m3Target" tname="l3Style" newValue="5" />

  <updateValue triggerWhen="$m4 = $m4Target" tname="l4Style" newValue="4" />
  <updateValue triggerWhen="$m4 != $m4Target" tname="l4Style" newValue="5" />

  <updateValue triggerWhen="$m5 = $m5Target" tname="l5Style" newValue="4" />
  <updateValue triggerWhen="$m5 != $m6Target" tname="l5Style" newValue="5" />

  <updateValue triggerWhen="$m6 = $m6Target" tname="l6Style" newValue="4" />
  <updateValue triggerWhen="$m6 != $m6Target" tname="l6Style" newValue="5" />

  <updateValue triggerWhen="$m7 = $m7Target" tname="l7Style" newValue="4" />
  <updateValue triggerWhen="$m7 != $m7Target" tname="l7Style" newValue="5" />

  <updateValue triggerWhen="$m8 = $m8Target" tname="l8Style" newValue="4" />
  <updateValue triggerWhen="$m8 != $m8Target" tname="l8Style" newValue="5" />

  <boolean name="disableNext">
    ($step=1 and $m1 != $m1Target) or
    ($step=2 and $t1 != $deltat) or
    ($step=3 and $m2 != $m2Target) or
    ($step=4 and $t2 != $two_deltat) or
    ($step=5 and $m3 != $m3Target) or
    ($step=6 and $t3 != $three_deltat) or
    ($step=7 and $m4 != $m4Target) or
    ($step=8 and $t4 != $four_deltat) or
    ($step=9 and $m5 != $m5Target) or
    ($step=10 and $t5 != $five_deltat) or
    ($step=11 and $m6 != $m6Target) or
    ($step=12 and $t6 != $six_deltat) or
    ($step=13 and $m7 != $m7Target) or
    ($step=14 and $t7 != $seven_deltat) or
    ($step=15 and $m8 != $m8Target) or
    $step=16
  </boolean>
</setup>



<graph width='500' height='400' xmin='-1' xmax='6' ymin='-11' ymax='9' fixAxes xlabel="t" ylabel="x" >
  <function hide="not $showExact" styleNumber="4">$(../xfun)</function>
  <line hide="not $showExact or $step !=1" styleNumber="6" fixed>y=$x0 + $m1Target*x</line>
  <line hide="not $showExact or $step !=3" styleNumber="6" fixed>y=$x1Exact + $m2Target*(x-$deltat)</line>
  <line hide="not $showExact or $step !=3" styleNumber="6" fixed>x=$deltat</line> 

  <line hide="not $showExact or $step !=5" styleNumber="6" fixed>y=$x2Exact + $m3Target*(x-$two_deltat)</line>
  <line hide="not $showExact or $step !=5" styleNumber="6" fixed>x=$two_deltat</line>

  <line hide="not $showExact or $step !=7" styleNumber="6" fixed>y=$x3Exact + $m4Target*(x-$three_deltat)</line>
  <line hide="not $showExact or $step !=7" styleNumber="6" fixed>x=$three_deltat</line>

  <line hide="not $showExact or $step !=9" styleNumber="6" fixed>y=$x4Exact + $m5Target*(x-$four_deltat)</line>
  <line hide="not $showExact or $step !=9" styleNumber="6" fixed>x=$four_deltat</line>

  <line hide="not $showExact or $step !=11" styleNumber="6" fixed>y=$x5Exact + $m6Target*(x-$five_deltat)</line>
  <line hide="not $showExact or $step !=11" styleNumber="6" fixed>x=$five_deltat</line>

  <line hide="not $showExact or $step !=13" styleNumber="6" fixed>y=$x6Exact + $m7Target*(x-$six_deltat)</line>
  <line hide="not $showExact or $step !=13" styleNumber="6" fixed>x=$six_deltat</line>

  <line hide="not $showExact or $step !=15" styleNumber="6" fixed>y=$x7Exact + $m8Target*(x-$seve_deltat)</line>
  <line hide="not $showExact or $step !=15" styleNumber="6" fixed>x=$seve_deltat</line>


  <copy tname="../sketchdt2/seg1" fixed />
  <copy tname="../sketchdt2/seg2" fixed />

  <copy tname="../sketchdt1/seg1" fixed />
  <copy tname="../sketchdt1/seg2" fixed />
  <copy tname="../sketchdt1/seg3" fixed />
  <copy tname="../sketchdt1/seg4" fixed />
 
  <point fixed x="0" y="$x0" name="IC" />
  <line name="lineSlope1" through="$IC" slope="$m1Target" hide />
  <point hide="$step !=1" x="1" y="2" name="P1" styleNumber="3" layer="3">
    <constraints>
      <attractTo>$lineSlope1</attractTo>
    </constraints>
  </point>
  <line through="$IC $P1" styleNumber="$l1Style" draggable="false" label="slope = $m1" name="l1" hide="$step > 2" layer="3" />

  <point hide="$step < 2" fixed="$step != 2" name="P1b" styleNumber="3" x="2" y="-7" layer="3">
    <constraints>
      <constrainTo>$l1</constrainTo>
      <attractTo threshold="0.2"><point x="$deltat" y="$x1Target" ></point></attractTo>
      <constrainToGraph />
    </constraints>
  </point>
  <lineSegment fixed hide="$step < 2" endpoints="$IC $P1b" styleNumber="3" layer="3" />


  <line name="lineSlope2" through="$P1b" slope="$m2Target" hide />
  <point hide="$step !=3" x="5" y="-4" name="P2" styleNumber="3" layer="3">
    <constraints>
      <attractTo>$lineSlope2</attractTo>
    </constraints>
  </point>
  <line through="$P1b $P2" styleNumber="$l2Style" draggable="false" label="slope = $m2" name="l2" hide="$step < 3 or $step > 4" layer="3" />

  <point hide="$step < 4" fixed="$step != 4" name="P2b" styleNumber="3" x="4" y="-3" layer="3">
    <constraints>
      <constrainTo>$l2</constrainTo>
      <attractTo threshold="0.2"><point x="$two_deltat" y="$x2Target"></point></attractTo>
      <constrainToGraph />
    </constraints>
  </point>
  <lineSegment fixed hide="$step < 4" endpoints="$P1b $P2b" styleNumber="3" layer="3" />

 
  <line name="lineSlope3" through="$P2b" slope="$m3Target" hide />
  <point hide="$step !=5" x="5" y="-4" name="P3" styleNumber="3" layer="3">
    <constraints>
      <attractTo>$lineSlope3</attractTo>
    </constraints>
  </point>
  <line through="$P2b $P3" styleNumber="$l3Style" draggable="false" label="slope = $m3" name="l3" hide="$step < 5 or $step > 6" layer="3" />

  <point hide="$step < 6" fixed="$step != 6" name="P3b" styleNumber="3" x="2.1" y="-3" layer="3">
    <constraints>
      <constrainTo>$l3</constrainTo>
      <attractTo threshold="0.2"><point x="$three_deltat" y="$x3Target"></point></attractTo>
      <constrainToGraph />
    </constraints>
  </point>
  <lineSegment fixed hide="$step < 6" endpoints="$P2b $P3b" styleNumber="3" layer="3" />



  <line name="lineSlope4" through="$P3b" slope="$m4Target" hide />
  <point hide="$step !=7" x="5" y="-4" name="P4" styleNumber="3" layer="3">
    <constraints>
      <attractTo>$lineSlope4</attractTo>
    </constraints>
  </point>
  <line through="$P3b $P4" styleNumber="$l4Style" draggable="false" label="slope = $m4" name="l4" hide="$step < 7 or $step > 8" layer="3" />

  <point hide="$step < 8" fixed="$step != 8" name="P4b" styleNumber="3" x="3.1" y="0" layer="3">
    <constraints>
      <constrainTo>$l4</constrainTo>
      <attractTo threshold="0.2"><point x="$four_deltat" y="$x4Target"></point></attractTo>
      <constrainToGraph />
    </constraints>
  </point>
  <lineSegment fixed hide="$step < 8" endpoints="$P3b $P4b" styleNumber="3" layer="3" />


  <line name="lineSlope5" through="$P4b" slope="$m5Target" hide />
  <point hide="$step !=9" x="5" y="-4" name="P5" styleNumber="3" layer="3">
    <constraints>
      <attractTo>$lineSlope5</attractTo>
    </constraints>
  </point>
  <line through="$P4b $P5" styleNumber="$l5Style" draggable="false" label="slope = $m5" name="l5" hide="$step < 9 or $step > 10" layer="3" />

  <point hide="$step < 10" fixed="$step != 10" name="P5b" styleNumber="3" x="3.1" y="0" layer="3">
    <constraints>
      <constrainTo>$l5</constrainTo>
      <attractTo threshold="0.2"><point x="$five_deltat" y="$x5Target"></point></attractTo>
      <constrainToGraph />
    </constraints>
  </point>
  <lineSegment fixed hide="$step < 10" endpoints="$P4b $P5b" styleNumber="3" layer="3" />



  <line name="lineSlope6" through="$P5b" slope="$m6Target" hide />
  <point hide="$step !=11" x="5" y="-4" name="P6" styleNumber="3" layer="3">
    <constraints>
      <attractTo>$lineSlope6</attractTo>
    </constraints>
  </point>
  <line through="$P5b $P6" styleNumber="$l6Style" draggable="false" label="slope = $m6" name="l6" hide="$step < 11 or $step > 12" layer="3" />

  <point hide="$step < 12" fixed="$step != 12" name="P6b" styleNumber="3" x="3.1" y="0" layer="3">
    <constraints>
      <constrainTo>$l6</constrainTo>
      <attractTo threshold="0.2"><point x="$six_deltat" y="$x6Target"></point></attractTo>
      <constrainToGraph />
    </constraints>
  </point>
  <lineSegment fixed hide="$step < 12" endpoints="$P5b $P6b" styleNumber="3" layer="3" />



  <line name="lineSlope7" through="$P6b" slope="$m7Target" hide />
  <point hide="$step !=13" x="5" y="-4" name="P7" styleNumber="3" layer="3">
    <constraints>
      <attractTo>$lineSlope7</attractTo>
    </constraints>
  </point>
  <line through="$P6b $P7" styleNumber="$l7Style" draggable="false" label="slope = $m7" name="l7" hide="$step < 13 or $step > 14" layer="3" />

  <point hide="$step < 14" fixed="$step != 14" name="P7b" styleNumber="3" x="3.1" y="0" layer="3">
    <constraints>
      <constrainTo>$l7</constrainTo>
      <attractTo threshold="0.2"><point x="$seven_deltat" y="$x7Target"></point></attractTo>
      <constrainToGraph />
    </constraints>
  </point>
  <lineSegment fixed hide="$step < 14" endpoints="$P6b $P7b" styleNumber="3" layer="3" />



  <line name="lineSlope8" through="$P7b" slope="$m8Target" hide />
  <point hide="$step !=15" x="5" y="-4" name="P8" styleNumber="3" layer="3">
    <constraints>
      <attractTo>$lineSlope8</attractTo>
    </constraints>
  </point>
  <line through="$P7b $P8" styleNumber="$l8Style" draggable="false" label="slope = $m8" name="l8" hide="$step < 15 or $step > 16" layer="3" />

  <point hide="$step < 16" fixed="$step != 16" name="P8b" styleNumber="3" x="3.1" y="0" layer="3">
    <constraints>
      <constrainTo>$l8</constrainTo>
      <attractTo threshold="0.2"><point x="$eight_deltat" y="$x8Target"></point></attractTo>
      <constrainToGraph />
    </constraints>
  </point>
  <lineSegment fixed hide="$step < 16" endpoints="$P7b $P8b" styleNumber="3" layer="3" />


</graph>



<sideBySide>
<aside boxed collapsible="false">
  <title>Instructions</title>

<conditionalContent>
  <case condition="$step = 1">

    <p>Step 1 of $Nsteps: Move the point to draw the linear approximation for the first Forward Euler step at <m>t=0</m>.</p>

    <p hide="$m1 != $m1Target">Line is correct!  Click Next to continue.</p>
  </case>
  <case condition="$step=2">
    <p>Step 2 of $Nsteps.  Move the point along the line to estimate <m>\hat{x}($deltat)</m>.</p>

    <p><m>\hat{x}($t1) = $x1</m></p>

    <p hide="$t1 != $deltat">Estimate completed!  Click Next to continue.</p>
  </case>
  <case condition="$step = 3">

    <p>Step 3 of $Nsteps: Move the point to draw the linear approximation for the second Forward Euler step at <m>t=$deltat</m>.</p>

    <p hide="$m2 != $m2Target">Line is correct!  Click Next to continue.</p>
  </case>

  <case condition="$step=4">
    <p>Step 4 of $Nsteps.   Move the point along the line to estimate <m>\hat{x}($two_deltat)</m>.</p>

    <p><m>\hat{x}($t2) = $x2</m></p>

    <p hide="$t2 != $two_deltat">Estimate completed!  Click Next to continue.</p>
  </case>

  <case condition="$step = 5">

    <p>Step 5 of $Nsteps: Move the point to draw the linear approximation for the third Forward Euler step at <m>t=$two_deltat</m>.</p>

    <p hide="$m3 != $m3Target">Line is correct!  Click Next to continue.</p>
  </case>

  <case condition="$step=6">
    <p>Step 6 of $Nsteps.   Move the point along the line to estimate <m>\hat{x}($three_deltat)</m>.</p>

    <p><m>\hat{x}($t3) = $x3</m></p>

    <p hide="$t3 != $three_deltat">Estimate completed!  Click Next to continue.</p>
  </case>

  <case condition="$step = 7">

    <p>Step 7 of $Nsteps: Move the point to draw the linear approximation for the fourth Forward Euler step at <m>t=$three_deltat</m>.</p>

    <p hide="$m4 != $m4Target">Line is correct!  Click Next to continue.</p>
  </case>


  <case condition="$step=8">
    <p>Step 8 of $Nsteps.   Move the point along the line to estimate <m>\hat{x}($four_deltat)</m>.</p>

    <p><m>\hat{x}($t4) = $x4</m></p>

    <p hide="$t4 != $four_deltat">Estimate completed!
    </p>
  </case>

  <case condition="$step = 9">

    <p>Step 9 of $Nsteps: Move the point to draw the linear approximation for the fifth Forward Euler step at <m>t=$four_deltat</m>.</p>

    <p hide="$m5 != $m5Target">Line is correct!  Click Next to continue.</p>
  </case>


  <case condition="$step=10">
    <p>Step 10 of $Nsteps.   Move the point along the line to estimate <m>\hat{x}($five_deltat)</m>.</p>

    <p><m>\hat{x}($t5) = $x5</m></p>

    <p hide="$t5 != $five_deltat">Estimate completed!
    </p>
  </case>

  <case condition="$step = 11">

    <p>Step 11 of $Nsteps: Move the point to draw the linear approximation for the sixth Forward Euler step at <m>t=$five_deltat</m>.</p>

    <p hide="$m6 != $m6Target">Line is correct!  Click Next to continue.</p>
  </case>


  <case condition="$step=12">
    <p>Step 12 of $Nsteps.   Move the point along the line to estimate <m>\hat{x}($six_deltat)</m>.</p>

    <p><m>\hat{x}($t6) = $x6</m></p>

    <p hide="$t6 != $six_deltat">Estimate completed!
    </p>
  </case>

  <case condition="$step = 13">

    <p>Step 13 of $Nsteps: Move the point to draw the linear approximation for the seventh Forward Euler step at <m>t=$six_deltat</m>.</p>

    <p hide="$m7 != $m7Target">Line is correct!  Click Next to continue.</p>
  </case>


  <case condition="$step=14">
    <p>Step 14 of $Nsteps.   Move the point along the line to estimate <m>\hat{x}($seven_deltat)</m>.</p>

    <p><m>\hat{x}($t7) = $x7</m></p>

    <p hide="$t7 != $seven_deltat">Estimate completed!
    </p>
  </case>

  <case condition="$step = 15">

    <p>Step 15 of $Nsteps: Move the point to draw the linear approximation for the eighth Forward Euler step at <m>t=$seven_deltat</m>.</p>

    <p hide="$m8 != $m8Target">Line is correct!  Click Next to continue.</p>
  </case>


  <case condition="$step=16">
    <p>Step 16 of $Nsteps.   Move the point along the line to estimate <m>\hat{x}($eight_deltat)</m>.</p>

    <p><m>\hat{x}($t8) = $x8</m></p>

    <p hide="$t8 != $eight_deltat">Estimate completed!
    <answer><award><when>true</when></award></answer>
    </p>
  </case>

</conditionalContent>

  <updateValue label="Prev" tname="step" newValue="$step-1" disabled="$step=1" name="prev" />
  <updateValue label="Next" tname="step" newValue="$step+1" disabled="$disableNext" name="next" />

</aside>

<aside boxed collapsible="false">
  <title>Results</title>

    <md>
      <mrow>
        x(0) \amp = $x0
      </mrow>
      <mrow hide="$step < 2">
        \hat{x}($t1) \amp = $x1
      </mrow>
      <mrow hide="$step < 4">
        \hat{x}($t2) \amp = $x2
      </mrow>
      <mrow hide="$step < 6">
        \hat{x}($t3) \amp = $x3
      </mrow>
      <mrow hide="$step < 8">
        \hat{x}($t4) \amp = $x4
      </mrow>
      <mrow hide="$step < 10">
        \hat{x}($t5) \amp = $x5
      </mrow>
      <mrow hide="$step < 12">
        \hat{x}($t6) \amp = $x6
      </mrow>
      <mrow hide="$step < 14">
        \hat{x}($t7) \amp = $x7
      </mrow>
      <mrow hide="$step < 16">
        \hat{x}($t8) \amp = $x8
      </mrow>
    </md>

</aside>
</sideBySide>



</li> -->



</ol>


<solution>


<ol>

<li>
<p>The linear approximation at <m>t=0</m> is <m>L_0(t) = $x0  + $f0 (t-0)</m>. Plugging in <m>$end </m> for <m>t</m> gives us <m>L_0($end ) = $x0  + $f0  \cdot $end  = $end_in_one </m>.</p>

<p>The error of the linear approximation increases as <m>t</m> moves away from <m>a</m> and decreases as <m>t</m> moves toward <m>a</m>.</p>
</li>

<li>
<p>We can't use a linear approximation anywhere besides at <m>t=0</m> because we don't have enough information.  We know the value of the derivative for all <m>t</m>, but we don't know the value of <m>x </m> at any value of <m>t</m> other than <m>0</m>.</p>

<p>If we estimate <m>x ($mid )</m> using the linear approximation from part a, we get <m>L_0($mid )= $x0  + $f0  \cdot $mid  = $mid_in_one </m>.  We can take this to be an approximation for <m>x ($mid )</m> to get the following linear approximation: <m>L_$mid (t)= $mid_in_one  + $f_mid  (<copy prop="formula" tname="t_minus_mid" />)</m>.</p>

<p>Now we can estimate <m>x ($end )</m> using this new linear approximation:
</p>
<p>

<m>L_$mid ($end ) = $mid_in_one  + $f_mid  ($mid ) = $end_in_two </m>.</p>

<p>Unfortunately, there is nothing that guarantees that this estimate is better than the first estimate.  In general, it will be better, but there are some functions and values of <m>t</m> for which this is not the case.</p>
</li>

<li>
<p>If we plug <m>$end </m> into the actual solution to the differential equation, we get <m>x  ($end ) = $xfun_end </m>.  Comparing this to the estimates from parts a and b, we find that the estimate from part b is better.  Neither is good, however, because <m>$end_in_one </m> and <m>$end_in_two </m> are both quite different from <m>$xfun_end </m>.  About the best that can be said about <m>$end_in_two </m> is that it is the same order of magnitude.  On the other hand, <m>$end_in_one </m> isn't even the correct sign.</p>

<p>The estimate from part b is still a problem because we already got a lot of error from the first linear approximation.  Consider that <m>x ($mid )=$xfun_mid </m> is not very close to our approximation of <m>$mid_in_one </m>.  In order to get a better approximation, we have to take smaller time intervals and repeat the process.  The tradeoff for smaller time intervals is a significant increase in computational time, since halving the interval size doubles the number of computations.</p>
</li>

<li>

</li>

<li>
<p>Consider parts a and b in the context of Forward Euler.  Part a takes <m>\Delta t = $end </m> and requires only one step.  Part b takes <m>\Delta t = $mid </m> and requires <m>2</m> steps.</p> 
</li>

<li>
<p>Using <m>\Delta t = $deltat_set </m>, we have to add <m>$deltat_set </m> to <m>\hat{ x  }(t_{n-1})</m> to get <m>\hat{ x  }(t_{n})</m>. Then the first few values of <m>t_n</m> are 
</p>
<p>

<m>t_1= $deltat_set </m> 
</p>
<p>

<m>t_2= $t2 </m> 
</p>
<p>

<m>t_3= $t3 </m> 
</p>
<p>

etc. and we can stop when <m>t_n=4</m>, which is when <m>n=8</m>.
</p>

<p>
This yields the following sequence of approximations:
</p>
<p>

<m>\hat{ x  }(t_1) = $x0  + $f0  ($deltat_setb ) = $x1b </m>
</p>
<p>

<m>\hat{ x  }(t_2) = $x1b  + $f1b  ($deltat_setb )= $x2b </m> 
</p>
<p>

<m>\hat{ x  }(t_3) = $x2b  + $f2b  ($deltat_setb ) = $x3b </m>
</p>
<p>

<m>\hat{ x  }(t_4) = $x3b  + $f3b  ($deltat_setb )= $x4b </m> 
</p>


</li>

  <li>

    
  </li>

<li>
<p>Using <m>\Delta t = $deltat_set </m>, we have to add <m>$deltat_set </m> to <m>\hat{ x  }(t_{n-1})</m> to get <m>\hat{ x  }(t_{n})</m>. Then the first few values of <m>t_n</m> are 
</p>
<p>

<m>t_1= $deltat_set </m> 
</p>
<p>

<m>t_2= $t2 </m> 
</p>
<p>

<m>t_3= $t3 </m> 
</p>
<p>

etc. and we can stop when <m>t_n=4</m>, which is when <m>n=8</m>.
</p>

<p>
This yields the following sequence of approximations:
</p>
<p>

<m>\hat{ x  }(t_1) = $x0  + $f0  ($deltat_set ) = $x1 </m>
</p>
<p>

<m>\hat{ x  }(t_2) = $x1  + $f1  ($deltat_set )= $x2 </m> 
</p>
<p>

<m>\hat{ x  }(t_3) = $x2  + $f2  ($deltat_set ) = $x3 </m>
</p>
<p>

<m>\hat{ x  }(t_4) = $x3  + $f3  ($deltat_set )= $x4 </m> 
</p>
<p>

<m>\hat{ x  }(t_5) = $x4  + $f4  ($deltat_set ) = $x5 </m>
</p>
<p>

<m>\hat{ x  }(t_6) = $x5  + $f5  ($deltat_set )= $x6 </m> 
</p>
<p>

<m>\hat{ x  }(t_7) = $x6  + $f6  ($deltat_set ) = $x7 </m>
</p>
<p>

<m>\hat{ x  }(t_8) = $x7  + $f7  ($deltat_set )= $x8 </m> 
</p>

</li>


</ol>

</solution>


</problem>