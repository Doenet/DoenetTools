import { e as getListWithInsertedItems$2, f as getListWithRemovedItems$2, h as getListWithInsertedItems$3, i as getListWithRemovedItems$3, s as setCaretPosition, j as extend, k as TextEditor, S as SHORTCUTS_GROUP_NAVIGATION, l as stopImmediatePropagation, n as isDefined, o as addClass, p as getScrollbarWidth, q as outerWidth, t as textRenderer, u as stringify, v as getCaretPosition, w as getSelectionEndPosition, x as pivot, y as getTrimmingContainer, z as offset, A as outerHeight, D as arrayMap, E as stripTags, K as KEY_CODES, F as isPrintableChar, G as hasClass, B as BaseEditor, I as EventManager, J as isFunctionKey, L as deepExtend, H as Hooks, M as empty, N as removeClass, O as objectEach, P as fastInnerHTML, Q as EDITOR_STATE, R as _register, U as baseRenderer, V as isEmpty, W as SHORTCUTS_GROUP_EDITOR$1, X as isNumeric, Y as rangeEach, Z as fixRegexpWellKnownSymbolLogic, $ as regexpExecAbstract, a0 as _getEditorInstance, a1 as _register$2, _ as _register$3, T as TextCellType, a2 as collectionWeak, a3 as defineGetter, a4 as getPluginsNames, a5 as arrayEach, a6 as hasPlugin, a7 as hasItem, a8 as hasItem$1, a9 as hasItem$3, aa as isObject, ab as PhysicalIndexToValueMap, ac as hasOwnProperty, ad as isPercentValue, ae as valueAccordingPercent, af as ViewportColumnsCalculator, ag as arrayReduce, ah as arrayFilter, ai as cancelAnimationFrame, aj as requestAnimationFrame, ak as isVisible, al as getIncreasedIndexes, am as getDecreasedIndexes, an as IndexMap, ao as warn, ap as arrayUnique, aq as fastInnerText, ar as LinkedPhysicalIndexToValueMap, as as isRightClick, at as IndexesSequence, au as isUndefined, av as isFunction, aw as stringRepeat, ax as thisNumberValue, ay as toSingleLine, az as mixin, aA as localHooks, aB as debounce, aC as closest, aD as deepClone, aE as isChildOf, aF as CONTEXTMENU_ITEMS_EDIT_COMMENT, aG as CONTEXTMENU_ITEMS_ADD_COMMENT, aH as CONTEXTMENU_ITEMS_REMOVE_COMMENT, aI as CONTEXTMENU_ITEMS_READ_ONLY_COMMENT, aJ as CONTEXTMENU_ITEMS_ALIGNMENT, aK as CONTEXTMENU_ITEMS_ALIGNMENT_LEFT, aL as CONTEXTMENU_ITEMS_ALIGNMENT_CENTER, aM as CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT, aN as CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY, aO as CONTEXTMENU_ITEMS_ALIGNMENT_TOP, aP as CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE, aQ as CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM, aR as CONTEXTMENU_ITEMS_CLEAR_COLUMN, aS as CONTEXTMENU_ITEMS_INSERT_LEFT, aT as CONTEXTMENU_ITEMS_INSERT_RIGHT, aU as CONTEXTMENU_ITEMS_READ_ONLY, aV as CONTEXTMENU_ITEMS_REDO, aW as CONTEXTMENU_ITEMS_REMOVE_COLUMN, aX as transformSelectionToColumnDistance, aY as CONTEXTMENU_ITEMS_REMOVE_ROW, aZ as transformSelectionToRowDistance, a_ as CONTEXTMENU_ITEMS_ROW_ABOVE, a$ as CONTEXTMENU_ITEMS_ROW_BELOW, b0 as CONTEXTMENU_ITEMS_NO_ITEMS, b1 as CONTEXTMENU_ITEMS_UNDO, b2 as getWindowScrollTop, b3 as getWindowScrollLeft, b4 as getParentWindow, b5 as isWindowsOS, b6 as isMobileBrowser, b7 as isIpadOS, C as Core, b8 as isInput, b9 as CONTEXTMENU_ITEMS_COPY, ba as CONTEXTMENU_ITEMS_CUT, bb as selectElementIfAllowed, bc as stringify$1, bd as _dataToHTML, be as sanitize, bf as htmlToGridSettings, bg as parse, bh as getSelectionText, bi as CONTEXTMENU_ITEMS_BORDERS_BOTTOM, bj as CONTEXTMENU_ITEMS_BORDERS_LEFT, bk as CONTEXTMENU_ITEMS_REMOVE_BORDERS, bl as CONTEXTMENU_ITEMS_BORDERS_RIGHT, bm as CONTEXTMENU_ITEMS_BORDERS_TOP, bn as detectSelectionType, bo as normalizeSelectionFactory, bp as CONTEXTMENU_ITEMS_BORDERS, bq as clone, br as substitute, bs as FILTERS_CONDITIONS_NONE, bt as FILTERS_CONDITIONS_EMPTY, bu as FILTERS_CONDITIONS_NOT_EMPTY, bv as FILTERS_CONDITIONS_EQUAL, bw as FILTERS_CONDITIONS_NOT_EQUAL, bx as FILTERS_CONDITIONS_GREATER_THAN, by as FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL, bz as FILTERS_CONDITIONS_LESS_THAN, bA as FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL, bB as FILTERS_CONDITIONS_AFTER, bC as FILTERS_CONDITIONS_BEFORE, bD as FILTERS_CONDITIONS_BETWEEN, bE as FILTERS_CONDITIONS_NOT_BETWEEN, bF as FILTERS_CONDITIONS_BEGINS_WITH, bG as correctIsRegexpLogic, bH as notARegexp, bI as FILTERS_CONDITIONS_ENDS_WITH, bJ as FILTERS_CONDITIONS_CONTAINS, bK as FILTERS_CONDITIONS_NOT_CONTAIN, bL as FILTERS_CONDITIONS_TOMORROW, bM as FILTERS_CONDITIONS_TODAY, bN as FILTERS_CONDITIONS_YESTERDAY, bO as getComparisonFunction, bP as FILTERS_LABELS_CONJUNCTION, bQ as FILTERS_LABELS_DISJUNCTION, bR as FILTERS_NAMESPACE, bS as FILTERS_BUTTONS_PLACEHOLDER_VALUE, bT as FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE, bU as FILTERS_CONDITIONS_NAMESPACE, bV as isKey, bW as FILTERS_BUTTONS_PLACEHOLDER_SEARCH, bX as FILTERS_BUTTONS_SELECT_ALL, bY as FILTERS_BUTTONS_CLEAR, bZ as partial, b_ as dataRowToChangesArray, b$ as FILTERS_VALUES_BLANK_CELLS, c0 as FILTERS_BUTTONS_OK, c1 as FILTERS_BUTTONS_CANCEL, c2 as curry, c3 as TrimmingMap, c4 as FILTERS_DIVS_FILTER_BY_CONDITION, c5 as FILTERS_DIVS_FILTER_BY_VALUE, c6 as isArrayOfArrays, c7 as error, c8 as toUpperCaseFirst, c9 as CONTEXTMENU_ITEMS_HIDE_COLUMN, ca as CONTEXTMENU_ITEMS_SHOW_COLUMN, cb as HidingMap, cc as CONTEXTMENU_ITEMS_HIDE_ROW, cd as CONTEXTMENU_ITEMS_SHOW_ROW, ce as CONTEXTMENU_ITEMS_FREEZE_COLUMN, cf as CONTEXTMENU_ITEMS_UNFREEZE_COLUMN, cg as isDetached, ch as ViewportRowsCalculator, ci as rangeEachReverse, cj as CONTEXTMENU_ITEMS_UNMERGE_CELLS, ck as CONTEXTMENU_ITEMS_MERGE_CELLS, cl as HEADER_TYPE, cm as ACTIVE_HEADER_TYPE, cn as isLeftClick, co as CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD, cp as CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD, cq as isArrayOfObjects, cr as isTouchSupported, cs as inherit, ct as registerPlugin } from '../common/textType-c38d04a5.js';
import { aq as _register$1, u as requireObjectCoercible, P as isNullOrUndefined, Q as getMethod, M as functionCall, j as toString_1, N as anObject, a9 as collection, au as hasItem$2, aj as staticRegister, d as functionUncurryThis, f as fails, _ as _export, r as toIntegerOrInfinity, A as objectGetOwnPropertyDescriptor, R as toLength } from '../common/registry-1c413641.js';
import { h as hooks } from '../common/moment-82250e2c.js';
import { c as createCommonjsModule, a as commonjsGlobal, d as commonjsRequire } from '../common/_commonjsHelpers-f5d70792.js';

var alterStrategies = new Map([["indexesSequence", {
  getListWithInsertedItems: getListWithInsertedItems$2,
  getListWithRemovedItems: getListWithRemovedItems$2
}], ["physicallyIndexed", {
  getListWithInsertedItems: getListWithInsertedItems$3,
  getListWithRemovedItems: getListWithRemovedItems$3
}]]);
var alterUtilsFactory = function alterUtilsFactory2(indexationStrategy) {
  if (alterStrategies.has(indexationStrategy) === false) {
    throw new Error("Alter strategy with ID '".concat(indexationStrategy, "' does not exist."));
  }
  return alterStrategies.get(indexationStrategy);
};

function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get.bind();
  } else {
    _get = function _get2(target, property, receiver) {
      var base = _superPropBase(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get.apply(this, arguments);
}
function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
var SHORTCUTS_GROUP = "handsontableEditor";
var EDITOR_TYPE = "handsontable";
var HandsontableEditor = /* @__PURE__ */ function(_TextEditor) {
  _inherits(HandsontableEditor2, _TextEditor);
  var _super = _createSuper(HandsontableEditor2);
  function HandsontableEditor2() {
    _classCallCheck(this, HandsontableEditor2);
    return _super.apply(this, arguments);
  }
  _createClass(HandsontableEditor2, [{
    key: "open",
    value: function open() {
      _get(_getPrototypeOf(HandsontableEditor2.prototype), "open", this).call(this);
      if (this.htEditor) {
        this.htEditor.destroy();
      }
      if (this.htContainer.style.display === "none") {
        this.htContainer.style.display = "";
      }
      this.htEditor = new this.hot.constructor(this.htContainer, this.htOptions);
      this.htEditor.init();
      this.htEditor.rootElement.style.display = "";
      if (this.cellProperties.strict) {
        this.htEditor.selectCell(0, 0);
      } else {
        this.htEditor.deselectCell();
      }
      setCaretPosition(this.TEXTAREA, 0, this.TEXTAREA.value.length);
      this.refreshDimensions();
    }
  }, {
    key: "close",
    value: function close() {
      if (this.htEditor) {
        this.htEditor.rootElement.style.display = "none";
      }
      this.removeHooksByKey("beforeKeyDown");
      _get(_getPrototypeOf(HandsontableEditor2.prototype), "close", this).call(this);
    }
  }, {
    key: "prepare",
    value: function prepare(row, col, prop, td, value, cellProperties) {
      _get(_getPrototypeOf(HandsontableEditor2.prototype), "prepare", this).call(this, row, col, prop, td, value, cellProperties);
      var parent = this;
      var options = {
        startRows: 0,
        startCols: 0,
        minRows: 0,
        minCols: 0,
        className: "listbox",
        copyPaste: false,
        autoColumnSize: false,
        autoRowSize: false,
        readOnly: true,
        fillHandle: false,
        autoWrapCol: false,
        autoWrapRow: false,
        afterOnCellMouseDown: function afterOnCellMouseDown(_, coords) {
          var sourceValue = this.getSourceData(coords.row, coords.col);
          if (sourceValue !== void 0) {
            parent.setValue(sourceValue);
          }
          parent.instance.destroyEditor();
        },
        preventWheel: true,
        layoutDirection: this.hot.isRtl() ? "rtl" : "ltr"
      };
      if (this.cellProperties.handsontable) {
        extend(options, cellProperties.handsontable);
      }
      this.htOptions = options;
    }
  }, {
    key: "beginEditing",
    value: function beginEditing(newInitialValue, event) {
      var onBeginEditing = this.hot.getSettings().onBeginEditing;
      if (onBeginEditing && onBeginEditing() === false) {
        return;
      }
      _get(_getPrototypeOf(HandsontableEditor2.prototype), "beginEditing", this).call(this, newInitialValue, event);
    }
  }, {
    key: "createElements",
    value: function createElements() {
      _get(_getPrototypeOf(HandsontableEditor2.prototype), "createElements", this).call(this);
      var DIV = this.hot.rootDocument.createElement("DIV");
      DIV.className = "handsontableEditor";
      this.TEXTAREA_PARENT.appendChild(DIV);
      this.htContainer = DIV;
      this.assignHooks();
    }
  }, {
    key: "finishEditing",
    value: function finishEditing(restoreOriginalValue, ctrlDown, callback) {
      if (this.htEditor && this.htEditor.isListening()) {
        this.hot.listen();
      }
      if (this.htEditor && this.htEditor.getSelectedLast()) {
        var value = this.htEditor.getInstance().getValue();
        if (value !== void 0) {
          this.setValue(value);
        }
      }
      _get(_getPrototypeOf(HandsontableEditor2.prototype), "finishEditing", this).call(this, restoreOriginalValue, ctrlDown, callback);
    }
  }, {
    key: "assignHooks",
    value: function assignHooks() {
      var _this = this;
      this.hot.addHook("afterDestroy", function() {
        if (_this.htEditor) {
          _this.htEditor.destroy();
        }
      });
    }
  }, {
    key: "registerShortcuts",
    value: function registerShortcuts() {
      var _this2 = this;
      var shortcutManager = this.hot.getShortcutManager();
      var editorContext = shortcutManager.getContext("editor");
      _get(_getPrototypeOf(HandsontableEditor2.prototype), "registerShortcuts", this).call(this);
      var contextConfig = {
        group: SHORTCUTS_GROUP,
        relativeToGroup: SHORTCUTS_GROUP_NAVIGATION,
        position: "before"
      };
      var action = function action2(rowToSelect, event) {
        var innerHOT = _this2.htEditor.getInstance();
        if (rowToSelect !== void 0) {
          if (rowToSelect < 0 || innerHOT.flipped && rowToSelect > innerHOT.countRows() - 1) {
            innerHOT.deselectCell();
          } else {
            innerHOT.selectCell(rowToSelect, 0);
          }
          if (innerHOT.getData().length) {
            event.preventDefault();
            stopImmediatePropagation(event);
            _this2.hot.listen();
            _this2.TEXTAREA.focus();
            return false;
          }
        }
      };
      editorContext.addShortcuts([{
        keys: [["ArrowUp"]],
        callback: function callback(event) {
          var innerHOT = _this2.htEditor.getInstance();
          var rowToSelect;
          var selectedRow;
          if (!innerHOT.getSelectedLast() && innerHOT.flipped) {
            rowToSelect = innerHOT.countRows() - 1;
          } else if (innerHOT.getSelectedLast()) {
            if (innerHOT.flipped) {
              selectedRow = innerHOT.getSelectedLast()[0];
              rowToSelect = Math.max(0, selectedRow - 1);
            } else {
              selectedRow = innerHOT.getSelectedLast()[0];
              rowToSelect = selectedRow - 1;
            }
          }
          return action(rowToSelect, event);
        },
        preventDefault: false
      }, {
        keys: [["ArrowDown"]],
        callback: function callback(event) {
          var innerHOT = _this2.htEditor.getInstance();
          var rowToSelect;
          var selectedRow;
          if (!innerHOT.getSelectedLast() && !innerHOT.flipped) {
            rowToSelect = 0;
          } else if (innerHOT.getSelectedLast()) {
            if (innerHOT.flipped) {
              rowToSelect = innerHOT.getSelectedLast()[0] + 1;
            } else if (!innerHOT.flipped) {
              var lastRow = innerHOT.countRows() - 1;
              selectedRow = innerHOT.getSelectedLast()[0];
              rowToSelect = Math.min(lastRow, selectedRow + 1);
            }
          }
          return action(rowToSelect, event);
        },
        preventDefault: false
      }], contextConfig);
    }
  }, {
    key: "unregisterShortcuts",
    value: function unregisterShortcuts() {
      _get(_getPrototypeOf(HandsontableEditor2.prototype), "unregisterShortcuts", this).call(this);
      var shortcutManager = this.hot.getShortcutManager();
      var editorContext = shortcutManager.getContext("editor");
      editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP);
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function get() {
      return EDITOR_TYPE;
    }
  }]);
  return HandsontableEditor2;
}(TextEditor);

function _typeof$1(obj) {
  "@babel/helpers - typeof";
  return _typeof$1 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$1(obj);
}
function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$1() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$1 = Reflect.get.bind();
  } else {
    _get$1 = function _get2(target, property, receiver) {
      var base = _superPropBase$1(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$1.apply(this, arguments);
}
function _superPropBase$1(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$1(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$1(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$1(subClass, superClass);
}
function _setPrototypeOf$1(o, p) {
  _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$1(o, p);
}
function _createSuper$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$1(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$1(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$1(this, result);
  };
}
function _possibleConstructorReturn$1(self, call) {
  if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$1(self);
}
function _assertThisInitialized$1(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$1(o) {
  _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$1(o);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
var privatePool = new WeakMap();
var EDITOR_TYPE$1 = "autocomplete";
var AutocompleteEditor = /* @__PURE__ */ function(_HandsontableEditor) {
  _inherits$1(AutocompleteEditor2, _HandsontableEditor);
  var _super = _createSuper$1(AutocompleteEditor2);
  function AutocompleteEditor2(instance) {
    var _this;
    _classCallCheck$1(this, AutocompleteEditor2);
    _this = _super.call(this, instance);
    _defineProperty(_assertThisInitialized$1(_this), "sortByRelevance", function(value, choices, caseSensitive) {
      var choicesRelevance = [];
      var result = [];
      var valueLength = value.length;
      var choicesCount = choices.length;
      var charsLeft;
      var currentItem;
      var i;
      var valueIndex;
      if (valueLength === 0) {
        for (i = 0; i < choicesCount; i++) {
          result.push(i);
        }
        return result;
      }
      for (i = 0; i < choicesCount; i++) {
        currentItem = stripTags(stringify(choices[i]));
        if (caseSensitive) {
          valueIndex = currentItem.indexOf(value);
        } else {
          var locale = this.cellProperties.locale;
          valueIndex = currentItem.toLocaleLowerCase(locale).indexOf(value.toLocaleLowerCase(locale));
        }
        if (valueIndex !== -1) {
          charsLeft = currentItem.length - valueIndex - valueLength;
          choicesRelevance.push({
            baseIndex: i,
            index: valueIndex,
            charsLeft,
            value: currentItem
          });
        }
      }
      choicesRelevance.sort(function(a, b) {
        if (b.index === -1) {
          return -1;
        }
        if (a.index === -1) {
          return 1;
        }
        if (a.index < b.index) {
          return -1;
        } else if (b.index < a.index) {
          return 1;
        } else if (a.index === b.index) {
          if (a.charsLeft < b.charsLeft) {
            return -1;
          } else if (a.charsLeft > b.charsLeft) {
            return 1;
          }
        }
        return 0;
      });
      for (i = 0, choicesCount = choicesRelevance.length; i < choicesCount; i++) {
        result.push(choicesRelevance[i].baseIndex);
      }
      return result;
    });
    _this.query = null;
    _this.strippedChoices = [];
    _this.rawChoices = [];
    privatePool.set(_assertThisInitialized$1(_this), {
      skipOne: false,
      isMacOS: _this.hot.rootWindow.navigator.platform.indexOf("Mac") > -1
    });
    return _this;
  }
  _createClass$1(AutocompleteEditor2, [{
    key: "getValue",
    value: function getValue() {
      var _this2 = this;
      var selectedValue = this.rawChoices.find(function(value) {
        var strippedValue = _this2.stripValueIfNeeded(value);
        return strippedValue === _this2.TEXTAREA.value;
      });
      if (isDefined(selectedValue)) {
        return selectedValue;
      }
      return this.TEXTAREA.value;
    }
  }, {
    key: "createElements",
    value: function createElements() {
      _get$1(_getPrototypeOf$1(AutocompleteEditor2.prototype), "createElements", this).call(this);
      addClass(this.htContainer, "autocompleteEditor");
      addClass(this.htContainer, this.hot.rootWindow.navigator.platform.indexOf("Mac") === -1 ? "" : "htMacScroll");
    }
  }, {
    key: "open",
    value: function open() {
      var _this3 = this;
      var priv = privatePool.get(this);
      _get$1(_getPrototypeOf$1(AutocompleteEditor2.prototype), "open", this).call(this);
      var choicesListHot = this.htEditor.getInstance();
      var trimDropdown = this.cellProperties.trimDropdown === void 0 ? true : this.cellProperties.trimDropdown;
      this.showEditableElement();
      this.focus();
      var scrollbarWidth = getScrollbarWidth();
      if (scrollbarWidth === 0 && priv.isMacOS) {
        scrollbarWidth += 15;
      }
      this.addHook("beforeKeyDown", function(event) {
        return _this3.onBeforeKeyDown(event);
      });
      choicesListHot.updateSettings({
        colWidths: trimDropdown ? [outerWidth(this.TEXTAREA) - 2] : void 0,
        width: trimDropdown ? outerWidth(this.TEXTAREA) + scrollbarWidth : void 0,
        renderer: function renderer(instance, TD, row, col, prop, value, cellProperties) {
          textRenderer(instance, TD, row, col, prop, value, cellProperties);
          var _this3$cellProperties = _this3.cellProperties, filteringCaseSensitive = _this3$cellProperties.filteringCaseSensitive, allowHtml = _this3$cellProperties.allowHtml, locale = _this3$cellProperties.locale;
          var query = _this3.query;
          var cellValue = stringify(value);
          var indexOfMatch;
          var match;
          if (cellValue && !allowHtml) {
            indexOfMatch = filteringCaseSensitive === true ? cellValue.indexOf(query) : cellValue.toLocaleLowerCase(locale).indexOf(query.toLocaleLowerCase(locale));
            if (indexOfMatch !== -1) {
              match = cellValue.substr(indexOfMatch, query.length);
              cellValue = cellValue.replace(match, "<strong>".concat(match, "</strong>"));
            }
          }
          TD.innerHTML = cellValue;
        },
        autoColumnSize: true
      });
      if (priv.skipOne) {
        priv.skipOne = false;
      }
      this.hot._registerTimeout(function() {
        _this3.queryChoices(_this3.TEXTAREA.value);
      });
    }
  }, {
    key: "close",
    value: function close() {
      this.removeHooksByKey("beforeKeyDown");
      _get$1(_getPrototypeOf$1(AutocompleteEditor2.prototype), "close", this).call(this);
    }
  }, {
    key: "discardEditor",
    value: function discardEditor(result) {
      _get$1(_getPrototypeOf$1(AutocompleteEditor2.prototype), "discardEditor", this).call(this, result);
      this.hot.view.render();
    }
  }, {
    key: "queryChoices",
    value: function queryChoices(query) {
      var _this4 = this;
      var source = this.cellProperties.source;
      this.query = query;
      if (typeof source === "function") {
        source.call(this.cellProperties, query, function(choices) {
          _this4.rawChoices = choices;
          _this4.updateChoicesList(_this4.stripValuesIfNeeded(choices));
        });
      } else if (Array.isArray(source)) {
        this.rawChoices = source;
        this.updateChoicesList(this.stripValuesIfNeeded(source));
      } else {
        this.updateChoicesList([]);
      }
    }
  }, {
    key: "updateChoicesList",
    value: function updateChoicesList(choicesList) {
      var pos = getCaretPosition(this.TEXTAREA);
      var endPos = getSelectionEndPosition(this.TEXTAREA);
      var sortByRelevanceSetting = this.cellProperties.sortByRelevance;
      var filterSetting = this.cellProperties.filter;
      var orderByRelevance = null;
      var highlightIndex = null;
      var choices = choicesList;
      if (sortByRelevanceSetting) {
        orderByRelevance = this.sortByRelevance(this.stripValueIfNeeded(this.getValue()), choices, this.cellProperties.filteringCaseSensitive);
      }
      var orderByRelevanceLength = Array.isArray(orderByRelevance) ? orderByRelevance.length : 0;
      if (filterSetting === false) {
        if (orderByRelevanceLength) {
          highlightIndex = orderByRelevance[0];
        }
      } else {
        var sorted = [];
        for (var i = 0, choicesCount = choices.length; i < choicesCount; i++) {
          if (sortByRelevanceSetting && orderByRelevanceLength <= i) {
            break;
          }
          if (orderByRelevanceLength) {
            sorted.push(choices[orderByRelevance[i]]);
          } else {
            sorted.push(choices[i]);
          }
        }
        highlightIndex = 0;
        choices = sorted;
      }
      this.strippedChoices = choices;
      this.htEditor.loadData(pivot([choices]));
      this.updateDropdownHeight();
      this.flipDropdownIfNeeded();
      if (this.cellProperties.strict === true) {
        this.highlightBestMatchingChoice(highlightIndex);
      }
      this.hot.listen();
      setCaretPosition(this.TEXTAREA, pos, pos === endPos ? void 0 : endPos);
    }
  }, {
    key: "flipDropdownIfNeeded",
    value: function flipDropdownIfNeeded() {
      var trimmingContainer = getTrimmingContainer(this.hot.view._wt.wtTable.TABLE);
      var isWindowAsScrollableElement = trimmingContainer === this.hot.rootWindow;
      var preventOverflow = this.cellProperties.preventOverflow;
      if (isWindowAsScrollableElement || !isWindowAsScrollableElement && (preventOverflow || preventOverflow === "horizontal")) {
        return false;
      }
      var textareaOffset = offset(this.TEXTAREA);
      var textareaHeight = outerHeight(this.TEXTAREA);
      var dropdownHeight = this.getDropdownHeight();
      var trimmingContainerScrollTop = trimmingContainer.scrollTop;
      var headersHeight = outerHeight(this.hot.view._wt.wtTable.THEAD);
      var containerOffset = offset(trimmingContainer);
      var spaceAbove = textareaOffset.top - containerOffset.top - headersHeight + trimmingContainerScrollTop;
      var spaceBelow = trimmingContainer.scrollHeight - spaceAbove - headersHeight - textareaHeight;
      var flipNeeded = dropdownHeight > spaceBelow && spaceAbove > spaceBelow;
      if (flipNeeded) {
        this.flipDropdown(dropdownHeight);
      } else {
        this.unflipDropdown();
      }
      this.limitDropdownIfNeeded(flipNeeded ? spaceAbove : spaceBelow, dropdownHeight);
      return flipNeeded;
    }
  }, {
    key: "limitDropdownIfNeeded",
    value: function limitDropdownIfNeeded(spaceAvailable, dropdownHeight) {
      if (dropdownHeight > spaceAvailable) {
        var tempHeight = 0;
        var i = 0;
        var lastRowHeight = 0;
        var height = null;
        do {
          lastRowHeight = this.htEditor.getRowHeight(i) || this.htEditor.view._wt.getSetting("defaultRowHeight");
          tempHeight += lastRowHeight;
          i += 1;
        } while (tempHeight < spaceAvailable);
        height = tempHeight - lastRowHeight;
        if (this.htEditor.flipped) {
          this.htEditor.rootElement.style.top = "".concat(parseInt(this.htEditor.rootElement.style.top, 10) + dropdownHeight - height, "px");
        }
        this.setDropdownHeight(tempHeight - lastRowHeight);
      }
    }
  }, {
    key: "flipDropdown",
    value: function flipDropdown(dropdownHeight) {
      var dropdownStyle = this.htEditor.rootElement.style;
      dropdownStyle.position = "absolute";
      dropdownStyle.top = "".concat(-dropdownHeight, "px");
      this.htEditor.flipped = true;
    }
  }, {
    key: "unflipDropdown",
    value: function unflipDropdown() {
      var dropdownStyle = this.htEditor.rootElement.style;
      dropdownStyle.position = "absolute";
      dropdownStyle.top = "";
      this.htEditor.flipped = void 0;
    }
  }, {
    key: "updateDropdownHeight",
    value: function updateDropdownHeight() {
      var currentDropdownWidth = this.htEditor.getColWidth(0) + getScrollbarWidth(this.hot.rootDocument) + 2;
      var trimDropdown = this.cellProperties.trimDropdown;
      this.htEditor.updateSettings({
        height: this.getDropdownHeight(),
        width: trimDropdown ? void 0 : currentDropdownWidth
      });
      this.htEditor.view._wt.wtTable.alignOverlaysWithTrimmingContainer();
    }
  }, {
    key: "setDropdownHeight",
    value: function setDropdownHeight(height) {
      this.htEditor.updateSettings({
        height
      });
    }
  }, {
    key: "highlightBestMatchingChoice",
    value: function highlightBestMatchingChoice(index) {
      if (typeof index === "number") {
        this.htEditor.selectCell(index, 0, void 0, void 0, void 0, false);
      } else {
        this.htEditor.deselectCell();
      }
    }
  }, {
    key: "getDropdownHeight",
    value: function getDropdownHeight() {
      var firstRowHeight = this.htEditor.getInstance().getRowHeight(0) || 23;
      var visibleRows = this.cellProperties.visibleRows;
      return this.strippedChoices.length >= visibleRows ? visibleRows * firstRowHeight : this.strippedChoices.length * firstRowHeight + 8;
    }
  }, {
    key: "stripValueIfNeeded",
    value: function stripValueIfNeeded(value) {
      return this.stripValuesIfNeeded([value])[0];
    }
  }, {
    key: "stripValuesIfNeeded",
    value: function stripValuesIfNeeded(values) {
      var allowHtml = this.cellProperties.allowHtml;
      var stringifiedValues = arrayMap(values, function(value) {
        return stringify(value);
      });
      var strippedValues = arrayMap(stringifiedValues, function(value) {
        return allowHtml ? value : stripTags(value);
      });
      return strippedValues;
    }
  }, {
    key: "allowKeyEventPropagation",
    value: function allowKeyEventPropagation(keyCode) {
      var selectedRange = this.htEditor.getSelectedRangeLast();
      var selected = {
        row: selectedRange ? selectedRange.from.row : -1
      };
      var allowed = false;
      if (keyCode === KEY_CODES.ARROW_DOWN && selected.row > 0 && selected.row < this.htEditor.countRows() - 1) {
        allowed = true;
      }
      if (keyCode === KEY_CODES.ARROW_UP && selected.row > -1) {
        allowed = true;
      }
      return allowed;
    }
  }, {
    key: "onBeforeKeyDown",
    value: function onBeforeKeyDown(event) {
      var _this5 = this;
      var priv = privatePool.get(this);
      priv.skipOne = false;
      if (isPrintableChar(event.keyCode) || event.keyCode === KEY_CODES.BACKSPACE || event.keyCode === KEY_CODES.DELETE || event.keyCode === KEY_CODES.INSERT) {
        var timeOffset = 10;
        if (event.keyCode === KEY_CODES.C && (event.ctrlKey || event.metaKey)) {
          return;
        }
        if (!this.isOpened()) {
          timeOffset += 10;
        }
        if (this.htEditor) {
          this.hot._registerTimeout(function() {
            _this5.queryChoices(_this5.TEXTAREA.value);
            priv.skipOne = true;
          }, timeOffset);
        }
      }
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function get() {
      return EDITOR_TYPE$1;
    }
  }]);
  return AutocompleteEditor2;
}(HandsontableEditor);

function _typeof$2(obj) {
  "@babel/helpers - typeof";
  return _typeof$2 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$2(obj);
}
function _classCallCheck$2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$2(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _inherits$2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$2(subClass, superClass);
}
function _setPrototypeOf$2(o, p) {
  _setPrototypeOf$2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$2(o, p);
}
function _createSuper$2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$2(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$2(this, result);
  };
}
function _possibleConstructorReturn$2(self, call) {
  if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$2(self);
}
function _assertThisInitialized$2(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$2(o) {
  _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$2(o);
}
var EDITOR_TYPE$2 = "checkbox";
var CheckboxEditor = /* @__PURE__ */ function(_BaseEditor) {
  _inherits$2(CheckboxEditor2, _BaseEditor);
  var _super = _createSuper$2(CheckboxEditor2);
  function CheckboxEditor2() {
    _classCallCheck$2(this, CheckboxEditor2);
    return _super.apply(this, arguments);
  }
  _createClass$2(CheckboxEditor2, [{
    key: "beginEditing",
    value: function beginEditing(initialValue, event) {
      if (event && event.type === "mouseup") {
        var checkbox = this.TD.querySelector('input[type="checkbox"]');
        if (!hasClass(checkbox, "htBadValue")) {
          checkbox.click();
        }
      }
    }
  }, {
    key: "finishEditing",
    value: function finishEditing() {
    }
  }, {
    key: "init",
    value: function init() {
    }
  }, {
    key: "open",
    value: function open() {
    }
  }, {
    key: "close",
    value: function close() {
    }
  }, {
    key: "getValue",
    value: function getValue() {
    }
  }, {
    key: "setValue",
    value: function setValue() {
    }
  }, {
    key: "focus",
    value: function focus() {
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function get() {
      return EDITOR_TYPE$2;
    }
  }]);
  return CheckboxEditor2;
}(BaseEditor);

var pikaday = createCommonjsModule(function (module, exports) {
/*!
 * Pikaday
 *
 * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/Pikaday/Pikaday
 */

(function (root, factory)
{

    var moment;
    {
        // CommonJS module
        // Load moment.js as an optional dependency
        try { moment = hooks; } catch (e) {}
        module.exports = factory(moment);
    }
}(commonjsGlobal, function (moment)
{

    /**
     * feature detection and helper functions
     */
    var hasMoment = typeof moment === 'function',

    hasEventListeners = !!window.addEventListener,

    document = window.document,

    sto = window.setTimeout,

    addEvent = function(el, e, callback, capture)
    {
        if (hasEventListeners) {
            el.addEventListener(e, callback, !!capture);
        } else {
            el.attachEvent('on' + e, callback);
        }
    },

    removeEvent = function(el, e, callback, capture)
    {
        if (hasEventListeners) {
            el.removeEventListener(e, callback, !!capture);
        } else {
            el.detachEvent('on' + e, callback);
        }
    },

    trim = function(str)
    {
        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g,'');
    },

    hasClass = function(el, cn)
    {
        return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
    },

    addClass = function(el, cn)
    {
        if (!hasClass(el, cn)) {
            el.className = (el.className === '') ? cn : el.className + ' ' + cn;
        }
    },

    removeClass = function(el, cn)
    {
        el.className = trim((' ' + el.className + ' ').replace(' ' + cn + ' ', ' '));
    },

    isArray = function(obj)
    {
        return (/Array/).test(Object.prototype.toString.call(obj));
    },

    isDate = function(obj)
    {
        return (/Date/).test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
    },

    isWeekend = function(date)
    {
        var day = date.getDay();
        return day === 0 || day === 6;
    },

    isLeapYear = function(year)
    {
        // solution lifted from date.js (MIT license): https://github.com/datejs/Datejs
        return ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
    },

    getDaysInMonth = function(year, month)
    {
        return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
    },

    setToStartOfDay = function(date)
    {
        if (isDate(date)) date.setHours(0,0,0,0);
    },

    compareDates = function(a,b)
    {
        // weak date comparison (use setToStartOfDay(date) to ensure correct result)
        return a.getTime() === b.getTime();
    },

    extend = function(to, from, overwrite)
    {
        var prop, hasProp;
        for (prop in from) {
            hasProp = to[prop] !== undefined;
            if (hasProp && typeof from[prop] === 'object' && from[prop] !== null && from[prop].nodeName === undefined) {
                if (isDate(from[prop])) {
                    if (overwrite) {
                        to[prop] = new Date(from[prop].getTime());
                    }
                }
                else if (isArray(from[prop])) {
                    if (overwrite) {
                        to[prop] = from[prop].slice(0);
                    }
                } else {
                    to[prop] = extend({}, from[prop], overwrite);
                }
            } else if (overwrite || !hasProp) {
                to[prop] = from[prop];
            }
        }
        return to;
    },

    fireEvent = function(el, eventName, data)
    {
        var ev;

        if (document.createEvent) {
            ev = document.createEvent('HTMLEvents');
            ev.initEvent(eventName, true, false);
            ev = extend(ev, data);
            el.dispatchEvent(ev);
        } else if (document.createEventObject) {
            ev = document.createEventObject();
            ev = extend(ev, data);
            el.fireEvent('on' + eventName, ev);
        }
    },

    adjustCalendar = function(calendar) {
        if (calendar.month < 0) {
            calendar.year -= Math.ceil(Math.abs(calendar.month)/12);
            calendar.month += 12;
        }
        if (calendar.month > 11) {
            calendar.year += Math.floor(Math.abs(calendar.month)/12);
            calendar.month -= 12;
        }
        return calendar;
    },

    /**
     * defaults and localisation
     */
    defaults = {

        // bind the picker to a form field
        field: null,

        // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
        bound: undefined,

        // data-attribute on the input field with an aria assistance text (only applied when `bound` is set)
        ariaLabel: 'Use the arrow keys to pick a date',

        // position of the datepicker, relative to the field (default to bottom & left)
        // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
        position: 'bottom left',

        // automatically fit in the viewport even if it means repositioning from the position option
        reposition: true,

        // the default output format for `.toString()` and `field` value
        format: 'YYYY-MM-DD',

        // the toString function which gets passed a current date object and format
        // and returns a string
        toString: null,

        // used to create date object from current input string
        parse: null,

        // the initial date to view when first opened
        defaultDate: null,

        // make the `defaultDate` the initial selected value
        setDefaultDate: false,

        // first day of week (0: Sunday, 1: Monday etc)
        firstDay: 0,

        // minimum number of days in the week that gets week number one
        // default ISO 8601, week 01 is the week with the first Thursday (4)
        firstWeekOfYearMinDays: 4,

        // the default flag for moment's strict date parsing
        formatStrict: false,

        // the minimum/earliest date that can be selected
        minDate: null,
        // the maximum/latest date that can be selected
        maxDate: null,

        // number of years either side, or array of upper/lower range
        yearRange: 10,

        // show week numbers at head of row
        showWeekNumber: false,

        // Week picker mode
        pickWholeWeek: false,

        // used internally (don't config outside)
        minYear: 0,
        maxYear: 9999,
        minMonth: undefined,
        maxMonth: undefined,

        startRange: null,
        endRange: null,

        isRTL: false,

        // Additional text to append to the year in the calendar title
        yearSuffix: '',

        // Render the month after year in the calendar title
        showMonthAfterYear: false,

        // Render days of the calendar grid that fall in the next or previous month
        showDaysInNextAndPreviousMonths: false,

        // Allows user to select days that fall in the next or previous month
        enableSelectionDaysInNextAndPreviousMonths: false,

        // how many months are visible
        numberOfMonths: 1,

        // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
        // only used for the first display or when a selected date is not visible
        mainCalendar: 'left',

        // Specify a DOM element to render the calendar in
        container: undefined,

        // Blur field when date is selected
        blurFieldOnSelect : true,

        // internationalization
        i18n: {
            previousMonth : 'Previous Month',
            nextMonth     : 'Next Month',
            months        : ['January','February','March','April','May','June','July','August','September','October','November','December'],
            weekdays      : ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
            weekdaysShort : ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']
        },

        // Theme Classname
        theme: null,

        // events array
        events: [],

        // callback function
        onSelect: null,
        onOpen: null,
        onClose: null,
        onDraw: null,

        // Enable keyboard input
        keyboardInput: true
    },


    /**
     * templating functions to abstract HTML rendering
     */
    renderDayName = function(opts, day, abbr)
    {
        day += opts.firstDay;
        while (day >= 7) {
            day -= 7;
        }
        return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
    },

    renderDay = function(opts)
    {
        var arr = [];
        var ariaSelected = 'false';
        if (opts.isEmpty) {
            if (opts.showDaysInNextAndPreviousMonths) {
                arr.push('is-outside-current-month');

                if(!opts.enableSelectionDaysInNextAndPreviousMonths) {
                    arr.push('is-selection-disabled');
                }

            } else {
                return '<td class="is-empty"></td>';
            }
        }
        if (opts.isDisabled) {
            arr.push('is-disabled');
        }
        if (opts.isToday) {
            arr.push('is-today');
        }
        if (opts.isSelected) {
            arr.push('is-selected');
            ariaSelected = 'true';
        }
        if (opts.hasEvent) {
            arr.push('has-event');
        }
        if (opts.isInRange) {
            arr.push('is-inrange');
        }
        if (opts.isStartRange) {
            arr.push('is-startrange');
        }
        if (opts.isEndRange) {
            arr.push('is-endrange');
        }
        return '<td data-day="' + opts.day + '" class="' + arr.join(' ') + '" aria-selected="' + ariaSelected + '">' +
                 '<button class="pika-button pika-day" type="button" ' +
                    'data-pika-year="' + opts.year + '" data-pika-month="' + opts.month + '" data-pika-day="' + opts.day + '">' +
                        opts.day +
                 '</button>' +
               '</td>';
    },

    isoWeek = function(date, firstWeekOfYearMinDays) {
        // Ensure we're at the start of the day.
        date.setHours(0, 0, 0, 0);

        // Thursday in current week decides the year because January 4th
        // is always in the first week according to ISO8601.
        var yearDay        = date.getDate(),
            weekDay        = date.getDay(),
            dayInFirstWeek = firstWeekOfYearMinDays,
            dayShift       = dayInFirstWeek - 1, // counting starts at 0
            daysPerWeek    = 7,
            prevWeekDay    = function(day) { return (day + daysPerWeek - 1) % daysPerWeek; };

        // Adjust to Thursday in week 1 and count number of weeks from date to week 1.
        date.setDate(yearDay + dayShift - prevWeekDay(weekDay));

        var jan4th      = new Date(date.getFullYear(), 0, dayInFirstWeek),
            msPerDay    = 24 * 60 * 60 * 1000,
            daysBetween = (date.getTime() - jan4th.getTime()) / msPerDay,
            weekNum     = 1 + Math.round((daysBetween - dayShift + prevWeekDay(jan4th.getDay())) / daysPerWeek);

        return weekNum;
    },

    renderWeek = function (d, m, y, firstWeekOfYearMinDays) {
        var date = new Date(y, m, d),
            week = hasMoment ? moment(date).isoWeek() : isoWeek(date, firstWeekOfYearMinDays);

        return '<td class="pika-week">' + week + '</td>';
    },

    renderRow = function(days, isRTL, pickWholeWeek, isRowSelected)
    {
        return '<tr class="pika-row' + (pickWholeWeek ? ' pick-whole-week' : '') + (isRowSelected ? ' is-selected' : '') + '">' + (isRTL ? days.reverse() : days).join('') + '</tr>';
    },

    renderBody = function(rows)
    {
        return '<tbody>' + rows.join('') + '</tbody>';
    },

    renderHead = function(opts)
    {
        var i, arr = [];
        if (opts.showWeekNumber) {
            arr.push('<th></th>');
        }
        for (i = 0; i < 7; i++) {
            arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + '</abbr></th>');
        }
        return '<thead><tr>' + (opts.isRTL ? arr.reverse() : arr).join('') + '</tr></thead>';
    },

    renderTitle = function(instance, c, year, month, refYear, randId)
    {
        var i, j, arr,
            opts = instance._o,
            isMinYear = year === opts.minYear,
            isMaxYear = year === opts.maxYear,
            html = '<div id="' + randId + '" class="pika-title" role="heading" aria-live="assertive">',
            monthHtml,
            yearHtml,
            prev = true,
            next = true;

        for (arr = [], i = 0; i < 12; i++) {
            arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' +
                (i === month ? ' selected="selected"': '') +
                ((isMinYear && i < opts.minMonth) || (isMaxYear && i > opts.maxMonth) ? ' disabled="disabled"' : '') + '>' +
                opts.i18n.months[i] + '</option>');
        }

        monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month" tabindex="-1">' + arr.join('') + '</select></div>';

        if (isArray(opts.yearRange)) {
            i = opts.yearRange[0];
            j = opts.yearRange[1] + 1;
        } else {
            i = year - opts.yearRange;
            j = 1 + year + opts.yearRange;
        }

        for (arr = []; i < j && i <= opts.maxYear; i++) {
            if (i >= opts.minYear) {
                arr.push('<option value="' + i + '"' + (i === year ? ' selected="selected"': '') + '>' + (i) + '</option>');
            }
        }
        yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + arr.join('') + '</select></div>';

        if (opts.showMonthAfterYear) {
            html += yearHtml + monthHtml;
        } else {
            html += monthHtml + yearHtml;
        }

        if (isMinYear && (month === 0 || opts.minMonth >= month)) {
            prev = false;
        }

        if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
            next = false;
        }

        if (c === 0) {
            html += '<button class="pika-prev' + (prev ? '' : ' is-disabled') + '" type="button">' + opts.i18n.previousMonth + '</button>';
        }
        if (c === (instance._o.numberOfMonths - 1) ) {
            html += '<button class="pika-next' + (next ? '' : ' is-disabled') + '" type="button">' + opts.i18n.nextMonth + '</button>';
        }

        return html += '</div>';
    },

    renderTable = function(opts, data, randId)
    {
        return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + randId + '">' + renderHead(opts) + renderBody(data) + '</table>';
    },


    /**
     * Pikaday constructor
     */
    Pikaday = function(options)
    {
        var self = this,
            opts = self.config(options);

        self._onMouseDown = function(e)
        {
            if (!self._v) {
                return;
            }
            e = e || window.event;
            var target = e.target || e.srcElement;
            if (!target) {
                return;
            }

            if (!hasClass(target, 'is-disabled')) {
                if (hasClass(target, 'pika-button') && !hasClass(target, 'is-empty') && !hasClass(target.parentNode, 'is-disabled')) {
                    self.setDate(new Date(target.getAttribute('data-pika-year'), target.getAttribute('data-pika-month'), target.getAttribute('data-pika-day')));
                    if (opts.bound) {
                        sto(function() {
                            self.hide();
                            if (opts.blurFieldOnSelect && opts.field) {
                                opts.field.blur();
                            }
                        }, 100);
                    }
                }
                else if (hasClass(target, 'pika-prev')) {
                    self.prevMonth();
                }
                else if (hasClass(target, 'pika-next')) {
                    self.nextMonth();
                }
            }
            if (!hasClass(target, 'pika-select')) {
                // if this is touch event prevent mouse events emulation
                if (e.preventDefault) {
                    e.preventDefault();
                } else {
                    e.returnValue = false;
                    return false;
                }
            } else {
                self._c = true;
            }
        };

        self._onChange = function(e)
        {
            e = e || window.event;
            var target = e.target || e.srcElement;
            if (!target) {
                return;
            }
            if (hasClass(target, 'pika-select-month')) {
                self.gotoMonth(target.value);
            }
            else if (hasClass(target, 'pika-select-year')) {
                self.gotoYear(target.value);
            }
        };

        self._onKeyChange = function(e)
        {
            e = e || window.event;

            if (self.isVisible()) {

                switch(e.keyCode){
                    case 13:
                    case 27:
                        if (opts.field) {
                            opts.field.blur();
                        }
                        break;
                    case 37:
                        self.adjustDate('subtract', 1);
                        break;
                    case 38:
                        self.adjustDate('subtract', 7);
                        break;
                    case 39:
                        self.adjustDate('add', 1);
                        break;
                    case 40:
                        self.adjustDate('add', 7);
                        break;
                    case 8:
                    case 46:
                        self.setDate(null);
                        break;
                }
            }
        };

        self._parseFieldValue = function()
        {
            if (opts.parse) {
                return opts.parse(opts.field.value, opts.format);
            } else if (hasMoment) {
                var date = moment(opts.field.value, opts.format, opts.formatStrict);
                return (date && date.isValid()) ? date.toDate() : null;
            } else {
                return new Date(Date.parse(opts.field.value));
            }
        };

        self._onInputChange = function(e)
        {
            var date;

            if (e.firedBy === self) {
                return;
            }
            date = self._parseFieldValue();
            if (isDate(date)) {
              self.setDate(date);
            }
            if (!self._v) {
                self.show();
            }
        };

        self._onInputFocus = function()
        {
            self.show();
        };

        self._onInputClick = function()
        {
            self.show();
        };

        self._onInputBlur = function()
        {
            // IE allows pika div to gain focus; catch blur the input field
            var pEl = document.activeElement;
            do {
                if (hasClass(pEl, 'pika-single')) {
                    return;
                }
            }
            while ((pEl = pEl.parentNode));

            if (!self._c) {
                self._b = sto(function() {
                    self.hide();
                }, 50);
            }
            self._c = false;
        };

        self._onClick = function(e)
        {
            e = e || window.event;
            var target = e.target || e.srcElement,
                pEl = target;
            if (!target) {
                return;
            }
            if (!hasEventListeners && hasClass(target, 'pika-select')) {
                if (!target.onchange) {
                    target.setAttribute('onchange', 'return;');
                    addEvent(target, 'change', self._onChange);
                }
            }
            do {
                if (hasClass(pEl, 'pika-single') || pEl === opts.trigger) {
                    return;
                }
            }
            while ((pEl = pEl.parentNode));
            if (self._v && target !== opts.trigger && pEl !== opts.trigger) {
                self.hide();
            }
        };

        self.el = document.createElement('div');
        self.el.className = 'pika-single' + (opts.isRTL ? ' is-rtl' : '') + (opts.theme ? ' ' + opts.theme : '');

        addEvent(self.el, 'mousedown', self._onMouseDown, true);
        addEvent(self.el, 'touchend', self._onMouseDown, true);
        addEvent(self.el, 'change', self._onChange);

        if (opts.keyboardInput) {
            addEvent(document, 'keydown', self._onKeyChange);
        }

        if (opts.field) {
            if (opts.container) {
                opts.container.appendChild(self.el);
            } else if (opts.bound) {
                document.body.appendChild(self.el);
            } else {
                opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
            }
            addEvent(opts.field, 'change', self._onInputChange);

            if (!opts.defaultDate) {
                opts.defaultDate = self._parseFieldValue();
                opts.setDefaultDate = true;
            }
        }

        var defDate = opts.defaultDate;

        if (isDate(defDate)) {
            if (opts.setDefaultDate) {
                self.setDate(defDate, true);
            } else {
                self.gotoDate(defDate);
            }
        } else {
            self.gotoDate(new Date());
        }

        if (opts.bound) {
            this.hide();
            self.el.className += ' is-bound';
            addEvent(opts.trigger, 'click', self._onInputClick);
            addEvent(opts.trigger, 'focus', self._onInputFocus);
            addEvent(opts.trigger, 'blur', self._onInputBlur);
        } else {
            this.show();
        }
    };


    /**
     * public Pikaday API
     */
    Pikaday.prototype = {


        /**
         * configure functionality
         */
        config: function(options)
        {
            if (!this._o) {
                this._o = extend({}, defaults, true);
            }

            var opts = extend(this._o, options, true);

            opts.isRTL = !!opts.isRTL;

            opts.field = (opts.field && opts.field.nodeName) ? opts.field : null;

            opts.theme = (typeof opts.theme) === 'string' && opts.theme ? opts.theme : null;

            opts.bound = !!(opts.bound !== undefined ? opts.field && opts.bound : opts.field);

            opts.trigger = (opts.trigger && opts.trigger.nodeName) ? opts.trigger : opts.field;

            opts.disableWeekends = !!opts.disableWeekends;

            opts.disableDayFn = (typeof opts.disableDayFn) === 'function' ? opts.disableDayFn : null;

            var nom = parseInt(opts.numberOfMonths, 10) || 1;
            opts.numberOfMonths = nom > 4 ? 4 : nom;

            if (!isDate(opts.minDate)) {
                opts.minDate = false;
            }
            if (!isDate(opts.maxDate)) {
                opts.maxDate = false;
            }
            if ((opts.minDate && opts.maxDate) && opts.maxDate < opts.minDate) {
                opts.maxDate = opts.minDate = false;
            }
            if (opts.minDate) {
                this.setMinDate(opts.minDate);
            }
            if (opts.maxDate) {
                this.setMaxDate(opts.maxDate);
            }

            if (isArray(opts.yearRange)) {
                var fallback = new Date().getFullYear() - 10;
                opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
                opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
            } else {
                opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
                if (opts.yearRange > 100) {
                    opts.yearRange = 100;
                }
            }

            return opts;
        },

        /**
         * return a formatted string of the current selection (using Moment.js if available)
         */
        toString: function(format)
        {
            format = format || this._o.format;
            if (!isDate(this._d)) {
                return '';
            }
            if (this._o.toString) {
              return this._o.toString(this._d, format);
            }
            if (hasMoment) {
              return moment(this._d).format(format);
            }
            return this._d.toDateString();
        },

        /**
         * return a Moment.js object of the current selection (if available)
         */
        getMoment: function()
        {
            return hasMoment ? moment(this._d) : null;
        },

        /**
         * set the current selection from a Moment.js object (if available)
         */
        setMoment: function(date, preventOnSelect)
        {
            if (hasMoment && moment.isMoment(date)) {
                this.setDate(date.toDate(), preventOnSelect);
            }
        },

        /**
         * return a Date object of the current selection
         */
        getDate: function()
        {
            return isDate(this._d) ? new Date(this._d.getTime()) : null;
        },

        /**
         * set the current selection
         */
        setDate: function(date, preventOnSelect)
        {
            if (!date) {
                this._d = null;

                if (this._o.field) {
                    this._o.field.value = '';
                    fireEvent(this._o.field, 'change', { firedBy: this });
                }

                return this.draw();
            }
            if (typeof date === 'string') {
                date = new Date(Date.parse(date));
            }
            if (!isDate(date)) {
                return;
            }

            var min = this._o.minDate,
                max = this._o.maxDate;

            if (isDate(min) && date < min) {
                date = min;
            } else if (isDate(max) && date > max) {
                date = max;
            }

            this._d = new Date(date.getTime());
            setToStartOfDay(this._d);
            this.gotoDate(this._d);

            if (this._o.field) {
                this._o.field.value = this.toString();
                fireEvent(this._o.field, 'change', { firedBy: this });
            }
            if (!preventOnSelect && typeof this._o.onSelect === 'function') {
                this._o.onSelect.call(this, this.getDate());
            }
        },

        /**
         * clear and reset the date
         */
        clear: function()
        {
            this.setDate(null);
        },

        /**
         * change view to a specific date
         */
        gotoDate: function(date)
        {
            var newCalendar = true;

            if (!isDate(date)) {
                return;
            }

            if (this.calendars) {
                var firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1),
                    lastVisibleDate = new Date(this.calendars[this.calendars.length-1].year, this.calendars[this.calendars.length-1].month, 1),
                    visibleDate = date.getTime();
                // get the end of the month
                lastVisibleDate.setMonth(lastVisibleDate.getMonth()+1);
                lastVisibleDate.setDate(lastVisibleDate.getDate()-1);
                newCalendar = (visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate);
            }

            if (newCalendar) {
                this.calendars = [{
                    month: date.getMonth(),
                    year: date.getFullYear()
                }];
                if (this._o.mainCalendar === 'right') {
                    this.calendars[0].month += 1 - this._o.numberOfMonths;
                }
            }

            this.adjustCalendars();
        },

        adjustDate: function(sign, days) {

            var day = this.getDate() || new Date();
            var difference = parseInt(days)*24*60*60*1000;

            var newDay;

            if (sign === 'add') {
                newDay = new Date(day.valueOf() + difference);
            } else if (sign === 'subtract') {
                newDay = new Date(day.valueOf() - difference);
            }

            this.setDate(newDay);
        },

        adjustCalendars: function() {
            this.calendars[0] = adjustCalendar(this.calendars[0]);
            for (var c = 1; c < this._o.numberOfMonths; c++) {
                this.calendars[c] = adjustCalendar({
                    month: this.calendars[0].month + c,
                    year: this.calendars[0].year
                });
            }
            this.draw();
        },

        gotoToday: function()
        {
            this.gotoDate(new Date());
        },

        /**
         * change view to a specific month (zero-index, e.g. 0: January)
         */
        gotoMonth: function(month)
        {
            if (!isNaN(month)) {
                this.calendars[0].month = parseInt(month, 10);
                this.adjustCalendars();
            }
        },

        nextMonth: function()
        {
            this.calendars[0].month++;
            this.adjustCalendars();
        },

        prevMonth: function()
        {
            this.calendars[0].month--;
            this.adjustCalendars();
        },

        /**
         * change view to a specific full year (e.g. "2012")
         */
        gotoYear: function(year)
        {
            if (!isNaN(year)) {
                this.calendars[0].year = parseInt(year, 10);
                this.adjustCalendars();
            }
        },

        /**
         * change the minDate
         */
        setMinDate: function(value)
        {
            if(value instanceof Date) {
                setToStartOfDay(value);
                this._o.minDate = value;
                this._o.minYear  = value.getFullYear();
                this._o.minMonth = value.getMonth();
            } else {
                this._o.minDate = defaults.minDate;
                this._o.minYear  = defaults.minYear;
                this._o.minMonth = defaults.minMonth;
                this._o.startRange = defaults.startRange;
            }

            this.draw();
        },

        /**
         * change the maxDate
         */
        setMaxDate: function(value)
        {
            if(value instanceof Date) {
                setToStartOfDay(value);
                this._o.maxDate = value;
                this._o.maxYear = value.getFullYear();
                this._o.maxMonth = value.getMonth();
            } else {
                this._o.maxDate = defaults.maxDate;
                this._o.maxYear = defaults.maxYear;
                this._o.maxMonth = defaults.maxMonth;
                this._o.endRange = defaults.endRange;
            }

            this.draw();
        },

        setStartRange: function(value)
        {
            this._o.startRange = value;
        },

        setEndRange: function(value)
        {
            this._o.endRange = value;
        },

        /**
         * refresh the HTML
         */
        draw: function(force)
        {
            if (!this._v && !force) {
                return;
            }
            var opts = this._o,
                minYear = opts.minYear,
                maxYear = opts.maxYear,
                minMonth = opts.minMonth,
                maxMonth = opts.maxMonth,
                html = '',
                randId;

            if (this._y <= minYear) {
                this._y = minYear;
                if (!isNaN(minMonth) && this._m < minMonth) {
                    this._m = minMonth;
                }
            }
            if (this._y >= maxYear) {
                this._y = maxYear;
                if (!isNaN(maxMonth) && this._m > maxMonth) {
                    this._m = maxMonth;
                }
            }

            for (var c = 0; c < opts.numberOfMonths; c++) {
                randId = 'pika-title-' + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 2);
                html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year, randId) + this.render(this.calendars[c].year, this.calendars[c].month, randId) + '</div>';
            }

            this.el.innerHTML = html;

            if (opts.bound) {
                if(opts.field.type !== 'hidden') {
                    sto(function() {
                        opts.trigger.focus();
                    }, 1);
                }
            }

            if (typeof this._o.onDraw === 'function') {
                this._o.onDraw(this);
            }

            if (opts.bound) {
                // let the screen reader user know to use arrow keys
                opts.field.setAttribute('aria-label', opts.ariaLabel);
            }
        },

        adjustPosition: function()
        {
            var field, pEl, width, height, viewportWidth, viewportHeight, scrollTop, left, top, clientRect, leftAligned, bottomAligned;

            if (this._o.container) return;

            this.el.style.position = 'absolute';

            field = this._o.trigger;
            pEl = field;
            width = this.el.offsetWidth;
            height = this.el.offsetHeight;
            viewportWidth = window.innerWidth || document.documentElement.clientWidth;
            viewportHeight = window.innerHeight || document.documentElement.clientHeight;
            scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
            leftAligned = true;
            bottomAligned = true;

            if (typeof field.getBoundingClientRect === 'function') {
                clientRect = field.getBoundingClientRect();
                left = clientRect.left + window.pageXOffset;
                top = clientRect.bottom + window.pageYOffset;
            } else {
                left = pEl.offsetLeft;
                top  = pEl.offsetTop + pEl.offsetHeight;
                while((pEl = pEl.offsetParent)) {
                    left += pEl.offsetLeft;
                    top  += pEl.offsetTop;
                }
            }

            // default position is bottom & left
            if ((this._o.reposition && left + width > viewportWidth) ||
                (
                    this._o.position.indexOf('right') > -1 &&
                    left - width + field.offsetWidth > 0
                )
            ) {
                left = left - width + field.offsetWidth;
                leftAligned = false;
            }
            if ((this._o.reposition && top + height > viewportHeight + scrollTop) ||
                (
                    this._o.position.indexOf('top') > -1 &&
                    top - height - field.offsetHeight > 0
                )
            ) {
                top = top - height - field.offsetHeight;
                bottomAligned = false;
            }

            this.el.style.left = left + 'px';
            this.el.style.top = top + 'px';

            addClass(this.el, leftAligned ? 'left-aligned' : 'right-aligned');
            addClass(this.el, bottomAligned ? 'bottom-aligned' : 'top-aligned');
            removeClass(this.el, !leftAligned ? 'left-aligned' : 'right-aligned');
            removeClass(this.el, !bottomAligned ? 'bottom-aligned' : 'top-aligned');
        },

        /**
         * render HTML for a particular month
         */
        render: function(year, month, randId)
        {
            var opts   = this._o,
                now    = new Date(),
                days   = getDaysInMonth(year, month),
                before = new Date(year, month, 1).getDay(),
                data   = [],
                row    = [];
            setToStartOfDay(now);
            if (opts.firstDay > 0) {
                before -= opts.firstDay;
                if (before < 0) {
                    before += 7;
                }
            }
            var previousMonth = month === 0 ? 11 : month - 1,
                nextMonth = month === 11 ? 0 : month + 1,
                yearOfPreviousMonth = month === 0 ? year - 1 : year,
                yearOfNextMonth = month === 11 ? year + 1 : year,
                daysInPreviousMonth = getDaysInMonth(yearOfPreviousMonth, previousMonth);
            var cells = days + before,
                after = cells;
            while(after > 7) {
                after -= 7;
            }
            cells += 7 - after;
            var isWeekSelected = false;
            for (var i = 0, r = 0; i < cells; i++)
            {
                var day = new Date(year, month, 1 + (i - before)),
                    isSelected = isDate(this._d) ? compareDates(day, this._d) : false,
                    isToday = compareDates(day, now),
                    hasEvent = opts.events.indexOf(day.toDateString()) !== -1 ? true : false,
                    isEmpty = i < before || i >= (days + before),
                    dayNumber = 1 + (i - before),
                    monthNumber = month,
                    yearNumber = year,
                    isStartRange = opts.startRange && compareDates(opts.startRange, day),
                    isEndRange = opts.endRange && compareDates(opts.endRange, day),
                    isInRange = opts.startRange && opts.endRange && opts.startRange < day && day < opts.endRange,
                    isDisabled = (opts.minDate && day < opts.minDate) ||
                                 (opts.maxDate && day > opts.maxDate) ||
                                 (opts.disableWeekends && isWeekend(day)) ||
                                 (opts.disableDayFn && opts.disableDayFn(day));

                if (isEmpty) {
                    if (i < before) {
                        dayNumber = daysInPreviousMonth + dayNumber;
                        monthNumber = previousMonth;
                        yearNumber = yearOfPreviousMonth;
                    } else {
                        dayNumber = dayNumber - days;
                        monthNumber = nextMonth;
                        yearNumber = yearOfNextMonth;
                    }
                }

                var dayConfig = {
                        day: dayNumber,
                        month: monthNumber,
                        year: yearNumber,
                        hasEvent: hasEvent,
                        isSelected: isSelected,
                        isToday: isToday,
                        isDisabled: isDisabled,
                        isEmpty: isEmpty,
                        isStartRange: isStartRange,
                        isEndRange: isEndRange,
                        isInRange: isInRange,
                        showDaysInNextAndPreviousMonths: opts.showDaysInNextAndPreviousMonths,
                        enableSelectionDaysInNextAndPreviousMonths: opts.enableSelectionDaysInNextAndPreviousMonths
                    };

                if (opts.pickWholeWeek && isSelected) {
                    isWeekSelected = true;
                }

                row.push(renderDay(dayConfig));

                if (++r === 7) {
                    if (opts.showWeekNumber) {
                        row.unshift(renderWeek(i - before, month, year, opts.firstWeekOfYearMinDays));
                    }
                    data.push(renderRow(row, opts.isRTL, opts.pickWholeWeek, isWeekSelected));
                    row = [];
                    r = 0;
                    isWeekSelected = false;
                }
            }
            return renderTable(opts, data, randId);
        },

        isVisible: function()
        {
            return this._v;
        },

        show: function()
        {
            if (!this.isVisible()) {
                this._v = true;
                this.draw();
                removeClass(this.el, 'is-hidden');
                if (this._o.bound) {
                    addEvent(document, 'click', this._onClick);
                    this.adjustPosition();
                }
                if (typeof this._o.onOpen === 'function') {
                    this._o.onOpen.call(this);
                }
            }
        },

        hide: function()
        {
            var v = this._v;
            if (v !== false) {
                if (this._o.bound) {
                    removeEvent(document, 'click', this._onClick);
                }

                if (!this._o.container) {
                    this.el.style.position = 'static'; // reset
                    this.el.style.left = 'auto';
                    this.el.style.top = 'auto';
                }
                addClass(this.el, 'is-hidden');
                this._v = false;
                if (v !== undefined && typeof this._o.onClose === 'function') {
                    this._o.onClose.call(this);
                }
            }
        },

        /**
         * GAME OVER
         */
        destroy: function()
        {
            var opts = this._o;

            this.hide();
            removeEvent(this.el, 'mousedown', this._onMouseDown, true);
            removeEvent(this.el, 'touchend', this._onMouseDown, true);
            removeEvent(this.el, 'change', this._onChange);
            if (opts.keyboardInput) {
                removeEvent(document, 'keydown', this._onKeyChange);
            }
            if (opts.field) {
                removeEvent(opts.field, 'change', this._onInputChange);
                if (opts.bound) {
                    removeEvent(opts.trigger, 'click', this._onInputClick);
                    removeEvent(opts.trigger, 'focus', this._onInputFocus);
                    removeEvent(opts.trigger, 'blur', this._onInputBlur);
                }
            }
            if (this.el.parentNode) {
                this.el.parentNode.removeChild(this.el);
            }
        }

    };

    return Pikaday;
}));
});

function _typeof$3(obj) {
  "@babel/helpers - typeof";
  return _typeof$3 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$3(obj);
}
function _classCallCheck$3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$3(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$3(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$2() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$2 = Reflect.get.bind();
  } else {
    _get$2 = function _get2(target, property, receiver) {
      var base = _superPropBase$2(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$2.apply(this, arguments);
}
function _superPropBase$2(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$3(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$3(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$3(subClass, superClass);
}
function _setPrototypeOf$3(o, p) {
  _setPrototypeOf$3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$3(o, p);
}
function _createSuper$3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$3(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$3(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$3(this, result);
  };
}
function _possibleConstructorReturn$3(self, call) {
  if (call && (_typeof$3(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$3(self);
}
function _assertThisInitialized$3(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$3(o) {
  _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$3(o);
}
var EDITOR_TYPE$3 = "date";
var SHORTCUTS_GROUP_EDITOR = "dateEditor";
var DateEditor = /* @__PURE__ */ function(_TextEditor) {
  _inherits$3(DateEditor2, _TextEditor);
  var _super = _createSuper$3(DateEditor2);
  function DateEditor2(hotInstance) {
    var _this;
    _classCallCheck$3(this, DateEditor2);
    _this = _super.call(this, hotInstance);
    _this.defaultDateFormat = "DD/MM/YYYY";
    _this.isCellEdited = false;
    _this.parentDestroyed = false;
    _this.$datePicker = null;
    return _this;
  }
  _createClass$3(DateEditor2, [{
    key: "init",
    value: function init() {
      var _this2 = this;
      if (typeof hooks !== "function") {
        throw new Error("You need to include moment.js to your project.");
      }
      if (typeof pikaday !== "function") {
        throw new Error("You need to include Pikaday to your project.");
      }
      _get$2(_getPrototypeOf$3(DateEditor2.prototype), "init", this).call(this);
      this.instance.addHook("afterDestroy", function() {
        _this2.parentDestroyed = true;
        _this2.destroyElements();
      });
    }
  }, {
    key: "createElements",
    value: function createElements() {
      _get$2(_getPrototypeOf$3(DateEditor2.prototype), "createElements", this).call(this);
      this.datePicker = this.hot.rootDocument.createElement("DIV");
      this.datePickerStyle = this.datePicker.style;
      this.datePickerStyle.position = "absolute";
      this.datePickerStyle.top = 0;
      this.datePickerStyle.left = 0;
      this.datePickerStyle.zIndex = 9999;
      this.datePicker.setAttribute("dir", this.hot.isRtl() ? "rtl" : "ltr");
      addClass(this.datePicker, "htDatepickerHolder");
      this.hot.rootDocument.body.appendChild(this.datePicker);
      var eventManager = new EventManager(this);
      eventManager.addEventListener(this.datePicker, "mousedown", function(event) {
        return event.stopPropagation();
      });
    }
  }, {
    key: "destroyElements",
    value: function destroyElements() {
      var datePickerParentElement = this.datePicker.parentNode;
      if (this.$datePicker) {
        this.$datePicker.destroy();
      }
      if (datePickerParentElement) {
        datePickerParentElement.removeChild(this.datePicker);
      }
    }
  }, {
    key: "prepare",
    value: function prepare(row, col, prop, td, value, cellProperties) {
      _get$2(_getPrototypeOf$3(DateEditor2.prototype), "prepare", this).call(this, row, col, prop, td, value, cellProperties);
    }
  }, {
    key: "open",
    value: function open() {
      var event = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      var shortcutManager = this.hot.getShortcutManager();
      var editorContext = shortcutManager.getContext("editor");
      _get$2(_getPrototypeOf$3(DateEditor2.prototype), "open", this).call(this);
      this.showDatepicker(event);
      editorContext.addShortcut({
        keys: [["Enter"]],
        callback: function callback(keyboardEvent) {
          keyboardEvent.stopPropagation();
        },
        group: SHORTCUTS_GROUP_EDITOR
      });
    }
  }, {
    key: "close",
    value: function close() {
      var _this$$datePicker, _this3 = this;
      this._opened = false;
      if ((_this$$datePicker = this.$datePicker) !== null && _this$$datePicker !== void 0 && _this$$datePicker.destroy) {
        this.$datePicker.destroy();
      }
      this.instance._registerTimeout(function() {
        _this3.instance._refreshBorders();
      });
      var shortcutManager = this.hot.getShortcutManager();
      var editorContext = shortcutManager.getContext("editor");
      editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP_EDITOR);
      _get$2(_getPrototypeOf$3(DateEditor2.prototype), "close", this).call(this);
    }
  }, {
    key: "finishEditing",
    value: function finishEditing() {
      var restoreOriginalValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var ctrlDown = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      if (restoreOriginalValue) {
        var value = this.originalValue;
        if (value !== void 0) {
          this.setValue(value);
        }
      }
      _get$2(_getPrototypeOf$3(DateEditor2.prototype), "finishEditing", this).call(this, restoreOriginalValue, ctrlDown);
    }
  }, {
    key: "showDatepicker",
    value: function showDatepicker(event) {
      var offset = this.TD.getBoundingClientRect();
      var dateFormat = this.cellProperties.dateFormat || this.defaultDateFormat;
      var isMouseDown = this.instance.view.isMouseDown();
      var isMeta = event ? isFunctionKey(event.keyCode) : false;
      var dateStr;
      this.datePicker.style.display = "block";
      this.$datePicker = new pikaday(this.getDatePickerConfig());
      this.$datePicker._onInputFocus = function() {
      };
      this.datePickerStyle.top = "".concat(this.hot.rootWindow.pageYOffset + offset.top + outerHeight(this.TD), "px");
      var pickerLeftPosition = this.hot.rootWindow.pageXOffset;
      if (this.hot.isRtl()) {
        pickerLeftPosition = offset.right - outerWidth(this.datePicker);
      } else {
        pickerLeftPosition = offset.left;
      }
      this.datePickerStyle.left = "".concat(pickerLeftPosition, "px");
      if (this.originalValue) {
        dateStr = this.originalValue;
        if (hooks(dateStr, dateFormat, true).isValid()) {
          this.$datePicker.setMoment(hooks(dateStr, dateFormat), true);
        }
        if (this.getValue() !== this.originalValue) {
          this.setValue(this.originalValue);
        }
        if (!isMeta && !isMouseDown) {
          this.setValue("");
        }
      } else if (this.cellProperties.defaultDate) {
        dateStr = this.cellProperties.defaultDate;
        if (hooks(dateStr, dateFormat, true).isValid()) {
          this.$datePicker.setMoment(hooks(dateStr, dateFormat), true);
        }
        if (!isMeta && !isMouseDown) {
          this.setValue("");
        }
      } else {
        this.$datePicker.gotoToday();
      }
    }
  }, {
    key: "hideDatepicker",
    value: function hideDatepicker() {
      this.datePickerStyle.display = "none";
      this.$datePicker.hide();
    }
  }, {
    key: "getDatePickerConfig",
    value: function getDatePickerConfig() {
      var _this4 = this;
      var htInput = this.TEXTAREA;
      var options = {};
      if (this.cellProperties && this.cellProperties.datePickerConfig) {
        deepExtend(options, this.cellProperties.datePickerConfig);
      }
      var origOnSelect = options.onSelect;
      var origOnClose = options.onClose;
      options.field = htInput;
      options.trigger = htInput;
      options.container = this.datePicker;
      options.bound = false;
      options.format = options.format || this.defaultDateFormat;
      options.reposition = options.reposition || false;
      options.isRTL = false;
      options.onSelect = function(value) {
        var dateStr = value;
        if (!isNaN(dateStr.getTime())) {
          dateStr = hooks(dateStr).format(_this4.cellProperties.dateFormat || _this4.defaultDateFormat);
        }
        _this4.setValue(dateStr);
        _this4.hideDatepicker();
        if (origOnSelect) {
          origOnSelect();
        }
      };
      options.onClose = function() {
        if (!_this4.parentDestroyed) {
          _this4.finishEditing(false);
        }
        if (origOnClose) {
          origOnClose();
        }
      };
      return options;
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function get() {
      return EDITOR_TYPE$3;
    }
  }]);
  return DateEditor2;
}(TextEditor);

function _typeof$4(obj) {
  "@babel/helpers - typeof";
  return _typeof$4 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$4(obj);
}
function _classCallCheck$4(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$4(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$4(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$4(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$4(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$3() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$3 = Reflect.get.bind();
  } else {
    _get$3 = function _get2(target, property, receiver) {
      var base = _superPropBase$3(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$3.apply(this, arguments);
}
function _superPropBase$3(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$4(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$4(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$4(subClass, superClass);
}
function _setPrototypeOf$4(o, p) {
  _setPrototypeOf$4 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$4(o, p);
}
function _createSuper$4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$4();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$4(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$4(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$4(this, result);
  };
}
function _possibleConstructorReturn$4(self, call) {
  if (call && (_typeof$4(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$4(self);
}
function _assertThisInitialized$4(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$4() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$4(o) {
  _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$4(o);
}
var EDITOR_TYPE$4 = "dropdown";
var DropdownEditor = /* @__PURE__ */ function(_AutocompleteEditor) {
  _inherits$4(DropdownEditor2, _AutocompleteEditor);
  var _super = _createSuper$4(DropdownEditor2);
  function DropdownEditor2() {
    _classCallCheck$4(this, DropdownEditor2);
    return _super.apply(this, arguments);
  }
  _createClass$4(DropdownEditor2, [{
    key: "prepare",
    value: function prepare(row, col, prop, td, value, cellProperties) {
      _get$3(_getPrototypeOf$4(DropdownEditor2.prototype), "prepare", this).call(this, row, col, prop, td, value, cellProperties);
      this.cellProperties.filter = false;
      this.cellProperties.strict = true;
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function get() {
      return EDITOR_TYPE$4;
    }
  }]);
  return DropdownEditor2;
}(AutocompleteEditor);
Hooks.getSingleton().add("beforeValidate", function(value, row, col) {
  var cellMeta = this.getCellMeta(row, this.propToCol(col));
  if (cellMeta.editor === DropdownEditor) {
    if (cellMeta.strict === void 0) {
      cellMeta.filter = false;
      cellMeta.strict = true;
    }
  }
});

function _typeof$5(obj) {
  "@babel/helpers - typeof";
  return _typeof$5 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$5(obj);
}
function _classCallCheck$5(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$5(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$5(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$5(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$5(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _inherits$5(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$5(subClass, superClass);
}
function _setPrototypeOf$5(o, p) {
  _setPrototypeOf$5 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$5(o, p);
}
function _createSuper$5(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$5();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$5(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$5(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$5(this, result);
  };
}
function _possibleConstructorReturn$5(self, call) {
  if (call && (_typeof$5(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$5(self);
}
function _assertThisInitialized$5(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$5() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$5(o) {
  _getPrototypeOf$5 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$5(o);
}
var EDITOR_TYPE$5 = "numeric";
var NumericEditor = /* @__PURE__ */ function(_TextEditor) {
  _inherits$5(NumericEditor2, _TextEditor);
  var _super = _createSuper$5(NumericEditor2);
  function NumericEditor2() {
    _classCallCheck$5(this, NumericEditor2);
    return _super.apply(this, arguments);
  }
  _createClass$5(NumericEditor2, null, [{
    key: "EDITOR_TYPE",
    get: function get() {
      return EDITOR_TYPE$5;
    }
  }]);
  return NumericEditor2;
}(TextEditor);

function _typeof$6(obj) {
  "@babel/helpers - typeof";
  return _typeof$6 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$6(obj);
}
function _classCallCheck$6(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$6(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$6(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$6(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$6(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$4() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$4 = Reflect.get.bind();
  } else {
    _get$4 = function _get2(target, property, receiver) {
      var base = _superPropBase$4(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$4.apply(this, arguments);
}
function _superPropBase$4(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$6(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$6(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$6(subClass, superClass);
}
function _setPrototypeOf$6(o, p) {
  _setPrototypeOf$6 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$6(o, p);
}
function _createSuper$6(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$6();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$6(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$6(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$6(this, result);
  };
}
function _possibleConstructorReturn$6(self, call) {
  if (call && (_typeof$6(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$6(self);
}
function _assertThisInitialized$6(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$6() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$6(o) {
  _getPrototypeOf$6 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$6(o);
}
var EDITOR_TYPE$6 = "password";
var PasswordEditor = /* @__PURE__ */ function(_TextEditor) {
  _inherits$6(PasswordEditor2, _TextEditor);
  var _super = _createSuper$6(PasswordEditor2);
  function PasswordEditor2() {
    _classCallCheck$6(this, PasswordEditor2);
    return _super.apply(this, arguments);
  }
  _createClass$6(PasswordEditor2, [{
    key: "createElements",
    value: function createElements() {
      _get$4(_getPrototypeOf$6(PasswordEditor2.prototype), "createElements", this).call(this);
      this.TEXTAREA = this.hot.rootDocument.createElement("input");
      this.TEXTAREA.setAttribute("type", "password");
      this.TEXTAREA.setAttribute("data-hot-input", "");
      this.TEXTAREA.className = "handsontableInput";
      this.textareaStyle = this.TEXTAREA.style;
      this.textareaStyle.width = 0;
      this.textareaStyle.height = 0;
      empty(this.TEXTAREA_PARENT);
      this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function get() {
      return EDITOR_TYPE$6;
    }
  }]);
  return PasswordEditor2;
}(TextEditor);

function _typeof$7(obj) {
  "@babel/helpers - typeof";
  return _typeof$7 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$7(obj);
}
function _classCallCheck$7(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$7(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$7(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$7(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$7(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$5() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$5 = Reflect.get.bind();
  } else {
    _get$5 = function _get2(target, property, receiver) {
      var base = _superPropBase$5(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$5.apply(this, arguments);
}
function _superPropBase$5(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$7(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$7(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$7(subClass, superClass);
}
function _setPrototypeOf$7(o, p) {
  _setPrototypeOf$7 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$7(o, p);
}
function _createSuper$7(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$7();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$7(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$7(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$7(this, result);
  };
}
function _possibleConstructorReturn$7(self, call) {
  if (call && (_typeof$7(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$7(self);
}
function _assertThisInitialized$7(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$7() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$7(o) {
  _getPrototypeOf$7 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$7(o);
}
var EDITOR_VISIBLE_CLASS_NAME = "ht_editor_visible";
var SHORTCUTS_GROUP$1 = "selectEditor";
var EDITOR_TYPE$7 = "select";
var SelectEditor = /* @__PURE__ */ function(_BaseEditor) {
  _inherits$7(SelectEditor2, _BaseEditor);
  var _super = _createSuper$7(SelectEditor2);
  function SelectEditor2() {
    _classCallCheck$7(this, SelectEditor2);
    return _super.apply(this, arguments);
  }
  _createClass$7(SelectEditor2, [{
    key: "init",
    value: function init() {
      this.select = this.hot.rootDocument.createElement("SELECT");
      addClass(this.select, "htSelectEditor");
      this.select.style.display = "none";
      this.hot.rootElement.appendChild(this.select);
      this.registerHooks();
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.select.value;
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.select.value = value;
    }
  }, {
    key: "open",
    value: function open() {
      this._opened = true;
      this.refreshDimensions();
      this.select.style.display = "";
      var shortcutManager = this.hot.getShortcutManager();
      shortcutManager.setActiveContextName("editor");
      this.registerShortcuts();
    }
  }, {
    key: "close",
    value: function close() {
      this._opened = false;
      this.select.style.display = "none";
      if (hasClass(this.select, EDITOR_VISIBLE_CLASS_NAME)) {
        removeClass(this.select, EDITOR_VISIBLE_CLASS_NAME);
      }
      this.unregisterShortcuts();
      this.clearHooks();
    }
  }, {
    key: "focus",
    value: function focus() {
      this.select.focus();
    }
  }, {
    key: "registerHooks",
    value: function registerHooks() {
      var _this = this;
      this.addHook("afterScrollHorizontally", function() {
        return _this.refreshDimensions();
      });
      this.addHook("afterScrollVertically", function() {
        return _this.refreshDimensions();
      });
      this.addHook("afterColumnResize", function() {
        return _this.refreshDimensions();
      });
      this.addHook("afterRowResize", function() {
        return _this.refreshDimensions();
      });
    }
  }, {
    key: "prepare",
    value: function prepare(row, col, prop, td, value, cellProperties) {
      var _this2 = this;
      _get$5(_getPrototypeOf$7(SelectEditor2.prototype), "prepare", this).call(this, row, col, prop, td, value, cellProperties);
      var selectOptions = this.cellProperties.selectOptions;
      var options;
      if (typeof selectOptions === "function") {
        options = this.prepareOptions(selectOptions(this.row, this.col, this.prop));
      } else {
        options = this.prepareOptions(selectOptions);
      }
      empty(this.select);
      objectEach(options, function(optionValue, key) {
        var optionElement = _this2.hot.rootDocument.createElement("OPTION");
        optionElement.value = key;
        fastInnerHTML(optionElement, optionValue);
        _this2.select.appendChild(optionElement);
      });
    }
  }, {
    key: "prepareOptions",
    value: function prepareOptions(optionsToPrepare) {
      var preparedOptions = {};
      if (Array.isArray(optionsToPrepare)) {
        for (var i = 0, len = optionsToPrepare.length; i < len; i++) {
          preparedOptions[optionsToPrepare[i]] = optionsToPrepare[i];
        }
      } else if (_typeof$7(optionsToPrepare) === "object") {
        preparedOptions = optionsToPrepare;
      }
      return preparedOptions;
    }
  }, {
    key: "refreshValue",
    value: function refreshValue() {
      var sourceData = this.hot.getSourceDataAtCell(this.row, this.prop);
      this.originalValue = sourceData;
      this.setValue(sourceData);
      this.refreshDimensions();
    }
  }, {
    key: "refreshDimensions",
    value: function refreshDimensions() {
      if (this.state !== EDITOR_STATE.EDITING) {
        return;
      }
      this.TD = this.getEditedCell();
      if (!this.TD) {
        this.close();
        return;
      }
      var _this$getEditedCellRe = this.getEditedCellRect(), top = _this$getEditedCellRe.top, start = _this$getEditedCellRe.start, width = _this$getEditedCellRe.width, height = _this$getEditedCellRe.height;
      var selectStyle = this.select.style;
      selectStyle.height = "".concat(height, "px");
      selectStyle.width = "".concat(width, "px");
      selectStyle.top = "".concat(top, "px");
      selectStyle[this.hot.isRtl() ? "right" : "left"] = "".concat(start, "px");
      selectStyle.margin = "0px";
      addClass(this.select, EDITOR_VISIBLE_CLASS_NAME);
    }
  }, {
    key: "registerShortcuts",
    value: function registerShortcuts() {
      var _this3 = this;
      var shortcutManager = this.hot.getShortcutManager();
      var editorContext = shortcutManager.getContext("editor");
      var contextConfig = {
        group: SHORTCUTS_GROUP$1
      };
      if (this.isInFullEditMode() === false) {
        return;
      }
      editorContext.addShortcuts([{
        keys: [["ArrowUp"]],
        callback: function callback() {
          var previousOptionIndex = _this3.select.selectedIndex - 1;
          if (previousOptionIndex >= 0) {
            _this3.select[previousOptionIndex].selected = true;
          }
        }
      }, {
        keys: [["ArrowDown"]],
        callback: function callback() {
          var nextOptionIndex = _this3.select.selectedIndex + 1;
          if (nextOptionIndex <= _this3.select.length - 1) {
            _this3.select[nextOptionIndex].selected = true;
          }
        }
      }], contextConfig);
    }
  }, {
    key: "unregisterShortcuts",
    value: function unregisterShortcuts() {
      var shortcutManager = this.hot.getShortcutManager();
      var editorContext = shortcutManager.getContext("editor");
      editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP$1);
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function get() {
      return EDITOR_TYPE$7;
    }
  }]);
  return SelectEditor2;
}(BaseEditor);

function _typeof$8(obj) {
  "@babel/helpers - typeof";
  return _typeof$8 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$8(obj);
}
function _classCallCheck$8(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$8(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$8(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$8(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$8(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$6() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$6 = Reflect.get.bind();
  } else {
    _get$6 = function _get2(target, property, receiver) {
      var base = _superPropBase$6(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$6.apply(this, arguments);
}
function _superPropBase$6(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$8(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$8(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$8(subClass, superClass);
}
function _setPrototypeOf$8(o, p) {
  _setPrototypeOf$8 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$8(o, p);
}
function _createSuper$8(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$8();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$8(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$8(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$8(this, result);
  };
}
function _possibleConstructorReturn$8(self, call) {
  if (call && (_typeof$8(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$8(self);
}
function _assertThisInitialized$8(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$8() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$8(o) {
  _getPrototypeOf$8 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$8(o);
}
var EDITOR_TYPE$8 = "time";
var TimeEditor = /* @__PURE__ */ function(_TextEditor) {
  _inherits$8(TimeEditor2, _TextEditor);
  var _super = _createSuper$8(TimeEditor2);
  function TimeEditor2() {
    _classCallCheck$8(this, TimeEditor2);
    return _super.apply(this, arguments);
  }
  _createClass$8(TimeEditor2, [{
    key: "prepare",
    value: function prepare(row, col, prop, td, value, cellProperties) {
      _get$6(_getPrototypeOf$8(TimeEditor2.prototype), "prepare", this).call(this, row, col, prop, td, value, cellProperties);
      this.TEXTAREA.dir = "ltr";
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function get() {
      return EDITOR_TYPE$8;
    }
  }]);
  return TimeEditor2;
}(TextEditor);

function registerAllEditors() {
  _register(BaseEditor);
  _register(AutocompleteEditor);
  _register(CheckboxEditor);
  _register(DateEditor);
  _register(DropdownEditor);
  _register(HandsontableEditor);
  _register(NumericEditor);
  _register(PasswordEditor);
  _register(SelectEditor);
  _register(TextEditor);
  _register(TimeEditor);
}

var RENDERER_TYPE = "html";
function htmlRenderer(instance, TD, row, col, prop, value, cellProperties) {
  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);
  fastInnerHTML(TD, value === null || value === void 0 ? "" : value, false);
}
htmlRenderer.RENDERER_TYPE = RENDERER_TYPE;

var RENDERER_TYPE$1 = "autocomplete";
function autocompleteRenderer(instance, TD, row, col, prop, value, cellProperties) {
  var rootDocument = instance.rootDocument;
  var rendererFunc = cellProperties.allowHtml ? htmlRenderer : textRenderer;
  var ARROW = rootDocument.createElement("DIV");
  ARROW.className = "htAutocompleteArrow";
  ARROW.appendChild(rootDocument.createTextNode(String.fromCharCode(9660)));
  rendererFunc.apply(this, [instance, TD, row, col, prop, value, cellProperties]);
  if (!TD.firstChild) {
    TD.appendChild(rootDocument.createTextNode(String.fromCharCode(160)));
  }
  TD.insertBefore(ARROW, TD.firstChild);
  addClass(TD, "htAutocomplete");
  if (!instance.acArrowListener) {
    var eventManager = new EventManager(instance);
    instance.acArrowListener = function(event) {
      if (hasClass(event.target, "htAutocompleteArrow")) {
        instance.view._wt.getSetting("onCellDblClick", null, instance._createCellCoords(row, col), TD);
      }
    };
    eventManager.addEventListener(instance.rootElement, "mousedown", instance.acArrowListener);
    instance.addHookOnce("afterDestroy", function() {
      eventManager.destroy();
    });
  }
}
autocompleteRenderer.RENDERER_TYPE = RENDERER_TYPE$1;

var isListeningKeyDownEvent = new WeakMap();
var isCheckboxListenerAdded = new WeakMap();
var BAD_VALUE_CLASS = "htBadValue";
var ATTR_ROW = "data-row";
var ATTR_COLUMN = "data-col";
var SHORTCUTS_GROUP$2 = "checkboxRenderer";
var RENDERER_TYPE$2 = "checkbox";
Hooks.getSingleton().add("modifyAutoColumnSizeSeed", function(bundleSeed, cellMeta, cellValue) {
  var label = cellMeta.label, type = cellMeta.type, row = cellMeta.row, column = cellMeta.column, prop = cellMeta.prop;
  if (type !== RENDERER_TYPE$2) {
    return;
  }
  if (label) {
    var labelValue = label.value, labelProperty = label.property;
    var labelText = cellValue;
    if (labelValue) {
      labelText = typeof labelValue === "function" ? labelValue(row, column, prop, cellValue) : labelValue;
    } else if (labelProperty) {
      var labelData = this.getDataAtRowProp(row, labelProperty);
      labelText = labelData !== null ? labelData : cellValue;
    }
    bundleSeed = labelText;
  }
  return bundleSeed;
});
function checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {
  var rootDocument = instance.rootDocument;
  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);
  registerEvents(instance);
  var input = createInput(rootDocument);
  var labelOptions = cellProperties.label;
  var badValue = false;
  if (typeof cellProperties.checkedTemplate === "undefined") {
    cellProperties.checkedTemplate = true;
  }
  if (typeof cellProperties.uncheckedTemplate === "undefined") {
    cellProperties.uncheckedTemplate = false;
  }
  empty(TD);
  if (value === cellProperties.checkedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.checkedTemplate).toLocaleLowerCase(cellProperties.locale)) {
    input.checked = true;
  } else if (value === cellProperties.uncheckedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.uncheckedTemplate).toLocaleLowerCase(cellProperties.locale)) {
    input.checked = false;
  } else if (isEmpty(value)) {
    addClass(input, "noValue");
  } else {
    input.style.display = "none";
    addClass(input, BAD_VALUE_CLASS);
    badValue = true;
  }
  input.setAttribute(ATTR_ROW, row);
  input.setAttribute(ATTR_COLUMN, col);
  if (!badValue && labelOptions) {
    var labelText = "";
    if (labelOptions.value) {
      labelText = typeof labelOptions.value === "function" ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;
    } else if (labelOptions.property) {
      var labelValue = instance.getDataAtRowProp(row, labelOptions.property);
      labelText = labelValue !== null ? labelValue : "";
    }
    var label = createLabel(rootDocument, labelText, labelOptions.separated !== true);
    if (labelOptions.position === "before") {
      if (labelOptions.separated) {
        TD.appendChild(label);
        TD.appendChild(input);
      } else {
        label.appendChild(input);
        input = label;
      }
    } else if (!labelOptions.position || labelOptions.position === "after") {
      if (labelOptions.separated) {
        TD.appendChild(input);
        TD.appendChild(label);
      } else {
        label.insertBefore(input, label.firstChild);
        input = label;
      }
    }
  }
  if (!labelOptions || labelOptions && !labelOptions.separated) {
    TD.appendChild(input);
  }
  if (badValue) {
    TD.appendChild(rootDocument.createTextNode("#bad-value#"));
  }
  if (!isListeningKeyDownEvent.has(instance)) {
    isListeningKeyDownEvent.set(instance, true);
    registerShortcuts();
  }
  function registerShortcuts() {
    var shortcutManager = instance.getShortcutManager();
    var gridContext = shortcutManager.getContext("grid");
    var config = {
      group: SHORTCUTS_GROUP$2
    };
    gridContext.addShortcuts([{
      keys: [["space"]],
      callback: function callback() {
        changeSelectedCheckboxesState();
        return !areSelectedCheckboxCells();
      }
    }, {
      keys: [["enter"]],
      callback: function callback() {
        changeSelectedCheckboxesState();
        return !areSelectedCheckboxCells();
      },
      runOnlyIf: function runOnlyIf() {
        return instance.getSettings().enterBeginsEditing;
      }
    }, {
      keys: [["delete"], ["backspace"]],
      callback: function callback() {
        changeSelectedCheckboxesState(true);
        return !areSelectedCheckboxCells();
      },
      relativeToGroup: SHORTCUTS_GROUP_EDITOR$1,
      position: "before"
    }], config);
  }
  function changeSelectedCheckboxesState() {
    var uncheckCheckbox = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    var selRange = instance.getSelectedRange();
    if (!selRange) {
      return;
    }
    for (var key = 0; key < selRange.length; key++) {
      var _selRange$key$getTopS = selRange[key].getTopStartCorner(), startRow = _selRange$key$getTopS.row, startColumn = _selRange$key$getTopS.col;
      var _selRange$key$getBott = selRange[key].getBottomEndCorner(), endRow = _selRange$key$getBott.row, endColumn = _selRange$key$getBott.col;
      var changes = [];
      for (var visualRow = startRow; visualRow <= endRow; visualRow += 1) {
        for (var visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {
          var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);
          if (cachedCellProperties.type !== "checkbox") {
            return;
          }
          if (cachedCellProperties.readOnly === true) {
            continue;
          }
          if (typeof cachedCellProperties.checkedTemplate === "undefined") {
            cachedCellProperties.checkedTemplate = true;
          }
          if (typeof cachedCellProperties.uncheckedTemplate === "undefined") {
            cachedCellProperties.uncheckedTemplate = false;
          }
          var dataAtCell = instance.getDataAtCell(visualRow, visualColumn);
          if (uncheckCheckbox === false) {
            if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {
              changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);
            } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, void 0].includes(dataAtCell)) {
              changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate]);
            }
          } else {
            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);
          }
        }
      }
      if (changes.length > 0) {
        instance.setDataAtCell(changes);
      }
    }
  }
  function areSelectedCheckboxCells() {
    var selRange = instance.getSelectedRange();
    if (!selRange) {
      return;
    }
    for (var key = 0; key < selRange.length; key++) {
      var topLeft = selRange[key].getTopStartCorner();
      var bottomRight = selRange[key].getBottomEndCorner();
      for (var visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {
        for (var visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {
          var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);
          if (cachedCellProperties.type !== "checkbox") {
            return false;
          }
          var cell = instance.getCell(visualRow, visualColumn);
          if (cell === null || cell === void 0) {
            return true;
          } else {
            var checkboxes = cell.querySelectorAll("input[type=checkbox]");
            if (checkboxes.length > 0 && !cachedCellProperties.readOnly) {
              return true;
            }
          }
        }
      }
    }
    return false;
  }
}
checkboxRenderer.RENDERER_TYPE = RENDERER_TYPE$2;
function registerEvents(instance) {
  var eventManager = isCheckboxListenerAdded.get(instance);
  if (!eventManager) {
    var rootElement = instance.rootElement;
    eventManager = new EventManager(instance);
    eventManager.addEventListener(rootElement, "click", function(event) {
      return onClick(event, instance);
    });
    eventManager.addEventListener(rootElement, "mouseup", function(event) {
      return onMouseUp(event, instance);
    });
    eventManager.addEventListener(rootElement, "change", function(event) {
      return onChange(event, instance);
    });
    isCheckboxListenerAdded.set(instance, eventManager);
  }
  return eventManager;
}
function createInput(rootDocument) {
  var input = rootDocument.createElement("input");
  input.className = "htCheckboxRendererInput";
  input.type = "checkbox";
  input.setAttribute("autocomplete", "off");
  input.setAttribute("tabindex", "-1");
  return input.cloneNode(false);
}
function createLabel(rootDocument, text, fullWidth) {
  var label = rootDocument.createElement("label");
  label.className = "htCheckboxRendererLabel ".concat(fullWidth ? "fullWidth" : "");
  label.appendChild(rootDocument.createTextNode(text));
  return label.cloneNode(true);
}
function onMouseUp(event, instance) {
  var target = event.target;
  if (!isCheckboxInput(target)) {
    return;
  }
  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {
    return;
  }
  setTimeout(instance.listen, 10);
}
function onClick(event, instance) {
  var target = event.target;
  if (!isCheckboxInput(target)) {
    return;
  }
  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {
    return;
  }
  var row = parseInt(target.getAttribute(ATTR_ROW), 10);
  var col = parseInt(target.getAttribute(ATTR_COLUMN), 10);
  var cellProperties = instance.getCellMeta(row, col);
  if (cellProperties.readOnly) {
    event.preventDefault();
  }
}
function onChange(event, instance) {
  var target = event.target;
  if (!isCheckboxInput(target)) {
    return;
  }
  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {
    return;
  }
  var row = parseInt(target.getAttribute(ATTR_ROW), 10);
  var col = parseInt(target.getAttribute(ATTR_COLUMN), 10);
  var cellProperties = instance.getCellMeta(row, col);
  if (!cellProperties.readOnly) {
    var newCheckboxValue = null;
    if (event.target.checked) {
      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? true : cellProperties.checkedTemplate;
    } else {
      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? false : cellProperties.uncheckedTemplate;
    }
    instance.setDataAtCell(row, col, newCheckboxValue);
  }
}
function isCheckboxInput(element) {
  return element.tagName === "INPUT" && element.getAttribute("type") === "checkbox";
}

var numbro_min = createCommonjsModule(function (module, exports) {
!function(e){module.exports=e();}(function(){return function a(o,u,c){function s(t,e){if(!u[t]){if(!o[t]){var r="function"==typeof commonjsRequire&&commonjsRequire;if(!e&&r)return r(t,!0);if(l)return l(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=u[t]={exports:{}};o[t][0].call(i.exports,function(e){return s(o[t][1][e]||e)},i,i.exports,a,o,u,c);}return u[t].exports}for(var l="function"==typeof commonjsRequire&&commonjsRequire,e=0;e<c.length;e++)s(c[e]);return s}({1:[function(e,r,t){!function(e){var t,k=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,_=Math.ceil,L=Math.floor,T="[BigNumber Error] ",P=T+"Number primitive has more than 15 significant digits: ",U=1e14,j=14,C=9007199254740991,R=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],I=1e7,$=1e9;function G(e){var t=0|e;return 0<e||e===t?t:t-1}function V(e){for(var t,r,n=1,i=e.length,a=e[0]+"";n<i;){for(t=e[n++]+"",r=j-t.length;r--;t="0"+t);a+=t;}for(i=a.length;48===a.charCodeAt(--i););return a.slice(0,i+1||1)}function q(e,t){var r,n,i=e.c,a=t.c,o=e.s,u=t.s,c=e.e,s=t.e;if(!o||!u)return null;if(r=i&&!i[0],n=a&&!a[0],r||n)return r?n?0:-u:o;if(o!=u)return o;if(r=o<0,n=c==s,!i||!a)return n?0:!i^r?1:-1;if(!n)return s<c^r?1:-1;for(u=(c=i.length)<(s=a.length)?c:s,o=0;o<u;o++)if(i[o]!=a[o])return i[o]>a[o]^r?1:-1;return c==s?0:s<c^r?1:-1}function Z(e,t,r,n){if(e<t||r<e||e!==(e<0?_(e):L(e)))throw Error(T+(n||"Argument")+("number"==typeof e?e<t||r<e?" out of range: ":" not an integer: ":" not a primitive number: ")+String(e))}function z(e){var t=e.c.length-1;return G(e.e/j)==t&&e.c[t]%2!=0}function W(e,t){return (1<e.length?e.charAt(0)+"."+e.slice(1):e)+(t<0?"e":"e+")+t}function H(e,t,r){var n,i;if(t<0){for(i=r+".";++t;i+=r);e=i+e;}else if(++t>(n=e.length)){for(i=r,t-=n;--t;i+=r);e+=i;}else t<n&&(e=e.slice(0,t)+"."+e.slice(t));return e}(t=function e(t){var y,f,p,r,s,o,u,c,l,g,n=A.prototype={constructor:A,toString:null,valueOf:null},d=new A(1),b=20,w=4,h=-7,v=21,m=-1e7,O=1e7,x=!1,a=1,S=0,N={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},M="0123456789abcdefghijklmnopqrstuvwxyz";function A(e,t){var r,n,i,a,o,u,c,s,l=this;if(!(l instanceof A))return new A(e,t);if(null==t){if(e instanceof A)return l.s=e.s,l.e=e.e,void(l.c=(e=e.c)?e.slice():e);if((u="number"==typeof e)&&0*e==0){if(l.s=1/e<0?(e=-e,-1):1,e===~~e){for(a=0,o=e;10<=o;o/=10,a++);return l.e=a,void(l.c=[e])}s=String(e);}else {if(s=String(e),!k.test(s))return p(l,s,u);l.s=45==s.charCodeAt(0)?(s=s.slice(1),-1):1;}-1<(a=s.indexOf("."))&&(s=s.replace(".","")),0<(o=s.search(/e/i))?(a<0&&(a=o),a+=+s.slice(o+1),s=s.substring(0,o)):a<0&&(a=s.length);}else {if(Z(t,2,M.length,"Base"),s=String(e),10==t)return E(l=new A(e instanceof A?e:s),b+l.e+1,w);if(u="number"==typeof e){if(0*e!=0)return p(l,s,u,t);if(l.s=1/e<0?(s=s.slice(1),-1):1,A.DEBUG&&15<s.replace(/^0\.0*|\./,"").length)throw Error(P+e);u=!1;}else l.s=45===s.charCodeAt(0)?(s=s.slice(1),-1):1;for(r=M.slice(0,t),a=o=0,c=s.length;o<c;o++)if(r.indexOf(n=s.charAt(o))<0){if("."==n){if(a<o){a=c;continue}}else if(!i&&(s==s.toUpperCase()&&(s=s.toLowerCase())||s==s.toLowerCase()&&(s=s.toUpperCase()))){i=!0,o=-1,a=0;continue}return p(l,String(e),u,t)}-1<(a=(s=f(s,t,10,l.s)).indexOf("."))?s=s.replace(".",""):a=s.length;}for(o=0;48===s.charCodeAt(o);o++);for(c=s.length;48===s.charCodeAt(--c););if(s=s.slice(o,++c)){if(c-=o,u&&A.DEBUG&&15<c&&(C<e||e!==L(e)))throw Error(P+l.s*e);if(O<(a=a-o-1))l.c=l.e=null;else if(a<m)l.c=[l.e=0];else {if(l.e=a,l.c=[],o=(a+1)%j,a<0&&(o+=j),o<c){for(o&&l.c.push(+s.slice(0,o)),c-=j;o<c;)l.c.push(+s.slice(o,o+=j));s=s.slice(o),o=j-s.length;}else o-=c;for(;o--;s+="0");l.c.push(+s);}}else l.c=[l.e=0];}function i(e,t,r,n){var i,a,o,u,c;if(null==r?r=w:Z(r,0,8),!e.c)return e.toString();if(i=e.c[0],o=e.e,null==t)c=V(e.c),c=1==n||2==n&&(o<=h||v<=o)?W(c,o):H(c,o,"0");else if(a=(e=E(new A(e),t,r)).e,u=(c=V(e.c)).length,1==n||2==n&&(t<=a||a<=h)){for(;u<t;c+="0",u++);c=W(c,a);}else if(t-=o,c=H(c,a,"0"),u<a+1){if(0<--t)for(c+=".";t--;c+="0");}else if(0<(t+=a-u))for(a+1==u&&(c+=".");t--;c+="0");return e.s<0&&i?"-"+c:c}function B(e,t){for(var r,n=1,i=new A(e[0]);n<e.length;n++){if(!(r=new A(e[n])).s){i=r;break}t.call(i,r)&&(i=r);}return i}function D(e,t,r){for(var n=1,i=t.length;!t[--i];t.pop());for(i=t[0];10<=i;i/=10,n++);return (r=n+r*j-1)>O?e.c=e.e=null:e.c=r<m?[e.e=0]:(e.e=r,t),e}function E(e,t,r,n){var i,a,o,u,c,s,l,f=e.c,p=R;if(f){e:{for(i=1,u=f[0];10<=u;u/=10,i++);if((a=t-i)<0)a+=j,o=t,l=(c=f[s=0])/p[i-o-1]%10|0;else if((s=_((a+1)/j))>=f.length){if(!n)break e;for(;f.length<=s;f.push(0));c=l=0,o=(a%=j)-j+(i=1);}else {for(c=u=f[s],i=1;10<=u;u/=10,i++);l=(o=(a%=j)-j+i)<0?0:c/p[i-o-1]%10|0;}if(n=n||t<0||null!=f[s+1]||(o<0?c:c%p[i-o-1]),n=r<4?(l||n)&&(0==r||r==(e.s<0?3:2)):5<l||5==l&&(4==r||n||6==r&&(0<a?0<o?c/p[i-o]:0:f[s-1])%10&1||r==(e.s<0?8:7)),t<1||!f[0])return f.length=0,n?(t-=e.e+1,f[0]=p[(j-t%j)%j],e.e=-t||0):f[0]=e.e=0,e;if(0==a?(f.length=s,u=1,s--):(f.length=s+1,u=p[j-a],f[s]=0<o?L(c/p[i-o]%p[o])*u:0),n)for(;;){if(0==s){for(a=1,o=f[0];10<=o;o/=10,a++);for(o=f[0]+=u,u=1;10<=o;o/=10,u++);a!=u&&(e.e++,f[0]==U&&(f[0]=1));break}if(f[s]+=u,f[s]!=U)break;f[s--]=0,u=1;}for(a=f.length;0===f[--a];f.pop());}e.e>O?e.c=e.e=null:e.e<m&&(e.c=[e.e=0]);}return e}function F(e){var t,r=e.e;return null===r?e.toString():(t=V(e.c),t=r<=h||v<=r?W(t,r):H(t,r,"0"),e.s<0?"-"+t:t)}return A.clone=e,A.ROUND_UP=0,A.ROUND_DOWN=1,A.ROUND_CEIL=2,A.ROUND_FLOOR=3,A.ROUND_HALF_UP=4,A.ROUND_HALF_DOWN=5,A.ROUND_HALF_EVEN=6,A.ROUND_HALF_CEIL=7,A.ROUND_HALF_FLOOR=8,A.EUCLID=9,A.config=A.set=function(e){var t,r;if(null!=e){if("object"!=typeof e)throw Error(T+"Object expected: "+e);if(e.hasOwnProperty(t="DECIMAL_PLACES")&&(Z(r=e[t],0,$,t),b=r),e.hasOwnProperty(t="ROUNDING_MODE")&&(Z(r=e[t],0,8,t),w=r),e.hasOwnProperty(t="EXPONENTIAL_AT")&&((r=e[t])&&r.pop?(Z(r[0],-$,0,t),Z(r[1],0,$,t),h=r[0],v=r[1]):(Z(r,-$,$,t),h=-(v=r<0?-r:r))),e.hasOwnProperty(t="RANGE"))if((r=e[t])&&r.pop)Z(r[0],-$,-1,t),Z(r[1],1,$,t),m=r[0],O=r[1];else {if(Z(r,-$,$,t),!r)throw Error(T+t+" cannot be zero: "+r);m=-(O=r<0?-r:r);}if(e.hasOwnProperty(t="CRYPTO")){if((r=e[t])!==!!r)throw Error(T+t+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw x=!r,Error(T+"crypto unavailable");x=r;}else x=r;}if(e.hasOwnProperty(t="MODULO_MODE")&&(Z(r=e[t],0,9,t),a=r),e.hasOwnProperty(t="POW_PRECISION")&&(Z(r=e[t],0,$,t),S=r),e.hasOwnProperty(t="FORMAT")){if("object"!=typeof(r=e[t]))throw Error(T+t+" not an object: "+r);N=r;}if(e.hasOwnProperty(t="ALPHABET")){if("string"!=typeof(r=e[t])||/^.$|[+-.\s]|(.).*\1/.test(r))throw Error(T+t+" invalid: "+r);M=r;}}return {DECIMAL_PLACES:b,ROUNDING_MODE:w,EXPONENTIAL_AT:[h,v],RANGE:[m,O],CRYPTO:x,MODULO_MODE:a,POW_PRECISION:S,FORMAT:N,ALPHABET:M}},A.isBigNumber=function(e){return e instanceof A||e&&!0===e._isBigNumber||!1},A.maximum=A.max=function(){return B(arguments,n.lt)},A.minimum=A.min=function(){return B(arguments,n.gt)},A.random=(r=9007199254740992,s=Math.random()*r&2097151?function(){return L(Math.random()*r)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var t,r,n,i,a,o=0,u=[],c=new A(d);if(null==e?e=b:Z(e,0,$),i=_(e/j),x)if(crypto.getRandomValues){for(t=crypto.getRandomValues(new Uint32Array(i*=2));o<i;)9e15<=(a=131072*t[o]+(t[o+1]>>>11))?(r=crypto.getRandomValues(new Uint32Array(2)),t[o]=r[0],t[o+1]=r[1]):(u.push(a%1e14),o+=2);o=i/2;}else {if(!crypto.randomBytes)throw x=!1,Error(T+"crypto unavailable");for(t=crypto.randomBytes(i*=7);o<i;)9e15<=(a=281474976710656*(31&t[o])+1099511627776*t[o+1]+4294967296*t[o+2]+16777216*t[o+3]+(t[o+4]<<16)+(t[o+5]<<8)+t[o+6])?crypto.randomBytes(7).copy(t,o):(u.push(a%1e14),o+=7);o=i/7;}if(!x)for(;o<i;)(a=s())<9e15&&(u[o++]=a%1e14);for(i=u[--o],e%=j,i&&e&&(a=R[j-e],u[o]=L(i/a)*a);0===u[o];u.pop(),o--);if(o<0)u=[n=0];else {for(n=-1;0===u[0];u.splice(0,1),n-=j);for(o=1,a=u[0];10<=a;a/=10,o++);o<j&&(n-=j-o);}return c.e=n,c.c=u,c}),A.sum=function(){for(var e=1,t=arguments,r=new A(t[0]);e<t.length;)r=r.plus(t[e++]);return r},f=function(){var v="0123456789";function m(e,t,r,n){for(var i,a,o=[0],u=0,c=e.length;u<c;){for(a=o.length;a--;o[a]*=t);for(o[0]+=n.indexOf(e.charAt(u++)),i=0;i<o.length;i++)o[i]>r-1&&(null==o[i+1]&&(o[i+1]=0),o[i+1]+=o[i]/r|0,o[i]%=r);}return o.reverse()}return function(e,t,r,n,i){var a,o,u,c,s,l,f,p,g=e.indexOf("."),h=b,d=w;for(0<=g&&(c=S,S=0,e=e.replace(".",""),l=(p=new A(t)).pow(e.length-g),S=c,p.c=m(H(V(l.c),l.e,"0"),10,r,v),p.e=p.c.length),u=c=(f=m(e,t,r,i?(a=M,v):(a=v,M))).length;0==f[--c];f.pop());if(!f[0])return a.charAt(0);if(g<0?--u:(l.c=f,l.e=u,l.s=n,f=(l=y(l,p,h,d,r)).c,s=l.r,u=l.e),g=f[o=u+h+1],c=r/2,s=s||o<0||null!=f[o+1],s=d<4?(null!=g||s)&&(0==d||d==(l.s<0?3:2)):c<g||g==c&&(4==d||s||6==d&&1&f[o-1]||d==(l.s<0?8:7)),o<1||!f[0])e=s?H(a.charAt(1),-h,a.charAt(0)):a.charAt(0);else {if(f.length=o,s)for(--r;++f[--o]>r;)f[o]=0,o||(++u,f=[1].concat(f));for(c=f.length;!f[--c];);for(g=0,e="";g<=c;e+=a.charAt(f[g++]));e=H(e,u,a.charAt(0));}return e}}(),y=function(){function M(e,t,r){var n,i,a,o,u=0,c=e.length,s=t%I,l=t/I|0;for(e=e.slice();c--;)u=((i=s*(a=e[c]%I)+(n=l*a+(o=e[c]/I|0)*s)%I*I+u)/r|0)+(n/I|0)+l*o,e[c]=i%r;return u&&(e=[u].concat(e)),e}function B(e,t,r,n){var i,a;if(r!=n)a=n<r?1:-1;else for(i=a=0;i<r;i++)if(e[i]!=t[i]){a=e[i]>t[i]?1:-1;break}return a}function D(e,t,r,n){for(var i=0;r--;)e[r]-=i,i=e[r]<t[r]?1:0,e[r]=i*n+e[r]-t[r];for(;!e[0]&&1<e.length;e.splice(0,1));}return function(e,t,r,n,i){var a,o,u,c,s,l,f,p,g,h,d,v,m,y,b,w,O,x=e.s==t.s?1:-1,S=e.c,N=t.c;if(!(S&&S[0]&&N&&N[0]))return new A(e.s&&t.s&&(S?!N||S[0]!=N[0]:N)?S&&0==S[0]||!N?0*x:x/0:NaN);for(g=(p=new A(x)).c=[],x=r+(o=e.e-t.e)+1,i||(i=U,o=G(e.e/j)-G(t.e/j),x=x/j|0),u=0;N[u]==(S[u]||0);u++);if(N[u]>(S[u]||0)&&o--,x<0)g.push(1),c=!0;else {for(y=S.length,w=N.length,x+=2,1<(s=L(i/(N[u=0]+1)))&&(N=M(N,s,i),S=M(S,s,i),w=N.length,y=S.length),m=w,d=(h=S.slice(0,w)).length;d<w;h[d++]=0);O=N.slice(),O=[0].concat(O),b=N[0],N[1]>=i/2&&b++;do{if(s=0,(a=B(N,h,w,d))<0){if(v=h[0],w!=d&&(v=v*i+(h[1]||0)),1<(s=L(v/b)))for(i<=s&&(s=i-1),f=(l=M(N,s,i)).length,d=h.length;1==B(l,h,f,d);)s--,D(l,w<f?O:N,f,i),f=l.length,a=1;else 0==s&&(a=s=1),f=(l=N.slice()).length;if(f<d&&(l=[0].concat(l)),D(h,l,d,i),d=h.length,-1==a)for(;B(N,h,w,d)<1;)s++,D(h,w<d?O:N,d,i),d=h.length;}else 0===a&&(s++,h=[0]);g[u++]=s,h[0]?h[d++]=S[m]||0:(h=[S[m]],d=1);}while((m++<y||null!=h[0])&&x--);c=null!=h[0],g[0]||g.splice(0,1);}if(i==U){for(u=1,x=g[0];10<=x;x/=10,u++);E(p,r+(p.e=u+o*j-1)+1,n,c);}else p.e=o,p.r=+c;return p}}(),o=/^(-?)0([xbo])(?=\w[\w.]*$)/i,u=/^([^.]+)\.$/,c=/^\.([^.]+)$/,l=/^-?(Infinity|NaN)$/,g=/^\s*\+(?=[\w.])|^\s+|\s+$/g,p=function(e,t,r,n){var i,a=r?t:t.replace(g,"");if(l.test(a))e.s=isNaN(a)?null:a<0?-1:1,e.c=e.e=null;else {if(!r&&(a=a.replace(o,function(e,t,r){return i="x"==(r=r.toLowerCase())?16:"b"==r?2:8,n&&n!=i?e:t}),n&&(i=n,a=a.replace(u,"$1").replace(c,"0.$1")),t!=a))return new A(a,i);if(A.DEBUG)throw Error(T+"Not a"+(n?" base "+n:"")+" number: "+t);e.c=e.e=e.s=null;}},n.absoluteValue=n.abs=function(){var e=new A(this);return e.s<0&&(e.s=1),e},n.comparedTo=function(e,t){return q(this,new A(e,t))},n.decimalPlaces=n.dp=function(e,t){var r,n,i;if(null!=e)return Z(e,0,$),null==t?t=w:Z(t,0,8),E(new A(this),e+this.e+1,t);if(!(r=this.c))return null;if(n=((i=r.length-1)-G(this.e/j))*j,i=r[i])for(;i%10==0;i/=10,n--);return n<0&&(n=0),n},n.dividedBy=n.div=function(e,t){return y(this,new A(e,t),b,w)},n.dividedToIntegerBy=n.idiv=function(e,t){return y(this,new A(e,t),0,1)},n.exponentiatedBy=n.pow=function(e,t){var r,n,i,a,o,u,c,s,l=this;if((e=new A(e)).c&&!e.isInteger())throw Error(T+"Exponent not an integer: "+F(e));if(null!=t&&(t=new A(t)),o=14<e.e,!l.c||!l.c[0]||1==l.c[0]&&!l.e&&1==l.c.length||!e.c||!e.c[0])return s=new A(Math.pow(+F(l),o?2-z(e):+F(e))),t?s.mod(t):s;if(u=e.s<0,t){if(t.c?!t.c[0]:!t.s)return new A(NaN);(n=!u&&l.isInteger()&&t.isInteger())&&(l=l.mod(t));}else {if(9<e.e&&(0<l.e||l.e<-1||(0==l.e?1<l.c[0]||o&&24e7<=l.c[1]:l.c[0]<8e13||o&&l.c[0]<=9999975e7)))return a=l.s<0&&z(e)?-0:0,-1<l.e&&(a=1/a),new A(u?1/a:a);S&&(a=_(S/j+2));}for(c=o?(r=new A(.5),u&&(e.s=1),z(e)):(i=Math.abs(+F(e)))%2,s=new A(d);;){if(c){if(!(s=s.times(l)).c)break;a?s.c.length>a&&(s.c.length=a):n&&(s=s.mod(t));}if(i){if(0===(i=L(i/2)))break;c=i%2;}else if(E(e=e.times(r),e.e+1,1),14<e.e)c=z(e);else {if(0==(i=+F(e)))break;c=i%2;}l=l.times(l),a?l.c&&l.c.length>a&&(l.c.length=a):n&&(l=l.mod(t));}return n?s:(u&&(s=d.div(s)),t?s.mod(t):a?E(s,S,w,void 0):s)},n.integerValue=function(e){var t=new A(this);return null==e?e=w:Z(e,0,8),E(t,t.e+1,e)},n.isEqualTo=n.eq=function(e,t){return 0===q(this,new A(e,t))},n.isFinite=function(){return !!this.c},n.isGreaterThan=n.gt=function(e,t){return 0<q(this,new A(e,t))},n.isGreaterThanOrEqualTo=n.gte=function(e,t){return 1===(t=q(this,new A(e,t)))||0===t},n.isInteger=function(){return !!this.c&&G(this.e/j)>this.c.length-2},n.isLessThan=n.lt=function(e,t){return q(this,new A(e,t))<0},n.isLessThanOrEqualTo=n.lte=function(e,t){return -1===(t=q(this,new A(e,t)))||0===t},n.isNaN=function(){return !this.s},n.isNegative=function(){return this.s<0},n.isPositive=function(){return 0<this.s},n.isZero=function(){return !!this.c&&0==this.c[0]},n.minus=function(e,t){var r,n,i,a,o=this,u=o.s;if(t=(e=new A(e,t)).s,!u||!t)return new A(NaN);if(u!=t)return e.s=-t,o.plus(e);var c=o.e/j,s=e.e/j,l=o.c,f=e.c;if(!c||!s){if(!l||!f)return l?(e.s=-t,e):new A(f?o:NaN);if(!l[0]||!f[0])return f[0]?(e.s=-t,e):new A(l[0]?o:3==w?-0:0)}if(c=G(c),s=G(s),l=l.slice(),u=c-s){for((i=(a=u<0)?(u=-u,l):(s=c,f)).reverse(),t=u;t--;i.push(0));i.reverse();}else for(n=(a=(u=l.length)<(t=f.length))?u:t,u=t=0;t<n;t++)if(l[t]!=f[t]){a=l[t]<f[t];break}if(a&&(i=l,l=f,f=i,e.s=-e.s),0<(t=(n=f.length)-(r=l.length)))for(;t--;l[r++]=0);for(t=U-1;u<n;){if(l[--n]<f[n]){for(r=n;r&&!l[--r];l[r]=t);--l[r],l[n]+=U;}l[n]-=f[n];}for(;0==l[0];l.splice(0,1),--s);return l[0]?D(e,l,s):(e.s=3==w?-1:1,e.c=[e.e=0],e)},n.modulo=n.mod=function(e,t){var r,n,i=this;return e=new A(e,t),!i.c||!e.s||e.c&&!e.c[0]?new A(NaN):!e.c||i.c&&!i.c[0]?new A(i):(9==a?(n=e.s,e.s=1,r=y(i,e,0,3),e.s=n,r.s*=n):r=y(i,e,0,a),(e=i.minus(r.times(e))).c[0]||1!=a||(e.s=i.s),e)},n.multipliedBy=n.times=function(e,t){var r,n,i,a,o,u,c,s,l,f,p,g,h,d,v,m=this,y=m.c,b=(e=new A(e,t)).c;if(!(y&&b&&y[0]&&b[0]))return !m.s||!e.s||y&&!y[0]&&!b||b&&!b[0]&&!y?e.c=e.e=e.s=null:(e.s*=m.s,y&&b?(e.c=[0],e.e=0):e.c=e.e=null),e;for(n=G(m.e/j)+G(e.e/j),e.s*=m.s,(c=y.length)<(f=b.length)&&(h=y,y=b,b=h,i=c,c=f,f=i),i=c+f,h=[];i--;h.push(0));for(d=U,v=I,i=f;0<=--i;){for(r=0,p=b[i]%v,g=b[i]/v|0,a=i+(o=c);i<a;)r=((s=p*(s=y[--o]%v)+(u=g*s+(l=y[o]/v|0)*p)%v*v+h[a]+r)/d|0)+(u/v|0)+g*l,h[a--]=s%d;h[a]=r;}return r?++n:h.splice(0,1),D(e,h,n)},n.negated=function(){var e=new A(this);return e.s=-e.s||null,e},n.plus=function(e,t){var r,n=this,i=n.s;if(t=(e=new A(e,t)).s,!i||!t)return new A(NaN);if(i!=t)return e.s=-t,n.minus(e);var a=n.e/j,o=e.e/j,u=n.c,c=e.c;if(!a||!o){if(!u||!c)return new A(i/0);if(!u[0]||!c[0])return c[0]?e:new A(u[0]?n:0*i)}if(a=G(a),o=G(o),u=u.slice(),i=a-o){for((r=0<i?(o=a,c):(i=-i,u)).reverse();i--;r.push(0));r.reverse();}for((i=u.length)-(t=c.length)<0&&(r=c,c=u,u=r,t=i),i=0;t;)i=(u[--t]=u[t]+c[t]+i)/U|0,u[t]=U===u[t]?0:u[t]%U;return i&&(u=[i].concat(u),++o),D(e,u,o)},n.precision=n.sd=function(e,t){var r,n,i;if(null!=e&&e!==!!e)return Z(e,1,$),null==t?t=w:Z(t,0,8),E(new A(this),e,t);if(!(r=this.c))return null;if(n=(i=r.length-1)*j+1,i=r[i]){for(;i%10==0;i/=10,n--);for(i=r[0];10<=i;i/=10,n++);}return e&&this.e+1>n&&(n=this.e+1),n},n.shiftedBy=function(e){return Z(e,-C,C),this.times("1e"+e)},n.squareRoot=n.sqrt=function(){var e,t,r,n,i,a=this,o=a.c,u=a.s,c=a.e,s=b+4,l=new A("0.5");if(1!==u||!o||!o[0])return new A(!u||u<0&&(!o||o[0])?NaN:o?a:1/0);if((r=0==(u=Math.sqrt(+F(a)))||u==1/0?(((t=V(o)).length+c)%2==0&&(t+="0"),u=Math.sqrt(+t),c=G((c+1)/2)-(c<0||c%2),new A(t=u==1/0?"1e"+c:(t=u.toExponential()).slice(0,t.indexOf("e")+1)+c)):new A(u+"")).c[0])for((u=(c=r.e)+s)<3&&(u=0);;)if(i=r,r=l.times(i.plus(y(a,i,s,1))),V(i.c).slice(0,u)===(t=V(r.c)).slice(0,u)){if(r.e<c&&--u,"9999"!=(t=t.slice(u-3,u+1))&&(n||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(E(r,r.e+b+2,1),e=!r.times(r).eq(a));break}if(!n&&(E(i,i.e+b+2,0),i.times(i).eq(a))){r=i;break}s+=4,u+=4,n=1;}return E(r,r.e+b+1,w,e)},n.toExponential=function(e,t){return null!=e&&(Z(e,0,$),e++),i(this,e,t,1)},n.toFixed=function(e,t){return null!=e&&(Z(e,0,$),e=e+this.e+1),i(this,e,t)},n.toFormat=function(e,t,r){var n;if(null==r)null!=e&&t&&"object"==typeof t?(r=t,t=null):e&&"object"==typeof e?(r=e,e=t=null):r=N;else if("object"!=typeof r)throw Error(T+"Argument not an object: "+r);if(n=this.toFixed(e,t),this.c){var i,a=n.split("."),o=+r.groupSize,u=+r.secondaryGroupSize,c=r.groupSeparator||"",s=a[0],l=a[1],f=this.s<0,p=f?s.slice(1):s,g=p.length;if(u&&(i=o,o=u,g-=u=i),0<o&&0<g){for(i=g%o||o,s=p.substr(0,i);i<g;i+=o)s+=c+p.substr(i,o);0<u&&(s+=c+p.slice(i)),f&&(s="-"+s);}n=l?s+(r.decimalSeparator||"")+((u=+r.fractionGroupSize)?l.replace(new RegExp("\\d{"+u+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):l):s;}return (r.prefix||"")+n+(r.suffix||"")},n.toFraction=function(e){var t,r,n,i,a,o,u,c,s,l,f,p,g=this,h=g.c;if(null!=e&&(!(u=new A(e)).isInteger()&&(u.c||1!==u.s)||u.lt(d)))throw Error(T+"Argument "+(u.isInteger()?"out of range: ":"not an integer: ")+F(u));if(!h)return new A(g);for(t=new A(d),s=r=new A(d),n=c=new A(d),p=V(h),a=t.e=p.length-g.e-1,t.c[0]=R[(o=a%j)<0?j+o:o],e=!e||0<u.comparedTo(t)?0<a?t:s:u,o=O,O=1/0,u=new A(p),c.c[0]=0;l=y(u,t,0,1),1!=(i=r.plus(l.times(n))).comparedTo(e);)r=n,n=i,s=c.plus(l.times(i=s)),c=i,t=u.minus(l.times(i=t)),u=i;return i=y(e.minus(r),n,0,1),c=c.plus(i.times(s)),r=r.plus(i.times(n)),c.s=s.s=g.s,f=y(s,n,a*=2,w).minus(g).abs().comparedTo(y(c,r,a,w).minus(g).abs())<1?[s,n]:[c,r],O=o,f},n.toNumber=function(){return +F(this)},n.toPrecision=function(e,t){return null!=e&&Z(e,1,$),i(this,e,t,2)},n.toString=function(e){var t,r=this,n=r.s,i=r.e;return null===i?n?(t="Infinity",n<0&&(t="-"+t)):t="NaN":(t=null==e?i<=h||v<=i?W(V(r.c),i):H(V(r.c),i,"0"):10===e?H(V((r=E(new A(r),b+i+1,w)).c),r.e,"0"):(Z(e,2,M.length,"Base"),f(H(V(r.c),i,"0"),10,e,n,!0)),n<0&&r.c[0]&&(t="-"+t)),t},n.valueOf=n.toJSON=function(){return F(this)},n._isBigNumber=!0,"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator&&(n[Symbol.toStringTag]="BigNumber",n[Symbol.for("nodejs.util.inspect.custom")]=n.valueOf),null!=t&&A.set(t),A}()).default=t.BigNumber=t,void 0!==r&&r.exports?r.exports=t:(e||(e="undefined"!=typeof self&&self?self:window),e.BigNumber=t);}(this);},{}],2:[function(e,t,r){t.exports={languageTag:"en-US",delimiters:{thousands:",",decimal:"."},abbreviations:{thousand:"k",million:"m",billion:"b",trillion:"t"},spaceSeparated:!1,ordinal:function(e){var t=e%10;return 1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th"},currency:{symbol:"$",position:"prefix",code:"USD"},currencyFormat:{thousandSeparated:!0,totalLength:4,spaceSeparated:!0},formats:{fourDigits:{totalLength:4,spaceSeparated:!0},fullWithTwoDecimals:{output:"currency",thousandSeparated:!0,mantissa:2},fullWithTwoDecimalsNoCurrency:{thousandSeparated:!0,mantissa:2},fullWithNoDecimals:{output:"currency",thousandSeparated:!0,mantissa:0}}};},{}],3:[function(e,t,r){function C(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,i=!1,a=void 0;try{for(var o,u=e[Symbol.iterator]();!(n=(o=u.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){i=!0,a=e;}finally{try{n||null==u.return||u.return();}finally{if(i)throw a}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var R=e("./globalState"),o=e("./validating"),u=e("./parsing"),n=["B","KB","MB","GB","TB","PB","EB","ZB","YB"],M={general:{scale:1024,suffixes:n,marker:"bd"},binary:{scale:1024,suffixes:["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"],marker:"b"},decimal:{scale:1e3,suffixes:n,marker:"d"}},I={totalLength:0,characteristic:0,forceAverage:!1,average:!1,mantissa:-1,optionalMantissa:!0,thousandSeparated:!1,spaceSeparated:!1,negative:"sign",forceSign:!1};function i(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},r=2<arguments.length?arguments[2]:void 0;if("string"==typeof t&&(t=u.parseFormat(t)),!o.validateFormat(t))return "ERROR: invalid format";var n=t.prefix||"",i=t.postfix||"",a=function(e,t,r){switch(t.output){case"currency":return t=A(t,R.currentCurrencyDefaultFormat()),function(e,t,r){var n=r.currentCurrency(),i=Object.assign({},I,t),a=void 0,o="",u=!!i.totalLength||!!i.forceAverage||i.average,c=t.currencyPosition||n.position,s=t.currencySymbol||n.symbol;i.spaceSeparated&&(o=" ");"infix"===c&&(a=o+s+o);var l=D({instance:e,providedFormat:t,state:r,decimalSeparator:a});"prefix"===c&&(l=e._value<0&&"sign"===i.negative?"-".concat(o).concat(s).concat(l.slice(1)):s+o+l);c&&"postfix"!==c||(l=l+(o=u?"":o)+s);return l}(e,t,R);case"percent":return t=A(t,R.currentPercentageDefaultFormat()),function(e,t,r,n){var i=t.prefixSymbol,a=D({instance:n(100*e._value),providedFormat:t,state:r}),o=Object.assign({},I,t);if(i)return "%".concat(o.spaceSeparated?" ":"").concat(a);return "".concat(a).concat(o.spaceSeparated?" ":"","%")}(e,t,R,r);case"byte":return t=A(t,R.currentByteDefaultFormat()),h=e,v=R,m=r,y=(d=t).base||"binary",b=M[y],w=B(h._value,b.suffixes,b.scale),O=w.value,x=w.suffix,S=D({instance:m(O),providedFormat:d,state:v,defaults:v.currentByteDefaultFormat()}),N=v.currentAbbreviations(),"".concat(S).concat(N.spaced?" ":"").concat(x);case"time":return t=A(t,R.currentTimeDefaultFormat()),l=e,f=Math.floor(l._value/60/60),p=Math.floor((l._value-60*f*60)/60),g=Math.round(l._value-60*f*60-60*p),"".concat(f,":").concat(p<10?"0":"").concat(p,":").concat(g<10?"0":"").concat(g);case"ordinal":return t=A(t,R.currentOrdinalDefaultFormat()),n=e,i=t,o=(a=R).currentOrdinal(),u=Object.assign({},I,i),c=D({instance:n,providedFormat:i,state:a}),s=o(n._value),"".concat(c).concat(u.spaceSeparated?" ":"").concat(s);case"number":default:return D({instance:e,providedFormat:t,numbro:r})}var n,i,a,o,u,c,s;var l,f,p,g;var h,d,v,m,y,b,w,O,x,S,N;}(e,t,r);return a=(a=n+a)+i}function B(e,t,r){var n=t[0],i=Math.abs(e);if(r<=i){for(var a=1;a<t.length;++a){var o=Math.pow(r,a),u=Math.pow(r,a+1);if(o<=i&&i<u){n=t[a],e/=o;break}}n===t[0]&&(e/=Math.pow(r,t.length-1),n=t[t.length-1]);}return {value:e,suffix:n}}function p(e){for(var t="",r=0;r<e;r++)t+="0";return t}function $(e,t){return -1!==e.toString().indexOf("e")?function(e,t){var r=e.toString(),n=C(r.split("e"),2),i=n[0],a=n[1],o=C(i.split("."),2),u=o[0],c=o[1],s=void 0===c?"":c;if(0<+a)r=u+s+p(a-s.length);else {var l=".";l=+u<0?"-0".concat(l):"0".concat(l);var f=(p(-a-1)+Math.abs(u)+s).substr(0,t);f.length<t&&(f+=p(t-f.length)),r=l+f;}return 0<+a&&0<t&&(r+=".".concat(p(t))),r}(e,t):(Math.round(+"".concat(e,"e+").concat(t))/Math.pow(10,t)).toFixed(t)}function D(e){var t=e.instance,r=e.providedFormat,n=e.state,i=void 0===n?R:n,a=e.decimalSeparator,o=e.defaults,u=void 0===o?i.currentDefaults():o,c=t._value;if(0===c&&i.hasZeroFormat())return i.getZeroFormat();if(!isFinite(c))return c.toString();var s,l,f,p,g,h,d,v,m=Object.assign({},I,u,r),y=m.totalLength,b=y?0:m.characteristic,w=m.optionalCharacteristic,O=m.forceAverage,x=!!y||!!O||m.average,S=y?-1:x&&void 0===r.mantissa?0:m.mantissa,N=!y&&(void 0===r.optionalMantissa?-1===S:m.optionalMantissa),M=m.trimMantissa,B=m.thousandSeparated,D=m.spaceSeparated,A=m.negative,E=m.forceSign,F=m.exponential,k="";if(x){var _=function(e){var t=e.value,r=e.forceAverage,n=e.abbreviations,i=e.spaceSeparated,a=void 0!==i&&i,o=e.totalLength,u=void 0===o?0:o,c="",s=Math.abs(t),l=-1;if(s>=Math.pow(10,12)&&!r||"trillion"===r?(c=n.trillion,t/=Math.pow(10,12)):s<Math.pow(10,12)&&s>=Math.pow(10,9)&&!r||"billion"===r?(c=n.billion,t/=Math.pow(10,9)):s<Math.pow(10,9)&&s>=Math.pow(10,6)&&!r||"million"===r?(c=n.million,t/=Math.pow(10,6)):(s<Math.pow(10,6)&&s>=Math.pow(10,3)&&!r||"thousand"===r)&&(c=n.thousand,t/=Math.pow(10,3)),c&&(c=(a?" ":"")+c),u){var f=t.toString().split(".")[0];l=Math.max(u-f.length,0);}return {value:t,abbreviation:c,mantissaPrecision:l}}({value:c,forceAverage:O,abbreviations:i.currentAbbreviations(),spaceSeparated:D,totalLength:y});c=_.value,k+=_.abbreviation,y&&(S=_.mantissaPrecision);}if(F){var L=(l=(s={value:c,characteristicPrecision:b}).value,f=s.characteristicPrecision,p=void 0===f?0:f,g=C(l.toExponential().split("e"),2),h=g[0],d=g[1],v=+h,p&&1<p&&(v*=Math.pow(10,p-1),d=0<=(d=+d-(p-1))?"+".concat(d):d),{value:v,abbreviation:"e".concat(d)});c=L.value,k=L.abbreviation+k;}var T,P,U,j=function(e,t,r,n,i){if(-1===n)return e;var a=$(t,n),o=C(a.toString().split("."),2),u=o[0],c=o[1],s=void 0===c?"":c;if(s.match(/^0+$/)&&(r||i))return u;var l=s.match(/0+$/);return i&&l?"".concat(u,".").concat(s.toString().slice(0,l.index)):a.toString()}(c.toString(),c,N,S,M);return j=function(e,t,r,n,i){var a=n.currentDelimiters(),o=a.thousands;i=i||a.decimal;var u=a.thousandsSize||3,c=e.toString(),s=c.split(".")[0],l=c.split(".")[1];return r&&(t<0&&(s=s.slice(1)),function(e,t){for(var r=[],n=0,i=e;0<i;i--)n===t&&(r.unshift(i),n=0),n++;return r}(s.length,u).forEach(function(e,t){s=s.slice(0,e+t)+o+s.slice(e+t);}),t<0&&(s="-".concat(s))),c=l?s+i+l:s}(j=function(e,t,r,n){var i=e,a=C(i.toString().split("."),2),o=a[0],u=a[1];if(o.match(/^-?0$/)&&r)return u?"".concat(o.replace("0",""),".").concat(u):o.replace("0","");if(o.length<n)for(var c=n-o.length,s=0;s<c;s++)i="0".concat(i);return i.toString()}(j,0,w,b),c,B,i,a),(x||F)&&(j=j+k),(E||c<0)&&(T=j,U=A,j=0===(P=c)?T:0==+T?T.replace("-",""):0<P?"+".concat(T):"sign"===U?T:"(".concat(T.replace("-",""),")")),j}function A(e,t){if(!e)return t;var r=Object.keys(e);return 1===r.length&&"output"===r[0]?t:e}t.exports=function(n){return {format:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return i.apply(void 0,t.concat([n]))},getByteUnit:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){var t=M.general;return B(e._value,t.suffixes,t.scale).suffix}.apply(void 0,t.concat([n]))},getBinaryByteUnit:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){var t=M.binary;return B(e._value,t.suffixes,t.scale).suffix}.apply(void 0,t.concat([n]))},getDecimalByteUnit:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){var t=M.decimal;return B(e._value,t.suffixes,t.scale).suffix}.apply(void 0,t.concat([n]))},formatOrDefault:A}};},{"./globalState":4,"./parsing":8,"./validating":10}],4:[function(e,t,r){var i=e("./en-US"),n=e("./validating"),a=e("./parsing"),o={},u=void 0,c={},s=null,l={};function f(e){u=e;}function p(){return c[u]}o.languages=function(){return Object.assign({},c)},o.currentLanguage=function(){return u},o.currentCurrency=function(){return p().currency},o.currentAbbreviations=function(){return p().abbreviations},o.currentDelimiters=function(){return p().delimiters},o.currentOrdinal=function(){return p().ordinal},o.currentDefaults=function(){return Object.assign({},p().defaults,l)},o.currentOrdinalDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().ordinalFormat)},o.currentByteDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().byteFormat)},o.currentPercentageDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().percentageFormat)},o.currentCurrencyDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().currencyFormat)},o.currentTimeDefaultFormat=function(){return Object.assign({},o.currentDefaults(),p().timeFormat)},o.setDefaults=function(e){e=a.parseFormat(e),n.validateFormat(e)&&(l=e);},o.getZeroFormat=function(){return s},o.setZeroFormat=function(e){return s="string"==typeof e?e:null},o.hasZeroFormat=function(){return null!==s},o.languageData=function(e){if(e){if(c[e])return c[e];throw new Error('Unknown tag "'.concat(e,'"'))}return p()},o.registerLanguage=function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1];if(!n.validateLanguage(e))throw new Error("Invalid language data");c[e.languageTag]=e,t&&f(e.languageTag);},o.setLanguage=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:i.languageTag;if(!c[e]){var r=e.split("-")[0],n=Object.keys(c).find(function(e){return e.split("-")[0]===r});return c[n]?void f(n):void f(t)}f(e);},o.registerLanguage(i),u=i.languageTag,t.exports=o;},{"./en-US":2,"./parsing":8,"./validating":10}],5:[function(n,e,t){e.exports=function(t){return {loadLanguagesInNode:function(e){return r=t,void e.forEach(function(t){var e=void 0;try{e=n("../languages/".concat(t));}catch(e){console.error('Unable to load "'.concat(t,'". No matching language file found.'));}e&&r.registerLanguage(e);});var r;}}};},{}],6:[function(e,t,r){var c=e("bignumber.js");function a(e,t,r){var n=new c(e._value),i=t;return r.isNumbro(t)&&(i=t._value),i=new c(i),e._value=n.minus(i).toNumber(),e}t.exports=function(u){return {add:function(e,t){return n=t,i=u,a=new c((r=e)._value),o=n,i.isNumbro(n)&&(o=n._value),o=new c(o),r._value=a.plus(o).toNumber(),r;var r,n,i,a,o;},subtract:function(e,t){return a(e,t,u)},multiply:function(e,t){return n=t,i=u,a=new c((r=e)._value),o=n,i.isNumbro(n)&&(o=n._value),o=new c(o),r._value=a.times(o).toNumber(),r;var r,n,i,a,o;},divide:function(e,t){return n=t,i=u,a=new c((r=e)._value),o=n,i.isNumbro(n)&&(o=n._value),o=new c(o),r._value=a.dividedBy(o).toNumber(),r;var r,n,i,a,o;},set:function(e,t){return r=e,i=n=t,u.isNumbro(n)&&(i=n._value),r._value=i,r;var r,n,i;},difference:function(e,t){return r=t,a(i=(n=u)(e._value),r,n),Math.abs(i._value);var r,n,i;}}};},{"bignumber.js":1}],7:[function(e,t,r){function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}var a=e("./globalState"),n=e("./validating"),o=e("./loading")(g),u=e("./unformatting"),c=e("./formatting")(g),s=e("./manipulating")(g),l=e("./parsing"),f=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._value=e;}var e,r;return e=t,(r=[{key:"clone",value:function(){return g(this._value)}},{key:"format",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return c.format(this,e)}},{key:"formatCurrency",value:function(e){return "string"==typeof e&&(e=l.parseFormat(e)),(e=c.formatOrDefault(e,a.currentCurrencyDefaultFormat())).output="currency",c.format(this,e)}},{key:"formatTime",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return e.output="time",c.format(this,e)}},{key:"binaryByteUnits",value:function(){return c.getBinaryByteUnit(this)}},{key:"decimalByteUnits",value:function(){return c.getDecimalByteUnit(this)}},{key:"byteUnits",value:function(){return c.getByteUnit(this)}},{key:"difference",value:function(e){return s.difference(this,e)}},{key:"add",value:function(e){return s.add(this,e)}},{key:"subtract",value:function(e){return s.subtract(this,e)}},{key:"multiply",value:function(e){return s.multiply(this,e)}},{key:"divide",value:function(e){return s.divide(this,e)}},{key:"set",value:function(e){return s.set(this,p(e))}},{key:"value",value:function(){return this._value}},{key:"valueOf",value:function(){return this._value}}])&&i(e.prototype,r),t}();function p(e){var t=e;return g.isNumbro(e)?t=e._value:"string"==typeof e?t=g.unformat(e):isNaN(e)&&(t=NaN),t}function g(e){return new f(p(e))}g.version="2.1.2",g.isNumbro=function(e){return e instanceof f},g.language=a.currentLanguage,g.registerLanguage=a.registerLanguage,g.setLanguage=a.setLanguage,g.languages=a.languages,g.languageData=a.languageData,g.zeroFormat=a.setZeroFormat,g.defaultFormat=a.currentDefaults,g.setDefaults=a.setDefaults,g.defaultCurrencyFormat=a.currentCurrencyDefaultFormat,g.validate=n.validate,g.loadLanguagesInNode=o.loadLanguagesInNode,g.unformat=u.unformat,t.exports=g;},{"./formatting":3,"./globalState":4,"./loading":5,"./manipulating":6,"./parsing":8,"./unformatting":9,"./validating":10}],8:[function(e,t,r){t.exports={parseFormat:function(e){var t,r,n,i,a,o,u,c,s,l,f,p,g,h,d,v,m,y,b,w,O=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return "string"!=typeof e?e:(r=O,e=(n=(t=e).match(/^{([^}]*)}/))?(r.prefix=n[1],t.slice(n[0].length)):t,a=O,function(e,t){if(-1===e.indexOf("$")){if(-1===e.indexOf("%"))return -1!==e.indexOf("bd")?(t.output="byte",t.base="general"):-1!==e.indexOf("b")?(t.output="byte",t.base="binary"):-1!==e.indexOf("d")?(t.output="byte",t.base="decimal"):-1===e.indexOf(":")?-1!==e.indexOf("o")&&(t.output="ordinal"):t.output="time";t.output="percent";}else t.output="currency";}(e=(o=(i=e).match(/{([^}]*)}$/))?(a.postfix=o[1],i.slice(0,-o[0].length)):i,O),u=O,(c=e.match(/[1-9]+[0-9]*/))&&(u.totalLength=+c[0]),s=O,(l=e.split(".")[0].match(/0+/))&&(s.characteristic=l[0].length),function(e,t){if(-1!==e.indexOf(".")){var r=e.split(".")[0];t.optionalCharacteristic=-1===r.indexOf("0");}}(e,O),f=O,-1!==e.indexOf("a")&&(f.average=!0),g=O,-1!==(p=e).indexOf("K")?g.forceAverage="thousand":-1!==p.indexOf("M")?g.forceAverage="million":-1!==p.indexOf("B")?g.forceAverage="billion":-1!==p.indexOf("T")&&(g.forceAverage="trillion"),function(e,t){var r=e.split(".")[1];if(r){var n=r.match(/0+/);n&&(t.mantissa=n[0].length);}}(e,O),d=O,(h=e).match(/\[\.]/)?d.optionalMantissa=!0:h.match(/\./)&&(d.optionalMantissa=!1),v=O,-1!==e.indexOf(",")&&(v.thousandSeparated=!0),m=O,-1!==e.indexOf(" ")&&(m.spaceSeparated=!0),b=O,(y=e).match(/^\+?\([^)]*\)$/)&&(b.negative="parenthesis"),y.match(/^\+?-/)&&(b.negative="sign"),w=O,e.match(/^\+/)&&(w.forceSign=!0),O)}};},{}],9:[function(p,e,t){var O=[{key:"ZiB",factor:Math.pow(1024,7)},{key:"ZB",factor:Math.pow(1e3,7)},{key:"YiB",factor:Math.pow(1024,8)},{key:"YB",factor:Math.pow(1e3,8)},{key:"TiB",factor:Math.pow(1024,4)},{key:"TB",factor:Math.pow(1e3,4)},{key:"PiB",factor:Math.pow(1024,5)},{key:"PB",factor:Math.pow(1e3,5)},{key:"MiB",factor:Math.pow(1024,2)},{key:"MB",factor:Math.pow(1e3,2)},{key:"KiB",factor:Math.pow(1024,1)},{key:"KB",factor:Math.pow(1e3,1)},{key:"GiB",factor:Math.pow(1024,3)},{key:"GB",factor:Math.pow(1e3,3)},{key:"EiB",factor:Math.pow(1024,6)},{key:"EB",factor:Math.pow(1e3,6)},{key:"B",factor:1}];function x(e){return e.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")}function g(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"",n=3<arguments.length?arguments[3]:void 0,i=4<arguments.length?arguments[4]:void 0,a=5<arguments.length?arguments[5]:void 0,o=6<arguments.length?arguments[6]:void 0;if(""!==e)return e===i?0:function e(t,r){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"",i=3<arguments.length?arguments[3]:void 0,a=4<arguments.length?arguments[4]:void 0,o=5<arguments.length?arguments[5]:void 0,u=6<arguments.length?arguments[6]:void 0;if(!isNaN(+t))return +t;var c="",s=t.replace(/(^[^(]*)\((.*)\)([^)]*$)/,"$1$2$3");if(s!==t)return -1*e(s,r,n,i,a,o,u);for(var l=0;l<O.length;l++){var f=O[l];if((c=t.replace(f.key,""))!==t)return e(c,r,n,i,a,o,u)*f.factor}if((c=t.replace("%",""))!==t)return e(c,r,n,i,a,o,u)/100;var p=parseFloat(t);if(!isNaN(p)){var g=i(p);if(g&&"."!==g&&(c=t.replace(new RegExp("".concat(x(g),"$")),""))!==t)return e(c,r,n,i,a,o,u);var h={};Object.keys(o).forEach(function(e){h[o[e]]=e;});for(var d=Object.keys(h).sort().reverse(),v=d.length,m=0;m<v;m++){var y=d[m],b=h[y];if((c=t.replace(y,""))!==t){var w=void 0;switch(b){case"thousand":w=Math.pow(10,3);break;case"million":w=Math.pow(10,6);break;case"billion":w=Math.pow(10,9);break;case"trillion":w=Math.pow(10,12);}return e(c,r,n,i,a,o,u)*w}}}}(function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"",n=e.replace(r,"");return n=(n=n.replace(new RegExp("([0-9])".concat(x(t.thousands),"([0-9])"),"g"),"$1$2")).replace(t.decimal,".")}(e,t,r),t,r,n,i,a,o)}e.exports={unformat:function(e,t){var r,n,i,a=p("./globalState"),o=a.currentDelimiters(),u=a.currentCurrency().symbol,c=a.currentOrdinal(),s=a.getZeroFormat(),l=a.currentAbbreviations(),f=void 0;if("string"==typeof e)f=function(e,t){if(!e.indexOf(":")||":"===t.thousands)return !1;var r=e.split(":");if(3!==r.length)return !1;var n=+r[0],i=+r[1],a=+r[2];return !isNaN(n)&&!isNaN(i)&&!isNaN(a)}(e,o)?(r=e.split(":"),n=+r[0],i=+r[1],+r[2]+60*i+3600*n):g(e,o,u,c,s,l,t);else {if("number"!=typeof e)return;f=e;}if(void 0!==f)return f}};},{"./globalState":4}],10:[function(e,t,r){function n(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function f(e){return (f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=e("./unformatting"),a=/^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/,p={output:{type:"string",validValues:["currency","percent","byte","time","ordinal","number"]},base:{type:"string",validValues:["decimal","binary","general"],restriction:function(e,t){return "byte"===t.output},message:"`base` must be provided only when the output is `byte`",mandatory:function(e){return "byte"===e.output}},characteristic:{type:"number",restriction:function(e){return 0<=e},message:"value must be positive"},prefix:"string",postfix:"string",forceAverage:{type:"string",validValues:["trillion","billion","million","thousand"]},average:"boolean",currencyPosition:{type:"string",validValues:["prefix","infix","postfix"]},currencySymbol:"string",totalLength:{type:"number",restrictions:[{restriction:function(e){return 0<=e},message:"value must be positive"},{restriction:function(e,t){return !t.exponential},message:"`totalLength` is incompatible with `exponential`"}]},mantissa:{type:"number",restriction:function(e){return 0<=e},message:"value must be positive"},optionalMantissa:"boolean",trimMantissa:"boolean",optionalCharacteristic:"boolean",thousandSeparated:"boolean",spaceSeparated:"boolean",abbreviations:{type:"object",children:{thousand:"string",million:"string",billion:"string",trillion:"string"}},negative:{type:"string",validValues:["sign","parenthesis"]},forceSign:"boolean",exponential:{type:"boolean"},prefixSymbol:{type:"boolean",restriction:function(e,t){return "percent"===t.output},message:"`prefixSymbol` can be provided only when the output is `percent`"}},o={languageTag:{type:"string",mandatory:!0,restriction:function(e){return e.match(a)},message:"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)"},delimiters:{type:"object",children:{thousands:"string",decimal:"string",thousandsSize:"number"},mandatory:!0},abbreviations:{type:"object",children:{thousand:{type:"string",mandatory:!0},million:{type:"string",mandatory:!0},billion:{type:"string",mandatory:!0},trillion:{type:"string",mandatory:!0}},mandatory:!0},spaceSeparated:"boolean",ordinal:{type:"function",mandatory:!0},currency:{type:"object",children:{symbol:"string",position:"string",code:"string"},mandatory:!0},defaults:"format",ordinalFormat:"format",byteFormat:"format",percentageFormat:"format",currencyFormat:"format",timeDefaults:"format",formats:{type:"object",children:{fourDigits:{type:"format",mandatory:!0},fullWithTwoDecimals:{type:"format",mandatory:!0},fullWithTwoDecimalsNoCurrency:{type:"format",mandatory:!0},fullWithNoDecimals:{type:"format",mandatory:!0}}}};function u(e){return !!i.unformat(e)}function g(c,s,l){var e=3<arguments.length&&void 0!==arguments[3]&&arguments[3],t=Object.keys(c).map(function(e){if(!s[e])return console.error("".concat(l," Invalid key: ").concat(e)),!1;var t=c[e],r=s[e];if("string"==typeof r&&(r={type:r}),"format"===r.type){if(!g(t,p,"[Validate ".concat(e,"]"),!0))return !1}else if(f(t)!==r.type)return console.error("".concat(l," ").concat(e,' type mismatched: "').concat(r.type,'" expected, "').concat(f(t),'" provided')),!1;if(r.restrictions&&r.restrictions.length)for(var n=r.restrictions.length,i=0;i<n;i++){var a=r.restrictions[i],o=a.restriction,u=a.message;if(!o(t,c))return console.error("".concat(l," ").concat(e," invalid value: ").concat(u)),!1}if(r.restriction&&!r.restriction(t,c))return console.error("".concat(l," ").concat(e," invalid value: ").concat(r.message)),!1;if(r.validValues&&-1===r.validValues.indexOf(t))return console.error("".concat(l," ").concat(e," invalid value: must be among ").concat(JSON.stringify(r.validValues),', "').concat(t,'" provided')),!1;if(r.children&&!g(t,r.children,"[Validate ".concat(e,"]")))return !1;return !0});return e||t.push.apply(t,n(Object.keys(s).map(function(e){var t=s[e];if("string"==typeof t&&(t={type:t}),t.mandatory){var r=t.mandatory;if("function"==typeof r&&(r=r(c)),r&&void 0===c[e])return console.error("".concat(l,' Missing mandatory key "').concat(e,'"')),!1}return !0}))),t.reduce(function(e,t){return e&&t},!0)}function c(e){return g(e,p,"[Validate format]")}t.exports={validate:function(e,t){var r=u(e),n=c(t);return r&&n},validateFormat:c,validateInput:u,validateLanguage:function(e){return g(e,o,"[Validate language]")}};},{"./unformatting":9}]},{},[7])(7)});

});

var RENDERER_TYPE$3 = "numeric";
function numericRenderer(instance, TD, row, col, prop, value, cellProperties) {
  var newValue = value;
  if (isNumeric(newValue)) {
    var numericFormat = cellProperties.numericFormat;
    var cellCulture = numericFormat && numericFormat.culture || "-";
    var cellFormatPattern = numericFormat && numericFormat.pattern;
    var className = cellProperties.className || "";
    var classArr = className.length ? className.split(" ") : [];
    if (typeof cellCulture !== "undefined" && !numbro_min.languages()[cellCulture]) {
      var shortTag = cellCulture.replace("-", "");
      var langData = numbro_min.allLanguages ? numbro_min.allLanguages[cellCulture] : numbro_min[shortTag];
      if (langData) {
        numbro_min.registerLanguage(langData);
      }
    }
    numbro_min.setLanguage(cellCulture);
    newValue = numbro_min(newValue).format(cellFormatPattern || "0");
    if (classArr.indexOf("htLeft") < 0 && classArr.indexOf("htCenter") < 0 && classArr.indexOf("htRight") < 0 && classArr.indexOf("htJustify") < 0) {
      classArr.push("htRight");
    }
    if (classArr.indexOf("htNumeric") < 0) {
      classArr.push("htNumeric");
    }
    cellProperties.className = classArr.join(" ");
    TD.dir = "ltr";
  }
  textRenderer(instance, TD, row, col, prop, newValue, cellProperties);
}
numericRenderer.RENDERER_TYPE = RENDERER_TYPE$3;

var RENDERER_TYPE$4 = "password";
function passwordRenderer(instance, TD, row, col, prop, value, cellProperties) {
  textRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);
  var hashLength = cellProperties.hashLength || TD.innerHTML.length;
  var hashSymbol = cellProperties.hashSymbol || "*";
  var hash = "";
  rangeEach(hashLength - 1, function() {
    hash += hashSymbol;
  });
  fastInnerHTML(TD, hash);
}
passwordRenderer.RENDERER_TYPE = RENDERER_TYPE$4;

var RENDERER_TYPE$5 = "time";
function timeRenderer(instance, TD, row, col, prop, value, cellProperties) {
  textRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);
  TD.dir = "ltr";
}
timeRenderer.RENDERER_TYPE = RENDERER_TYPE$5;

function registerAllRenderers() {
  _register$1(autocompleteRenderer);
  _register$1(baseRenderer);
  _register$1(checkboxRenderer);
  _register$1(htmlRenderer);
  _register$1(numericRenderer);
  _register$1(passwordRenderer);
  _register$1(textRenderer);
  _register$1(timeRenderer);
}

var VALIDATOR_TYPE = "autocomplete";
function autocompleteValidator(value, callback) {
  var valueToValidate = value;
  if (valueToValidate === null || valueToValidate === void 0) {
    valueToValidate = "";
  }
  if (this.allowEmpty && valueToValidate === "") {
    callback(true);
    return;
  }
  if (this.strict && this.source) {
    if (typeof this.source === "function") {
      this.source(valueToValidate, process(valueToValidate, callback));
    } else {
      process(valueToValidate, callback)(this.source);
    }
  } else {
    callback(true);
  }
}
autocompleteValidator.VALIDATOR_TYPE = VALIDATOR_TYPE;
function process(value, callback) {
  var originalVal = value;
  return function(source) {
    var found = false;
    for (var s = 0, slen = source.length; s < slen; s++) {
      if (originalVal === source[s]) {
        found = true;
        break;
      }
    }
    callback(found);
  };
}

// `SameValue` abstract operation
// https://tc39.es/ecma262/#sec-samevalue
// eslint-disable-next-line es/no-object-is -- safe
var sameValue = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare -- NaN check
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

// @@search logic
fixRegexpWellKnownSymbolLogic('search', function (SEARCH, nativeSearch, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.es/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = requireObjectCoercible(this);
      var searcher = isNullOrUndefined(regexp) ? undefined : getMethod(regexp, SEARCH);
      return searcher ? functionCall(searcher, regexp, O) : new RegExp(regexp)[SEARCH](toString_1(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
    function (string) {
      var rx = anObject(this);
      var S = toString_1(string);
      var res = maybeCallNative(nativeSearch, rx, S);

      if (res.done) return res.value;

      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regexpExecAbstract(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});

function getNormalizedDate(dateString) {
  var nativeDate = new Date(dateString);
  if (!isNaN(new Date("".concat(dateString, "T00:00")).getDate())) {
    return new Date(nativeDate.getTime() + nativeDate.getTimezoneOffset() * 6e4);
  }
  return nativeDate;
}

var VALIDATOR_TYPE$1 = "date";
function dateValidator(value, callback) {
  var dateEditor = _getEditorInstance(EDITOR_TYPE$3, this.instance);
  var valueToValidate = value;
  var valid = true;
  if (valueToValidate === null || valueToValidate === void 0) {
    valueToValidate = "";
  }
  var isValidFormat = hooks(valueToValidate, this.dateFormat || dateEditor.defaultDateFormat, true).isValid();
  var isValidDate = hooks(new Date(valueToValidate)).isValid() || isValidFormat;
  if (this.allowEmpty && valueToValidate === "") {
    isValidDate = true;
    isValidFormat = true;
  }
  if (!isValidDate) {
    valid = false;
  }
  if (!isValidDate && isValidFormat) {
    valid = true;
  }
  if (isValidDate && !isValidFormat) {
    if (this.correctFormat === true) {
      var correctedValue = correctFormat(valueToValidate, this.dateFormat);
      var row = this.instance.toVisualRow(this.row);
      var column = this.instance.toVisualColumn(this.col);
      this.instance.setDataAtCell(row, column, correctedValue, "dateValidator");
      valid = true;
    } else {
      valid = false;
    }
  }
  callback(valid);
}
dateValidator.VALIDATOR_TYPE = VALIDATOR_TYPE$1;
function correctFormat(value, dateFormat) {
  var dateFromDate = hooks(getNormalizedDate(value));
  var dateFromMoment = hooks(value, dateFormat);
  var isAlphanumeric = value.search(/[A-z]/g) > -1;
  var date;
  if (dateFromDate.isValid() && dateFromDate.format("x") === dateFromMoment.format("x") || !dateFromMoment.isValid() || isAlphanumeric) {
    date = dateFromDate;
  } else {
    date = dateFromMoment;
  }
  return date.format(dateFormat);
}

var VALIDATOR_TYPE$2 = "numeric";
function numericValidator(value, callback) {
  var valueToValidate = value;
  if (valueToValidate === null || valueToValidate === void 0) {
    valueToValidate = "";
  }
  if (this.allowEmpty && valueToValidate === "") {
    callback(true);
  } else if (valueToValidate === "") {
    callback(false);
  } else {
    callback(isNumeric(value));
  }
}
numericValidator.VALIDATOR_TYPE = VALIDATOR_TYPE$2;

var STRICT_FORMATS = [
  "YYYY-MM-DDTHH:mm:ss.SSSZ",
  "X",
  "x"
];
var VALIDATOR_TYPE$3 = "time";
function timeValidator(value, callback) {
  var timeFormat = this.timeFormat || "h:mm:ss a";
  var valid = true;
  var valueToValidate = value;
  if (valueToValidate === null) {
    valueToValidate = "";
  }
  valueToValidate = /^\d{3,}$/.test(valueToValidate) ? parseInt(valueToValidate, 10) : valueToValidate;
  var twoDigitValue = /^\d{1,2}$/.test(valueToValidate);
  if (twoDigitValue) {
    valueToValidate += ":00";
  }
  var date = hooks(valueToValidate, STRICT_FORMATS, true).isValid() ? hooks(valueToValidate) : hooks(valueToValidate, timeFormat);
  var isValidTime = date.isValid();
  var isValidFormat = hooks(valueToValidate, timeFormat, true).isValid() && !twoDigitValue;
  if (this.allowEmpty && valueToValidate === "") {
    isValidTime = true;
    isValidFormat = true;
  }
  if (!isValidTime) {
    valid = false;
  }
  if (!isValidTime && isValidFormat) {
    valid = true;
  }
  if (isValidTime && !isValidFormat) {
    if (this.correctFormat === true) {
      var correctedValue = date.format(timeFormat);
      var row = this.instance.toVisualRow(this.row);
      var column = this.instance.toVisualColumn(this.col);
      this.instance.setDataAtCell(row, column, correctedValue, "timeValidator");
      valid = true;
    } else {
      valid = false;
    }
  }
  callback(valid);
}
timeValidator.VALIDATOR_TYPE = VALIDATOR_TYPE$3;

function registerAllValidators() {
  _register$2(autocompleteValidator);
  _register$2(dateValidator);
  _register$2(numericValidator);
  _register$2(timeValidator);
}

var CELL_TYPE = "autocomplete";
var AutocompleteCellType = {
  CELL_TYPE,
  editor: AutocompleteEditor,
  renderer: autocompleteRenderer,
  validator: autocompleteValidator
};

var CELL_TYPE$1 = "checkbox";
var CheckboxCellType = {
  CELL_TYPE: CELL_TYPE$1,
  editor: CheckboxEditor,
  renderer: checkboxRenderer
};

var CELL_TYPE$2 = "date";
var DateCellType = {
  CELL_TYPE: CELL_TYPE$2,
  editor: DateEditor,
  renderer: autocompleteRenderer,
  validator: dateValidator
};

var CELL_TYPE$3 = "dropdown";
var DropdownCellType = {
  CELL_TYPE: CELL_TYPE$3,
  editor: DropdownEditor,
  renderer: autocompleteRenderer,
  validator: autocompleteValidator
};

var CELL_TYPE$4 = "handsontable";
var HandsontableCellType = {
  CELL_TYPE: CELL_TYPE$4,
  editor: HandsontableEditor,
  renderer: autocompleteRenderer
};

var CELL_TYPE$5 = "numeric";
var NumericCellType = {
  CELL_TYPE: CELL_TYPE$5,
  editor: NumericEditor,
  renderer: numericRenderer,
  validator: numericValidator,
  dataType: "number"
};

var CELL_TYPE$6 = "password";
var PasswordCellType = {
  CELL_TYPE: CELL_TYPE$6,
  editor: PasswordEditor,
  renderer: passwordRenderer,
  copyable: false
};

var CELL_TYPE$7 = "time";
var TimeCellType = {
  CELL_TYPE: CELL_TYPE$7,
  editor: TimeEditor,
  renderer: timeRenderer,
  validator: timeValidator
};

function registerAllCellTypes() {
  _register$3(AutocompleteCellType);
  _register$3(CheckboxCellType);
  _register$3(DateCellType);
  _register$3(DropdownCellType);
  _register$3(HandsontableCellType);
  _register$3(NumericCellType);
  _register$3(PasswordCellType);
  _register$3(TextCellType);
  _register$3(TimeCellType);
}

// `WeakSet` constructor
// https://tc39.es/ecma262/#sec-weakset-constructor
collection('WeakSet', function (init) {
  return function WeakSet() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionWeak);

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck$9(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$9(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$9(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$9(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$9(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _classPrivateMethodInitSpec(obj, privateSet) {
  _checkPrivateRedeclaration(obj, privateSet);
  privateSet.add(obj);
}
function _checkPrivateRedeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classPrivateMethodGet(receiver, privateSet, fn) {
  if (!privateSet.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return fn;
}
var DEPS_TYPE_CHECKERS = new Map([["plugin", hasPlugin], ["cell-type", hasItem], ["editor", hasItem$1], ["renderer", hasItem$2], ["validator", hasItem$3]]);
var PLUGIN_KEY = "base";
var privatePool$1 = new WeakMap();
var missingDependeciesMsgs = [];
var initializedPlugins = null;
var _isRelevantToSettings = /* @__PURE__ */ new WeakSet();
var BasePlugin = /* @__PURE__ */ function() {
  function BasePlugin2(hotInstance) {
    var _this = this;
    _classCallCheck$9(this, BasePlugin2);
    _classPrivateMethodInitSpec(this, _isRelevantToSettings);
    defineGetter(this, "hot", hotInstance, {
      writable: false
    });
    privatePool$1.set(this, {
      hooks: {}
    });
    initializedPlugins = null;
    this.pluginName = null;
    this.pluginsInitializedCallbacks = [];
    this.isPluginsReady = false;
    this.enabled = false;
    this.initialized = false;
    this.hot.addHook("afterPluginsInitialized", function() {
      return _this.onAfterPluginsInitialized();
    });
    this.hot.addHook("afterUpdateSettings", function(newSettings) {
      return _this.onUpdateSettings(newSettings);
    });
    this.hot.addHook("beforeInit", function() {
      return _this.init();
    });
  }
  _createClass$9(BasePlugin2, [{
    key: "init",
    value: function init() {
      var _this2 = this;
      this.pluginName = this.hot.getPluginName(this);
      var pluginDeps = this.constructor.PLUGIN_DEPS;
      var dependecies = Array.isArray(pluginDeps) ? pluginDeps : [];
      if (dependecies.length > 0) {
        var missingDependencies = [];
        dependecies.forEach(function(dependency) {
          var _dependency$split = dependency.split(":"), _dependency$split2 = _slicedToArray(_dependency$split, 2), type = _dependency$split2[0], moduleName = _dependency$split2[1];
          if (!DEPS_TYPE_CHECKERS.has(type)) {
            throw new Error('Unknown plugin dependency type "'.concat(type, '" was found.'));
          }
          if (!DEPS_TYPE_CHECKERS.get(type)(moduleName)) {
            missingDependencies.push(" - ".concat(moduleName, " (").concat(type, ")"));
          }
        });
        if (missingDependencies.length > 0) {
          var errorMsg = ["The ".concat(this.pluginName, " plugin requires the following modules:\n"), "".concat(missingDependencies.join("\n"), "\n")].join("");
          missingDependeciesMsgs.push(errorMsg);
        }
      }
      if (!initializedPlugins) {
        initializedPlugins = getPluginsNames();
      }
      if (initializedPlugins.indexOf("UndoRedo") >= 0) {
        initializedPlugins.splice(initializedPlugins.indexOf("UndoRedo"), 1);
      }
      if (initializedPlugins.indexOf(this.pluginName) >= 0) {
        initializedPlugins.splice(initializedPlugins.indexOf(this.pluginName), 1);
      }
      this.hot.addHookOnce("afterPluginsInitialized", function() {
        if (_this2.isEnabled && _this2.isEnabled()) {
          _this2.enablePlugin();
        }
      });
      var isAllPluginsAreInitialized = initializedPlugins.length === 0;
      if (isAllPluginsAreInitialized) {
        if (missingDependeciesMsgs.length > 0) {
          var _errorMsg = ["".concat(missingDependeciesMsgs.join("\n"), "\n"), "You have to import and register them manually."].join("");
          throw new Error(_errorMsg);
        }
        this.hot.runHooks("afterPluginsInitialized");
      }
      this.initialized = true;
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      this.enabled = true;
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      if (this.eventManager) {
        this.eventManager.clear();
      }
      this.clearHooks();
      this.enabled = false;
    }
  }, {
    key: "addHook",
    value: function addHook(name, callback) {
      privatePool$1.get(this).hooks[name] = privatePool$1.get(this).hooks[name] || [];
      var hooks = privatePool$1.get(this).hooks[name];
      this.hot.addHook(name, callback);
      hooks.push(callback);
      privatePool$1.get(this).hooks[name] = hooks;
    }
  }, {
    key: "removeHooks",
    value: function removeHooks(name) {
      var _this3 = this;
      arrayEach(privatePool$1.get(this).hooks[name] || [], function(callback) {
        _this3.hot.removeHook(name, callback);
      });
    }
  }, {
    key: "clearHooks",
    value: function clearHooks() {
      var _this4 = this;
      var hooks = privatePool$1.get(this).hooks;
      objectEach(hooks, function(callbacks, name) {
        return _this4.removeHooks(name);
      });
      hooks.length = 0;
    }
  }, {
    key: "callOnPluginsReady",
    value: function callOnPluginsReady(callback) {
      if (this.isPluginsReady) {
        callback();
      } else {
        this.pluginsInitializedCallbacks.push(callback);
      }
    }
  }, {
    key: "onAfterPluginsInitialized",
    value: function onAfterPluginsInitialized() {
      arrayEach(this.pluginsInitializedCallbacks, function(callback) {
        return callback();
      });
      this.pluginsInitializedCallbacks.length = 0;
      this.isPluginsReady = true;
    }
  }, {
    key: "onUpdateSettings",
    value: function onUpdateSettings(newSettings) {
      var relevantToSettings = _classPrivateMethodGet(this, _isRelevantToSettings, _isRelevantToSettings2).call(this, newSettings);
      if (this.isEnabled) {
        if (this.enabled && !this.isEnabled()) {
          this.disablePlugin();
        }
        if (!this.enabled && this.isEnabled()) {
          this.enablePlugin();
        }
        if (this.enabled && this.isEnabled() && relevantToSettings) {
          this.updatePlugin(newSettings);
        }
      }
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this5 = this;
      if (this.eventManager) {
        this.eventManager.destroy();
      }
      this.clearHooks();
      objectEach(this, function(value, property) {
        if (property !== "hot") {
          _this5[property] = null;
        }
      });
      delete this.t;
      delete this.hot;
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY;
    }
  }, {
    key: "SETTING_KEYS",
    get: function get() {
      return [this.PLUGIN_KEY];
    }
  }]);
  return BasePlugin2;
}();
function _isRelevantToSettings2(settings) {
  if (!settings) {
    return false;
  }
  var settingKeys = this.constructor.SETTING_KEYS;
  if (typeof settingKeys === "boolean") {
    return settingKeys;
  }
  for (var i = 0; i < settingKeys.length; i++) {
    if (settings[settingKeys[i]] !== void 0) {
      return true;
    }
  }
  return false;
}

function _slicedToArray$1(arr, i) {
  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest$1();
}
function _nonIterableRest$1() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$1(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$1(o, minLen);
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$1(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$1(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck$a(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$a(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$a(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$a(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$a(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var GhostTable = /* @__PURE__ */ function() {
  function GhostTable2(hotInstance) {
    _classCallCheck$a(this, GhostTable2);
    this.hot = hotInstance;
    this.container = null;
    this.injected = false;
    this.rows = [];
    this.columns = [];
    this.samples = null;
    this.settings = {
      useHeaders: true
    };
  }
  _createClass$a(GhostTable2, [{
    key: "addRow",
    value: function addRow(row, samples) {
      if (this.columns.length) {
        throw new Error("Doesn't support multi-dimensional table");
      }
      if (!this.rows.length) {
        this.container = this.createContainer(this.hot.rootElement.className);
      }
      var rowObject = {
        row
      };
      this.rows.push(rowObject);
      this.samples = samples;
      this.table = this.createTable(this.hot.table.className);
      this.table.colGroup.appendChild(this.createColGroupsCol());
      this.table.tr.appendChild(this.createRow(row));
      this.container.container.appendChild(this.table.fragment);
      rowObject.table = this.table.table;
    }
  }, {
    key: "addColumnHeadersRow",
    value: function addColumnHeadersRow(samples) {
      var colHeader = this.hot.getColHeader(0);
      if (colHeader !== null && colHeader !== void 0) {
        var rowObject = {
          row: -1
        };
        this.rows.push(rowObject);
        this.container = this.createContainer(this.hot.rootElement.className);
        this.samples = samples;
        this.table = this.createTable(this.hot.table.className);
        this.table.colGroup.appendChild(this.createColGroupsCol());
        this.appendColumnHeadersRow();
        this.container.container.appendChild(this.table.fragment);
        rowObject.table = this.table.table;
      }
    }
  }, {
    key: "addColumn",
    value: function addColumn(column, samples) {
      if (this.rows.length) {
        throw new Error("Doesn't support multi-dimensional table");
      }
      if (!this.columns.length) {
        this.container = this.createContainer(this.hot.rootElement.className);
      }
      var columnObject = {
        col: column
      };
      this.columns.push(columnObject);
      this.samples = samples;
      this.table = this.createTable(this.hot.table.className);
      if (this.getSetting("useHeaders") && this.hot.getColHeader(column) !== null) {
        this.hot.view.appendColHeader(column, this.table.th);
      }
      this.table.tBody.appendChild(this.createCol(column));
      this.container.container.appendChild(this.table.fragment);
      columnObject.table = this.table.table;
    }
  }, {
    key: "getHeights",
    value: function getHeights(callback) {
      if (!this.injected) {
        this.injectTable();
      }
      arrayEach(this.rows, function(row) {
        callback(row.row, outerHeight(row.table) - 1);
      });
    }
  }, {
    key: "getWidths",
    value: function getWidths(callback) {
      if (!this.injected) {
        this.injectTable();
      }
      arrayEach(this.columns, function(column) {
        var _column$table$getBoun = column.table.getBoundingClientRect(), width = _column$table$getBoun.width;
        callback(column.col, Math.ceil(width));
      });
    }
  }, {
    key: "setSettings",
    value: function setSettings(settings) {
      this.settings = settings;
    }
  }, {
    key: "setSetting",
    value: function setSetting(name, value) {
      if (!this.settings) {
        this.settings = {};
      }
      this.settings[name] = value;
    }
  }, {
    key: "getSettings",
    value: function getSettings() {
      return this.settings;
    }
  }, {
    key: "getSetting",
    value: function getSetting(name) {
      if (this.settings) {
        return this.settings[name];
      }
      return null;
    }
  }, {
    key: "createColGroupsCol",
    value: function createColGroupsCol() {
      var _this = this;
      var fragment = this.hot.rootDocument.createDocumentFragment();
      if (this.hot.hasRowHeaders()) {
        fragment.appendChild(this.createColElement(-1));
      }
      this.samples.forEach(function(sample) {
        arrayEach(sample.strings, function(string) {
          fragment.appendChild(_this.createColElement(string.col));
        });
      });
      return fragment;
    }
  }, {
    key: "createRow",
    value: function createRow(row) {
      var _this2 = this;
      var rootDocument = this.hot.rootDocument;
      var fragment = rootDocument.createDocumentFragment();
      var th = rootDocument.createElement("th");
      if (this.hot.hasRowHeaders()) {
        this.hot.view.appendRowHeader(row, th);
        fragment.appendChild(th);
      }
      this.samples.forEach(function(sample) {
        arrayEach(sample.strings, function(string) {
          var column = string.col;
          var cellProperties = _this2.hot.getCellMeta(row, column);
          cellProperties.col = column;
          cellProperties.row = row;
          var renderer = _this2.hot.getCellRenderer(cellProperties);
          var td = rootDocument.createElement("td");
          td.setAttribute("ghost-table", 1);
          renderer(_this2.hot, td, row, column, _this2.hot.colToProp(column), string.value, cellProperties);
          fragment.appendChild(td);
        });
      });
      return fragment;
    }
  }, {
    key: "appendColumnHeadersRow",
    value: function appendColumnHeadersRow() {
      var _this3 = this;
      var rootDocument = this.hot.rootDocument;
      var domFragment = rootDocument.createDocumentFragment();
      var columnHeaders = [];
      if (this.hot.hasRowHeaders()) {
        var th = rootDocument.createElement("th");
        columnHeaders.push([-1, th]);
        domFragment.appendChild(th);
      }
      this.samples.forEach(function(sample) {
        arrayEach(sample.strings, function(string) {
          var column = string.col;
          var th2 = rootDocument.createElement("th");
          columnHeaders.push([column, th2]);
          domFragment.appendChild(th2);
        });
      });
      this.table.tHead.appendChild(domFragment);
      arrayEach(columnHeaders, function(columnHeader) {
        var _columnHeader = _slicedToArray$1(columnHeader, 2), column = _columnHeader[0], th2 = _columnHeader[1];
        _this3.hot.view.appendColHeader(column, th2);
      });
    }
  }, {
    key: "createCol",
    value: function createCol(column) {
      var _this4 = this;
      var rootDocument = this.hot.rootDocument;
      var fragment = rootDocument.createDocumentFragment();
      this.samples.forEach(function(sample) {
        arrayEach(sample.strings, function(string) {
          var row = string.row;
          var cellProperties = _this4.hot.getCellMeta(row, column);
          cellProperties.col = column;
          cellProperties.row = row;
          var renderer = _this4.hot.getCellRenderer(cellProperties);
          var td = rootDocument.createElement("td");
          var tr = rootDocument.createElement("tr");
          td.setAttribute("ghost-table", 1);
          renderer(_this4.hot, td, row, column, _this4.hot.colToProp(column), string.value, cellProperties);
          tr.appendChild(td);
          fragment.appendChild(tr);
        });
      });
      return fragment;
    }
  }, {
    key: "clean",
    value: function clean() {
      this.rows.length = 0;
      this.rows[-1] = void 0;
      this.columns.length = 0;
      if (this.samples) {
        this.samples.clear();
      }
      this.samples = null;
      this.removeTable();
    }
  }, {
    key: "injectTable",
    value: function injectTable() {
      var parent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      if (!this.injected) {
        (parent || this.hot.rootElement).appendChild(this.container.fragment);
        this.injected = true;
      }
    }
  }, {
    key: "removeTable",
    value: function removeTable() {
      if (this.injected && this.container.container.parentNode) {
        this.container.container.parentNode.removeChild(this.container.container);
        this.container = null;
        this.injected = false;
      }
    }
  }, {
    key: "createColElement",
    value: function createColElement(column) {
      var col = this.hot.rootDocument.createElement("col");
      col.style.width = "".concat(this.hot.view._wt.wtTable.getStretchedColumnWidth(column), "px");
      return col;
    }
  }, {
    key: "createTable",
    value: function createTable() {
      var className = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      var rootDocument = this.hot.rootDocument;
      var fragment = rootDocument.createDocumentFragment();
      var table = rootDocument.createElement("table");
      var tHead = rootDocument.createElement("thead");
      var tBody = rootDocument.createElement("tbody");
      var colGroup = rootDocument.createElement("colgroup");
      var tr = rootDocument.createElement("tr");
      var th = rootDocument.createElement("th");
      if (this.isVertical()) {
        table.appendChild(colGroup);
      }
      if (this.isHorizontal()) {
        tr.appendChild(th);
        tHead.appendChild(tr);
        table.style.tableLayout = "auto";
        table.style.width = "auto";
      }
      table.appendChild(tHead);
      if (this.isVertical()) {
        tBody.appendChild(tr);
      }
      table.appendChild(tBody);
      addClass(table, className);
      fragment.appendChild(table);
      return {
        fragment,
        table,
        tHead,
        tBody,
        colGroup,
        tr,
        th
      };
    }
  }, {
    key: "createContainer",
    value: function createContainer() {
      var className = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      var rootDocument = this.hot.rootDocument;
      var fragment = rootDocument.createDocumentFragment();
      var container = rootDocument.createElement("div");
      var containerClassName = "htGhostTable htAutoSize ".concat(className.trim());
      addClass(container, containerClassName);
      fragment.appendChild(container);
      return {
        fragment,
        container
      };
    }
  }, {
    key: "isVertical",
    value: function isVertical() {
      return !!(this.rows.length && !this.columns.length);
    }
  }, {
    key: "isHorizontal",
    value: function isHorizontal() {
      return !!(this.columns.length && !this.rows.length);
    }
  }]);
  return GhostTable2;
}();

function _defineProperty$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classCallCheck$b(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$b(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$b(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$b(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$b(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var SamplesGenerator = /* @__PURE__ */ function() {
  function SamplesGenerator2(dataFactory) {
    _classCallCheck$b(this, SamplesGenerator2);
    this.samples = null;
    this.dataFactory = dataFactory;
    this.customSampleCount = null;
    this.allowDuplicates = false;
  }
  _createClass$b(SamplesGenerator2, [{
    key: "getSampleCount",
    value: function getSampleCount() {
      if (this.customSampleCount) {
        return this.customSampleCount;
      }
      return SamplesGenerator2.SAMPLE_COUNT;
    }
  }, {
    key: "setSampleCount",
    value: function setSampleCount(sampleCount) {
      this.customSampleCount = sampleCount;
    }
  }, {
    key: "setAllowDuplicates",
    value: function setAllowDuplicates(allowDuplicates) {
      this.allowDuplicates = allowDuplicates;
    }
  }, {
    key: "generateRowSamples",
    value: function generateRowSamples(rowRange, colRange) {
      return this.generateSamples("row", colRange, rowRange);
    }
  }, {
    key: "generateColumnSamples",
    value: function generateColumnSamples(colRange, rowRange) {
      return this.generateSamples("col", rowRange, colRange);
    }
  }, {
    key: "generateSamples",
    value: function generateSamples(type, range, specifierRange) {
      var _this = this;
      var samples = new Map();
      var _ref = typeof specifierRange === "number" ? {
        from: specifierRange,
        to: specifierRange
      } : specifierRange, from = _ref.from, to = _ref.to;
      rangeEach(from, to, function(index) {
        var sample = _this.generateSample(type, range, index);
        samples.set(index, sample);
      });
      return samples;
    }
  }, {
    key: "generateSample",
    value: function generateSample(type, range, specifierValue) {
      var _this2 = this;
      if (type !== "row" && type !== "col") {
        throw new Error("Unsupported sample type");
      }
      var samples = new Map();
      var computedKey = type === "row" ? "col" : "row";
      var sampledValues = [];
      rangeEach(range.from, range.to, function(index) {
        var _ref2 = type === "row" ? _this2.dataFactory(specifierValue, index) : _this2.dataFactory(index, specifierValue), value = _ref2.value, bundleSeed = _ref2.bundleSeed;
        var hasCustomBundleSeed = typeof bundleSeed === "string" && bundleSeed.length > 0;
        var seed;
        if (hasCustomBundleSeed) {
          seed = bundleSeed;
        } else if (isObject(value)) {
          seed = "".concat(Object.keys(value).length);
        } else if (Array.isArray(value)) {
          seed = "".concat(value.length);
        } else {
          seed = "".concat(stringify(value).length);
        }
        if (!samples.has(seed)) {
          samples.set(seed, {
            needed: _this2.getSampleCount(),
            strings: []
          });
        }
        var sample = samples.get(seed);
        if (sample.needed) {
          var duplicate = sampledValues.indexOf(value) > -1;
          if (!duplicate || _this2.allowDuplicates || hasCustomBundleSeed) {
            sample.strings.push(_defineProperty$1({
              value
            }, computedKey, index));
            sampledValues.push(value);
            sample.needed -= 1;
          }
        }
      });
      return samples;
    }
  }], [{
    key: "SAMPLE_COUNT",
    get: function get() {
      return 3;
    }
  }]);
  return SamplesGenerator2;
}();

function _typeof$9(obj) {
  "@babel/helpers - typeof";
  return _typeof$9 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$9(obj);
}
function _slicedToArray$2(arr, i) {
  return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i) || _unsupportedIterableToArray$2(arr, i) || _nonIterableRest$2();
}
function _nonIterableRest$2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$2(o, minLen);
}
function _arrayLikeToArray$2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$2(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$2(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck$c(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$c(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$c(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$c(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$c(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$7() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$7 = Reflect.get.bind();
  } else {
    _get$7 = function _get2(target, property, receiver) {
      var base = _superPropBase$7(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$7.apply(this, arguments);
}
function _superPropBase$7(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$9(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$9(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$9(subClass, superClass);
}
function _setPrototypeOf$9(o, p) {
  _setPrototypeOf$9 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$9(o, p);
}
function _createSuper$9(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$9();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$9(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$9(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$9(this, result);
  };
}
function _possibleConstructorReturn$9(self, call) {
  if (call && (_typeof$9(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$9(self);
}
function _assertThisInitialized$9(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$9() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$9(o) {
  _getPrototypeOf$9 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$9(o);
}
Hooks.getSingleton().register("modifyAutoColumnSizeSeed");
var PLUGIN_KEY$1 = "autoColumnSize";
var PLUGIN_PRIORITY = 10;
var privatePool$2 = new WeakMap();
var COLUMN_SIZE_MAP_NAME = "autoColumnSize";
var AutoColumnSize = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$9(AutoColumnSize2, _BasePlugin);
  var _super = _createSuper$9(AutoColumnSize2);
  function AutoColumnSize2(hotInstance) {
    var _this;
    _classCallCheck$c(this, AutoColumnSize2);
    _this = _super.call(this, hotInstance);
    privatePool$2.set(_assertThisInitialized$9(_this), {
      cachedColumnHeaders: []
    });
    _this.ghostTable = new GhostTable(_this.hot);
    _this.samplesGenerator = new SamplesGenerator(function(row, column) {
      var cellMeta = _this.hot.getCellMeta(row, column);
      var cellValue = "";
      if (!cellMeta.spanned) {
        cellValue = _this.hot.getDataAtCell(row, column);
      }
      var bundleSeed = "";
      if (_this.hot.hasHook("modifyAutoColumnSizeSeed")) {
        bundleSeed = _this.hot.runHooks("modifyAutoColumnSizeSeed", bundleSeed, cellMeta, cellValue);
      }
      return {
        value: cellValue,
        bundleSeed
      };
    });
    _this.firstCalculation = true;
    _this.inProgress = false;
    _this.measuredColumns = 0;
    _this.columnWidthsMap = new PhysicalIndexToValueMap();
    _this.hot.columnIndexMapper.registerMap(COLUMN_SIZE_MAP_NAME, _this.columnWidthsMap);
    _this.addHook("beforeColumnResize", function(size, column, isDblClick) {
      return _this.onBeforeColumnResize(size, column, isDblClick);
    });
    return _this;
  }
  _createClass$c(AutoColumnSize2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return this.hot.getSettings()[PLUGIN_KEY$1] !== false && !this.hot.getSettings().colWidths;
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      var setting = this.hot.getSettings()[PLUGIN_KEY$1];
      if (setting && setting.useHeaders !== null && setting.useHeaders !== void 0) {
        this.ghostTable.setSetting("useHeaders", setting.useHeaders);
      }
      this.setSamplingOptions();
      this.addHook("afterLoadData", function() {
        return _this2.onAfterLoadData.apply(_this2, arguments);
      });
      this.addHook("beforeChangeRender", function(changes) {
        return _this2.onBeforeChange(changes);
      });
      this.addHook("afterFormulasValuesUpdate", function(changes) {
        return _this2.onAfterFormulasValuesUpdate(changes);
      });
      this.addHook("beforeViewRender", function(force) {
        return _this2.onBeforeViewRender(force);
      });
      this.addHook("modifyColWidth", function(width, col) {
        return _this2.getColumnWidth(col, width);
      });
      this.addHook("afterInit", function() {
        return _this2.onAfterInit();
      });
      _get$7(_getPrototypeOf$9(AutoColumnSize2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      var changedColumns = this.findColumnsWhereHeaderWasChanged();
      if (changedColumns.length) {
        this.clearCache(changedColumns);
        this.calculateVisibleColumnsWidth();
      }
      _get$7(_getPrototypeOf$9(AutoColumnSize2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      var _this3 = this;
      _get$7(_getPrototypeOf$9(AutoColumnSize2.prototype), "disablePlugin", this).call(this);
      this.addHook("beforeColumnResize", function(size, column, isDblClick) {
        return _this3.onBeforeColumnResize(size, column, isDblClick);
      });
    }
  }, {
    key: "calculateVisibleColumnsWidth",
    value: function calculateVisibleColumnsWidth() {
      var rowsCount = this.hot.countRows();
      if (!rowsCount) {
        return;
      }
      var force = this.hot.renderCall;
      var firstVisibleColumn = this.getFirstVisibleColumn();
      var lastVisibleColumn = this.getLastVisibleColumn();
      if (firstVisibleColumn === -1 || lastVisibleColumn === -1) {
        return;
      }
      this.calculateColumnsWidth({
        from: firstVisibleColumn,
        to: lastVisibleColumn
      }, void 0, force);
    }
  }, {
    key: "calculateColumnsWidth",
    value: function calculateColumnsWidth() {
      var _this4 = this;
      var colRange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        from: 0,
        to: this.hot.countCols() - 1
      };
      var rowRange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        from: 0,
        to: this.hot.countRows() - 1
      };
      var force = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var columnsRange = typeof colRange === "number" ? {
        from: colRange,
        to: colRange
      } : colRange;
      var rowsRange = typeof rowRange === "number" ? {
        from: rowRange,
        to: rowRange
      } : rowRange;
      rangeEach(columnsRange.from, columnsRange.to, function(visualColumn) {
        var physicalColumn = _this4.hot.toPhysicalColumn(visualColumn);
        if (physicalColumn === null) {
          physicalColumn = visualColumn;
        }
        if (force || _this4.columnWidthsMap.getValueAtIndex(physicalColumn) === null && !_this4.hot._getColWidthFromSettings(physicalColumn)) {
          var samples = _this4.samplesGenerator.generateColumnSamples(visualColumn, rowsRange);
          arrayEach(samples, function(_ref) {
            var _ref2 = _slicedToArray$2(_ref, 2), column = _ref2[0], sample = _ref2[1];
            return _this4.ghostTable.addColumn(column, sample);
          });
        }
      });
      if (this.ghostTable.columns.length) {
        this.hot.batchExecution(function() {
          _this4.ghostTable.getWidths(function(visualColumn, width) {
            var physicalColumn = _this4.hot.toPhysicalColumn(visualColumn);
            _this4.columnWidthsMap.setValueAtIndex(physicalColumn, width);
          });
        }, true);
        this.measuredColumns = columnsRange.to + 1;
        this.ghostTable.clean();
      }
    }
  }, {
    key: "calculateAllColumnsWidth",
    value: function calculateAllColumnsWidth() {
      var _this5 = this;
      var rowRange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        from: 0,
        to: this.hot.countRows() - 1
      };
      var current = 0;
      var length = this.hot.countCols() - 1;
      var timer = null;
      this.inProgress = true;
      var loop = function loop2() {
        if (!_this5.hot) {
          cancelAnimationFrame(timer);
          _this5.inProgress = false;
          return;
        }
        _this5.calculateColumnsWidth({
          from: current,
          to: Math.min(current + AutoColumnSize2.CALCULATION_STEP, length)
        }, rowRange);
        current = current + AutoColumnSize2.CALCULATION_STEP + 1;
        if (current < length) {
          timer = requestAnimationFrame(loop2);
        } else {
          cancelAnimationFrame(timer);
          _this5.inProgress = false;
          _this5.hot.view.adjustElementsSize();
        }
      };
      var syncLimit = this.getSyncCalculationLimit();
      if (this.firstCalculation && syncLimit >= 0) {
        this.calculateColumnsWidth({
          from: 0,
          to: syncLimit
        }, rowRange);
        this.firstCalculation = false;
        current = syncLimit + 1;
      }
      if (current < length) {
        loop();
      } else {
        this.inProgress = false;
      }
    }
  }, {
    key: "setSamplingOptions",
    value: function setSamplingOptions() {
      var setting = this.hot.getSettings()[PLUGIN_KEY$1];
      var samplingRatio = setting && hasOwnProperty(setting, "samplingRatio") ? setting.samplingRatio : void 0;
      var allowSampleDuplicates = setting && hasOwnProperty(setting, "allowSampleDuplicates") ? setting.allowSampleDuplicates : void 0;
      if (samplingRatio && !isNaN(samplingRatio)) {
        this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));
      }
      if (allowSampleDuplicates) {
        this.samplesGenerator.setAllowDuplicates(allowSampleDuplicates);
      }
    }
  }, {
    key: "recalculateAllColumnsWidth",
    value: function recalculateAllColumnsWidth() {
      if (this.hot.view && this.hot.view._wt.wtTable.isVisible()) {
        this.clearCache();
        this.calculateAllColumnsWidth();
      }
    }
  }, {
    key: "getSyncCalculationLimit",
    value: function getSyncCalculationLimit() {
      var settings = this.hot.getSettings()[PLUGIN_KEY$1];
      var limit = AutoColumnSize2.SYNC_CALCULATION_LIMIT;
      var colsLimit = this.hot.countCols() - 1;
      if (isObject(settings)) {
        limit = settings.syncLimit;
        if (isPercentValue(limit)) {
          limit = valueAccordingPercent(colsLimit, limit);
        } else {
          limit >>= 0;
        }
      }
      return Math.min(limit, colsLimit);
    }
  }, {
    key: "getColumnWidth",
    value: function getColumnWidth(column) {
      var defaultWidth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
      var keepMinimum = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var width = defaultWidth;
      if (width === void 0) {
        width = this.columnWidthsMap.getValueAtIndex(this.hot.toPhysicalColumn(column));
        if (keepMinimum && typeof width === "number") {
          width = Math.max(width, ViewportColumnsCalculator.DEFAULT_WIDTH);
        }
      }
      return width;
    }
  }, {
    key: "getFirstVisibleColumn",
    value: function getFirstVisibleColumn() {
      var wot = this.hot.view._wt;
      if (wot.wtViewport.columnsVisibleCalculator) {
        var firstFullyVisibleColumn = wot.wtTable.getFirstVisibleColumn();
        if (firstFullyVisibleColumn !== -1) {
          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(firstFullyVisibleColumn);
        }
      }
      if (wot.wtViewport.columnsRenderCalculator) {
        var firstRenderedColumn = wot.wtTable.getFirstRenderedColumn();
        if (firstRenderedColumn !== -1) {
          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(firstRenderedColumn);
        }
      }
      return -1;
    }
  }, {
    key: "getLastVisibleColumn",
    value: function getLastVisibleColumn() {
      var wot = this.hot.view._wt;
      if (wot.wtViewport.columnsVisibleCalculator) {
        var lastFullyVisibleColumn = wot.wtTable.getLastVisibleColumn();
        if (lastFullyVisibleColumn !== -1) {
          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(lastFullyVisibleColumn);
        }
      }
      if (wot.wtViewport.columnsRenderCalculator) {
        var lastRenderedColumn = wot.wtTable.getLastRenderedColumn();
        if (lastRenderedColumn !== -1) {
          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(lastRenderedColumn);
        }
      }
      return -1;
    }
  }, {
    key: "findColumnsWhereHeaderWasChanged",
    value: function findColumnsWhereHeaderWasChanged() {
      var columnHeaders = this.hot.getColHeader();
      var _privatePool$get = privatePool$2.get(this), cachedColumnHeaders = _privatePool$get.cachedColumnHeaders;
      var changedColumns = arrayReduce(columnHeaders, function(acc, columnTitle, physicalColumn) {
        var cachedColumnsLength = cachedColumnHeaders.length;
        if (cachedColumnsLength - 1 < physicalColumn || cachedColumnHeaders[physicalColumn] !== columnTitle) {
          acc.push(physicalColumn);
        }
        if (cachedColumnsLength - 1 < physicalColumn) {
          cachedColumnHeaders.push(columnTitle);
        } else {
          cachedColumnHeaders[physicalColumn] = columnTitle;
        }
        return acc;
      }, []);
      return changedColumns;
    }
  }, {
    key: "clearCache",
    value: function clearCache() {
      var _this6 = this;
      var columns = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      if (columns.length) {
        this.hot.batchExecution(function() {
          arrayEach(columns, function(physicalIndex) {
            _this6.columnWidthsMap.setValueAtIndex(physicalIndex, null);
          });
        }, true);
      } else {
        this.columnWidthsMap.clear();
      }
    }
  }, {
    key: "isNeedRecalculate",
    value: function isNeedRecalculate() {
      return !!arrayFilter(this.columnWidthsMap.getValues().slice(0, this.measuredColumns), function(item) {
        return item === null;
      }).length;
    }
  }, {
    key: "onBeforeViewRender",
    value: function onBeforeViewRender() {
      this.calculateVisibleColumnsWidth();
      if (this.isNeedRecalculate() && !this.inProgress) {
        this.calculateAllColumnsWidth();
      }
    }
  }, {
    key: "onAfterLoadData",
    value: function onAfterLoadData() {
      var _this7 = this;
      if (this.hot.view) {
        this.recalculateAllColumnsWidth();
      } else {
        setTimeout(function() {
          if (_this7.hot) {
            _this7.recalculateAllColumnsWidth();
          }
        }, 0);
      }
    }
  }, {
    key: "onBeforeChange",
    value: function onBeforeChange(changes) {
      var _this8 = this;
      var changedColumns = arrayMap(changes, function(_ref3) {
        var _ref4 = _slicedToArray$2(_ref3, 2), columnProperty = _ref4[1];
        return _this8.hot.toPhysicalColumn(_this8.hot.propToCol(columnProperty));
      });
      this.clearCache(Array.from(new Set(changedColumns)));
    }
  }, {
    key: "onBeforeColumnResize",
    value: function onBeforeColumnResize(size, column, isDblClick) {
      var newSize = size;
      if (isDblClick) {
        this.calculateColumnsWidth(column, void 0, true);
        newSize = this.getColumnWidth(column, void 0, false);
      }
      return newSize;
    }
  }, {
    key: "onAfterInit",
    value: function onAfterInit() {
      privatePool$2.get(this).cachedColumnHeaders = this.hot.getColHeader();
    }
  }, {
    key: "onAfterFormulasValuesUpdate",
    value: function onAfterFormulasValuesUpdate(changes) {
      var filteredChanges = arrayFilter(changes, function(change) {
        var _change$address;
        return isDefined((_change$address = change.address) === null || _change$address === void 0 ? void 0 : _change$address.col);
      });
      var changedColumns = arrayMap(filteredChanges, function(change) {
        return change.address.col;
      });
      this.clearCache(Array.from(new Set(changedColumns)));
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.ghostTable.clean();
      _get$7(_getPrototypeOf$9(AutoColumnSize2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$1;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY;
    }
  }, {
    key: "SETTING_KEYS",
    get: function get() {
      return true;
    }
  }, {
    key: "CALCULATION_STEP",
    get: function get() {
      return 50;
    }
  }, {
    key: "SYNC_CALCULATION_LIMIT",
    get: function get() {
      return 50;
    }
  }]);
  return AutoColumnSize2;
}(BasePlugin);

var DIRECTIONS = {
  horizontal: "horizontal",
  vertical: "vertical"
};
function getDeltas(start, end, data, direction) {
  var rowsLength = data.length;
  var columnsLength = data ? data[0].length : 0;
  var deltas = [];
  var diffRow = end.row - start.row;
  var diffCol = end.col - start.col;
  if (["down", "up"].indexOf(direction) !== -1) {
    var arr = [];
    for (var col = 0; col < diffCol; col++) {
      var startValue = parseInt(data[0][col], 10);
      var endValue = parseInt(data[rowsLength - 1][col], 10);
      var delta = (direction === "down" ? endValue - startValue : startValue - endValue) / (rowsLength - 1) || 0;
      arr.push(delta);
    }
    deltas.push(arr);
  }
  if (["right", "left"].indexOf(direction) !== -1) {
    for (var row = 0; row < diffRow; row++) {
      var _startValue = parseInt(data[row][0], 10);
      var _endValue = parseInt(data[row][columnsLength - 1], 10);
      var _delta = (direction === "right" ? _endValue - _startValue : _startValue - _endValue) / (columnsLength - 1) || 0;
      deltas.push([_delta]);
    }
  }
  return deltas;
}
function getDragDirectionAndRange(startSelection, endSelection, cellCoordsFactory) {
  var startOfDragCoords;
  var endOfDragCoords;
  var directionOfDrag;
  if (endSelection[0] === startSelection[0] && endSelection[1] < startSelection[1]) {
    directionOfDrag = "left";
    startOfDragCoords = cellCoordsFactory(endSelection[0], endSelection[1]);
    endOfDragCoords = cellCoordsFactory(endSelection[2], startSelection[1] - 1);
  } else if (endSelection[2] === startSelection[2] && endSelection[0] === startSelection[0] && endSelection[3] > startSelection[3]) {
    directionOfDrag = "right";
    startOfDragCoords = cellCoordsFactory(endSelection[0], startSelection[3] + 1);
    endOfDragCoords = cellCoordsFactory(endSelection[2], endSelection[3]);
  } else if (endSelection[0] < startSelection[0] && endSelection[1] === startSelection[1]) {
    directionOfDrag = "up";
    startOfDragCoords = cellCoordsFactory(endSelection[0], endSelection[1]);
    endOfDragCoords = cellCoordsFactory(startSelection[0] - 1, endSelection[3]);
  } else if (endSelection[2] > startSelection[2] && endSelection[1] === startSelection[1]) {
    directionOfDrag = "down";
    startOfDragCoords = cellCoordsFactory(startSelection[2] + 1, endSelection[1]);
    endOfDragCoords = cellCoordsFactory(endSelection[2], endSelection[3]);
  }
  if (startOfDragCoords) {
    startOfDragCoords.normalize();
  }
  if (endOfDragCoords) {
    endOfDragCoords.normalize();
  }
  return {
    directionOfDrag,
    startOfDragCoords,
    endOfDragCoords
  };
}
function getMappedFillHandleSetting(fillHandle) {
  var mappedSettings = {};
  if (fillHandle === true) {
    mappedSettings.directions = Object.keys(DIRECTIONS);
    mappedSettings.autoInsertRow = true;
  } else if (isObject(fillHandle)) {
    if (isDefined(fillHandle.autoInsertRow)) {
      if (fillHandle.direction === DIRECTIONS.horizontal) {
        mappedSettings.autoInsertRow = false;
      } else {
        mappedSettings.autoInsertRow = fillHandle.autoInsertRow;
      }
    } else {
      mappedSettings.autoInsertRow = false;
    }
    if (isDefined(fillHandle.direction)) {
      mappedSettings.directions = [fillHandle.direction];
    } else {
      mappedSettings.directions = Object.keys(DIRECTIONS);
    }
  } else if (typeof fillHandle === "string") {
    mappedSettings.directions = [fillHandle];
    mappedSettings.autoInsertRow = true;
  } else {
    mappedSettings.directions = [];
    mappedSettings.autoInsertRow = false;
  }
  return mappedSettings;
}

function _typeof$a(obj) {
  "@babel/helpers - typeof";
  return _typeof$a = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$a(obj);
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$3(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$3(arr);
}
function _slicedToArray$3(arr, i) {
  return _arrayWithHoles$3(arr) || _iterableToArrayLimit$3(arr, i) || _unsupportedIterableToArray$3(arr, i) || _nonIterableRest$3();
}
function _nonIterableRest$3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$3(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$3(o, minLen);
}
function _arrayLikeToArray$3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$3(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$3(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck$d(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$d(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$d(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$d(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$d(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$8() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$8 = Reflect.get.bind();
  } else {
    _get$8 = function _get2(target, property, receiver) {
      var base = _superPropBase$8(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$8.apply(this, arguments);
}
function _superPropBase$8(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$a(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$a(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$a(subClass, superClass);
}
function _setPrototypeOf$a(o, p) {
  _setPrototypeOf$a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$a(o, p);
}
function _createSuper$a(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$a();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$a(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$a(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$a(this, result);
  };
}
function _possibleConstructorReturn$a(self, call) {
  if (call && (_typeof$a(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$a(self);
}
function _assertThisInitialized$a(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$a() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$a(o) {
  _getPrototypeOf$a = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$a(o);
}
Hooks.getSingleton().register("modifyAutofillRange");
Hooks.getSingleton().register("beforeAutofill");
Hooks.getSingleton().register("afterAutofill");
var PLUGIN_KEY$2 = "autofill";
var PLUGIN_PRIORITY$1 = 20;
var SETTING_KEYS = ["fillHandle"];
var INSERT_ROW_ALTER_ACTION_NAME = "insert_row";
var INTERVAL_FOR_ADDING_ROW = 200;
var Autofill = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$a(Autofill2, _BasePlugin);
  var _super = _createSuper$a(Autofill2);
  function Autofill2(hotInstance) {
    var _this;
    _classCallCheck$d(this, Autofill2);
    _this = _super.call(this, hotInstance);
    _this.eventManager = new EventManager(_assertThisInitialized$a(_this));
    _this.addingStarted = false;
    _this.mouseDownOnCellCorner = false;
    _this.mouseDragOutside = false;
    _this.handleDraggedCells = 0;
    _this.directions = [];
    _this.autoInsertRow = false;
    return _this;
  }
  _createClass$d(Autofill2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return this.hot.getSettings().fillHandle;
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.mapSettings();
      this.registerEvents();
      this.addHook("afterOnCellCornerMouseDown", function(event) {
        return _this2.onAfterCellCornerMouseDown(event);
      });
      this.addHook("afterOnCellCornerDblClick", function(event) {
        return _this2.onCellCornerDblClick(event);
      });
      this.addHook("beforeOnCellMouseOver", function(_, coords) {
        return _this2.onBeforeCellMouseOver(coords);
      });
      _get$8(_getPrototypeOf$a(Autofill2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      _get$8(_getPrototypeOf$a(Autofill2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.clearMappedSettings();
      _get$8(_getPrototypeOf$a(Autofill2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "getSelectionData",
    value: function getSelectionData() {
      var _this3 = this;
      var selection = this.hot.getSelectedRangeLast();
      var _selection$getTopStar = selection.getTopStartCorner(), startRow = _selection$getTopStar.row, startCol = _selection$getTopStar.col;
      var _selection$getBottomE = selection.getBottomEndCorner(), endRow = _selection$getBottomE.row, endCol = _selection$getBottomE.col;
      var copyableRanges = this.hot.runHooks("modifyCopyableRange", [{
        startRow,
        startCol,
        endRow,
        endCol
      }]);
      var copyableRows = [];
      var copyableColumns = [];
      var data = [];
      arrayEach(copyableRanges, function(range) {
        for (var visualRow = range.startRow; visualRow <= range.endRow; visualRow += 1) {
          if (copyableRows.indexOf(visualRow) === -1) {
            copyableRows.push(visualRow);
          }
        }
        for (var visualColumn = range.startCol; visualColumn <= range.endCol; visualColumn += 1) {
          if (copyableColumns.indexOf(visualColumn) === -1) {
            copyableColumns.push(visualColumn);
          }
        }
      });
      arrayEach(copyableRows, function(row) {
        var rowSet = [];
        arrayEach(copyableColumns, function(column) {
          rowSet.push(_this3.hot.getCopyableData(row, column));
        });
        data.push(rowSet);
      });
      return data;
    }
  }, {
    key: "fillIn",
    value: function fillIn() {
      var _this4 = this;
      if (this.hot.selection.highlight.getFill().isEmpty()) {
        return false;
      }
      var _this$hot$selection$h = this.hot.selection.highlight.getFill().getVisualCorners(), _this$hot$selection$h2 = _slicedToArray$3(_this$hot$selection$h, 4), fillStartRow = _this$hot$selection$h2[0], fillStartColumn = _this$hot$selection$h2[1], fillEndRow = _this$hot$selection$h2[2], fillEndColumn = _this$hot$selection$h2[3];
      var selectionRangeLast = this.hot.getSelectedRangeLast();
      var topStartCorner = selectionRangeLast.getTopStartCorner();
      var bottomEndCorner = selectionRangeLast.getBottomEndCorner();
      this.resetSelectionOfDraggedArea();
      var cornersOfSelectedCells = [topStartCorner.row, topStartCorner.col, bottomEndCorner.row, bottomEndCorner.col];
      var cornersOfSelectionAndDragAreas = this.hot.runHooks("modifyAutofillRange", [Math.min(topStartCorner.row, fillStartRow), Math.min(topStartCorner.col, fillStartColumn), Math.max(bottomEndCorner.row, fillEndRow), Math.max(bottomEndCorner.col, fillEndColumn)], cornersOfSelectedCells);
      var _getDragDirectionAndR = getDragDirectionAndRange(cornersOfSelectedCells, cornersOfSelectionAndDragAreas, function(row, column) {
        return _this4.hot._createCellCoords(row, column);
      }), directionOfDrag = _getDragDirectionAndR.directionOfDrag, startOfDragCoords = _getDragDirectionAndR.startOfDragCoords, endOfDragCoords = _getDragDirectionAndR.endOfDragCoords;
      if (startOfDragCoords && startOfDragCoords.row > -1 && startOfDragCoords.col > -1) {
        var selectionData = this.getSelectionData();
        var sourceRange = selectionRangeLast.clone();
        var targetRange = this.hot._createCellRange(startOfDragCoords, startOfDragCoords, endOfDragCoords);
        var beforeAutofillHookResult = this.hot.runHooks("beforeAutofill", selectionData, sourceRange, targetRange, directionOfDrag);
        if (beforeAutofillHookResult === false) {
          this.hot.selection.highlight.getFill().clear();
          this.hot.render();
          return false;
        }
        var deltas = getDeltas(startOfDragCoords, endOfDragCoords, selectionData, directionOfDrag);
        var fillData = beforeAutofillHookResult;
        var res = beforeAutofillHookResult;
        if (["up", "left"].indexOf(directionOfDrag) > -1 && !(res.length === 1 && res[0].length === 0)) {
          fillData = [];
          if (directionOfDrag === "up") {
            var dragLength = endOfDragCoords.row - startOfDragCoords.row + 1;
            var fillOffset = dragLength % res.length;
            for (var i = 0; i < dragLength; i++) {
              fillData.push(res[(i + (res.length - fillOffset)) % res.length]);
            }
          } else {
            var _dragLength = endOfDragCoords.col - startOfDragCoords.col + 1;
            var _fillOffset = _dragLength % res[0].length;
            for (var _i2 = 0; _i2 < res.length; _i2++) {
              fillData.push([]);
              for (var j = 0; j < _dragLength; j++) {
                fillData[_i2].push(res[_i2][(j + (res[_i2].length - _fillOffset)) % res[_i2].length]);
              }
            }
          }
        }
        this.hot.populateFromArray(startOfDragCoords.row, startOfDragCoords.col, fillData, endOfDragCoords.row, endOfDragCoords.col, "".concat(this.pluginName, ".fill"), null, directionOfDrag, deltas);
        this.setSelection(cornersOfSelectionAndDragAreas);
        this.hot.runHooks("afterAutofill", fillData, sourceRange, targetRange, directionOfDrag);
        this.hot.render();
      } else {
        this.hot._refreshBorders();
      }
      return true;
    }
  }, {
    key: "reduceSelectionAreaIfNeeded",
    value: function reduceSelectionAreaIfNeeded(coords) {
      if (coords.row < 0) {
        coords.row = 0;
      }
      if (coords.col < 0) {
        coords.col = 0;
      }
      return coords;
    }
  }, {
    key: "getCoordsOfDragAndDropBorders",
    value: function getCoordsOfDragAndDropBorders(coordsOfSelection) {
      var currentSelection = this.hot.getSelectedRangeLast();
      var bottomRightCorner = currentSelection.getBottomEndCorner();
      var coords = coordsOfSelection;
      if (this.directions.includes(DIRECTIONS.vertical) && this.directions.includes(DIRECTIONS.horizontal)) {
        var topStartCorner = currentSelection.getTopStartCorner();
        if (bottomRightCorner.col <= coordsOfSelection.col || topStartCorner.col >= coordsOfSelection.col) {
          coords = this.hot._createCellCoords(bottomRightCorner.row, coordsOfSelection.col);
        }
        if (bottomRightCorner.row < coordsOfSelection.row || topStartCorner.row > coordsOfSelection.row) {
          coords = this.hot._createCellCoords(coordsOfSelection.row, bottomRightCorner.col);
        }
      } else if (this.directions.includes(DIRECTIONS.vertical)) {
        coords = this.hot._createCellCoords(coordsOfSelection.row, bottomRightCorner.col);
      } else if (this.directions.includes(DIRECTIONS.horizontal)) {
        coords = this.hot._createCellCoords(bottomRightCorner.row, coordsOfSelection.col);
      } else {
        return;
      }
      return this.reduceSelectionAreaIfNeeded(coords);
    }
  }, {
    key: "showBorder",
    value: function showBorder(coordsOfSelection) {
      var coordsOfDragAndDropBorders = this.getCoordsOfDragAndDropBorders(coordsOfSelection);
      if (coordsOfDragAndDropBorders) {
        this.redrawBorders(coordsOfDragAndDropBorders);
      }
    }
  }, {
    key: "addRow",
    value: function addRow() {
      var _this5 = this;
      this.hot._registerTimeout(function() {
        _this5.hot.alter(INSERT_ROW_ALTER_ACTION_NAME, void 0, 1, "".concat(_this5.pluginName, ".fill"));
        _this5.addingStarted = false;
      }, INTERVAL_FOR_ADDING_ROW);
    }
  }, {
    key: "addNewRowIfNeeded",
    value: function addNewRowIfNeeded() {
      if (!this.hot.selection.highlight.getFill().isEmpty() && this.addingStarted === false && this.autoInsertRow) {
        var cornersOfSelectedCells = this.hot.getSelectedLast();
        var cornersOfSelectedDragArea = this.hot.selection.highlight.getFill().getVisualCorners();
        var nrOfTableRows = this.hot.countRows();
        if (cornersOfSelectedCells[2] < nrOfTableRows - 1 && cornersOfSelectedDragArea[2] === nrOfTableRows - 1) {
          this.addingStarted = true;
          this.addRow();
        }
      }
    }
  }, {
    key: "getIndexOfLastAdjacentFilledInRow",
    value: function getIndexOfLastAdjacentFilledInRow(cornersOfSelectedCells) {
      var data = this.hot.getData();
      var nrOfTableRows = this.hot.countRows();
      var lastFilledInRowIndex;
      for (var rowIndex = cornersOfSelectedCells[2] + 1; rowIndex < nrOfTableRows; rowIndex++) {
        for (var columnIndex = cornersOfSelectedCells[1]; columnIndex <= cornersOfSelectedCells[3]; columnIndex++) {
          var dataInCell = data[rowIndex][columnIndex];
          if (dataInCell) {
            return -1;
          }
        }
        var dataInNextLeftCell = data[rowIndex][cornersOfSelectedCells[1] - 1];
        var dataInNextRightCell = data[rowIndex][cornersOfSelectedCells[3] + 1];
        if (!!dataInNextLeftCell || !!dataInNextRightCell) {
          lastFilledInRowIndex = rowIndex;
        }
      }
      return lastFilledInRowIndex;
    }
  }, {
    key: "addSelectionFromStartAreaToSpecificRowIndex",
    value: function addSelectionFromStartAreaToSpecificRowIndex(selectStartArea, rowIndex) {
      this.hot.selection.highlight.getFill().clear().add(this.hot._createCellCoords(selectStartArea[0], selectStartArea[1])).add(this.hot._createCellCoords(rowIndex, selectStartArea[3])).commit();
    }
  }, {
    key: "setSelection",
    value: function setSelection(cornersOfArea) {
      var _this$hot;
      (_this$hot = this.hot).selectCell.apply(_this$hot, _toConsumableArray(arrayMap(cornersOfArea, function(index) {
        return Math.max(index, 0);
      })).concat([false, false]));
    }
  }, {
    key: "selectAdjacent",
    value: function selectAdjacent() {
      var cornersOfSelectedCells = this.hot.getSelectedLast();
      var lastFilledInRowIndex = this.getIndexOfLastAdjacentFilledInRow(cornersOfSelectedCells);
      if (lastFilledInRowIndex === -1 || lastFilledInRowIndex === void 0) {
        return false;
      }
      this.addSelectionFromStartAreaToSpecificRowIndex(cornersOfSelectedCells, lastFilledInRowIndex);
      return true;
    }
  }, {
    key: "resetSelectionOfDraggedArea",
    value: function resetSelectionOfDraggedArea() {
      this.handleDraggedCells = 0;
      this.hot.selection.highlight.getFill().clear();
    }
  }, {
    key: "redrawBorders",
    value: function redrawBorders(coords) {
      this.hot.selection.highlight.getFill().clear().add(this.hot.getSelectedRangeLast().from).add(this.hot.getSelectedRangeLast().to).add(coords).commit();
      this.hot.view.render();
    }
  }, {
    key: "getIfMouseWasDraggedOutside",
    value: function getIfMouseWasDraggedOutside(event) {
      var documentElement = this.hot.rootDocument.documentElement;
      var tableBottom = offset(this.hot.table).top - (this.hot.rootWindow.pageYOffset || documentElement.scrollTop) + outerHeight(this.hot.table);
      var tableRight = offset(this.hot.table).left - (this.hot.rootWindow.pageXOffset || documentElement.scrollLeft) + outerWidth(this.hot.table);
      return event.clientY > tableBottom && event.clientX <= tableRight;
    }
  }, {
    key: "registerEvents",
    value: function registerEvents() {
      var _this6 = this;
      var documentElement = this.hot.rootDocument.documentElement;
      this.eventManager.addEventListener(documentElement, "mouseup", function() {
        return _this6.onMouseUp();
      });
      this.eventManager.addEventListener(documentElement, "mousemove", function(event) {
        return _this6.onMouseMove(event);
      });
    }
  }, {
    key: "onCellCornerDblClick",
    value: function onCellCornerDblClick() {
      var selectionApplied = this.selectAdjacent();
      if (selectionApplied) {
        this.fillIn();
      }
    }
  }, {
    key: "onAfterCellCornerMouseDown",
    value: function onAfterCellCornerMouseDown() {
      this.handleDraggedCells = 1;
      this.mouseDownOnCellCorner = true;
    }
  }, {
    key: "onBeforeCellMouseOver",
    value: function onBeforeCellMouseOver(coords) {
      if (this.mouseDownOnCellCorner && !this.hot.view.isMouseDown() && this.handleDraggedCells) {
        this.handleDraggedCells += 1;
        this.showBorder(coords);
        this.addNewRowIfNeeded();
      }
    }
  }, {
    key: "onMouseUp",
    value: function onMouseUp() {
      if (this.handleDraggedCells) {
        if (this.handleDraggedCells > 1) {
          this.fillIn();
        }
        this.handleDraggedCells = 0;
        this.mouseDownOnCellCorner = false;
      }
    }
  }, {
    key: "onMouseMove",
    value: function onMouseMove(event) {
      var mouseWasDraggedOutside = this.getIfMouseWasDraggedOutside(event);
      if (this.addingStarted === false && this.handleDraggedCells > 0 && mouseWasDraggedOutside) {
        this.mouseDragOutside = true;
        this.addingStarted = true;
      } else {
        this.mouseDragOutside = false;
      }
      if (this.mouseDragOutside && this.autoInsertRow) {
        this.addRow();
      }
    }
  }, {
    key: "clearMappedSettings",
    value: function clearMappedSettings() {
      this.directions.length = 0;
      this.autoInsertRow = false;
    }
  }, {
    key: "mapSettings",
    value: function mapSettings() {
      var mappedSettings = getMappedFillHandleSetting(this.hot.getSettings().fillHandle);
      this.directions = mappedSettings.directions;
      this.autoInsertRow = mappedSettings.autoInsertRow;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get$8(_getPrototypeOf$a(Autofill2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$2;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$1;
    }
  }, {
    key: "SETTING_KEYS",
    get: function get() {
      return [PLUGIN_KEY$2].concat(SETTING_KEYS);
    }
  }]);
  return Autofill2;
}(BasePlugin);

function _typeof$b(obj) {
  "@babel/helpers - typeof";
  return _typeof$b = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$b(obj);
}
function _slicedToArray$4(arr, i) {
  return _arrayWithHoles$4(arr) || _iterableToArrayLimit$4(arr, i) || _unsupportedIterableToArray$4(arr, i) || _nonIterableRest$4();
}
function _nonIterableRest$4() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$4(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$4(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$4(o, minLen);
}
function _arrayLikeToArray$4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$4(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$4(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck$e(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$e(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$e(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$e(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$e(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$9() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$9 = Reflect.get.bind();
  } else {
    _get$9 = function _get2(target, property, receiver) {
      var base = _superPropBase$9(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$9.apply(this, arguments);
}
function _superPropBase$9(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$b(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$b(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$b(subClass, superClass);
}
function _setPrototypeOf$b(o, p) {
  _setPrototypeOf$b = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$b(o, p);
}
function _createSuper$b(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$b();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$b(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$b(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$b(this, result);
  };
}
function _possibleConstructorReturn$b(self, call) {
  if (call && (_typeof$b(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$b(self);
}
function _assertThisInitialized$b(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$b() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$b(o) {
  _getPrototypeOf$b = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$b(o);
}
var PLUGIN_KEY$3 = "autoRowSize";
var PLUGIN_PRIORITY$2 = 40;
var ROW_WIDTHS_MAP_NAME = "autoRowSize";
var AutoRowSize = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$b(AutoRowSize2, _BasePlugin);
  var _super = _createSuper$b(AutoRowSize2);
  function AutoRowSize2(hotInstance) {
    var _this;
    _classCallCheck$e(this, AutoRowSize2);
    _this = _super.call(this, hotInstance);
    _this.rowHeightsMap = void 0;
    _this.headerHeight = null;
    _this.ghostTable = new GhostTable(_this.hot);
    _this.samplesGenerator = new SamplesGenerator(function(row, col) {
      var cellValue;
      if (row >= 0) {
        cellValue = _this.hot.getDataAtCell(row, col);
      } else if (row === -1) {
        cellValue = _this.hot.getColHeader(col);
      }
      return {
        value: cellValue
      };
    });
    _this.firstCalculation = true;
    _this.inProgress = false;
    _this.measuredRows = 0;
    _this.rowHeightsMap = new PhysicalIndexToValueMap();
    _this.hot.rowIndexMapper.registerMap(ROW_WIDTHS_MAP_NAME, _this.rowHeightsMap);
    _this.addHook("beforeRowResize", function(size, row, isDblClick) {
      return _this.onBeforeRowResize(size, row, isDblClick);
    });
    return _this;
  }
  _createClass$e(AutoRowSize2, [{
    key: "isEnabled",
    value: function isEnabled() {
      var settings = this.hot.getSettings()[PLUGIN_KEY$3];
      return settings === true || isObject(settings);
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.setSamplingOptions();
      this.addHook("afterLoadData", function() {
        return _this2.onAfterLoadData.apply(_this2, arguments);
      });
      this.addHook("beforeChangeRender", function(changes) {
        return _this2.onBeforeChange(changes);
      });
      this.addHook("beforeColumnResize", function() {
        return _this2.recalculateAllRowsHeight();
      });
      this.addHook("beforeViewRender", function(force) {
        return _this2.onBeforeViewRender(force);
      });
      this.addHook("modifyRowHeight", function(height, row) {
        return _this2.getRowHeight(row, height);
      });
      this.addHook("modifyColumnHeaderHeight", function() {
        return _this2.getColumnHeaderHeight();
      });
      _get$9(_getPrototypeOf$b(AutoRowSize2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      var _this3 = this;
      this.headerHeight = null;
      _get$9(_getPrototypeOf$b(AutoRowSize2.prototype), "disablePlugin", this).call(this);
      this.addHook("beforeRowResize", function(size, row, isDblClick) {
        return _this3.onBeforeRowResize(size, row, isDblClick);
      });
    }
  }, {
    key: "calculateRowsHeight",
    value: function calculateRowsHeight() {
      var _this4 = this;
      var rowRange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        from: 0,
        to: this.hot.countRows() - 1
      };
      var colRange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        from: 0,
        to: this.hot.countCols() - 1
      };
      var force = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var rowsRange = typeof rowRange === "number" ? {
        from: rowRange,
        to: rowRange
      } : rowRange;
      var columnsRange = typeof colRange === "number" ? {
        from: colRange,
        to: colRange
      } : colRange;
      if (this.hot.getColHeader(0) !== null) {
        var samples = this.samplesGenerator.generateRowSamples(-1, columnsRange);
        this.ghostTable.addColumnHeadersRow(samples.get(-1));
      }
      rangeEach(rowsRange.from, rowsRange.to, function(row) {
        if (force || _this4.rowHeightsMap.getValueAtIndex(row) === null) {
          var _samples = _this4.samplesGenerator.generateRowSamples(row, columnsRange);
          arrayEach(_samples, function(_ref) {
            var _ref2 = _slicedToArray$4(_ref, 2), rowIndex = _ref2[0], sample = _ref2[1];
            return _this4.ghostTable.addRow(rowIndex, sample);
          });
        }
      });
      if (this.ghostTable.rows.length) {
        this.hot.batchExecution(function() {
          _this4.ghostTable.getHeights(function(row, height) {
            if (row < 0) {
              _this4.headerHeight = height;
            } else {
              _this4.rowHeightsMap.setValueAtIndex(_this4.hot.toPhysicalRow(row), height);
            }
          });
        }, true);
        this.measuredRows = rowsRange.to + 1;
        this.ghostTable.clean();
      }
    }
  }, {
    key: "calculateAllRowsHeight",
    value: function calculateAllRowsHeight() {
      var _this5 = this;
      var colRange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        from: 0,
        to: this.hot.countCols() - 1
      };
      var current = 0;
      var length = this.hot.countRows() - 1;
      var timer = null;
      this.inProgress = true;
      var loop = function loop2() {
        if (!_this5.hot) {
          cancelAnimationFrame(timer);
          _this5.inProgress = false;
          return;
        }
        _this5.calculateRowsHeight({
          from: current,
          to: Math.min(current + AutoRowSize2.CALCULATION_STEP, length)
        }, colRange);
        current = current + AutoRowSize2.CALCULATION_STEP + 1;
        if (current < length) {
          timer = requestAnimationFrame(loop2);
        } else {
          cancelAnimationFrame(timer);
          _this5.inProgress = false;
          _this5.hot.view.adjustElementsSize(true);
          if (_this5.hot.view._wt.wtOverlays.inlineStartOverlay.needFullRender) {
            _this5.hot.view._wt.wtOverlays.inlineStartOverlay.clone.draw();
          }
        }
      };
      var syncLimit = this.getSyncCalculationLimit();
      if (this.firstCalculation && syncLimit >= 0) {
        this.calculateRowsHeight({
          from: 0,
          to: syncLimit
        }, colRange);
        this.firstCalculation = false;
        current = syncLimit + 1;
      }
      if (current < length) {
        loop();
      } else {
        this.inProgress = false;
        this.hot.view.adjustElementsSize(false);
      }
    }
  }, {
    key: "setSamplingOptions",
    value: function setSamplingOptions() {
      var setting = this.hot.getSettings()[PLUGIN_KEY$3];
      var samplingRatio = setting && hasOwnProperty(setting, "samplingRatio") ? setting.samplingRatio : void 0;
      var allowSampleDuplicates = setting && hasOwnProperty(setting, "allowSampleDuplicates") ? setting.allowSampleDuplicates : void 0;
      if (samplingRatio && !isNaN(samplingRatio)) {
        this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));
      }
      if (allowSampleDuplicates) {
        this.samplesGenerator.setAllowDuplicates(allowSampleDuplicates);
      }
    }
  }, {
    key: "recalculateAllRowsHeight",
    value: function recalculateAllRowsHeight() {
      if (isVisible(this.hot.view._wt.wtTable.TABLE)) {
        this.clearCache();
        this.calculateAllRowsHeight();
      }
    }
  }, {
    key: "getSyncCalculationLimit",
    value: function getSyncCalculationLimit() {
      var settings = this.hot.getSettings()[PLUGIN_KEY$3];
      var limit = AutoRowSize2.SYNC_CALCULATION_LIMIT;
      var rowsLimit = this.hot.countRows() - 1;
      if (isObject(settings)) {
        limit = settings.syncLimit;
        if (isPercentValue(limit)) {
          limit = valueAccordingPercent(rowsLimit, limit);
        } else {
          limit >>= 0;
        }
      }
      return Math.min(limit, rowsLimit);
    }
  }, {
    key: "getRowHeight",
    value: function getRowHeight(row) {
      var defaultHeight = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
      var cachedHeight = row < 0 ? this.headerHeight : this.rowHeightsMap.getValueAtIndex(this.hot.toPhysicalRow(row));
      var height = defaultHeight;
      if (cachedHeight !== null && cachedHeight > (defaultHeight || 0)) {
        height = cachedHeight;
      }
      return height;
    }
  }, {
    key: "getColumnHeaderHeight",
    value: function getColumnHeaderHeight() {
      return this.headerHeight;
    }
  }, {
    key: "getFirstVisibleRow",
    value: function getFirstVisibleRow() {
      var wot = this.hot.view._wt;
      if (wot.wtViewport.rowsVisibleCalculator) {
        return wot.wtTable.getFirstVisibleRow();
      }
      if (wot.wtViewport.rowsRenderCalculator) {
        return wot.wtTable.getFirstRenderedRow();
      }
      return -1;
    }
  }, {
    key: "getLastVisibleRow",
    value: function getLastVisibleRow() {
      var wot = this.hot.view._wt;
      if (wot.wtViewport.rowsVisibleCalculator) {
        return wot.wtTable.getLastVisibleRow();
      }
      if (wot.wtViewport.rowsRenderCalculator) {
        return wot.wtTable.getLastRenderedRow();
      }
      return -1;
    }
  }, {
    key: "clearCache",
    value: function clearCache() {
      this.headerHeight = null;
      this.rowHeightsMap.init();
    }
  }, {
    key: "clearCacheByRange",
    value: function clearCacheByRange(range) {
      var _this6 = this;
      var _ref3 = typeof range === "number" ? {
        from: range,
        to: range
      } : range, from = _ref3.from, to = _ref3.to;
      this.hot.batchExecution(function() {
        rangeEach(Math.min(from, to), Math.max(from, to), function(row) {
          _this6.rowHeightsMap.setValueAtIndex(row, null);
        });
      }, true);
    }
  }, {
    key: "isNeedRecalculate",
    value: function isNeedRecalculate() {
      return !!arrayFilter(this.rowHeightsMap.getValues().slice(0, this.measuredRows), function(item) {
        return item === null;
      }).length;
    }
  }, {
    key: "onBeforeViewRender",
    value: function onBeforeViewRender() {
      var force = this.hot.renderCall;
      var fixedRowsBottom = this.hot.getSettings().fixedRowsBottom;
      var firstVisibleRow = this.getFirstVisibleRow();
      var lastVisibleRow = this.getLastVisibleRow();
      if (firstVisibleRow === -1 || lastVisibleRow === -1) {
        return;
      }
      this.calculateRowsHeight({
        from: firstVisibleRow,
        to: lastVisibleRow
      }, void 0, force);
      if (fixedRowsBottom) {
        var totalRows = this.hot.countRows() - 1;
        this.calculateRowsHeight({
          from: totalRows - fixedRowsBottom,
          to: totalRows
        });
      }
      if (this.isNeedRecalculate() && !this.inProgress) {
        this.calculateAllRowsHeight();
      }
    }
  }, {
    key: "onBeforeRowMove",
    value: function onBeforeRowMove(from, to) {
      this.clearCacheByRange({
        from,
        to
      });
      this.calculateAllRowsHeight();
    }
  }, {
    key: "onBeforeRowResize",
    value: function onBeforeRowResize(size, row, isDblClick) {
      var newSize = size;
      if (isDblClick) {
        this.calculateRowsHeight(row, void 0, true);
        newSize = this.getRowHeight(row);
      }
      return newSize;
    }
  }, {
    key: "onAfterLoadData",
    value: function onAfterLoadData() {
      var _this7 = this;
      if (this.hot.view) {
        this.recalculateAllRowsHeight();
      } else {
        setTimeout(function() {
          if (_this7.hot) {
            _this7.recalculateAllRowsHeight();
          }
        }, 0);
      }
    }
  }, {
    key: "onBeforeChange",
    value: function onBeforeChange(changes) {
      var range = null;
      if (changes.length === 1) {
        range = changes[0][0];
      } else if (changes.length > 1) {
        range = {
          from: changes[0][0],
          to: changes[changes.length - 1][0]
        };
      }
      if (range !== null) {
        this.clearCacheByRange(range);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.ghostTable.clean();
      _get$9(_getPrototypeOf$b(AutoRowSize2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$3;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$2;
    }
  }, {
    key: "SETTING_KEYS",
    get: function get() {
      return true;
    }
  }, {
    key: "CALCULATION_STEP",
    get: function get() {
      return 50;
    }
  }, {
    key: "SYNC_CALCULATION_LIMIT",
    get: function get() {
      return 500;
    }
  }]);
  return AutoRowSize2;
}(BasePlugin);

function _typeof$c(obj) {
  "@babel/helpers - typeof";
  return _typeof$c = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$c(obj);
}
function _classCallCheck$f(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$f(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$f(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$f(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$f(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$a() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$a = Reflect.get.bind();
  } else {
    _get$a = function _get2(target, property, receiver) {
      var base = _superPropBase$a(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$a.apply(this, arguments);
}
function _superPropBase$a(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$c(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$c(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$c(subClass, superClass);
}
function _setPrototypeOf$c(o, p) {
  _setPrototypeOf$c = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$c(o, p);
}
function _createSuper$c(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$c();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$c(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$c(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$c(this, result);
  };
}
function _possibleConstructorReturn$c(self, call) {
  if (call && (_typeof$c(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$c(self);
}
function _assertThisInitialized$c(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$c() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$c(o) {
  _getPrototypeOf$c = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$c(o);
}
var _alterUtilsFactory = alterUtilsFactory("physicallyIndexed"), getListWithInsertedItems = _alterUtilsFactory.getListWithInsertedItems, getListWithRemovedItems = _alterUtilsFactory.getListWithRemovedItems;
var LooseBindsMap = /* @__PURE__ */ function(_IndexMap) {
  _inherits$c(LooseBindsMap2, _IndexMap);
  var _super = _createSuper$c(LooseBindsMap2);
  function LooseBindsMap2() {
    _classCallCheck$f(this, LooseBindsMap2);
    return _super.call(this, function(index) {
      return index;
    });
  }
  _createClass$f(LooseBindsMap2, [{
    key: "insert",
    value: function insert(insertionIndex, insertedIndexes) {
      var listAfterUpdate = getIncreasedIndexes(this.indexedValues, insertedIndexes);
      this.indexedValues = getListWithInsertedItems(listAfterUpdate, insertionIndex, insertedIndexes, this.initValueOrFn);
      _get$a(_getPrototypeOf$c(LooseBindsMap2.prototype), "insert", this).call(this, insertionIndex, insertedIndexes);
    }
  }, {
    key: "remove",
    value: function remove(removedIndexes) {
      var listAfterUpdate = getListWithRemovedItems(this.indexedValues, removedIndexes);
      this.indexedValues = getDecreasedIndexes(listAfterUpdate, removedIndexes);
      _get$a(_getPrototypeOf$c(LooseBindsMap2.prototype), "remove", this).call(this, removedIndexes);
    }
  }]);
  return LooseBindsMap2;
}(IndexMap);

function _typeof$d(obj) {
  "@babel/helpers - typeof";
  return _typeof$d = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$d(obj);
}
function _toConsumableArray$1(arr) {
  return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$5(arr) || _nonIterableSpread$1();
}
function _nonIterableSpread$1() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$5(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$5(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$5(o, minLen);
}
function _iterableToArray$1(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$1(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$5(arr);
}
function _arrayLikeToArray$5(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _classCallCheck$g(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$g(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$g(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$g(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$g(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$b() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$b = Reflect.get.bind();
  } else {
    _get$b = function _get2(target, property, receiver) {
      var base = _superPropBase$b(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$b.apply(this, arguments);
}
function _superPropBase$b(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$d(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$d(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$d(subClass, superClass);
}
function _setPrototypeOf$d(o, p) {
  _setPrototypeOf$d = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$d(o, p);
}
function _createSuper$d(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$d();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$d(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$d(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$d(this, result);
  };
}
function _possibleConstructorReturn$d(self, call) {
  if (call && (_typeof$d(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$d(self);
}
function _assertThisInitialized$d(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$d() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$d(o) {
  _getPrototypeOf$d = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$d(o);
}
var _alterUtilsFactory$1 = alterUtilsFactory("physicallyIndexed"), getListWithInsertedItems$1 = _alterUtilsFactory$1.getListWithInsertedItems, getListWithRemovedItems$1 = _alterUtilsFactory$1.getListWithRemovedItems;
var StrictBindsMap = /* @__PURE__ */ function(_IndexMap) {
  _inherits$d(StrictBindsMap2, _IndexMap);
  var _super = _createSuper$d(StrictBindsMap2);
  function StrictBindsMap2() {
    _classCallCheck$g(this, StrictBindsMap2);
    return _super.call(this, function(index) {
      return index;
    });
  }
  _createClass$g(StrictBindsMap2, [{
    key: "insert",
    value: function insert(insertionIndex, insertedIndexes) {
      var _this = this;
      this.indexedValues = getListWithInsertedItems$1(this.indexedValues, insertionIndex, insertedIndexes, function(_, ordinalNumber) {
        return _this.getNextValue(ordinalNumber);
      });
      _get$b(_getPrototypeOf$d(StrictBindsMap2.prototype), "insert", this).call(this, insertionIndex, insertedIndexes);
    }
  }, {
    key: "remove",
    value: function remove(removedIndexes) {
      this.indexedValues = getListWithRemovedItems$1(this.indexedValues, removedIndexes);
      _get$b(_getPrototypeOf$d(StrictBindsMap2.prototype), "remove", this).call(this, removedIndexes);
    }
  }, {
    key: "getNextValue",
    value: function getNextValue(ordinalNumber) {
      return Math.max.apply(Math, _toConsumableArray$1(this.getValues())) + 1 + ordinalNumber;
    }
  }]);
  return StrictBindsMap2;
}(IndexMap);

function _typeof$e(obj) {
  "@babel/helpers - typeof";
  return _typeof$e = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$e(obj);
}
function _classCallCheck$h(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$h(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$h(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$h(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$h(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$c() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$c = Reflect.get.bind();
  } else {
    _get$c = function _get2(target, property, receiver) {
      var base = _superPropBase$c(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$c.apply(this, arguments);
}
function _superPropBase$c(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$e(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$e(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$e(subClass, superClass);
}
function _setPrototypeOf$e(o, p) {
  _setPrototypeOf$e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$e(o, p);
}
function _createSuper$e(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$e();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$e(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$e(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$e(this, result);
  };
}
function _possibleConstructorReturn$e(self, call) {
  if (call && (_typeof$e(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$e(self);
}
function _assertThisInitialized$e(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$e() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$e(o) {
  _getPrototypeOf$e = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$e(o);
}
var PLUGIN_KEY$4 = "bindRowsWithHeaders";
var PLUGIN_PRIORITY$3 = 210;
var DEFAULT_BIND = "loose";
var bindTypeToMapStrategy = new Map([["loose", LooseBindsMap], ["strict", StrictBindsMap]]);
var BindRowsWithHeaders = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$e(BindRowsWithHeaders2, _BasePlugin);
  var _super = _createSuper$e(BindRowsWithHeaders2);
  function BindRowsWithHeaders2(hotInstance) {
    var _this;
    _classCallCheck$h(this, BindRowsWithHeaders2);
    _this = _super.call(this, hotInstance);
    _this.headerIndexes = null;
    return _this;
  }
  _createClass$h(BindRowsWithHeaders2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$4];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      var bindType = this.hot.getSettings()[PLUGIN_KEY$4];
      if (typeof bindType !== "string") {
        bindType = DEFAULT_BIND;
      }
      var MapStrategy = bindTypeToMapStrategy.get(bindType);
      this.headerIndexes = this.hot.rowIndexMapper.registerMap("bindRowsWithHeaders", new MapStrategy());
      this.addHook("modifyRowHeader", function(row) {
        return _this2.onModifyRowHeader(row);
      });
      _get$c(_getPrototypeOf$e(BindRowsWithHeaders2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.hot.rowIndexMapper.unregisterMap("bindRowsWithHeaders");
      _get$c(_getPrototypeOf$e(BindRowsWithHeaders2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "onModifyRowHeader",
    value: function onModifyRowHeader(row) {
      return this.headerIndexes.getValueAtIndex(this.hot.toPhysicalRow(row));
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get$c(_getPrototypeOf$e(BindRowsWithHeaders2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$4;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$3;
    }
  }]);
  return BindRowsWithHeaders2;
}(BasePlugin);

function _typeof$f(obj) {
  "@babel/helpers - typeof";
  return _typeof$f = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$f(obj);
}
function _toConsumableArray$2(arr) {
  return _arrayWithoutHoles$2(arr) || _iterableToArray$2(arr) || _unsupportedIterableToArray$6(arr) || _nonIterableSpread$2();
}
function _nonIterableSpread$2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$6(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$6(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$6(o, minLen);
}
function _iterableToArray$2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$2(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$6(arr);
}
function _arrayLikeToArray$6(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _classCallCheck$i(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$i(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$i(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$i(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$i(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$d() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$d = Reflect.get.bind();
  } else {
    _get$d = function _get2(target, property, receiver) {
      var base = _superPropBase$d(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$d.apply(this, arguments);
}
function _superPropBase$d(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$f(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$f(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$f(subClass, superClass);
}
function _setPrototypeOf$f(o, p) {
  _setPrototypeOf$f = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$f(o, p);
}
function _createSuper$f(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$f();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$f(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$f(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$f(this, result);
  };
}
function _possibleConstructorReturn$f(self, call) {
  if (call && (_typeof$f(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$f(self);
}
function _assertThisInitialized$f(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$f() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$f(o) {
  _getPrototypeOf$f = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$f(o);
}
function _classPrivateFieldInitSpec(obj, privateMap, value) {
  _checkPrivateRedeclaration$1(obj, privateMap);
  privateMap.set(obj, value);
}
function _checkPrivateRedeclaration$1(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _defineProperty$2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
  return _classApplyDescriptorGet(receiver, descriptor);
}
function _classApplyDescriptorGet(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
function _classPrivateFieldSet(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
  _classApplyDescriptorSet(receiver, descriptor, value);
  return value;
}
function _classExtractFieldDescriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}
var PLUGIN_KEY$5 = "collapsibleColumns";
var PLUGIN_PRIORITY$4 = 290;
var SETTING_KEYS$1 = ["nestedHeaders"];
var actionDictionary = new Map([["collapse", {
  hideColumn: true,
  beforeHook: "beforeColumnCollapse",
  afterHook: "afterColumnCollapse"
}], ["expand", {
  hideColumn: false,
  beforeHook: "beforeColumnExpand",
  afterHook: "afterColumnExpand"
}]]);
var _collapsedColumnsMap = /* @__PURE__ */ new WeakMap();
var CollapsibleColumns = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$f(CollapsibleColumns2, _BasePlugin);
  var _super = _createSuper$f(CollapsibleColumns2);
  function CollapsibleColumns2() {
    var _this;
    _classCallCheck$i(this, CollapsibleColumns2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$2(_assertThisInitialized$f(_this), "nestedHeadersPlugin", null);
    _defineProperty$2(_assertThisInitialized$f(_this), "eventManager", new EventManager(_assertThisInitialized$f(_this)));
    _defineProperty$2(_assertThisInitialized$f(_this), "headerStateManager", null);
    _classPrivateFieldInitSpec(_assertThisInitialized$f(_this), _collapsedColumnsMap, {
      writable: true,
      value: null
    });
    return _this;
  }
  _createClass$i(CollapsibleColumns2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$5];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      var _this$hot$getSettings = this.hot.getSettings(), nestedHeaders = _this$hot$getSettings.nestedHeaders;
      if (!nestedHeaders) {
        warn("You need to configure the Nested Headers plugin in order to use collapsible headers.");
      }
      _classPrivateFieldSet(this, _collapsedColumnsMap, this.hot.columnIndexMapper.createAndRegisterIndexMap(this.pluginName, "hiding"));
      this.nestedHeadersPlugin = this.hot.getPlugin("nestedHeaders");
      this.headerStateManager = this.nestedHeadersPlugin.getStateManager();
      this.addHook("init", function() {
        return _this2.onInit();
      });
      this.addHook("afterLoadData", function() {
        return _this2.onAfterLoadData.apply(_this2, arguments);
      });
      this.addHook("afterGetColHeader", function(col, TH) {
        return _this2.onAfterGetColHeader(col, TH);
      });
      this.addHook("beforeOnCellMouseDown", function(event, coords, TD) {
        return _this2.onBeforeOnCellMouseDown(event, coords, TD);
      });
      _get$d(_getPrototypeOf$f(CollapsibleColumns2.prototype), "enablePlugin", this).call(this);
      this.updatePlugin();
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      if (!this.hot.view) {
        return;
      }
      if (!this.nestedHeadersPlugin.detectedOverlappedHeaders) {
        var _this$hot$getSettings2 = this.hot.getSettings(), collapsibleColumns = _this$hot$getSettings2.collapsibleColumns;
        if (typeof collapsibleColumns === "boolean") {
          this.headerStateManager.mapState(function(headerSettings) {
            return {
              collapsible: headerSettings.origColspan > 1
            };
          });
        } else if (Array.isArray(collapsibleColumns)) {
          this.headerStateManager.mapState(function() {
            return {
              collapsible: false
            };
          });
          this.headerStateManager.mergeStateWith(collapsibleColumns);
        }
      }
      _get$d(_getPrototypeOf$f(CollapsibleColumns2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.hot.columnIndexMapper.unregisterMap(this.pluginName);
      _classPrivateFieldSet(this, _collapsedColumnsMap, null);
      this.nestedHeadersPlugin = null;
      this.clearButtons();
      _get$d(_getPrototypeOf$f(CollapsibleColumns2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "clearButtons",
    value: function clearButtons() {
      if (!this.hot.view) {
        return;
      }
      var headerLevels = this.hot.view._wt.getSetting("columnHeaders").length;
      var mainHeaders = this.hot.view._wt.wtTable.THEAD;
      var topHeaders = this.hot.view._wt.wtOverlays.topOverlay.clone.wtTable.THEAD;
      var topLeftCornerHeaders = this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay ? this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null;
      var removeButton = function removeButton2(button) {
        if (button) {
          button.parentNode.removeChild(button);
        }
      };
      rangeEach(0, headerLevels - 1, function(i) {
        var masterLevel = mainHeaders.childNodes[i];
        var topLevel = topHeaders.childNodes[i];
        var topLeftCornerLevel = topLeftCornerHeaders ? topLeftCornerHeaders.childNodes[i] : null;
        rangeEach(0, masterLevel.childNodes.length - 1, function(j) {
          var button = masterLevel.childNodes[j].querySelector(".collapsibleIndicator");
          removeButton(button);
          if (topLevel && topLevel.childNodes[j]) {
            button = topLevel.childNodes[j].querySelector(".collapsibleIndicator");
            removeButton(button);
          }
          if (topLeftCornerHeaders && topLeftCornerLevel && topLeftCornerLevel.childNodes[j]) {
            button = topLeftCornerLevel.childNodes[j].querySelector(".collapsibleIndicator");
            removeButton(button);
          }
        });
      });
    }
  }, {
    key: "expandSection",
    value: function expandSection(coords) {
      this.toggleCollapsibleSection([coords], "expand");
    }
  }, {
    key: "collapseSection",
    value: function collapseSection(coords) {
      this.toggleCollapsibleSection([coords], "collapse");
    }
  }, {
    key: "toggleAllCollapsibleSections",
    value: function toggleAllCollapsibleSections(action) {
      var _this3 = this;
      var coords = this.headerStateManager.mapNodes(function(headerSettings) {
        var collapsible = headerSettings.collapsible, origColspan = headerSettings.origColspan, headerLevel = headerSettings.headerLevel, columnIndex = headerSettings.columnIndex, isCollapsed = headerSettings.isCollapsed;
        if (collapsible === true && origColspan > 1 && (isCollapsed && action === "expand" || !isCollapsed && action === "collapse")) {
          return {
            row: _this3.headerStateManager.levelToRowCoords(headerLevel),
            col: columnIndex
          };
        }
      });
      this.toggleCollapsibleSection(coords, action);
    }
  }, {
    key: "collapseAll",
    value: function collapseAll() {
      this.toggleAllCollapsibleSections("collapse");
    }
  }, {
    key: "expandAll",
    value: function expandAll() {
      this.toggleAllCollapsibleSections("expand");
    }
  }, {
    key: "toggleCollapsibleSection",
    value: function toggleCollapsibleSection(coords, action) {
      var _this4 = this;
      if (!actionDictionary.has(action)) {
        throw new Error("Unsupported action is passed (".concat(action, ")."));
      }
      if (!Array.isArray(coords)) {
        return;
      }
      var filteredCoords = arrayFilter(coords, function(_ref) {
        var row = _ref.row;
        return row < 0;
      });
      var isActionPossible = filteredCoords.length > 0;
      arrayEach(filteredCoords, function(_ref2) {
        var _this4$headerStateMan;
        var row = _ref2.row, column = _ref2.col;
        var _ref3 = (_this4$headerStateMan = _this4.headerStateManager.getHeaderSettings(row, column)) !== null && _this4$headerStateMan !== void 0 ? _this4$headerStateMan : {}, collapsible = _ref3.collapsible, isCollapsed = _ref3.isCollapsed;
        if (!collapsible || isCollapsed && action === "collapse" || !isCollapsed && action === "expand") {
          isActionPossible = false;
          return false;
        }
      });
      var nodeModRollbacks = [];
      var affectedColumnsIndexes = [];
      if (isActionPossible) {
        arrayEach(filteredCoords, function(_ref4) {
          var row = _ref4.row, column = _ref4.col;
          var _this4$headerStateMan2 = _this4.headerStateManager.triggerNodeModification(action, row, column), colspanCompensation = _this4$headerStateMan2.colspanCompensation, affectedColumns = _this4$headerStateMan2.affectedColumns, rollbackModification = _this4$headerStateMan2.rollbackModification;
          if (colspanCompensation > 0) {
            affectedColumnsIndexes.push.apply(affectedColumnsIndexes, _toConsumableArray$2(affectedColumns));
            nodeModRollbacks.push(rollbackModification);
          }
        });
      }
      var currentCollapsedColumns = this.getCollapsedColumns();
      var destinationCollapsedColumns = [];
      if (action === "collapse") {
        destinationCollapsedColumns = arrayUnique([].concat(_toConsumableArray$2(currentCollapsedColumns), affectedColumnsIndexes));
      } else if (action === "expand") {
        destinationCollapsedColumns = arrayFilter(currentCollapsedColumns, function(index) {
          return !affectedColumnsIndexes.includes(index);
        });
      }
      var actionTranslator = actionDictionary.get(action);
      var isActionAllowed = this.hot.runHooks(actionTranslator.beforeHook, currentCollapsedColumns, destinationCollapsedColumns, isActionPossible);
      if (isActionAllowed === false) {
        arrayEach(nodeModRollbacks, function(nodeModRollback) {
          nodeModRollback();
        });
        return;
      }
      this.hot.batchExecution(function() {
        arrayEach(affectedColumnsIndexes, function(visualColumn) {
          _classPrivateFieldGet(_this4, _collapsedColumnsMap).setValueAtIndex(_this4.hot.toPhysicalColumn(visualColumn), actionTranslator.hideColumn);
        });
      }, true);
      var isActionPerformed = this.getCollapsedColumns().length !== currentCollapsedColumns.length;
      this.hot.runHooks(actionTranslator.afterHook, currentCollapsedColumns, destinationCollapsedColumns, isActionPossible, isActionPerformed);
      this.hot.render();
      this.hot.view.adjustElementsSize(true);
    }
  }, {
    key: "getCollapsedColumns",
    value: function getCollapsedColumns() {
      return _classPrivateFieldGet(this, _collapsedColumnsMap).getHiddenIndexes();
    }
  }, {
    key: "generateIndicator",
    value: function generateIndicator(row, column) {
      var divEl = this.hot.rootDocument.createElement("div");
      var columnSettings = this.headerStateManager.getHeaderSettings(row, column);
      addClass(divEl, "collapsibleIndicator");
      if (columnSettings.isCollapsed) {
        addClass(divEl, "collapsed");
        fastInnerText(divEl, "+");
      } else {
        addClass(divEl, "expanded");
        fastInnerText(divEl, "-");
      }
      return divEl;
    }
  }, {
    key: "onAfterGetColHeader",
    value: function onAfterGetColHeader(column, TH) {
      var _this$headerStateMana;
      var TR = TH.parentNode;
      var THEAD = TR.parentNode;
      var row = -1 * THEAD.childNodes.length + Array.prototype.indexOf.call(THEAD.childNodes, TR);
      var _ref5 = (_this$headerStateMana = this.headerStateManager.getHeaderSettings(row, column)) !== null && _this$headerStateMana !== void 0 ? _this$headerStateMana : {}, collapsible = _ref5.collapsible, origColspan = _ref5.origColspan;
      if (collapsible && origColspan > 1 && column >= this.hot.getSettings().fixedColumnsStart) {
        var button = this.generateIndicator(row, column);
        TH.querySelector("div:first-child").appendChild(button);
      }
    }
  }, {
    key: "onBeforeOnCellMouseDown",
    value: function onBeforeOnCellMouseDown(event, coords) {
      if (hasClass(event.target, "collapsibleIndicator")) {
        if (hasClass(event.target, "expanded")) {
          this.eventManager.fireEvent(event.target, "mouseup");
          this.toggleCollapsibleSection([coords], "collapse");
        } else if (hasClass(event.target, "collapsed")) {
          this.eventManager.fireEvent(event.target, "mouseup");
          this.toggleCollapsibleSection([coords], "expand");
        }
        stopImmediatePropagation(event);
      }
    }
  }, {
    key: "onInit",
    value: function onInit() {
      this.updatePlugin();
    }
  }, {
    key: "onAfterLoadData",
    value: function onAfterLoadData(sourceData, initialLoad) {
      if (!initialLoad) {
        this.updatePlugin();
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _classPrivateFieldSet(this, _collapsedColumnsMap, null);
      _get$d(_getPrototypeOf$f(CollapsibleColumns2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$5;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$4;
    }
  }, {
    key: "PLUGIN_DEPS",
    get: function get() {
      return ["plugin:NestedHeaders"];
    }
  }, {
    key: "SETTING_KEYS",
    get: function get() {
      return [PLUGIN_KEY$5].concat(SETTING_KEYS$1);
    }
  }]);
  return CollapsibleColumns2;
}(BasePlugin);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray$5(arr, i) {
  return _arrayWithHoles$5(arr) || _iterableToArrayLimit$5(arr, i) || _unsupportedIterableToArray$7(arr, i) || _nonIterableRest$5();
}
function _nonIterableRest$5() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$7(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$7(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$7(o, minLen);
}
function _arrayLikeToArray$7(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$5(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$5(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck$j(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$j(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$j(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$j(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$j(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var inheritedColumnProperties = ["sortEmptyCells", "indicator", "headerAction", "compareFunctionFactory"];
var SORT_EMPTY_CELLS_DEFAULT = false;
var SHOW_SORT_INDICATOR_DEFAULT = true;
var HEADER_ACTION_DEFAULT = true;
var ColumnStatesManager = /* @__PURE__ */ function() {
  function ColumnStatesManager2(hot, mapName) {
    _classCallCheck$j(this, ColumnStatesManager2);
    this.hot = hot;
    this.sortingStates = new LinkedPhysicalIndexToValueMap();
    this.sortEmptyCells = SORT_EMPTY_CELLS_DEFAULT;
    this.indicator = SHOW_SORT_INDICATOR_DEFAULT;
    this.headerAction = HEADER_ACTION_DEFAULT;
    this.compareFunctionFactory = void 0;
    this.mapName = mapName;
    this.hot.columnIndexMapper.registerMap(mapName, this.sortingStates);
  }
  _createClass$j(ColumnStatesManager2, [{
    key: "updateAllColumnsProperties",
    value: function updateAllColumnsProperties(allSortSettings) {
      var _this = this;
      if (!isObject(allSortSettings)) {
        return;
      }
      objectEach(allSortSettings, function(newValue, propertyName) {
        if (inheritedColumnProperties.includes(propertyName)) {
          _this[propertyName] = newValue;
        }
      });
    }
  }, {
    key: "getAllColumnsProperties",
    value: function getAllColumnsProperties() {
      var columnProperties = {
        sortEmptyCells: this.sortEmptyCells,
        indicator: this.indicator,
        headerAction: this.headerAction
      };
      if (typeof this.compareFunctionFactory === "function") {
        columnProperties.compareFunctionFactory = this.compareFunctionFactory;
      }
      return columnProperties;
    }
  }, {
    key: "getSortOrderOfColumn",
    value: function getSortOrderOfColumn(searchedColumn) {
      var _this$sortingStates$g;
      return (_this$sortingStates$g = this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(searchedColumn))) === null || _this$sortingStates$g === void 0 ? void 0 : _this$sortingStates$g.sortOrder;
    }
  }, {
    key: "getIndexOfColumnInSortQueue",
    value: function getIndexOfColumnInSortQueue(column) {
      column = this.hot.toPhysicalColumn(column);
      return this.sortingStates.getEntries().findIndex(function(_ref) {
        var _ref2 = _slicedToArray$5(_ref, 1), physicalColumn = _ref2[0];
        return physicalColumn === column;
      });
    }
  }, {
    key: "getNumberOfSortedColumns",
    value: function getNumberOfSortedColumns() {
      return this.sortingStates.getLength();
    }
  }, {
    key: "isListOfSortedColumnsEmpty",
    value: function isListOfSortedColumnsEmpty() {
      return this.getNumberOfSortedColumns() === 0;
    }
  }, {
    key: "isColumnSorted",
    value: function isColumnSorted(column) {
      return isObject(this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(column)));
    }
  }, {
    key: "getSortStates",
    value: function getSortStates() {
      var _this2 = this;
      if (this.sortingStates === null) {
        return [];
      }
      var sortingStatesQueue = this.sortingStates.getEntries();
      return sortingStatesQueue.map(function(_ref3) {
        var _ref4 = _slicedToArray$5(_ref3, 2), physicalColumn = _ref4[0], value = _ref4[1];
        return _objectSpread({
          column: _this2.hot.toVisualColumn(physicalColumn)
        }, value);
      });
    }
  }, {
    key: "getColumnSortState",
    value: function getColumnSortState(column) {
      var sortOrder = this.getSortOrderOfColumn(column);
      if (isDefined(sortOrder)) {
        return {
          column,
          sortOrder
        };
      }
    }
  }, {
    key: "setSortStates",
    value: function setSortStates(sortStates) {
      this.sortingStates.clear();
      for (var i = 0; i < sortStates.length; i += 1) {
        this.sortingStates.setValueAtIndex(this.hot.toPhysicalColumn(sortStates[i].column), {
          sortOrder: sortStates[i].sortOrder
        });
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.hot.columnIndexMapper.unregisterMap(this.mapName);
      this.sortingStates = null;
    }
  }]);
  return ColumnStatesManager2;
}();

var ASC_SORT_STATE = "asc";
var DESC_SORT_STATE = "desc";
var HEADER_SPAN_CLASS = "colHeader";
function isValidColumnState(columnState) {
  if (isObject(columnState) === false) {
    return false;
  }
  var column = columnState.column, sortOrder = columnState.sortOrder;
  return Number.isInteger(column) && [ASC_SORT_STATE, DESC_SORT_STATE].includes(sortOrder);
}
function areValidSortStates(sortStates) {
  if (sortStates.some(function(columnState) {
    return isValidColumnState(columnState) === false;
  })) {
    return false;
  }
  var sortedColumns = sortStates.map(function(_ref) {
    var column = _ref.column;
    return column;
  });
  return new Set(sortedColumns).size === sortedColumns.length;
}
function getNextSortOrder(sortOrder) {
  if (sortOrder === DESC_SORT_STATE) {
    return;
  } else if (sortOrder === ASC_SORT_STATE) {
    return DESC_SORT_STATE;
  }
  return ASC_SORT_STATE;
}
function getHeaderSpanElement(TH) {
  var headerSpanElement = TH.querySelector(".".concat(HEADER_SPAN_CLASS));
  return headerSpanElement;
}
function isFirstLevelColumnHeader(column, TH) {
  if (column < 0 || !TH.parentNode) {
    return false;
  }
  var TRs = TH.parentNode.parentNode.childNodes;
  var headerLevel = Array.from(TRs).indexOf(TH.parentNode) - TRs.length;
  if (headerLevel !== -1) {
    return false;
  }
  return true;
}
function wasHeaderClickedProperly(row, column, clickEvent) {
  return row === -1 && column >= 0 && isRightClick(clickEvent) === false;
}

var HEADER_CLASS_ASC_SORT = "ascending";
var HEADER_CLASS_DESC_SORT = "descending";
var HEADER_CLASS_INDICATOR_DISABLED = "indicatorDisabled";
var HEADER_SORT_CLASS = "columnSorting";
var HEADER_ACTION_CLASS = "sortAction";
var orderToCssClass = new Map([[ASC_SORT_STATE, HEADER_CLASS_ASC_SORT], [DESC_SORT_STATE, HEADER_CLASS_DESC_SORT]]);
function getClassesToAdd(columnStatesManager, column, showSortIndicator, headerAction) {
  var cssClasses = [HEADER_SORT_CLASS];
  if (headerAction) {
    cssClasses.push(HEADER_ACTION_CLASS);
  }
  if (showSortIndicator === false) {
    cssClasses.push(HEADER_CLASS_INDICATOR_DISABLED);
    return cssClasses;
  }
  var columnOrder = columnStatesManager.getSortOrderOfColumn(column);
  if (isDefined(columnOrder)) {
    cssClasses.push(orderToCssClass.get(columnOrder));
  }
  return cssClasses;
}
function getClassesToRemove() {
  return Array.from(orderToCssClass.values()).concat(HEADER_ACTION_CLASS, HEADER_CLASS_INDICATOR_DISABLED, HEADER_SORT_CLASS);
}

function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {
  var locale = columnMeta.locale;
  return function(value, nextValue) {
    var sortEmptyCells = columnPluginSettings.sortEmptyCells;
    if (typeof value === "string") {
      value = value.toLocaleLowerCase(locale);
    }
    if (typeof nextValue === "string") {
      nextValue = nextValue.toLocaleLowerCase(locale);
    }
    if (value === nextValue) {
      return DO_NOT_SWAP;
    }
    if (isEmpty(value)) {
      if (isEmpty(nextValue)) {
        return DO_NOT_SWAP;
      }
      if (sortEmptyCells) {
        return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
      }
      return FIRST_AFTER_SECOND;
    }
    if (isEmpty(nextValue)) {
      if (sortEmptyCells) {
        return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
      }
      return FIRST_BEFORE_SECOND;
    }
    if (isNaN(value) && !isNaN(nextValue)) {
      return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
    } else if (!isNaN(value) && isNaN(nextValue)) {
      return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
    } else if (!(isNaN(value) || isNaN(nextValue))) {
      value = parseFloat(value);
      nextValue = parseFloat(nextValue);
    }
    if (value < nextValue) {
      return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
    }
    if (value > nextValue) {
      return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
    }
    return DO_NOT_SWAP;
  };
}
var COLUMN_DATA_TYPE = "default";

function compareFunctionFactory$1(sortOrder, columnMeta, columnPluginSettings) {
  return function(value, nextValue) {
    var parsedFirstValue = parseFloat(value);
    var parsedSecondValue = parseFloat(nextValue);
    var sortEmptyCells = columnPluginSettings.sortEmptyCells;
    if (parsedFirstValue === parsedSecondValue || isNaN(parsedFirstValue) && isNaN(parsedSecondValue)) {
      return DO_NOT_SWAP;
    }
    if (sortEmptyCells) {
      if (isEmpty(value)) {
        return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
      }
      if (isEmpty(nextValue)) {
        return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
      }
    }
    if (isNaN(parsedFirstValue)) {
      return FIRST_AFTER_SECOND;
    }
    if (isNaN(parsedSecondValue)) {
      return FIRST_BEFORE_SECOND;
    }
    if (parsedFirstValue < parsedSecondValue) {
      return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
    } else if (parsedFirstValue > parsedSecondValue) {
      return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
    }
    return DO_NOT_SWAP;
  };
}
var COLUMN_DATA_TYPE$1 = "numeric";

function compareFunctionFactory$2(sortOrder, columnMeta, columnPluginSettings) {
  var checkedTemplate = columnMeta.checkedTemplate;
  var uncheckedTemplate = columnMeta.uncheckedTemplate;
  var sortEmptyCells = columnPluginSettings.sortEmptyCells;
  return function(value, nextValue) {
    var isEmptyValue = isEmpty(value);
    var isEmptyNextValue = isEmpty(nextValue);
    var unifiedValue = isEmptyValue ? uncheckedTemplate : value;
    var unifiedNextValue = isEmptyNextValue ? uncheckedTemplate : nextValue;
    var isValueFromTemplate = unifiedValue === uncheckedTemplate || unifiedValue === checkedTemplate;
    var isNextValueFromTemplate = unifiedNextValue === uncheckedTemplate || unifiedNextValue === checkedTemplate;
    if (sortEmptyCells === false) {
      if (isEmptyValue && isEmptyNextValue === false) {
        return FIRST_AFTER_SECOND;
      }
      if (isEmptyValue === false && isEmptyNextValue) {
        return FIRST_BEFORE_SECOND;
      }
    }
    if (isValueFromTemplate === false && isNextValueFromTemplate) {
      return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
    }
    if (isValueFromTemplate && isNextValueFromTemplate === false) {
      return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
    }
    if (isValueFromTemplate === false && isNextValueFromTemplate === false) {
      return compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings)(value, nextValue);
    }
    if (unifiedValue === uncheckedTemplate && unifiedNextValue === checkedTemplate) {
      return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
    }
    if (unifiedValue === checkedTemplate && unifiedNextValue === uncheckedTemplate) {
      return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
    }
    return DO_NOT_SWAP;
  };
}
var COLUMN_DATA_TYPE$2 = "checkbox";

function compareFunctionFactory$3(sortOrder, columnMeta, columnPluginSettings) {
  return function(value, nextValue) {
    var sortEmptyCells = columnPluginSettings.sortEmptyCells;
    if (value === nextValue) {
      return DO_NOT_SWAP;
    }
    if (isEmpty(value)) {
      if (isEmpty(nextValue)) {
        return DO_NOT_SWAP;
      }
      if (sortEmptyCells) {
        return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
      }
      return FIRST_AFTER_SECOND;
    }
    if (isEmpty(nextValue)) {
      if (sortEmptyCells) {
        return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
      }
      return FIRST_BEFORE_SECOND;
    }
    var dateFormat = columnMeta.dateFormat;
    var firstDate = hooks(value, dateFormat);
    var nextDate = hooks(nextValue, dateFormat);
    if (!firstDate.isValid()) {
      return FIRST_AFTER_SECOND;
    }
    if (!nextDate.isValid()) {
      return FIRST_BEFORE_SECOND;
    }
    if (nextDate.isAfter(firstDate)) {
      return sortOrder === "asc" ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;
    }
    if (nextDate.isBefore(firstDate)) {
      return sortOrder === "asc" ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;
    }
    return DO_NOT_SWAP;
  };
}
var COLUMN_DATA_TYPE$3 = "date";

var _staticRegister = staticRegister("sorting.compareFunctionFactory"), registerCompareFunctionFactory = _staticRegister.register, getGloballyCompareFunctionFactory = _staticRegister.getItem, hasGloballyCompareFunctionFactory = _staticRegister.hasItem;
var _staticRegister2 = staticRegister("sorting.mainSortComparator"), registerRootComparator = _staticRegister2.register, getRootComparator = _staticRegister2.getItem;
function getCompareFunctionFactory(type) {
  if (hasGloballyCompareFunctionFactory(type)) {
    return getGloballyCompareFunctionFactory(type);
  }
  return getGloballyCompareFunctionFactory(COLUMN_DATA_TYPE);
}
registerCompareFunctionFactory(COLUMN_DATA_TYPE$1, compareFunctionFactory$1);
registerCompareFunctionFactory(COLUMN_DATA_TYPE$2, compareFunctionFactory$2);
registerCompareFunctionFactory(COLUMN_DATA_TYPE$3, compareFunctionFactory$3);
registerCompareFunctionFactory(COLUMN_DATA_TYPE, compareFunctionFactory);

var DO_NOT_SWAP = 0;
var FIRST_BEFORE_SECOND = -1;
var FIRST_AFTER_SECOND = 1;
function sort(indexesWithData, rootComparatorId) {
  var rootComparator = getRootComparator(rootComparatorId);
  for (var _len = arguments.length, argsForRootComparator = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    argsForRootComparator[_key - 2] = arguments[_key];
  }
  indexesWithData.sort(rootComparator.apply(void 0, argsForRootComparator));
}

function _toArray(arr) {
  return _arrayWithHoles$6(arr) || _iterableToArray$3(arr) || _unsupportedIterableToArray$8(arr) || _nonIterableRest$6();
}
function _nonIterableRest$6() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$8(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$8(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$8(o, minLen);
}
function _arrayLikeToArray$8(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArray$3(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithHoles$6(arr) {
  if (Array.isArray(arr))
    return arr;
}
function rootComparator(sortingOrders, columnMetas) {
  return function(rowIndexWithValues, nextRowIndexWithValues) {
    var _rowIndexWithValues = _toArray(rowIndexWithValues), values = _rowIndexWithValues.slice(1);
    var _nextRowIndexWithValu = _toArray(nextRowIndexWithValues), nextValues = _nextRowIndexWithValu.slice(1);
    return function getCompareResult(column) {
      var sortingOrder = sortingOrders[column];
      var columnMeta = columnMetas[column];
      var value = values[column];
      var nextValue = nextValues[column];
      var pluginSettings = columnMeta.columnSorting;
      var compareFunctionFactory = pluginSettings.compareFunctionFactory ? pluginSettings.compareFunctionFactory : getCompareFunctionFactory(columnMeta.type);
      var compareResult = compareFunctionFactory(sortingOrder, columnMeta, pluginSettings)(value, nextValue);
      return compareResult;
    }(0);
  };
}

function _typeof$g(obj) {
  "@babel/helpers - typeof";
  return _typeof$g = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$g(obj);
}
var _excluded = ["column"], _excluded2 = ["column"];
function _toConsumableArray$3(arr) {
  return _arrayWithoutHoles$3(arr) || _iterableToArray$4(arr) || _unsupportedIterableToArray$9(arr) || _nonIterableSpread$3();
}
function _nonIterableSpread$3() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$9(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$9(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$9(o, minLen);
}
function _iterableToArray$4(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$3(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$9(arr);
}
function _arrayLikeToArray$9(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1(Object(source), true).forEach(function(key) {
      _defineProperty$4(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _classCallCheck$k(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$k(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$k(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$k(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$k(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$e() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$e = Reflect.get.bind();
  } else {
    _get$e = function _get2(target, property, receiver) {
      var base = _superPropBase$e(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$e.apply(this, arguments);
}
function _superPropBase$e(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$g(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$g(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$g(subClass, superClass);
}
function _setPrototypeOf$g(o, p) {
  _setPrototypeOf$g = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$g(o, p);
}
function _createSuper$g(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$g();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$g(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$g(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$g(this, result);
  };
}
function _possibleConstructorReturn$g(self, call) {
  if (call && (_typeof$g(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$g(self);
}
function _assertThisInitialized$g(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$g() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$g(o) {
  _getPrototypeOf$g = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$g(o);
}
var PLUGIN_KEY$6 = "columnSorting";
var PLUGIN_PRIORITY$5 = 50;
var APPEND_COLUMN_CONFIG_STRATEGY = "append";
var REPLACE_COLUMN_CONFIG_STRATEGY = "replace";
registerRootComparator(PLUGIN_KEY$6, rootComparator);
Hooks.getSingleton().register("beforeColumnSort");
Hooks.getSingleton().register("afterColumnSort");
var ColumnSorting = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$g(ColumnSorting2, _BasePlugin);
  var _super = _createSuper$g(ColumnSorting2);
  function ColumnSorting2(hotInstance) {
    var _this;
    _classCallCheck$k(this, ColumnSorting2);
    _this = _super.call(this, hotInstance);
    _this.columnStatesManager = null;
    _this.columnMetaCache = null;
    _this.pluginKey = PLUGIN_KEY$6;
    _this.indexesSequenceCache = null;
    return _this;
  }
  _createClass$k(ColumnSorting2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[this.pluginKey];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.columnStatesManager = new ColumnStatesManager(this.hot, "".concat(this.pluginKey, ".sortingStates"));
      this.columnMetaCache = new PhysicalIndexToValueMap(function(physicalIndex) {
        var visualIndex = _this2.hot.toVisualColumn(physicalIndex);
        if (visualIndex === null) {
          visualIndex = physicalIndex;
        }
        return _this2.getMergedPluginSettings(visualIndex);
      });
      this.hot.columnIndexMapper.registerMap("".concat(this.pluginKey, ".columnMeta"), this.columnMetaCache);
      this.addHook("afterGetColHeader", function(column, TH) {
        return _this2.onAfterGetColHeader(column, TH);
      });
      this.addHook("beforeOnCellMouseDown", function() {
        return _this2.onBeforeOnCellMouseDown.apply(_this2, arguments);
      });
      this.addHook("afterOnCellMouseDown", function(event, target) {
        return _this2.onAfterOnCellMouseDown(event, target);
      });
      this.addHook("afterInit", function() {
        return _this2.loadOrSortBySettings();
      });
      this.addHook("afterLoadData", function() {
        return _this2.onAfterLoadData.apply(_this2, arguments);
      });
      if (this.hot.view) {
        this.loadOrSortBySettings();
      }
      _get$e(_getPrototypeOf$g(ColumnSorting2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      var _this3 = this;
      var clearColHeader = function clearColHeader2(column, TH) {
        var headerSpanElement = getHeaderSpanElement(TH);
        if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {
          return;
        }
        _this3.updateHeaderClasses(headerSpanElement);
      };
      this.hot.addHook("afterGetColHeader", clearColHeader);
      this.hot.addHookOnce("afterViewRender", function() {
        _this3.hot.removeHook("afterGetColHeader", clearColHeader);
      });
      this.hot.batchExecution(function() {
        if (_this3.indexesSequenceCache !== null) {
          _this3.hot.rowIndexMapper.setIndexesSequence(_this3.indexesSequenceCache.getValues());
          _this3.hot.rowIndexMapper.unregisterMap(_this3.pluginKey);
        }
      }, true);
      this.hot.columnIndexMapper.unregisterMap("".concat(this.pluginKey, ".columnMeta"));
      this.columnStatesManager.destroy();
      this.columnMetaCache = null;
      this.columnStatesManager = null;
      _get$e(_getPrototypeOf$g(ColumnSorting2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "sort",
    value: function sort2(sortConfig) {
      var currentSortConfig = this.getSortConfig();
      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);
      var sortPossible = this.areValidSortConfigs(destinationSortConfigs);
      var allowSort = this.hot.runHooks("beforeColumnSort", currentSortConfig, destinationSortConfigs, sortPossible);
      if (allowSort === false) {
        return;
      }
      if (currentSortConfig.length === 0 && this.indexesSequenceCache === null) {
        this.indexesSequenceCache = this.hot.rowIndexMapper.registerMap(this.pluginKey, new IndexesSequence());
        this.indexesSequenceCache.setValues(this.hot.rowIndexMapper.getIndexesSequence());
      }
      if (sortPossible) {
        this.columnStatesManager.setSortStates(destinationSortConfigs);
        this.sortByPresetSortStates(destinationSortConfigs);
        this.saveAllSortSettings(destinationSortConfigs);
      }
      this.hot.runHooks("afterColumnSort", currentSortConfig, sortPossible ? destinationSortConfigs : currentSortConfig, sortPossible);
      if (sortPossible) {
        this.hot.render();
        this.hot.forceFullRender = false;
        this.hot.view.render();
      }
    }
  }, {
    key: "clearSort",
    value: function clearSort() {
      this.sort([]);
    }
  }, {
    key: "isSorted",
    value: function isSorted() {
      return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();
    }
  }, {
    key: "getSortConfig",
    value: function getSortConfig(column) {
      if (isDefined(column)) {
        return this.columnStatesManager.getColumnSortState(column);
      }
      return this.columnStatesManager.getSortStates();
    }
  }, {
    key: "setSortConfig",
    value: function setSortConfig(sortConfig) {
      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);
      if (this.areValidSortConfigs(destinationSortConfigs)) {
        this.columnStatesManager.setSortStates(destinationSortConfigs);
      }
    }
  }, {
    key: "getNormalizedSortConfigs",
    value: function getNormalizedSortConfigs() {
      var sortConfig = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      if (Array.isArray(sortConfig)) {
        return sortConfig.slice(0, 1);
      }
      return [sortConfig];
    }
  }, {
    key: "areValidSortConfigs",
    value: function areValidSortConfigs(sortConfigs) {
      var numberOfColumns = this.hot.countCols();
      return areValidSortStates(sortConfigs) && sortConfigs.every(function(_ref) {
        var column = _ref.column;
        return column <= numberOfColumns && column >= 0;
      });
    }
  }, {
    key: "saveAllSortSettings",
    value: function saveAllSortSettings(sortConfigs) {
      var _this4 = this;
      var allSortSettings = this.columnStatesManager.getAllColumnsProperties();
      var translateColumnToPhysical = function translateColumnToPhysical2(_ref2) {
        var visualColumn = _ref2.column, restOfProperties = _objectWithoutProperties(_ref2, _excluded);
        return _objectSpread$1({
          column: _this4.hot.toPhysicalColumn(visualColumn)
        }, restOfProperties);
      };
      allSortSettings.initialConfig = arrayMap(sortConfigs, translateColumnToPhysical);
      this.hot.runHooks("persistentStateSave", "columnSorting", allSortSettings);
    }
  }, {
    key: "getAllSavedSortSettings",
    value: function getAllSavedSortSettings() {
      var _this5 = this;
      var storedAllSortSettings = {};
      this.hot.runHooks("persistentStateLoad", "columnSorting", storedAllSortSettings);
      var allSortSettings = storedAllSortSettings.value;
      var translateColumnToVisual = function translateColumnToVisual2(_ref3) {
        var physicalColumn = _ref3.column, restOfProperties = _objectWithoutProperties(_ref3, _excluded2);
        return _objectSpread$1({
          column: _this5.hot.toVisualColumn(physicalColumn)
        }, restOfProperties);
      };
      if (isDefined(allSortSettings) && Array.isArray(allSortSettings.initialConfig)) {
        allSortSettings.initialConfig = arrayMap(allSortSettings.initialConfig, translateColumnToVisual);
      }
      return allSortSettings;
    }
  }, {
    key: "getColumnNextConfig",
    value: function getColumnNextConfig(column) {
      var sortOrder = this.columnStatesManager.getSortOrderOfColumn(column);
      if (isDefined(sortOrder)) {
        var nextSortOrder = getNextSortOrder(sortOrder);
        if (isDefined(nextSortOrder)) {
          return {
            column,
            sortOrder: nextSortOrder
          };
        }
        return;
      }
      var nrOfColumns = this.hot.countCols();
      if (Number.isInteger(column) && column >= 0 && column < nrOfColumns) {
        return {
          column,
          sortOrder: getNextSortOrder()
        };
      }
    }
  }, {
    key: "getNextSortConfig",
    value: function getNextSortConfig(columnToChange) {
      var strategyId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : APPEND_COLUMN_CONFIG_STRATEGY;
      var indexOfColumnToChange = this.columnStatesManager.getIndexOfColumnInSortQueue(columnToChange);
      var isColumnSorted = indexOfColumnToChange !== -1;
      var currentSortConfig = this.getSortConfig();
      var nextColumnConfig = this.getColumnNextConfig(columnToChange);
      if (isColumnSorted) {
        if (isUndefined(nextColumnConfig)) {
          return [].concat(_toConsumableArray$3(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray$3(currentSortConfig.slice(indexOfColumnToChange + 1)));
        }
        if (strategyId === APPEND_COLUMN_CONFIG_STRATEGY) {
          return [].concat(_toConsumableArray$3(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray$3(currentSortConfig.slice(indexOfColumnToChange + 1)), [nextColumnConfig]);
        } else if (strategyId === REPLACE_COLUMN_CONFIG_STRATEGY) {
          return [].concat(_toConsumableArray$3(currentSortConfig.slice(0, indexOfColumnToChange)), [nextColumnConfig], _toConsumableArray$3(currentSortConfig.slice(indexOfColumnToChange + 1)));
        }
      }
      if (isDefined(nextColumnConfig)) {
        return currentSortConfig.concat(nextColumnConfig);
      }
      return currentSortConfig;
    }
  }, {
    key: "getPluginColumnConfig",
    value: function getPluginColumnConfig(columnConfig) {
      if (isObject(columnConfig)) {
        var pluginColumnConfig = columnConfig[this.pluginKey];
        if (isObject(pluginColumnConfig)) {
          return pluginColumnConfig;
        }
      }
      return {};
    }
  }, {
    key: "getMergedPluginSettings",
    value: function getMergedPluginSettings(column) {
      var pluginMainSettings = this.hot.getSettings()[this.pluginKey];
      var storedColumnProperties = this.columnStatesManager.getAllColumnsProperties();
      var cellMeta = this.hot.getCellMeta(0, column);
      var columnMeta = Object.getPrototypeOf(cellMeta);
      if (Array.isArray(columnMeta.columns)) {
        return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns[column]));
      } else if (isFunction(columnMeta.columns)) {
        return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns(column)));
      }
      return Object.assign(storedColumnProperties, pluginMainSettings);
    }
  }, {
    key: "getFirstCellSettings",
    value: function getFirstCellSettings(column) {
      var cellMeta = this.hot.getCellMeta(0, column);
      var cellMetaCopy = Object.create(cellMeta);
      cellMetaCopy[this.pluginKey] = this.columnMetaCache.getValueAtIndex(this.hot.toPhysicalColumn(column));
      return cellMetaCopy;
    }
  }, {
    key: "getNumberOfRowsToSort",
    value: function getNumberOfRowsToSort(numberOfRows) {
      var settings = this.hot.getSettings();
      if (settings.maxRows <= numberOfRows) {
        return settings.maxRows;
      }
      return numberOfRows - settings.minSpareRows;
    }
  }, {
    key: "sortByPresetSortStates",
    value: function sortByPresetSortStates(sortConfigs) {
      var _this6 = this;
      if (sortConfigs.length === 0) {
        this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());
        return;
      }
      var indexesWithData = [];
      var numberOfRows = this.hot.countRows();
      var getDataForSortedColumns = function getDataForSortedColumns2(visualRowIndex2) {
        return arrayMap(sortConfigs, function(sortConfig) {
          return _this6.hot.getDataAtCell(visualRowIndex2, sortConfig.column);
        });
      };
      for (var visualRowIndex = 0; visualRowIndex < this.getNumberOfRowsToSort(numberOfRows); visualRowIndex += 1) {
        indexesWithData.push([this.hot.toPhysicalRow(visualRowIndex)].concat(getDataForSortedColumns(visualRowIndex)));
      }
      var indexesBefore = arrayMap(indexesWithData, function(indexWithData) {
        return indexWithData[0];
      });
      sort(indexesWithData, this.pluginKey, arrayMap(sortConfigs, function(sortConfig) {
        return sortConfig.sortOrder;
      }), arrayMap(sortConfigs, function(sortConfig) {
        return _this6.getFirstCellSettings(sortConfig.column);
      }));
      for (var _visualRowIndex = indexesWithData.length; _visualRowIndex < numberOfRows; _visualRowIndex += 1) {
        indexesWithData.push([_visualRowIndex].concat(getDataForSortedColumns(_visualRowIndex)));
      }
      var indexesAfter = arrayMap(indexesWithData, function(indexWithData) {
        return indexWithData[0];
      });
      var indexMapping = new Map(arrayMap(indexesBefore, function(indexBefore, indexInsideArray) {
        return [indexBefore, indexesAfter[indexInsideArray]];
      }));
      var newIndexesSequence = arrayMap(this.hot.rowIndexMapper.getIndexesSequence(), function(physicalIndex) {
        if (indexMapping.has(physicalIndex)) {
          return indexMapping.get(physicalIndex);
        }
        return physicalIndex;
      });
      this.hot.rowIndexMapper.setIndexesSequence(newIndexesSequence);
    }
  }, {
    key: "loadOrSortBySettings",
    value: function loadOrSortBySettings() {
      var storedAllSortSettings = this.getAllSavedSortSettings();
      if (isObject(storedAllSortSettings)) {
        this.sortBySettings(storedAllSortSettings);
      } else {
        var allSortSettings = this.hot.getSettings()[this.pluginKey];
        this.sortBySettings(allSortSettings);
      }
    }
  }, {
    key: "sortBySettings",
    value: function sortBySettings(allSortSettings) {
      if (isObject(allSortSettings)) {
        this.columnStatesManager.updateAllColumnsProperties(allSortSettings);
        var initialConfig = allSortSettings.initialConfig;
        if (Array.isArray(initialConfig) || isObject(initialConfig)) {
          this.sort(initialConfig);
        }
      } else {
        this.hot.render();
      }
    }
  }, {
    key: "onAfterGetColHeader",
    value: function onAfterGetColHeader(column, TH) {
      var headerSpanElement = getHeaderSpanElement(TH);
      if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {
        return;
      }
      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];
      var showSortIndicator = pluginSettingsForColumn.indicator;
      var headerActionEnabled = pluginSettingsForColumn.headerAction;
      this.updateHeaderClasses(headerSpanElement, this.columnStatesManager, column, showSortIndicator, headerActionEnabled);
    }
  }, {
    key: "updateHeaderClasses",
    value: function updateHeaderClasses(headerSpanElement) {
      removeClass(headerSpanElement, getClassesToRemove());
      if (this.enabled !== false) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        addClass(headerSpanElement, getClassesToAdd.apply(void 0, args));
      }
    }
  }, {
    key: "onUpdateSettings",
    value: function onUpdateSettings(newSettings) {
      _get$e(_getPrototypeOf$g(ColumnSorting2.prototype), "onUpdateSettings", this).call(this);
      if (this.columnMetaCache !== null) {
        this.columnMetaCache.init(this.hot.columnIndexMapper.getNumberOfIndexes());
      }
      if (isDefined(newSettings[this.pluginKey])) {
        this.sortBySettings(newSettings[this.pluginKey]);
      }
    }
  }, {
    key: "onAfterLoadData",
    value: function onAfterLoadData(initialLoad) {
      if (initialLoad === true) {
        if (this.hot.view) {
          this.loadOrSortBySettings();
        }
      }
    }
  }, {
    key: "wasClickableHeaderClicked",
    value: function wasClickableHeaderClicked(event, column) {
      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];
      var headerActionEnabled = pluginSettingsForColumn.headerAction;
      return headerActionEnabled && event.target.nodeName === "SPAN";
    }
  }, {
    key: "onBeforeOnCellMouseDown",
    value: function onBeforeOnCellMouseDown(event, coords, TD, controller) {
      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {
        return;
      }
      if (this.wasClickableHeaderClicked(event, coords.col) && this.hot.getShortcutManager().isCtrlPressed()) {
        controller.column = true;
      }
    }
  }, {
    key: "onAfterOnCellMouseDown",
    value: function onAfterOnCellMouseDown(event, coords) {
      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {
        return;
      }
      if (this.wasClickableHeaderClicked(event, coords.col)) {
        if (this.hot.getShortcutManager().isCtrlPressed()) {
          this.hot.deselectCell();
          this.hot.selectColumns(coords.col);
        }
        this.sort(this.getColumnNextConfig(coords.col));
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this$columnStatesMan;
      (_this$columnStatesMan = this.columnStatesManager) === null || _this$columnStatesMan === void 0 ? void 0 : _this$columnStatesMan.destroy();
      _get$e(_getPrototypeOf$g(ColumnSorting2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$6;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$5;
    }
  }]);
  return ColumnSorting2;
}(BasePlugin);

var $RangeError = RangeError;
var $String = String;
var floor = Math.floor;
var repeat = functionUncurryThis(stringRepeat);
var stringSlice = functionUncurryThis(''.slice);
var nativeToFixed = functionUncurryThis(1.0.toFixed);

var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};

var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

var multiply = function (data, n, c) {
  var index = -1;
  var c2 = c;
  while (++index < 6) {
    c2 += n * data[index];
    data[index] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};

var divide = function (data, n) {
  var index = 6;
  var c = 0;
  while (--index >= 0) {
    c += data[index];
    data[index] = floor(c / n);
    c = (c % n) * 1e7;
  }
};

var dataToString = function (data) {
  var index = 6;
  var s = '';
  while (--index >= 0) {
    if (s !== '' || index === 0 || data[index] !== 0) {
      var t = $String(data[index]);
      s = s === '' ? t : s + repeat('0', 7 - t.length) + t;
    }
  } return s;
};

var FORCED = fails(function () {
  return nativeToFixed(0.00008, 3) !== '0.000' ||
    nativeToFixed(0.9, 0) !== '1' ||
    nativeToFixed(1.255, 2) !== '1.25' ||
    nativeToFixed(1000000000000000128.0, 0) !== '1000000000000000128';
}) || !fails(function () {
  // V8 ~ Android 4.3-
  nativeToFixed({});
});

// `Number.prototype.toFixed` method
// https://tc39.es/ecma262/#sec-number.prototype.tofixed
_export({ target: 'Number', proto: true, forced: FORCED }, {
  toFixed: function toFixed(fractionDigits) {
    var number = thisNumberValue(this);
    var fractDigits = toIntegerOrInfinity(fractionDigits);
    var data = [0, 0, 0, 0, 0, 0];
    var sign = '';
    var result = '0';
    var e, z, j, k;

    // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation
    if (fractDigits < 0 || fractDigits > 20) throw $RangeError('Incorrect fraction digits');
    // eslint-disable-next-line no-self-compare -- NaN check
    if (number != number) return 'NaN';
    if (number <= -1e21 || number >= 1e21) return $String(number);
    if (number < 0) {
      sign = '-';
      number = -number;
    }
    if (number > 1e-21) {
      e = log(number * pow(2, 69, 1)) - 69;
      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(data, 0, z);
        j = fractDigits;
        while (j >= 7) {
          multiply(data, 1e7, 0);
          j -= 7;
        }
        multiply(data, pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(data, 1 << 23);
          j -= 23;
        }
        divide(data, 1 << j);
        multiply(data, 1, 1);
        divide(data, 2);
        result = dataToString(data);
      } else {
        multiply(data, 0, z);
        multiply(data, 1 << -e, 0);
        result = dataToString(data) + repeat('0', fractDigits);
      }
    }
    if (fractDigits > 0) {
      k = result.length;
      result = sign + (k <= fractDigits
        ? '0.' + repeat('0', fractDigits - k) + result
        : stringSlice(result, 0, k - fractDigits) + '.' + stringSlice(result, k - fractDigits));
    } else {
      result = sign + result;
    } return result;
  }
});

function _classCallCheck$l(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$l(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$l(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$l(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$l(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var Endpoints = /* @__PURE__ */ function() {
  function Endpoints2(plugin, settings) {
    _classCallCheck$l(this, Endpoints2);
    this.plugin = plugin;
    this.hot = this.plugin.hot;
    this.endpoints = [];
    this.settings = settings;
    this.settingsType = "array";
    this.currentEndpoint = null;
    this.cellsToSetCache = [];
  }
  _createClass$l(Endpoints2, [{
    key: "getEndpoint",
    value: function getEndpoint(index) {
      if (this.settingsType === "function") {
        return this.fillMissingEndpointData(this.settings)[index];
      }
      return this.endpoints[index];
    }
  }, {
    key: "getAllEndpoints",
    value: function getAllEndpoints() {
      if (this.settingsType === "function") {
        return this.fillMissingEndpointData(this.settings);
      }
      return this.endpoints;
    }
  }, {
    key: "fillMissingEndpointData",
    value: function fillMissingEndpointData(func) {
      return this.parseSettings(func.call(this));
    }
  }, {
    key: "parseSettings",
    value: function parseSettings(settings) {
      var _this = this;
      var endpointsArray = [];
      var settingsArray = settings;
      if (!settingsArray && typeof this.settings === "function") {
        this.settingsType = "function";
        return;
      }
      if (!settingsArray) {
        settingsArray = this.settings;
      }
      arrayEach(settingsArray, function(val) {
        var newEndpoint = {};
        _this.assignSetting(val, newEndpoint, "ranges", [[0, _this.hot.countRows() - 1]]);
        _this.assignSetting(val, newEndpoint, "reversedRowCoords", false);
        _this.assignSetting(val, newEndpoint, "destinationRow", new Error("\n        You must provide a destination row for the Column Summary plugin in order to work properly!\n      "));
        _this.assignSetting(val, newEndpoint, "destinationColumn", new Error("\n        You must provide a destination column for the Column Summary plugin in order to work properly!\n      "));
        _this.assignSetting(val, newEndpoint, "sourceColumn", val.destinationColumn);
        _this.assignSetting(val, newEndpoint, "type", "sum");
        _this.assignSetting(val, newEndpoint, "forceNumeric", false);
        _this.assignSetting(val, newEndpoint, "suppressDataTypeErrors", true);
        _this.assignSetting(val, newEndpoint, "suppressDataTypeErrors", true);
        _this.assignSetting(val, newEndpoint, "customFunction", null);
        _this.assignSetting(val, newEndpoint, "readOnly", true);
        _this.assignSetting(val, newEndpoint, "roundFloat", false);
        endpointsArray.push(newEndpoint);
      });
      return endpointsArray;
    }
  }, {
    key: "assignSetting",
    value: function assignSetting(settings, endpoint, name, defaultValue) {
      if (name === "ranges" && settings[name] === void 0) {
        endpoint[name] = defaultValue;
        return;
      } else if (name === "ranges" && settings[name].length === 0) {
        return;
      }
      if (settings[name] === void 0) {
        if (defaultValue instanceof Error) {
          throw defaultValue;
        }
        endpoint[name] = defaultValue;
      } else {
        if (name === "destinationRow" && endpoint.reversedRowCoords) {
          endpoint[name] = this.hot.countRows() - settings[name] - 1;
        } else {
          endpoint[name] = settings[name];
        }
      }
    }
  }, {
    key: "resetSetupBeforeStructureAlteration",
    value: function resetSetupBeforeStructureAlteration(action, index, number) {
      if (this.settingsType !== "function") {
        return;
      }
      var type = action.indexOf("row") > -1 ? "row" : "col";
      var endpoints = this.getAllEndpoints();
      arrayEach(endpoints, function(val) {
        if (type === "row" && val.destinationRow >= index) {
          if (action === "insert_row") {
            val.alterRowOffset = number;
          } else if (action === "remove_row") {
            val.alterRowOffset = -1 * number;
          }
        }
        if (type === "col" && val.destinationColumn >= index) {
          if (action === "insert_col") {
            val.alterColumnOffset = number;
          } else if (action === "remove_col") {
            val.alterColumnOffset = -1 * number;
          }
        }
      });
      this.resetAllEndpoints(endpoints, false);
    }
  }, {
    key: "resetSetupAfterStructureAlteration",
    value: function resetSetupAfterStructureAlteration(action, index, number, logicRows, source) {
      var _this2 = this;
      var forceRefresh = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      if (this.settingsType === "function") {
        var beforeViewRenderCallback = function beforeViewRenderCallback2() {
          _this2.hot.removeHook("beforeViewRender", beforeViewRenderCallback2);
          return _this2.refreshAllEndpoints();
        };
        this.hot.addHookOnce("beforeViewRender", beforeViewRenderCallback);
        return;
      }
      var type = action.indexOf("row") > -1 ? "row" : "col";
      var multiplier = action.indexOf("remove") > -1 ? -1 : 1;
      var endpoints = this.getAllEndpoints();
      var rowMoving = action.indexOf("move_row") === 0;
      var placeOfAlteration = index;
      arrayEach(endpoints, function(val) {
        if (type === "row" && val.destinationRow >= placeOfAlteration) {
          val.alterRowOffset = multiplier * number;
        }
        if (type === "col" && val.destinationColumn >= placeOfAlteration) {
          val.alterColumnOffset = multiplier * number;
        }
      });
      this.resetAllEndpoints(endpoints, !rowMoving);
      if (rowMoving) {
        arrayEach(endpoints, function(endpoint) {
          _this2.extendEndpointRanges(endpoint, placeOfAlteration, logicRows[0], logicRows.length);
          _this2.recreatePhysicalRanges(endpoint);
          _this2.clearOffsetInformation(endpoint);
        });
      } else {
        arrayEach(endpoints, function(endpoint) {
          _this2.shiftEndpointCoordinates(endpoint, placeOfAlteration);
        });
      }
      if (forceRefresh) {
        this.refreshAllEndpoints();
      }
    }
  }, {
    key: "clearOffsetInformation",
    value: function clearOffsetInformation(endpoint) {
      endpoint.alterRowOffset = void 0;
      endpoint.alterColumnOffset = void 0;
    }
  }, {
    key: "extendEndpointRanges",
    value: function extendEndpointRanges(endpoint, placeOfAlteration, previousPosition, offset) {
      arrayEach(endpoint.ranges, function(range) {
        if (range[1]) {
          if (placeOfAlteration >= range[0] && placeOfAlteration <= range[1]) {
            if (previousPosition > range[1]) {
              range[1] += offset;
            } else if (previousPosition < range[0]) {
              range[0] -= offset;
            }
          } else if (previousPosition >= range[0] && previousPosition <= range[1]) {
            range[1] -= offset;
            if (placeOfAlteration <= range[0]) {
              range[0] += 1;
              range[1] += 1;
            }
          }
        }
      });
    }
  }, {
    key: "recreatePhysicalRanges",
    value: function recreatePhysicalRanges(endpoint) {
      var _this3 = this;
      var ranges = endpoint.ranges;
      var newRanges = [];
      var allIndexes = [];
      arrayEach(ranges, function(range) {
        var newRange = [];
        if (range[1]) {
          for (var i = range[0]; i <= range[1]; i++) {
            newRange.push(_this3.hot.toPhysicalRow(i));
          }
        } else {
          newRange.push(_this3.hot.toPhysicalRow(range[0]));
        }
        allIndexes.push(newRange);
      });
      arrayEach(allIndexes, function(range) {
        var newRange = [];
        arrayEach(range, function(coord, index) {
          if (index === 0) {
            newRange.push(coord);
          } else if (range[index] !== range[index - 1] + 1) {
            newRange.push(range[index - 1]);
            newRanges.push(newRange);
            newRange = [];
            newRange.push(coord);
          }
          if (index === range.length - 1) {
            newRange.push(coord);
            newRanges.push(newRange);
          }
        });
      });
      endpoint.ranges = newRanges;
    }
  }, {
    key: "shiftEndpointCoordinates",
    value: function shiftEndpointCoordinates(endpoint, offsetStartIndex) {
      if (endpoint.alterRowOffset && endpoint.alterRowOffset !== 0) {
        endpoint.destinationRow += endpoint.alterRowOffset || 0;
        arrayEach(endpoint.ranges, function(element) {
          arrayEach(element, function(subElement, j) {
            if (subElement >= offsetStartIndex) {
              element[j] += endpoint.alterRowOffset || 0;
            }
          });
        });
      } else if (endpoint.alterColumnOffset && endpoint.alterColumnOffset !== 0) {
        endpoint.destinationColumn += endpoint.alterColumnOffset || 0;
        endpoint.sourceColumn += endpoint.alterColumnOffset || 0;
      }
    }
  }, {
    key: "resetAllEndpoints",
    value: function resetAllEndpoints() {
      var _this4 = this;
      var endpoints = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getAllEndpoints();
      var useOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var anyEndpointOutOfRange = endpoints.some(function(endpoint) {
        var alterRowOffset = endpoint.alterRowOffset || 0;
        var alterColOffset = endpoint.alterColumnOffset || 0;
        if (endpoint.destinationRow + alterRowOffset >= _this4.hot.countRows() || endpoint.destinationColumn + alterColOffset >= _this4.hot.countCols()) {
          return true;
        }
        return false;
      });
      if (anyEndpointOutOfRange) {
        return;
      }
      this.cellsToSetCache = [];
      arrayEach(endpoints, function(endpoint) {
        _this4.resetEndpointValue(endpoint, useOffset);
      });
      this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset");
      this.cellsToSetCache = [];
    }
  }, {
    key: "refreshAllEndpoints",
    value: function refreshAllEndpoints() {
      var _this5 = this;
      this.cellsToSetCache = [];
      arrayEach(this.getAllEndpoints(), function(value) {
        _this5.currentEndpoint = value;
        _this5.plugin.calculate(value);
        _this5.setEndpointValue(value, "init");
      });
      this.currentEndpoint = null;
      this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset");
      this.cellsToSetCache = [];
    }
  }, {
    key: "refreshChangedEndpoints",
    value: function refreshChangedEndpoints(changes) {
      var _this6 = this;
      var needToRefresh = [];
      this.cellsToSetCache = [];
      arrayEach(changes, function(value, key, changesObj) {
        if ("".concat(value[2] || "") === "".concat(value[3])) {
          return;
        }
        arrayEach(_this6.getAllEndpoints(), function(endpoint, j) {
          if (_this6.hot.propToCol(changesObj[key][1]) === endpoint.sourceColumn && needToRefresh.indexOf(j) === -1) {
            needToRefresh.push(j);
          }
        });
      });
      arrayEach(needToRefresh, function(value) {
        _this6.refreshEndpoint(_this6.getEndpoint(value));
      });
      this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset");
      this.cellsToSetCache = [];
    }
  }, {
    key: "refreshEndpoint",
    value: function refreshEndpoint(endpoint) {
      this.currentEndpoint = endpoint;
      this.plugin.calculate(endpoint);
      this.setEndpointValue(endpoint);
      this.currentEndpoint = null;
    }
  }, {
    key: "resetEndpointValue",
    value: function resetEndpointValue(endpoint) {
      var useOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var alterRowOffset = endpoint.alterRowOffset || 0;
      var alterColOffset = endpoint.alterColumnOffset || 0;
      var _ref = [this.hot.toVisualRow(endpoint.destinationRow), this.hot.toVisualColumn(endpoint.destinationColumn)], visualRowIndex = _ref[0], visualColumnIndex = _ref[1];
      if (visualColumnIndex !== null && visualRowIndex !== null) {
        var cellMeta = this.hot.getCellMeta(visualRowIndex, visualColumnIndex);
        cellMeta.readOnly = false;
        cellMeta.className = "";
      }
      this.cellsToSetCache.push([this.hot.toVisualRow(endpoint.destinationRow + (useOffset ? alterRowOffset : 0)), this.hot.toVisualColumn(endpoint.destinationColumn + (useOffset ? alterColOffset : 0)), ""]);
    }
  }, {
    key: "setEndpointValue",
    value: function setEndpointValue(endpoint, source) {
      var render = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var reverseRowOffset = -1 * endpoint.alterRowOffset || 0;
      var reverseColOffset = -1 * endpoint.alterColumnOffset || 0;
      var visualEndpointRowIndex = this.hot.toVisualRow(endpoint.destinationRow);
      if (endpoint.destinationRow >= this.hot.countRows() || endpoint.destinationColumn >= this.hot.countCols()) {
        this.throwOutOfBoundsWarning();
        return;
      }
      var destinationVisualRow = this.hot.toVisualRow(endpoint.destinationRow + reverseRowOffset);
      if (destinationVisualRow !== null) {
        var cellMeta = this.hot.getCellMeta(destinationVisualRow, endpoint.destinationColumn + reverseColOffset);
        if (source === "init" || cellMeta.readOnly !== endpoint.readOnly) {
          cellMeta.readOnly = endpoint.readOnly;
          cellMeta.className = "columnSummaryResult";
        }
      }
      if (endpoint.roundFloat && !isNaN(endpoint.result)) {
        endpoint.result = endpoint.result.toFixed(endpoint.roundFloat);
      }
      if (render) {
        this.hot.setDataAtCell(visualEndpointRowIndex, endpoint.destinationColumn, endpoint.result, "ColumnSummary.set");
      } else {
        this.cellsToSetCache.push([visualEndpointRowIndex, endpoint.destinationColumn, endpoint.result]);
      }
      endpoint.alterRowOffset = void 0;
      endpoint.alterColumnOffset = void 0;
    }
  }, {
    key: "throwOutOfBoundsWarning",
    value: function throwOutOfBoundsWarning() {
      warn("One of the Column Summary plugins' destination points you provided is beyond the table boundaries!");
    }
  }]);
  return Endpoints2;
}();

function isNullishOrNaN(value) {
  return value === null || value === void 0 || isNaN(value);
}

function _typeof$h(obj) {
  "@babel/helpers - typeof";
  return _typeof$h = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$h(obj);
}
var _templateObject;
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {raw: {value: Object.freeze(raw)}}));
}
function _classCallCheck$m(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$m(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$m(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$m(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$m(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$f() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$f = Reflect.get.bind();
  } else {
    _get$f = function _get2(target, property, receiver) {
      var base = _superPropBase$f(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$f.apply(this, arguments);
}
function _superPropBase$f(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$h(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$h(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$h(subClass, superClass);
}
function _setPrototypeOf$h(o, p) {
  _setPrototypeOf$h = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$h(o, p);
}
function _createSuper$h(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$h();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$h(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$h(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$h(this, result);
  };
}
function _possibleConstructorReturn$h(self, call) {
  if (call && (_typeof$h(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$h(self);
}
function _assertThisInitialized$h(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$h() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$h(o) {
  _getPrototypeOf$h = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$h(o);
}
var PLUGIN_KEY$7 = "columnSummary";
var PLUGIN_PRIORITY$6 = 220;
var ColumnSummary = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$h(ColumnSummary2, _BasePlugin);
  var _super = _createSuper$h(ColumnSummary2);
  function ColumnSummary2(hotInstance) {
    var _this;
    _classCallCheck$m(this, ColumnSummary2);
    _this = _super.call(this, hotInstance);
    _this.endpoints = null;
    return _this;
  }
  _createClass$m(ColumnSummary2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$7];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.settings = this.hot.getSettings()[PLUGIN_KEY$7];
      this.endpoints = new Endpoints(this, this.settings);
      this.addHook("afterInit", function() {
        return _this2.onAfterInit.apply(_this2, arguments);
      });
      this.addHook("afterChange", function() {
        return _this2.onAfterChange.apply(_this2, arguments);
      });
      this.addHook("beforeCreateRow", function(index, amount, source) {
        return _this2.endpoints.resetSetupBeforeStructureAlteration("insert_row", index, amount, null, source);
      });
      this.addHook("beforeCreateCol", function(index, amount, source) {
        return _this2.endpoints.resetSetupBeforeStructureAlteration("insert_col", index, amount, null, source);
      });
      this.addHook("beforeRemoveRow", function() {
        var _this2$endpoints;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return (_this2$endpoints = _this2.endpoints).resetSetupBeforeStructureAlteration.apply(_this2$endpoints, ["remove_row"].concat(args));
      });
      this.addHook("beforeRemoveCol", function() {
        var _this2$endpoints2;
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return (_this2$endpoints2 = _this2.endpoints).resetSetupBeforeStructureAlteration.apply(_this2$endpoints2, ["remove_col"].concat(args));
      });
      this.addHook("afterCreateRow", function(index, amount, source) {
        return _this2.endpoints.resetSetupAfterStructureAlteration("insert_row", index, amount, null, source);
      });
      this.addHook("afterCreateCol", function(index, amount, source) {
        return _this2.endpoints.resetSetupAfterStructureAlteration("insert_col", index, amount, null, source);
      });
      this.addHook("afterRemoveRow", function() {
        var _this2$endpoints3;
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return (_this2$endpoints3 = _this2.endpoints).resetSetupAfterStructureAlteration.apply(_this2$endpoints3, ["remove_row"].concat(args));
      });
      this.addHook("afterRemoveCol", function() {
        var _this2$endpoints4;
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        return (_this2$endpoints4 = _this2.endpoints).resetSetupAfterStructureAlteration.apply(_this2$endpoints4, ["remove_col"].concat(args));
      });
      this.addHook("afterRowMove", function() {
        return _this2.onAfterRowMove.apply(_this2, arguments);
      });
      _get$f(_getPrototypeOf$h(ColumnSummary2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.endpoints = null;
      this.settings = null;
      this.currentEndpoint = null;
    }
  }, {
    key: "calculate",
    value: function calculate(endpoint) {
      switch (endpoint.type.toLowerCase()) {
        case "sum":
          endpoint.result = this.calculateSum(endpoint);
          break;
        case "min":
          endpoint.result = this.calculateMinMax(endpoint, endpoint.type);
          break;
        case "max":
          endpoint.result = this.calculateMinMax(endpoint, endpoint.type);
          break;
        case "count":
          endpoint.result = this.countEntries(endpoint);
          break;
        case "average":
          endpoint.result = this.calculateAverage(endpoint);
          break;
        case "custom":
          endpoint.result = endpoint.customFunction.call(this, endpoint);
          break;
      }
    }
  }, {
    key: "calculateSum",
    value: function calculateSum(endpoint) {
      var _this3 = this;
      var sum = 0;
      objectEach(endpoint.ranges, function(range) {
        sum += _this3.getPartialSum(range, endpoint.sourceColumn);
      });
      return sum;
    }
  }, {
    key: "getPartialSum",
    value: function getPartialSum(rowRange, col) {
      var sum = 0;
      var i = rowRange[1] || rowRange[0];
      var cellValue = null;
      var biggestDecimalPlacesCount = 0;
      do {
        cellValue = this.getCellValue(i, col);
        cellValue = isNullishOrNaN(cellValue) ? null : cellValue;
        if (cellValue !== null) {
          var decimalPlaces = ("".concat(cellValue).split(".")[1] || []).length || 1;
          if (decimalPlaces > biggestDecimalPlacesCount) {
            biggestDecimalPlacesCount = decimalPlaces;
          }
        }
        sum += cellValue || 0;
        i -= 1;
      } while (i >= rowRange[0]);
      return Math.round(sum * Math.pow(10, biggestDecimalPlacesCount)) / Math.pow(10, biggestDecimalPlacesCount);
    }
  }, {
    key: "calculateMinMax",
    value: function calculateMinMax(endpoint, type) {
      var _this4 = this;
      var result = null;
      objectEach(endpoint.ranges, function(range) {
        var partialResult = _this4.getPartialMinMax(range, endpoint.sourceColumn, type);
        if (result === null && partialResult !== null) {
          result = partialResult;
        }
        if (partialResult !== null) {
          switch (type) {
            case "min":
              result = Math.min(result, partialResult);
              break;
            case "max":
              result = Math.max(result, partialResult);
              break;
          }
        }
      });
      return result === null ? "Not enough data" : result;
    }
  }, {
    key: "getPartialMinMax",
    value: function getPartialMinMax(rowRange, col, type) {
      var result = null;
      var i = rowRange[1] || rowRange[0];
      var cellValue;
      do {
        cellValue = this.getCellValue(i, col);
        cellValue = isNullishOrNaN(cellValue) ? null : cellValue;
        if (result === null) {
          result = cellValue;
        } else if (cellValue !== null) {
          switch (type) {
            case "min":
              result = Math.min(result, cellValue);
              break;
            case "max":
              result = Math.max(result, cellValue);
              break;
          }
        }
        i -= 1;
      } while (i >= rowRange[0]);
      return result;
    }
  }, {
    key: "countEmpty",
    value: function countEmpty(rowRange, col) {
      var cellValue;
      var counter = 0;
      var i = rowRange[1] || rowRange[0];
      do {
        cellValue = this.getCellValue(i, col);
        cellValue = isNullishOrNaN(cellValue) ? null : cellValue;
        if (cellValue === null) {
          counter += 1;
        }
        i -= 1;
      } while (i >= rowRange[0]);
      return counter;
    }
  }, {
    key: "countEntries",
    value: function countEntries(endpoint) {
      var _this5 = this;
      var result = 0;
      var ranges = endpoint.ranges;
      objectEach(ranges, function(range) {
        var partial = range[1] === void 0 ? 1 : range[1] - range[0] + 1;
        var emptyCount = _this5.countEmpty(range, endpoint.sourceColumn);
        result += partial;
        result -= emptyCount;
      });
      return result;
    }
  }, {
    key: "calculateAverage",
    value: function calculateAverage(endpoint) {
      var sum = this.calculateSum(endpoint);
      var entriesCount = this.countEntries(endpoint);
      return sum / entriesCount;
    }
  }, {
    key: "getCellValue",
    value: function getCellValue(row, col) {
      var visualRowIndex = this.hot.toVisualRow(row);
      var visualColumnIndex = this.hot.toVisualColumn(col);
      var cellValue = this.hot.getSourceDataAtCell(row, col);
      var cellClassName = "";
      if (visualRowIndex !== null && visualColumnIndex !== null) {
        cellClassName = this.hot.getCellMeta(visualRowIndex, visualColumnIndex).className || "";
      }
      if (cellClassName.indexOf("columnSummaryResult") > -1) {
        return null;
      }
      if (this.endpoints.currentEndpoint.forceNumeric) {
        if (typeof cellValue === "string") {
          cellValue = cellValue.replace(/,/, ".");
        }
        cellValue = parseFloat(cellValue);
      }
      if (isNaN(cellValue)) {
        if (!this.endpoints.currentEndpoint.suppressDataTypeErrors) {
          throw new Error(toSingleLine(_templateObject || (_templateObject = _taggedTemplateLiteral(["ColumnSummary plugin: cell at (", ", ", ") is not in a \n          numeric format. Cannot do the calculation."], ["ColumnSummary plugin: cell at (", ", ", ") is not in a\\x20\n          numeric format. Cannot do the calculation."])), row, col));
        }
      }
      return cellValue;
    }
  }, {
    key: "onAfterInit",
    value: function onAfterInit() {
      this.endpoints.endpoints = this.endpoints.parseSettings();
      this.endpoints.refreshAllEndpoints(true);
    }
  }, {
    key: "onAfterChange",
    value: function onAfterChange(changes, source) {
      if (changes && source !== "ColumnSummary.reset" && source !== "ColumnSummary.set" && source !== "loadData") {
        this.endpoints.refreshChangedEndpoints(changes);
      }
    }
  }, {
    key: "onAfterRowMove",
    value: function onAfterRowMove(rows, finalIndex) {
      this.endpoints.resetSetupBeforeStructureAlteration("move_row", rows[0], rows.length, rows, this.pluginName);
      this.endpoints.resetSetupAfterStructureAlteration("move_row", finalIndex, rows.length, rows, this.pluginName);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$7;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$6;
    }
  }]);
  return ColumnSummary2;
}(BasePlugin);

function _classCallCheck$n(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$n(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$n(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$n(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$n(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var CommentEditor = /* @__PURE__ */ function() {
  function CommentEditor2(rootDocument, isRtl) {
    _classCallCheck$n(this, CommentEditor2);
    this.rootDocument = rootDocument;
    this.isRtl = isRtl;
    this.container = null;
    this.editor = this.createEditor();
    this.editorStyle = this.editor.style;
    this.hidden = true;
    this.hide();
  }
  _createClass$n(CommentEditor2, [{
    key: "setPosition",
    value: function setPosition(x, y) {
      this.editorStyle.left = "".concat(x, "px");
      this.editorStyle.top = "".concat(y, "px");
    }
  }, {
    key: "setSize",
    value: function setSize(width, height) {
      if (width && height) {
        var input = this.getInputElement();
        input.style.width = "".concat(width, "px");
        input.style.height = "".concat(height, "px");
      }
    }
  }, {
    key: "getSize",
    value: function getSize() {
      return {
        width: outerWidth(this.getInputElement()),
        height: outerHeight(this.getInputElement())
      };
    }
  }, {
    key: "resetSize",
    value: function resetSize() {
      var input = this.getInputElement();
      input.style.width = "";
      input.style.height = "";
    }
  }, {
    key: "setReadOnlyState",
    value: function setReadOnlyState(state) {
      var input = this.getInputElement();
      input.readOnly = state;
    }
  }, {
    key: "show",
    value: function show() {
      this.editorStyle.display = "block";
      this.hidden = false;
    }
  }, {
    key: "hide",
    value: function hide() {
      if (!this.hidden) {
        this.editorStyle.display = "none";
      }
      this.hidden = true;
    }
  }, {
    key: "isVisible",
    value: function isVisible() {
      return this.editorStyle.display === "block";
    }
  }, {
    key: "setValue",
    value: function setValue() {
      var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      var comment = value || "";
      this.getInputElement().value = comment;
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.getInputElement().value;
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      return this.rootDocument.activeElement === this.getInputElement();
    }
  }, {
    key: "focus",
    value: function focus() {
      this.getInputElement().focus();
    }
  }, {
    key: "createEditor",
    value: function createEditor() {
      var editor = this.rootDocument.createElement("div");
      var textArea = this.rootDocument.createElement("textarea");
      editor.style.display = "none";
      this.container = this.rootDocument.createElement("div");
      this.container.setAttribute("dir", this.isRtl ? "rtl" : "ltr");
      addClass(this.container, CommentEditor2.CLASS_EDITOR_CONTAINER);
      this.rootDocument.body.appendChild(this.container);
      addClass(editor, CommentEditor2.CLASS_EDITOR);
      addClass(textArea, CommentEditor2.CLASS_INPUT);
      editor.appendChild(textArea);
      this.container.appendChild(editor);
      return editor;
    }
  }, {
    key: "getInputElement",
    value: function getInputElement() {
      return this.editor.querySelector(".".concat(CommentEditor2.CLASS_INPUT));
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var containerParentElement = this.container ? this.container.parentNode : null;
      this.editor.parentNode.removeChild(this.editor);
      this.editor = null;
      this.editorStyle = null;
      if (containerParentElement) {
        containerParentElement.removeChild(this.container);
      }
    }
  }], [{
    key: "CLASS_EDITOR_CONTAINER",
    get: function get() {
      return "htCommentsContainer";
    }
  }, {
    key: "CLASS_EDITOR",
    get: function get() {
      return "htComments";
    }
  }, {
    key: "CLASS_INPUT",
    get: function get() {
      return "htCommentTextArea";
    }
  }, {
    key: "CLASS_CELL",
    get: function get() {
      return "htCommentCell";
    }
  }]);
  return CommentEditor2;
}();

var KEY = "---------";
function separatorItem() {
  return {
    name: KEY
  };
}

function normalizeSelection(selRanges) {
  return arrayMap(selRanges, function(range) {
    return {
      start: range.getTopStartCorner(),
      end: range.getBottomEndCorner()
    };
  });
}
function isSeparator(cell) {
  return hasClass(cell, "htSeparator");
}
function hasSubMenu(cell) {
  return hasClass(cell, "htSubmenu");
}
function isDisabled(cell) {
  return hasClass(cell, "htDisabled");
}
function isSelectionDisabled(cell) {
  return hasClass(cell, "htSelectionDisabled");
}
function getValidSelection(hot) {
  var selected = hot.getSelected();
  if (!selected) {
    return null;
  }
  if (selected[0] < 0) {
    return null;
  }
  return selected;
}
function prepareVerticalAlignClass(className, alignment) {
  if (className.indexOf(alignment) !== -1) {
    return className;
  }
  var replacedClassName = className.replace("htTop", "").replace("htMiddle", "").replace("htBottom", "").replace("  ", "");
  return "".concat(replacedClassName, " ").concat(alignment);
}
function prepareHorizontalAlignClass(className, alignment) {
  if (className.indexOf(alignment) !== -1) {
    return className;
  }
  var replacedClassName = className.replace("htLeft", "").replace("htCenter", "").replace("htRight", "").replace("htJustify", "").replace("  ", "");
  return "".concat(replacedClassName, " ").concat(alignment);
}
function getAlignmentClasses(ranges, callback) {
  var classes = {};
  arrayEach(ranges, function(range) {
    range.forAll(function(row, col) {
      if (row >= 0 && col >= 0) {
        if (!classes[row]) {
          classes[row] = [];
        }
        classes[row][col] = callback(row, col);
      }
    });
  });
  return classes;
}
function align(ranges, type, alignment, cellDescriptor, propertySetter) {
  arrayEach(ranges, function(range) {
    range.forAll(function(row, col) {
      if (row >= 0 && col >= 0) {
        applyAlignClassName(row, col, type, alignment, cellDescriptor, propertySetter);
      }
    });
  });
}
function applyAlignClassName(row, col, type, alignment, cellDescriptor, propertySetter) {
  var cellMeta = cellDescriptor(row, col);
  var className = alignment;
  if (cellMeta.className) {
    if (type === "vertical") {
      className = prepareVerticalAlignClass(cellMeta.className, alignment);
    } else {
      className = prepareHorizontalAlignClass(cellMeta.className, alignment);
    }
  }
  propertySetter(row, col, "className", className);
}
function checkSelectionConsistency(ranges, comparator) {
  var result = false;
  if (Array.isArray(ranges)) {
    arrayEach(ranges, function(range) {
      range.forAll(function(row, col) {
        if (row >= 0 && col >= 0 && comparator(row, col)) {
          result = true;
          return false;
        }
      });
      return result;
    });
  }
  return result;
}
function markLabelAsSelected(label) {
  return '<span class="selected">'.concat(String.fromCharCode(10003), "</span>").concat(label);
}
function isItemHidden(item, instance) {
  return !item.hidden || !(typeof item.hidden === "function" && item.hidden.call(instance));
}
function shiftSeparators(items, separator) {
  var result = items.slice(0);
  for (var i = 0; i < result.length; ) {
    if (result[i].name === separator) {
      result.shift();
    } else {
      break;
    }
  }
  return result;
}
function popSeparators(items, separator) {
  var result = items.slice(0);
  result.reverse();
  result = shiftSeparators(result, separator);
  result.reverse();
  return result;
}
function removeDuplicatedSeparators(items) {
  var result = [];
  arrayEach(items, function(value, index) {
    if (index > 0) {
      if (result[result.length - 1].name !== value.name) {
        result.push(value);
      }
    } else {
      result.push(value);
    }
  });
  return result;
}
function filterSeparators(items) {
  var separator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : KEY;
  var result = items.slice(0);
  result = shiftSeparators(result, separator);
  result = popSeparators(result, separator);
  result = removeDuplicatedSeparators(result);
  return result;
}

function _classCallCheck$o(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$o(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$o(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$o(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$o(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var DEFAULT_DISPLAY_DELAY = 250;
var DEFAULT_HIDE_DELAY = 250;
var DisplaySwitch = /* @__PURE__ */ function() {
  function DisplaySwitch2(displayDelay) {
    _classCallCheck$o(this, DisplaySwitch2);
    this.wasLastActionShow = true;
    this.showDebounced = null;
    this.hidingTimer = null;
    this.updateDelay(displayDelay);
  }
  _createClass$o(DisplaySwitch2, [{
    key: "hide",
    value: function hide() {
      var _this = this;
      this.wasLastActionShow = false;
      this.hidingTimer = setTimeout(function() {
        if (_this.wasLastActionShow === false) {
          _this.runLocalHooks("hide");
        }
      }, DEFAULT_HIDE_DELAY);
    }
  }, {
    key: "show",
    value: function show(range) {
      this.wasLastActionShow = true;
      this.showDebounced(range);
    }
  }, {
    key: "cancelHiding",
    value: function cancelHiding() {
      this.wasLastActionShow = true;
      clearTimeout(this.hidingTimer);
      this.hidingTimer = null;
    }
  }, {
    key: "updateDelay",
    value: function updateDelay() {
      var _this2 = this;
      var displayDelay = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : DEFAULT_DISPLAY_DELAY;
      this.showDebounced = debounce(function(range) {
        if (_this2.wasLastActionShow) {
          _this2.runLocalHooks("show", range.from.row, range.from.col);
        }
      }, displayDelay);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.clearLocalHooks();
    }
  }]);
  return DisplaySwitch2;
}();
mixin(DisplaySwitch, localHooks);

function _typeof$i(obj) {
  "@babel/helpers - typeof";
  return _typeof$i = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$i(obj);
}
function _defineProperty$5(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classCallCheck$p(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$p(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$p(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$p(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$p(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$g() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$g = Reflect.get.bind();
  } else {
    _get$g = function _get2(target, property, receiver) {
      var base = _superPropBase$g(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$g.apply(this, arguments);
}
function _superPropBase$g(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$i(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$i(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$i(subClass, superClass);
}
function _setPrototypeOf$i(o, p) {
  _setPrototypeOf$i = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$i(o, p);
}
function _createSuper$i(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$i();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$i(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$i(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$i(this, result);
  };
}
function _possibleConstructorReturn$i(self, call) {
  if (call && (_typeof$i(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$i(self);
}
function _assertThisInitialized$i(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$i() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$i(o) {
  _getPrototypeOf$i = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$i(o);
}
var PLUGIN_KEY$8 = "comments";
var PLUGIN_PRIORITY$7 = 60;
var privatePool$3 = new WeakMap();
var META_COMMENT = "comment";
var META_COMMENT_VALUE = "value";
var META_STYLE = "style";
var META_READONLY = "readOnly";
var Comments = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$i(Comments2, _BasePlugin);
  var _super = _createSuper$i(Comments2);
  function Comments2(hotInstance) {
    var _this;
    _classCallCheck$p(this, Comments2);
    _this = _super.call(this, hotInstance);
    _this.editor = null;
    _this.displaySwitch = null;
    _this.eventManager = null;
    _this.range = {};
    _this.preventEditorAutoSwitch = false;
    privatePool$3.set(_assertThisInitialized$i(_this), {
      tempEditorDimensions: {},
      cellBelowCursor: null
    });
    return _this;
  }
  _createClass$p(Comments2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$8];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      if (!this.editor) {
        this.editor = new CommentEditor(this.hot.rootDocument, this.hot.isRtl());
      }
      if (!this.eventManager) {
        this.eventManager = new EventManager(this);
      }
      if (!this.displaySwitch) {
        this.displaySwitch = new DisplaySwitch(this.getDisplayDelaySetting());
      }
      this.addHook("afterContextMenuDefaultOptions", function(options) {
        return _this2.addToContextMenu(options);
      });
      this.addHook("afterRenderer", function(TD, row, col, prop, value, cellProperties) {
        return _this2.onAfterRenderer(TD, cellProperties);
      });
      this.addHook("afterScrollHorizontally", function() {
        return _this2.hide();
      });
      this.addHook("afterScrollVertically", function() {
        return _this2.hide();
      });
      this.addHook("afterBeginEditing", function() {
        return _this2.hide();
      });
      this.displaySwitch.addLocalHook("hide", function() {
        return _this2.hide();
      });
      this.displaySwitch.addLocalHook("show", function(row, col) {
        return _this2.showAtCell(row, col);
      });
      this.registerListeners();
      _get$g(_getPrototypeOf$i(Comments2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      _get$g(_getPrototypeOf$i(Comments2.prototype), "updatePlugin", this).call(this);
      this.displaySwitch.updateDelay(this.getDisplayDelaySetting());
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      _get$g(_getPrototypeOf$i(Comments2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "registerListeners",
    value: function registerListeners() {
      var _this3 = this;
      var rootDocument = this.hot.rootDocument;
      this.eventManager.addEventListener(rootDocument, "mouseover", function(event) {
        return _this3.onMouseOver(event);
      });
      this.eventManager.addEventListener(rootDocument, "mousedown", function(event) {
        return _this3.onMouseDown(event);
      });
      this.eventManager.addEventListener(rootDocument, "mouseup", function() {
        return _this3.onMouseUp();
      });
      this.eventManager.addEventListener(this.editor.getInputElement(), "blur", function() {
        return _this3.onEditorBlur();
      });
      this.eventManager.addEventListener(this.editor.getInputElement(), "mousedown", function(event) {
        return _this3.onEditorMouseDown(event);
      });
      this.eventManager.addEventListener(this.editor.getInputElement(), "mouseup", function(event) {
        return _this3.onEditorMouseUp(event);
      });
    }
  }, {
    key: "setRange",
    value: function setRange(range) {
      this.range = range;
    }
  }, {
    key: "clearRange",
    value: function clearRange() {
      this.range = {};
    }
  }, {
    key: "targetIsCellWithComment",
    value: function targetIsCellWithComment(event) {
      var closestCell = closest(event.target, "TD", "TBODY");
      return !!(closestCell && hasClass(closestCell, "htCommentCell") && closest(closestCell, [this.hot.rootElement]));
    }
  }, {
    key: "targetIsCommentTextArea",
    value: function targetIsCommentTextArea(event) {
      return this.editor.getInputElement() === event.target;
    }
  }, {
    key: "setComment",
    value: function setComment(value) {
      if (!this.range.from) {
        throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
      }
      var editorValue = this.editor.getValue();
      var comment = "";
      if (value !== null && value !== void 0) {
        comment = value;
      } else if (editorValue !== null && editorValue !== void 0) {
        comment = editorValue;
      }
      var row = this.range.from.row;
      var col = this.range.from.col;
      this.updateCommentMeta(row, col, _defineProperty$5({}, META_COMMENT_VALUE, comment));
      this.hot.render();
    }
  }, {
    key: "setCommentAtCell",
    value: function setCommentAtCell(row, column, value) {
      this.setRange({
        from: this.hot._createCellCoords(row, column)
      });
      this.setComment(value);
    }
  }, {
    key: "removeComment",
    value: function removeComment() {
      var forceRender = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      if (!this.range.from) {
        throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
      }
      this.hot.setCellMeta(this.range.from.row, this.range.from.col, META_COMMENT);
      if (forceRender) {
        this.hot.render();
      }
      this.hide();
    }
  }, {
    key: "removeCommentAtCell",
    value: function removeCommentAtCell(row, column) {
      var forceRender = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      this.setRange({
        from: this.hot._createCellCoords(row, column)
      });
      this.removeComment(forceRender);
    }
  }, {
    key: "getComment",
    value: function getComment() {
      var row = this.range.from.row;
      var column = this.range.from.col;
      return this.getCommentMeta(row, column, META_COMMENT_VALUE);
    }
  }, {
    key: "getCommentAtCell",
    value: function getCommentAtCell(row, column) {
      return this.getCommentMeta(row, column, META_COMMENT_VALUE);
    }
  }, {
    key: "show",
    value: function show() {
      if (!this.range.from) {
        throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
      }
      var _this$range$from = this.range.from, row = _this$range$from.row, col = _this$range$from.col;
      if (row < 0 || row > this.hot.countSourceRows() - 1 || col < 0 || col > this.hot.countSourceCols() - 1) {
        return false;
      }
      var meta = this.hot.getCellMeta(this.range.from.row, this.range.from.col);
      this.editor.setValue(meta[META_COMMENT] ? meta[META_COMMENT][META_COMMENT_VALUE] : "");
      this.editor.show();
      this.refreshEditor(true);
      return true;
    }
  }, {
    key: "showAtCell",
    value: function showAtCell(row, column) {
      this.setRange({
        from: this.hot._createCellCoords(row, column)
      });
      return this.show();
    }
  }, {
    key: "hide",
    value: function hide() {
      this.editor.hide();
    }
  }, {
    key: "refreshEditor",
    value: function refreshEditor() {
      var _renderableRow, _renderableColumn;
      var force = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      if (!force && (!this.range.from || !this.editor.isVisible())) {
        return;
      }
      var _this$hot = this.hot, rowIndexMapper = _this$hot.rowIndexMapper, columnIndexMapper = _this$hot.columnIndexMapper;
      var _this$range$from2 = this.range.from, visualRow = _this$range$from2.row, visualColumn = _this$range$from2.col;
      var renderableRow = rowIndexMapper.getRenderableFromVisualIndex(visualRow);
      var renderableColumn = columnIndexMapper.getRenderableFromVisualIndex(visualColumn);
      var targetingPreviousRow = renderableRow === null;
      if (renderableRow === null) {
        renderableRow = rowIndexMapper.getRenderableFromVisualIndex(rowIndexMapper.getNearestNotHiddenIndex(visualRow, -1));
      }
      if (renderableColumn === null) {
        renderableColumn = columnIndexMapper.getRenderableFromVisualIndex(columnIndexMapper.getNearestNotHiddenIndex(visualColumn, -1));
      }
      var isBeforeRenderedRows = renderableRow === null;
      var isBeforeRenderedColumns = renderableColumn === null;
      renderableRow = (_renderableRow = renderableRow) !== null && _renderableRow !== void 0 ? _renderableRow : 0;
      renderableColumn = (_renderableColumn = renderableColumn) !== null && _renderableColumn !== void 0 ? _renderableColumn : 0;
      var _this$hot2 = this.hot, rootWindow = _this$hot2.rootWindow, wt = _this$hot2.view._wt;
      var wtTable = wt.wtTable;
      var TD = wtTable.getCell({
        row: renderableRow,
        col: renderableColumn
      });
      var commentStyle = this.getCommentMeta(visualRow, visualColumn, META_STYLE);
      if (commentStyle) {
        this.editor.setSize(commentStyle.width, commentStyle.height);
      } else {
        this.editor.resetSize();
      }
      var lastColWidth = isBeforeRenderedColumns ? 0 : wtTable.getStretchedColumnWidth(renderableColumn);
      var lastRowHeight = targetingPreviousRow && !isBeforeRenderedRows ? outerHeight(TD) : 0;
      var _TD$getBoundingClient = TD.getBoundingClientRect(), left = _TD$getBoundingClient.left, top = _TD$getBoundingClient.top, cellWidth = _TD$getBoundingClient.width, cellHeight = _TD$getBoundingClient.height;
      var _this$editor$getSize = this.editor.getSize(), editorWidth = _this$editor$getSize.width, editorHeight = _this$editor$getSize.height;
      var _this$hot$rootWindow = this.hot.rootWindow, innerWidth = _this$hot$rootWindow.innerWidth, innerHeight = _this$hot$rootWindow.innerHeight;
      var documentElement = this.hot.rootDocument.documentElement;
      var x = left + rootWindow.scrollX + lastColWidth;
      var y = top + rootWindow.scrollY + lastRowHeight;
      if (this.hot.isRtl()) {
        x -= editorWidth + lastColWidth;
      }
      if (this.hot.isLtr() && left + cellWidth + editorWidth > innerWidth) {
        x = left + rootWindow.scrollX - editorWidth - 1;
      } else if (this.hot.isRtl() && x < -(documentElement.scrollWidth - documentElement.clientWidth)) {
        x = left + rootWindow.scrollX + lastColWidth + 1;
      }
      if (top + editorHeight > innerHeight) {
        y -= editorHeight - cellHeight + 1;
      }
      this.editor.setPosition(x, y);
      this.editor.setReadOnlyState(this.getCommentMeta(visualRow, visualColumn, META_READONLY));
    }
  }, {
    key: "checkSelectionCommentsConsistency",
    value: function checkSelectionCommentsConsistency() {
      var selected = this.hot.getSelectedRangeLast();
      if (!selected) {
        return false;
      }
      var hasComment = false;
      var cell = selected.getTopStartCorner();
      if (this.getCommentMeta(cell.row, cell.col, META_COMMENT_VALUE)) {
        hasComment = true;
      }
      return hasComment;
    }
  }, {
    key: "updateCommentMeta",
    value: function updateCommentMeta(row, column, metaObject) {
      var oldComment = this.hot.getCellMeta(row, column)[META_COMMENT];
      var newComment;
      if (oldComment) {
        newComment = deepClone(oldComment);
        deepExtend(newComment, metaObject);
      } else {
        newComment = metaObject;
      }
      this.hot.setCellMeta(row, column, META_COMMENT, newComment);
    }
  }, {
    key: "getCommentMeta",
    value: function getCommentMeta(row, column, property) {
      var cellMeta = this.hot.getCellMeta(row, column);
      if (!cellMeta[META_COMMENT]) {
        return void 0;
      }
      return cellMeta[META_COMMENT][property];
    }
  }, {
    key: "onMouseDown",
    value: function onMouseDown(event) {
      if (!this.hot.view || !this.hot.view._wt) {
        return;
      }
      if (!this.preventEditorAutoSwitch && !this.targetIsCommentTextArea(event)) {
        var eventCell = closest(event.target, "TD", "TBODY");
        var coordinates = null;
        if (eventCell) {
          coordinates = this.hot.getCoords(eventCell);
        }
        if (!eventCell || this.range.from && coordinates && (this.range.from.row !== coordinates.row || this.range.from.col !== coordinates.col)) {
          this.hide();
        }
      }
    }
  }, {
    key: "onMouseOver",
    value: function onMouseOver(event) {
      var priv = privatePool$3.get(this);
      var rootDocument = this.hot.rootDocument;
      if (this.preventEditorAutoSwitch || this.editor.isFocused() || hasClass(event.target, "wtBorder") || priv.cellBelowCursor === event.target || !this.editor) {
        return;
      }
      priv.cellBelowCursor = rootDocument.elementFromPoint(event.clientX, event.clientY);
      if (this.targetIsCellWithComment(event)) {
        var range = this.hot._createCellRange(this.hot.getCoords(event.target));
        this.displaySwitch.show(range);
      } else if (isChildOf(event.target, rootDocument) && !this.targetIsCommentTextArea(event)) {
        this.displaySwitch.hide();
      }
    }
  }, {
    key: "onMouseUp",
    value: function onMouseUp() {
      this.preventEditorAutoSwitch = false;
    }
  }, {
    key: "onAfterRenderer",
    value: function onAfterRenderer(TD, cellProperties) {
      if (cellProperties[META_COMMENT] && cellProperties[META_COMMENT][META_COMMENT_VALUE]) {
        addClass(TD, cellProperties.commentedCellClassName);
      }
    }
  }, {
    key: "onEditorBlur",
    value: function onEditorBlur() {
      this.setComment();
    }
  }, {
    key: "onEditorMouseDown",
    value: function onEditorMouseDown(event) {
      var priv = privatePool$3.get(this);
      priv.tempEditorDimensions = {
        width: outerWidth(event.target),
        height: outerHeight(event.target)
      };
    }
  }, {
    key: "onEditorMouseUp",
    value: function onEditorMouseUp(event) {
      var priv = privatePool$3.get(this);
      var currentWidth = outerWidth(event.target);
      var currentHeight = outerHeight(event.target);
      if (currentWidth !== priv.tempEditorDimensions.width + 1 || currentHeight !== priv.tempEditorDimensions.height + 2) {
        this.updateCommentMeta(this.range.from.row, this.range.from.col, _defineProperty$5({}, META_STYLE, {
          width: currentWidth,
          height: currentHeight
        }));
      }
    }
  }, {
    key: "onContextMenuAddComment",
    value: function onContextMenuAddComment() {
      var coords = this.hot.getSelectedRangeLast();
      this.preventEditorAutoSwitch = true;
      this.displaySwitch.cancelHiding();
      this.setRange({
        from: coords.highlight
      });
      this.show();
      this.hot.deselectCell();
      this.editor.focus();
    }
  }, {
    key: "onContextMenuRemoveComment",
    value: function onContextMenuRemoveComment() {
      var _this4 = this;
      var coords = this.hot.getSelectedRangeLast();
      this.preventEditorAutoSwitch = true;
      coords.forAll(function(row, column) {
        if (row >= 0 && column >= 0) {
          _this4.removeCommentAtCell(row, column, false);
        }
      });
      this.hot.render();
    }
  }, {
    key: "onContextMenuMakeReadOnly",
    value: function onContextMenuMakeReadOnly() {
      var _this5 = this;
      var coords = this.hot.getSelectedRangeLast();
      this.preventEditorAutoSwitch = true;
      coords.forAll(function(row, column) {
        if (row >= 0 && column >= 0) {
          var currentState = !!_this5.getCommentMeta(row, column, META_READONLY);
          _this5.updateCommentMeta(row, column, _defineProperty$5({}, META_READONLY, !currentState));
        }
      });
    }
  }, {
    key: "addToContextMenu",
    value: function addToContextMenu(defaultOptions) {
      var _this6 = this;
      var isThereAnyCellRendered = function isThereAnyCellRendered2() {
        return _this6.hot.rowIndexMapper.getRenderableIndexesLength() > 0 && _this6.hot.columnIndexMapper.getRenderableIndexesLength() > 0;
      };
      defaultOptions.items.push({
        name: "---------"
      }, {
        key: "commentsAddEdit",
        name: function name() {
          if (_this6.checkSelectionCommentsConsistency()) {
            return _this6.hot.getTranslatedPhrase(CONTEXTMENU_ITEMS_EDIT_COMMENT);
          }
          return _this6.hot.getTranslatedPhrase(CONTEXTMENU_ITEMS_ADD_COMMENT);
        },
        callback: function callback() {
          return _this6.onContextMenuAddComment();
        },
        disabled: function disabled() {
          if (!isThereAnyCellRendered()) {
            return true;
          }
          return !(_this6.hot.getSelectedLast() && !_this6.hot.selection.isSelectedByCorner());
        }
      }, {
        key: "commentsRemove",
        name: function name() {
          return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_REMOVE_COMMENT);
        },
        callback: function callback() {
          return _this6.onContextMenuRemoveComment();
        },
        disabled: function disabled() {
          if (!isThereAnyCellRendered()) {
            return true;
          }
          return !(_this6.hot.getSelectedLast() && !_this6.hot.selection.isSelectedByCorner());
        }
      }, {
        key: "commentsReadOnly",
        name: function name() {
          var _this7 = this;
          var label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_READ_ONLY_COMMENT);
          var hasProperty = checkSelectionConsistency(this.getSelectedRangeLast(), function(row, col) {
            var readOnlyProperty = _this7.getCellMeta(row, col)[META_COMMENT];
            if (readOnlyProperty) {
              readOnlyProperty = readOnlyProperty[META_READONLY];
            }
            if (readOnlyProperty) {
              return true;
            }
          });
          if (hasProperty) {
            label = markLabelAsSelected(label);
          }
          return label;
        },
        callback: function callback() {
          return _this6.onContextMenuMakeReadOnly();
        },
        disabled: function disabled() {
          if (!isThereAnyCellRendered()) {
            return true;
          }
          return !(_this6.hot.getSelectedLast() && !_this6.hot.selection.isSelectedByCorner()) || !_this6.checkSelectionCommentsConsistency();
        }
      });
    }
  }, {
    key: "getDisplayDelaySetting",
    value: function getDisplayDelaySetting() {
      var commentSetting = this.hot.getSettings()[PLUGIN_KEY$8];
      if (isObject(commentSetting)) {
        return commentSetting.displayDelay;
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.editor) {
        this.editor.destroy();
      }
      if (this.displaySwitch) {
        this.displaySwitch.destroy();
      }
      _get$g(_getPrototypeOf$i(Comments2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$8;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$7;
    }
  }]);
  return Comments2;
}(BasePlugin);

function _classCallCheck$q(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$q(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$q(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$q(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$q(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var CommandExecutor = /* @__PURE__ */ function() {
  function CommandExecutor2(hotInstance) {
    _classCallCheck$q(this, CommandExecutor2);
    this.hot = hotInstance;
    this.commands = {};
    this.commonCallback = null;
  }
  _createClass$q(CommandExecutor2, [{
    key: "registerCommand",
    value: function registerCommand(name, commandDescriptor) {
      this.commands[name] = commandDescriptor;
    }
  }, {
    key: "setCommonCallback",
    value: function setCommonCallback(callback) {
      this.commonCallback = callback;
    }
  }, {
    key: "execute",
    value: function execute(commandName) {
      var _this = this;
      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }
      var commandSplit = commandName.split(":");
      var commandNamePrimary = commandSplit[0];
      var subCommandName = commandSplit.length === 2 ? commandSplit[1] : null;
      var command = this.commands[commandNamePrimary];
      if (!command) {
        throw new Error("Menu command '".concat(commandNamePrimary, "' not exists."));
      }
      if (subCommandName && command.submenu) {
        command = findSubCommand(subCommandName, command.submenu.items);
      }
      if (command.disabled === true) {
        return;
      }
      if (typeof command.disabled === "function" && command.disabled.call(this.hot) === true) {
        return;
      }
      if (hasOwnProperty(command, "submenu")) {
        return;
      }
      var callbacks = [];
      if (typeof command.callback === "function") {
        callbacks.push(command.callback);
      }
      if (typeof this.commonCallback === "function") {
        callbacks.push(this.commonCallback);
      }
      params.unshift(commandSplit.join(":"));
      arrayEach(callbacks, function(callback) {
        return callback.apply(_this.hot, params);
      });
    }
  }]);
  return CommandExecutor2;
}();
function findSubCommand(subCommandName, subCommands) {
  var command;
  arrayEach(subCommands, function(cmd) {
    var cmds = cmd.key ? cmd.key.split(":") : null;
    if (Array.isArray(cmds) && cmds[1] === subCommandName) {
      command = cmd;
      return false;
    }
  });
  return command;
}

var KEY$1 = "alignment";
function alignmentItem() {
  return {
    key: KEY$1,
    name: function name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT);
    },
    disabled: function disabled() {
      if (this.countRows() === 0 || this.countCols() === 0) {
        return true;
      }
      return !(this.getSelectedRange() && !this.selection.isSelectedByCorner());
    },
    submenu: {
      items: [{
        key: "".concat(KEY$1, ":left"),
        name: function name() {
          var _this = this;
          var label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT_LEFT);
          var hasClass = checkSelectionConsistency(this.getSelectedRange(), function(row, col) {
            var className = _this.getCellMeta(row, col).className;
            if (className && className.indexOf("htLeft") !== -1) {
              return true;
            }
          });
          if (hasClass) {
            label = markLabelAsSelected(label);
          }
          return label;
        },
        callback: function callback() {
          var _this2 = this;
          var selectedRange = this.getSelectedRange();
          var stateBefore = getAlignmentClasses(selectedRange, function(row, col) {
            return _this2.getCellMeta(row, col).className;
          });
          var type = "horizontal";
          var alignment = "htLeft";
          this.runHooks("beforeCellAlignment", stateBefore, selectedRange, type, alignment);
          align(selectedRange, type, alignment, function(row, col) {
            return _this2.getCellMeta(row, col);
          }, function(row, col, key, value) {
            return _this2.setCellMeta(row, col, key, value);
          });
          this.render();
        },
        disabled: false
      }, {
        key: "".concat(KEY$1, ":center"),
        name: function name() {
          var _this3 = this;
          var label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT_CENTER);
          var hasClass = checkSelectionConsistency(this.getSelectedRange(), function(row, col) {
            var className = _this3.getCellMeta(row, col).className;
            if (className && className.indexOf("htCenter") !== -1) {
              return true;
            }
          });
          if (hasClass) {
            label = markLabelAsSelected(label);
          }
          return label;
        },
        callback: function callback() {
          var _this4 = this;
          var selectedRange = this.getSelectedRange();
          var stateBefore = getAlignmentClasses(selectedRange, function(row, col) {
            return _this4.getCellMeta(row, col).className;
          });
          var type = "horizontal";
          var alignment = "htCenter";
          this.runHooks("beforeCellAlignment", stateBefore, selectedRange, type, alignment);
          align(selectedRange, type, alignment, function(row, col) {
            return _this4.getCellMeta(row, col);
          }, function(row, col, key, value) {
            return _this4.setCellMeta(row, col, key, value);
          });
          this.render();
        },
        disabled: false
      }, {
        key: "".concat(KEY$1, ":right"),
        name: function name() {
          var _this5 = this;
          var label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT);
          var hasClass = checkSelectionConsistency(this.getSelectedRange(), function(row, col) {
            var className = _this5.getCellMeta(row, col).className;
            if (className && className.indexOf("htRight") !== -1) {
              return true;
            }
          });
          if (hasClass) {
            label = markLabelAsSelected(label);
          }
          return label;
        },
        callback: function callback() {
          var _this6 = this;
          var selectedRange = this.getSelectedRange();
          var stateBefore = getAlignmentClasses(selectedRange, function(row, col) {
            return _this6.getCellMeta(row, col).className;
          });
          var type = "horizontal";
          var alignment = "htRight";
          this.runHooks("beforeCellAlignment", stateBefore, selectedRange, type, alignment);
          align(selectedRange, type, alignment, function(row, col) {
            return _this6.getCellMeta(row, col);
          }, function(row, col, key, value) {
            return _this6.setCellMeta(row, col, key, value);
          });
          this.render();
        },
        disabled: false
      }, {
        key: "".concat(KEY$1, ":justify"),
        name: function name() {
          var _this7 = this;
          var label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY);
          var hasClass = checkSelectionConsistency(this.getSelectedRange(), function(row, col) {
            var className = _this7.getCellMeta(row, col).className;
            if (className && className.indexOf("htJustify") !== -1) {
              return true;
            }
          });
          if (hasClass) {
            label = markLabelAsSelected(label);
          }
          return label;
        },
        callback: function callback() {
          var _this8 = this;
          var selectedRange = this.getSelectedRange();
          var stateBefore = getAlignmentClasses(selectedRange, function(row, col) {
            return _this8.getCellMeta(row, col).className;
          });
          var type = "horizontal";
          var alignment = "htJustify";
          this.runHooks("beforeCellAlignment", stateBefore, selectedRange, type, alignment);
          align(selectedRange, type, alignment, function(row, col) {
            return _this8.getCellMeta(row, col);
          }, function(row, col, key, value) {
            return _this8.setCellMeta(row, col, key, value);
          });
          this.render();
        },
        disabled: false
      }, {
        name: KEY
      }, {
        key: "".concat(KEY$1, ":top"),
        name: function name() {
          var _this9 = this;
          var label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT_TOP);
          var hasClass = checkSelectionConsistency(this.getSelectedRange(), function(row, col) {
            var className = _this9.getCellMeta(row, col).className;
            if (className && className.indexOf("htTop") !== -1) {
              return true;
            }
          });
          if (hasClass) {
            label = markLabelAsSelected(label);
          }
          return label;
        },
        callback: function callback() {
          var _this10 = this;
          var selectedRange = this.getSelectedRange();
          var stateBefore = getAlignmentClasses(selectedRange, function(row, col) {
            return _this10.getCellMeta(row, col).className;
          });
          var type = "vertical";
          var alignment = "htTop";
          this.runHooks("beforeCellAlignment", stateBefore, selectedRange, type, alignment);
          align(selectedRange, type, alignment, function(row, col) {
            return _this10.getCellMeta(row, col);
          }, function(row, col, key, value) {
            return _this10.setCellMeta(row, col, key, value);
          });
          this.render();
        },
        disabled: false
      }, {
        key: "".concat(KEY$1, ":middle"),
        name: function name() {
          var _this11 = this;
          var label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE);
          var hasClass = checkSelectionConsistency(this.getSelectedRange(), function(row, col) {
            var className = _this11.getCellMeta(row, col).className;
            if (className && className.indexOf("htMiddle") !== -1) {
              return true;
            }
          });
          if (hasClass) {
            label = markLabelAsSelected(label);
          }
          return label;
        },
        callback: function callback() {
          var _this12 = this;
          var selectedRange = this.getSelectedRange();
          var stateBefore = getAlignmentClasses(selectedRange, function(row, col) {
            return _this12.getCellMeta(row, col).className;
          });
          var type = "vertical";
          var alignment = "htMiddle";
          this.runHooks("beforeCellAlignment", stateBefore, selectedRange, type, alignment);
          align(selectedRange, type, alignment, function(row, col) {
            return _this12.getCellMeta(row, col);
          }, function(row, col, key, value) {
            return _this12.setCellMeta(row, col, key, value);
          });
          this.render();
        },
        disabled: false
      }, {
        key: "".concat(KEY$1, ":bottom"),
        name: function name() {
          var _this13 = this;
          var label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM);
          var hasClass = checkSelectionConsistency(this.getSelectedRange(), function(row, col) {
            var className = _this13.getCellMeta(row, col).className;
            if (className && className.indexOf("htBottom") !== -1) {
              return true;
            }
          });
          if (hasClass) {
            label = markLabelAsSelected(label);
          }
          return label;
        },
        callback: function callback() {
          var _this14 = this;
          var selectedRange = this.getSelectedRange();
          var stateBefore = getAlignmentClasses(selectedRange, function(row, col) {
            return _this14.getCellMeta(row, col).className;
          });
          var type = "vertical";
          var alignment = "htBottom";
          this.runHooks("beforeCellAlignment", stateBefore, selectedRange, type, alignment);
          align(selectedRange, type, alignment, function(row, col) {
            return _this14.getCellMeta(row, col);
          }, function(row, col, key, value) {
            return _this14.setCellMeta(row, col, key, value);
          });
          this.render();
        },
        disabled: false
      }]
    }
  };
}

var KEY$2 = "clear_column";
function clearColumnItem() {
  return {
    key: KEY$2,
    name: function name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_CLEAR_COLUMN);
    },
    callback: function callback(key, selection) {
      var startColumn = selection[0].start.col;
      var endColumn = selection[0].end.col;
      if (this.countRows()) {
        this.populateFromArray(0, startColumn, [[null]], Math.max(selection[0].start.row, selection[0].end.row), endColumn, "ContextMenu.clearColumn");
      }
    },
    disabled: function disabled() {
      var selected = getValidSelection(this);
      if (!selected) {
        return true;
      }
      return !this.selection.isSelectedByColumnHeader();
    }
  };
}

var KEY$3 = "col_left";
function columnLeftItem() {
  return {
    key: KEY$3,
    name: function name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_INSERT_LEFT);
    },
    callback: function callback() {
      var isSelectedByCorner = this.selection.isSelectedByCorner();
      var columnLeft = this.isRtl() ? this.countCols() : 0;
      if (!isSelectedByCorner) {
        var selectedRange = this.getSelectedRangeLast();
        if (isDefined(selectedRange)) {
          var _selectedRange$getTop = selectedRange.getTopLeftCorner(), col = _selectedRange$getTop.col;
          columnLeft = this.isRtl() ? col + 1 : col;
        }
      }
      this.alter("insert_col", columnLeft, 1, "ContextMenu.columnLeft");
      if (isSelectedByCorner) {
        this.selectAll();
      }
    },
    disabled: function disabled() {
      if (!this.isColumnModificationAllowed()) {
        return true;
      }
      var selected = getValidSelection(this);
      if (!selected) {
        return true;
      }
      if (this.selection.isSelectedByCorner()) {
        var totalColumns = this.countCols();
        return totalColumns === 0;
      }
      return this.selection.isSelectedByRowHeader() || this.countCols() >= this.getSettings().maxCols;
    },
    hidden: function hidden() {
      return !this.getSettings().allowInsertColumn;
    }
  };
}

var KEY$4 = "col_right";
function columnRightItem() {
  return {
    key: KEY$4,
    name: function name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_INSERT_RIGHT);
    },
    callback: function callback() {
      var isSelectedByCorner = this.selection.isSelectedByCorner();
      var columnRight = this.isRtl() ? 0 : this.countCols();
      if (!isSelectedByCorner) {
        var selectedRange = this.getSelectedRangeLast();
        if (isDefined(selectedRange)) {
          var _selectedRange$getTop = selectedRange.getTopRightCorner(), col = _selectedRange$getTop.col;
          columnRight = this.isRtl() ? col : col + 1;
        }
      }
      this.alter("insert_col", columnRight, 1, "ContextMenu.columnRight");
      if (isSelectedByCorner) {
        this.selectAll();
      }
    },
    disabled: function disabled() {
      if (!this.isColumnModificationAllowed()) {
        return true;
      }
      var selected = getValidSelection(this);
      if (!selected) {
        return true;
      }
      if (this.selection.isSelectedByCorner()) {
        return false;
      }
      return this.selection.isSelectedByRowHeader() || this.countCols() >= this.getSettings().maxCols;
    },
    hidden: function hidden() {
      return !this.getSettings().allowInsertColumn;
    }
  };
}

var KEY$5 = "make_read_only";
function readOnlyItem() {
  return {
    key: KEY$5,
    name: function name() {
      var _this = this;
      var label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_READ_ONLY);
      var atLeastOneReadOnly = checkSelectionConsistency(this.getSelectedRange(), function(row, col) {
        return _this.getCellMeta(row, col).readOnly;
      });
      if (atLeastOneReadOnly) {
        label = markLabelAsSelected(label);
      }
      return label;
    },
    callback: function callback() {
      var _this2 = this;
      var ranges = this.getSelectedRange();
      var atLeastOneReadOnly = checkSelectionConsistency(ranges, function(row, col) {
        return _this2.getCellMeta(row, col).readOnly;
      });
      arrayEach(ranges, function(range) {
        range.forAll(function(row, col) {
          if (row >= 0 && col >= 0) {
            _this2.setCellMeta(row, col, "readOnly", !atLeastOneReadOnly);
          }
        });
      });
      this.render();
    },
    disabled: function disabled() {
      if (this.selection.isSelectedByCorner()) {
        return true;
      }
      if (this.countRows() === 0 || this.countCols() === 0) {
        return true;
      }
      if (!this.getSelectedRange() || this.getSelectedRange().length === 0) {
        return true;
      }
      return false;
    }
  };
}

var KEY$6 = "redo";
function redoItem() {
  return {
    key: KEY$6,
    name: function name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_REDO);
    },
    callback: function callback() {
      this.redo();
    },
    hidden: function hidden() {
      var undoRedo = this.getPlugin("undoRedo");
      return !undoRedo || !undoRedo.isEnabled();
    },
    disabled: function disabled() {
      return !this.getPlugin("undoRedo").isRedoAvailable();
    }
  };
}

function _slicedToArray$6(arr, i) {
  return _arrayWithHoles$7(arr) || _iterableToArrayLimit$6(arr, i) || _unsupportedIterableToArray$a(arr, i) || _nonIterableRest$7();
}
function _nonIterableRest$7() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$a(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$a(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$a(o, minLen);
}
function _arrayLikeToArray$a(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$6(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$7(arr) {
  if (Array.isArray(arr))
    return arr;
}
var KEY$7 = "remove_col";
function removeColumnItem() {
  return {
    key: KEY$7,
    name: function name() {
      var selection = this.getSelected();
      var pluralForm = 0;
      if (selection) {
        if (selection.length > 1) {
          pluralForm = 1;
        } else {
          var _selection$ = _slicedToArray$6(selection[0], 4), fromColumn = _selection$[1], toColumn = _selection$[3];
          if (fromColumn - toColumn !== 0) {
            pluralForm = 1;
          }
        }
      }
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_REMOVE_COLUMN, pluralForm);
    },
    callback: function callback() {
      this.alter("remove_col", transformSelectionToColumnDistance(this.getSelected()), null, "ContextMenu.removeColumn");
    },
    disabled: function disabled() {
      if (!this.isColumnModificationAllowed()) {
        return true;
      }
      var selected = getValidSelection(this);
      if (!selected) {
        return true;
      }
      var totalColumns = this.countCols();
      if (this.selection.isSelectedByCorner()) {
        return totalColumns === 0;
      }
      return this.selection.isSelectedByRowHeader() || totalColumns === 0;
    },
    hidden: function hidden() {
      return !this.getSettings().allowRemoveColumn;
    }
  };
}

function _slicedToArray$7(arr, i) {
  return _arrayWithHoles$8(arr) || _iterableToArrayLimit$7(arr, i) || _unsupportedIterableToArray$b(arr, i) || _nonIterableRest$8();
}
function _nonIterableRest$8() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$b(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$b(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$b(o, minLen);
}
function _arrayLikeToArray$b(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$7(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$8(arr) {
  if (Array.isArray(arr))
    return arr;
}
var KEY$8 = "remove_row";
function removeRowItem() {
  return {
    key: KEY$8,
    name: function name() {
      var selection = this.getSelected();
      var pluralForm = 0;
      if (selection) {
        if (selection.length > 1) {
          pluralForm = 1;
        } else {
          var _selection$ = _slicedToArray$7(selection[0], 3), fromRow = _selection$[0], toRow = _selection$[2];
          if (fromRow - toRow !== 0) {
            pluralForm = 1;
          }
        }
      }
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_REMOVE_ROW, pluralForm);
    },
    callback: function callback() {
      this.alter("remove_row", transformSelectionToRowDistance(this.getSelected()), 1, "ContextMenu.removeRow");
    },
    disabled: function disabled() {
      var selected = getValidSelection(this);
      if (!selected) {
        return true;
      }
      var totalRows = this.countRows();
      if (this.selection.isSelectedByCorner()) {
        return totalRows === 0;
      }
      return this.selection.isSelectedByColumnHeader() || totalRows === 0;
    },
    hidden: function hidden() {
      return !this.getSettings().allowRemoveRow;
    }
  };
}

var KEY$9 = "row_above";
function rowAboveItem() {
  return {
    key: KEY$9,
    name: function name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ROW_ABOVE);
    },
    callback: function callback(key, normalizedSelection) {
      var isSelectedByCorner = this.selection.isSelectedByCorner();
      var rowAbove = 0;
      if (!isSelectedByCorner) {
        var latestSelection = normalizedSelection[Math.max(normalizedSelection.length - 1, 0)];
        rowAbove = latestSelection.start.row;
      }
      this.alter("insert_row", rowAbove, 1, "ContextMenu.rowAbove");
      if (isSelectedByCorner) {
        this.selectAll();
      }
    },
    disabled: function disabled() {
      var selected = getValidSelection(this);
      if (!selected) {
        return true;
      }
      if (this.selection.isSelectedByCorner()) {
        var totalRows = this.countRows();
        return totalRows === 0;
      }
      return this.selection.isSelectedByColumnHeader() || this.countRows() >= this.getSettings().maxRows;
    },
    hidden: function hidden() {
      return !this.getSettings().allowInsertRow;
    }
  };
}

var KEY$a = "row_below";
function rowBelowItem() {
  return {
    key: KEY$a,
    name: function name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_ROW_BELOW);
    },
    callback: function callback(key, normalizedSelection) {
      var isSelectedByCorner = this.selection.isSelectedByCorner();
      var rowBelow = 0;
      if (isSelectedByCorner) {
        rowBelow = this.countRows();
      } else {
        var _latestSelection$end;
        var latestSelection = normalizedSelection[Math.max(normalizedSelection.length - 1, 0)];
        var selectedRow = latestSelection === null || latestSelection === void 0 ? void 0 : (_latestSelection$end = latestSelection.end) === null || _latestSelection$end === void 0 ? void 0 : _latestSelection$end.row;
        rowBelow = isDefined(selectedRow) ? selectedRow + 1 : 0;
      }
      this.alter("insert_row", rowBelow, 1, "ContextMenu.rowBelow");
      if (isSelectedByCorner) {
        this.selectAll();
      }
    },
    disabled: function disabled() {
      var selected = getValidSelection(this);
      if (!selected) {
        return true;
      }
      if (this.selection.isSelectedByCorner()) {
        return false;
      }
      return this.selection.isSelectedByColumnHeader() || this.countRows() >= this.getSettings().maxRows;
    },
    hidden: function hidden() {
      return !this.getSettings().allowInsertRow;
    }
  };
}

var KEY$b = "no_items";
function noItemsItem() {
  return {
    key: KEY$b,
    name: function name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_NO_ITEMS);
    },
    disabled: true,
    isCommand: false
  };
}

var KEY$c = "undo";
function undoItem() {
  return {
    key: KEY$c,
    name: function name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_UNDO);
    },
    callback: function callback() {
      this.undo();
    },
    hidden: function hidden() {
      var undoRedo = this.getPlugin("undoRedo");
      return !undoRedo || !undoRedo.isEnabled();
    },
    disabled: function disabled() {
      return !this.getPlugin("undoRedo").isUndoAvailable();
    }
  };
}

var _predefinedItems2;
function _defineProperty$6(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
var ITEMS = [KEY$9, KEY$a, KEY$3, KEY$4, KEY$2, KEY$8, KEY$7, KEY$c, KEY$6, KEY$5, KEY$1, KEY, KEY$b];
var _predefinedItems = (_predefinedItems2 = {}, _defineProperty$6(_predefinedItems2, KEY, separatorItem), _defineProperty$6(_predefinedItems2, KEY$b, noItemsItem), _defineProperty$6(_predefinedItems2, KEY$9, rowAboveItem), _defineProperty$6(_predefinedItems2, KEY$a, rowBelowItem), _defineProperty$6(_predefinedItems2, KEY$3, columnLeftItem), _defineProperty$6(_predefinedItems2, KEY$4, columnRightItem), _defineProperty$6(_predefinedItems2, KEY$2, clearColumnItem), _defineProperty$6(_predefinedItems2, KEY$8, removeRowItem), _defineProperty$6(_predefinedItems2, KEY$7, removeColumnItem), _defineProperty$6(_predefinedItems2, KEY$c, undoItem), _defineProperty$6(_predefinedItems2, KEY$6, redoItem), _defineProperty$6(_predefinedItems2, KEY$5, readOnlyItem), _defineProperty$6(_predefinedItems2, KEY$1, alignmentItem), _predefinedItems2);
function predefinedItems() {
  var items = {};
  objectEach(_predefinedItems, function(itemFactory, key) {
    items[key] = itemFactory();
  });
  return items;
}

function _classCallCheck$r(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$r(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$r(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$r(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$r(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var ItemsFactory = /* @__PURE__ */ function() {
  function ItemsFactory2(hotInstance) {
    var orderPattern = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    _classCallCheck$r(this, ItemsFactory2);
    this.hot = hotInstance;
    this.predefinedItems = predefinedItems();
    this.defaultOrderPattern = orderPattern;
  }
  _createClass$r(ItemsFactory2, [{
    key: "setPredefinedItems",
    value: function setPredefinedItems(predefinedItemsCollection) {
      var _this = this;
      var items = {};
      this.defaultOrderPattern.length = 0;
      objectEach(predefinedItemsCollection, function(value, key) {
        var menuItemKey = "";
        if (value.name === KEY) {
          items[KEY] = value;
          menuItemKey = KEY;
        } else if (isNaN(parseInt(key, 10))) {
          value.key = value.key === void 0 ? key : value.key;
          items[key] = value;
          menuItemKey = value.key;
        } else {
          items[value.key] = value;
          menuItemKey = value.key;
        }
        _this.defaultOrderPattern.push(menuItemKey);
      });
      this.predefinedItems = items;
    }
  }, {
    key: "getItems",
    value: function getItems() {
      var pattern = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      return _getItems(pattern, this.defaultOrderPattern, this.predefinedItems);
    }
  }]);
  return ItemsFactory2;
}();
function _getItems() {
  var itemsPattern = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
  var defaultPattern = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var items = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var result = [];
  var pattern = itemsPattern;
  if (pattern && pattern.items) {
    pattern = pattern.items;
  } else if (!Array.isArray(pattern)) {
    pattern = defaultPattern;
  }
  if (isObject(pattern)) {
    objectEach(pattern, function(value, key) {
      var item = items[typeof value === "string" ? value : key];
      if (!item) {
        item = value;
      }
      if (isObject(value)) {
        extend(item, value);
      } else if (typeof item === "string") {
        item = {
          name: item
        };
      }
      if (item.key === void 0) {
        item.key = key;
      }
      result.push(item);
    });
  } else {
    arrayEach(pattern, function(name, key) {
      var item = items[name];
      if (!item && ITEMS.indexOf(name) >= 0) {
        return;
      }
      if (!item) {
        item = {
          name,
          key: "".concat(key)
        };
      }
      if (isObject(name)) {
        extend(item, name);
      }
      if (item.key === void 0) {
        item.key = key;
      }
      result.push(item);
    });
  }
  return result;
}

function _classCallCheck$s(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$s(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$s(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$s(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$s(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var Cursor = /* @__PURE__ */ function() {
  function Cursor2(object, rootWindow) {
    _classCallCheck$s(this, Cursor2);
    var windowScrollTop = getWindowScrollTop(rootWindow);
    var windowScrollLeft = getWindowScrollLeft(rootWindow);
    var top;
    var topRelative;
    var left;
    var leftRelative;
    var cellHeight;
    var cellWidth;
    this.rootWindow = rootWindow;
    this.type = this.getSourceType(object);
    if (this.type === "literal") {
      top = parseInt(object.top, 10);
      left = parseInt(object.left, 10);
      cellHeight = object.height || 0;
      cellWidth = object.width || 0;
      topRelative = top;
      leftRelative = left;
      top += windowScrollTop;
      left += windowScrollLeft;
    } else if (this.type === "event") {
      top = parseInt(object.pageY, 10);
      left = parseInt(object.pageX, 10);
      cellHeight = object.target.clientHeight;
      cellWidth = object.target.clientWidth;
      topRelative = top - windowScrollTop;
      leftRelative = left - windowScrollLeft;
    }
    this.top = top;
    this.topRelative = topRelative;
    this.left = left;
    this.leftRelative = leftRelative;
    this.scrollTop = windowScrollTop;
    this.scrollLeft = windowScrollLeft;
    this.cellHeight = cellHeight;
    this.cellWidth = cellWidth;
  }
  _createClass$s(Cursor2, [{
    key: "getSourceType",
    value: function getSourceType(object) {
      var type = "literal";
      if (object instanceof Event) {
        type = "event";
      }
      return type;
    }
  }, {
    key: "fitsAbove",
    value: function fitsAbove(element) {
      return this.topRelative >= element.offsetHeight;
    }
  }, {
    key: "fitsBelow",
    value: function fitsBelow(element) {
      var viewportHeight = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.rootWindow.innerHeight;
      return this.topRelative + element.offsetHeight <= viewportHeight;
    }
  }, {
    key: "fitsOnRight",
    value: function fitsOnRight(element) {
      var viewportWidth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.rootWindow.innerWidth;
      return this.leftRelative + this.cellWidth + element.offsetWidth <= viewportWidth;
    }
  }, {
    key: "fitsOnLeft",
    value: function fitsOnLeft(element) {
      return this.leftRelative >= element.offsetWidth;
    }
  }]);
  return Cursor2;
}();

function ownKeys$2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2(Object(source), true).forEach(function(key) {
      _defineProperty$7(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$7(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classCallCheck$t(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$t(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$t(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$t(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$t(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var MIN_WIDTH = 215;
var SHORTCUTS_CONTEXT = "menu";
var SHORTCUTS_GROUP$3 = SHORTCUTS_CONTEXT;
var Menu = /* @__PURE__ */ function() {
  function Menu2(hotInstance, options) {
    _classCallCheck$t(this, Menu2);
    this.hot = hotInstance;
    this.options = options || {
      parent: null,
      name: null,
      className: "",
      keepInViewport: true,
      standalone: false,
      minWidth: MIN_WIDTH,
      container: this.hot.rootDocument.documentElement
    };
    this.eventManager = new EventManager(this);
    this.container = this.createContainer(this.options.name);
    this.hotMenu = null;
    this.hotSubMenus = {};
    this.parentMenu = this.options.parent || null;
    this.menuItems = null;
    this.origOutsideClickDeselects = null;
    this.keyEvent = false;
    this.offset = {
      above: 0,
      below: 0,
      left: 0,
      right: 0
    };
    this._afterScrollCallback = null;
    this.registerEvents();
  }
  _createClass$t(Menu2, [{
    key: "registerEvents",
    value: function registerEvents() {
      var _this = this;
      var frame = this.hot.rootWindow;
      while (frame) {
        this.eventManager.addEventListener(frame.document, "mousedown", function(event) {
          return _this.onDocumentMouseDown(event);
        });
        this.eventManager.addEventListener(frame.document, "contextmenu", function(event) {
          return _this.onDocumentContextMenu(event);
        });
        frame = getParentWindow(frame);
      }
    }
  }, {
    key: "setMenuItems",
    value: function setMenuItems(menuItems) {
      this.menuItems = menuItems;
    }
  }, {
    key: "getSelectedItem",
    value: function getSelectedItem() {
      return this.hasSelectedItem() ? this.hotMenu.getSourceDataAtRow(this.hotMenu.getSelectedLast()[0]) : null;
    }
  }, {
    key: "hasSelectedItem",
    value: function hasSelectedItem() {
      return Array.isArray(this.hotMenu.getSelectedLast());
    }
  }, {
    key: "setOffset",
    value: function setOffset(area) {
      var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      this.offset[area] = offset;
    }
  }, {
    key: "isSubMenu",
    value: function isSubMenu() {
      return this.parentMenu !== null;
    }
  }, {
    key: "open",
    value: function open() {
      var _this2 = this;
      this.runLocalHooks("beforeOpen");
      this.container.removeAttribute("style");
      this.container.style.display = "block";
      var delayedOpenSubMenu = debounce(function(row) {
        return _this2.openSubMenu(row);
      }, 300);
      var minWidthOfMenu = this.options.minWidth || MIN_WIDTH;
      var noItemsDefined = false;
      var filteredItems = arrayFilter(this.menuItems, function(item) {
        if (item.key === KEY$b) {
          noItemsDefined = true;
        }
        return isItemHidden(item, _this2.hot);
      });
      if (filteredItems.length < 1 && !noItemsDefined) {
        filteredItems.push(predefinedItems()[KEY$b]);
      } else if (filteredItems.length === 0) {
        return;
      }
      filteredItems = filterSeparators(filteredItems, KEY);
      var shouldAutoCloseMenu = false;
      var settings = {
        data: filteredItems,
        colHeaders: false,
        autoColumnSize: true,
        autoWrapRow: false,
        modifyColWidth: function modifyColWidth(width) {
          if (isDefined(width) && width < minWidthOfMenu) {
            return minWidthOfMenu;
          }
          return width;
        },
        autoRowSize: false,
        readOnly: true,
        editor: false,
        copyPaste: false,
        maxCols: 1,
        columns: [{
          data: "name",
          renderer: function renderer(hot, TD, row, col, prop, value) {
            return _this2.menuItemRenderer(hot, TD, row, col, prop, value);
          }
        }],
        renderAllRows: true,
        fragmentSelection: false,
        outsideClickDeselects: false,
        disableVisualSelection: "area",
        layoutDirection: this.hot.isRtl() ? "rtl" : "ltr",
        afterOnCellMouseOver: function afterOnCellMouseOver(event, coords) {
          if (_this2.isAllSubMenusClosed()) {
            delayedOpenSubMenu(coords.row);
          } else {
            _this2.openSubMenu(coords.row);
          }
        },
        rowHeights: function rowHeights(row) {
          return filteredItems[row].name === KEY ? 1 : 23;
        },
        afterOnCellContextMenu: function afterOnCellContextMenu(event) {
          event.preventDefault();
          if (isWindowsOS() && shouldAutoCloseMenu && _this2.hasSelectedItem()) {
            _this2.close(true);
          }
        },
        beforeOnCellMouseUp: function beforeOnCellMouseUp(event) {
          if (_this2.hasSelectedItem()) {
            shouldAutoCloseMenu = !_this2.isCommandPassive(_this2.getSelectedItem());
            _this2.executeCommand(event);
          }
        },
        afterOnCellMouseUp: function afterOnCellMouseUp(event) {
          if ((!isWindowsOS() || !isRightClick(event)) && shouldAutoCloseMenu && _this2.hasSelectedItem()) {
            if (isMobileBrowser() || isIpadOS()) {
              setTimeout(function() {
                return _this2.close(true);
              }, 325);
            } else {
              _this2.close(true);
            }
          }
        },
        afterUnlisten: function afterUnlisten() {
          if (!_this2.hasSelectedItem() && _this2.isOpened()) {
            _this2.hotMenu.listen();
          }
        }
      };
      this.origOutsideClickDeselects = this.hot.getSettings().outsideClickDeselects;
      this.hot.getSettings().outsideClickDeselects = false;
      this.hotMenu = new Core(this.container, settings);
      this.hotMenu.addHook("afterInit", function() {
        return _this2.onAfterInit();
      });
      this.hotMenu.addHook("afterSelection", function() {
        return _this2.onAfterSelection.apply(_this2, arguments);
      });
      this.hotMenu.init();
      this.hotMenu.listen();
      var shortcutManager = this.hotMenu.getShortcutManager();
      var menuContext = shortcutManager.addContext(SHORTCUTS_GROUP$3);
      var config = {
        group: SHORTCUTS_CONTEXT
      };
      var menuContextConfig = _objectSpread$2(_objectSpread$2({}, config), {}, {
        runOnlyIf: function runOnlyIf(event) {
          return isInput(event.target) === false || _this2.container.contains(event.target) === false;
        }
      });
      shortcutManager.setActiveContextName("menu");
      menuContext.addShortcuts([{
        keys: [["Escape"]],
        callback: function callback() {
          _this2.keyEvent = true;
          _this2.close();
          _this2.keyEvent = false;
        }
      }, {
        keys: [["ArrowDown"]],
        callback: function callback() {
          var selection = _this2.hotMenu.getSelectedLast();
          _this2.keyEvent = true;
          if (selection) {
            _this2.selectNextCell(selection[0], selection[1]);
          } else {
            _this2.selectFirstCell();
          }
          _this2.keyEvent = false;
        }
      }, {
        keys: [["ArrowUp"]],
        callback: function callback() {
          var selection = _this2.hotMenu.getSelectedLast();
          _this2.keyEvent = true;
          if (selection) {
            _this2.selectPrevCell(selection[0], selection[1]);
          } else {
            _this2.selectLastCell();
          }
          _this2.keyEvent = false;
        }
      }, {
        keys: [["ArrowRight"]],
        callback: function callback() {
          var selection = _this2.hotMenu.getSelectedLast();
          _this2.keyEvent = true;
          if (selection) {
            var menu = _this2.openSubMenu(selection[0]);
            if (menu) {
              menu.selectFirstCell();
            }
          }
          _this2.keyEvent = false;
        }
      }, {
        keys: [["ArrowLeft"]],
        callback: function callback() {
          var selection = _this2.hotMenu.getSelectedLast();
          _this2.keyEvent = true;
          if (selection && _this2.isSubMenu()) {
            _this2.close();
            if (_this2.parentMenu) {
              _this2.parentMenu.hotMenu.listen();
            }
          }
          _this2.keyEvent = false;
        }
      }, {
        keys: [["Enter"]],
        callback: function callback(event) {
          var selection = _this2.hotMenu.getSelectedLast();
          _this2.keyEvent = true;
          if (!_this2.hotMenu.getSourceDataAtRow(selection[0]).submenu) {
            _this2.executeCommand(event);
            _this2.close(true);
          }
          _this2.keyEvent = false;
        }
      }, {
        keys: [["PageUp"]],
        callback: function callback() {
          var selection = _this2.hotMenu.getSelectedLast();
          _this2.keyEvent = true;
          if (selection) {
            _this2.hotMenu.selection.transformStart(-_this2.hotMenu.countVisibleRows(), 0);
          } else {
            _this2.selectFirstCell();
          }
          _this2.keyEvent = false;
        }
      }, {
        keys: [["PageDown"]],
        callback: function callback() {
          var selection = _this2.hotMenu.getSelectedLast();
          _this2.keyEvent = true;
          if (selection) {
            _this2.hotMenu.selection.transformStart(_this2.hotMenu.countVisibleRows(), 0);
          } else {
            _this2.selectLastCell();
          }
          _this2.keyEvent = false;
        }
      }], menuContextConfig);
      this.blockMainTableCallbacks();
      this.runLocalHooks("afterOpen");
    }
  }, {
    key: "close",
    value: function close() {
      var closeParent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      if (!this.isOpened()) {
        return;
      }
      if (closeParent && this.parentMenu) {
        this.parentMenu.close();
      } else {
        this.closeAllSubMenus();
        this.container.style.display = "none";
        this.releaseMainTableCallbacks();
        this.hotMenu.destroy();
        this.hotMenu = null;
        this.hot.getSettings().outsideClickDeselects = this.origOutsideClickDeselects;
        this.runLocalHooks("afterClose");
        if (this.parentMenu) {
          this.parentMenu.hotMenu.listen();
        }
      }
    }
  }, {
    key: "openSubMenu",
    value: function openSubMenu(row) {
      if (!this.hotMenu) {
        return false;
      }
      var cell = this.hotMenu.getCell(row, 0);
      this.closeAllSubMenus();
      if (!cell || !hasSubMenu(cell)) {
        return false;
      }
      var dataItem = this.hotMenu.getSourceDataAtRow(row);
      var subMenu = new Menu2(this.hot, {
        parent: this,
        name: dataItem.name,
        className: this.options.className,
        keepInViewport: true,
        container: this.options.container
      });
      subMenu.setMenuItems(dataItem.submenu.items);
      subMenu.open();
      subMenu.setPosition(cell.getBoundingClientRect());
      this.hotSubMenus[dataItem.key] = subMenu;
      return subMenu;
    }
  }, {
    key: "closeSubMenu",
    value: function closeSubMenu(row) {
      var dataItem = this.hotMenu.getSourceDataAtRow(row);
      var menus = this.hotSubMenus[dataItem.key];
      if (menus) {
        menus.destroy();
        delete this.hotSubMenus[dataItem.key];
      }
    }
  }, {
    key: "closeAllSubMenus",
    value: function closeAllSubMenus() {
      var _this3 = this;
      arrayEach(this.hotMenu.getData(), function(value, row) {
        return _this3.closeSubMenu(row);
      });
    }
  }, {
    key: "isAllSubMenusClosed",
    value: function isAllSubMenusClosed() {
      return Object.keys(this.hotSubMenus).length === 0;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var menuContainerParentElement = this.container.parentNode;
      this.clearLocalHooks();
      this.close();
      this.parentMenu = null;
      this.eventManager.destroy();
      if (menuContainerParentElement) {
        menuContainerParentElement.removeChild(this.container);
      }
    }
  }, {
    key: "isOpened",
    value: function isOpened() {
      return this.hotMenu !== null;
    }
  }, {
    key: "executeCommand",
    value: function executeCommand(event) {
      if (!this.isOpened() || !this.hasSelectedItem()) {
        return;
      }
      var selectedItem = this.getSelectedItem();
      this.runLocalHooks("select", selectedItem, event);
      if (this.isCommandPassive(selectedItem)) {
        return;
      }
      var selRanges = this.hot.getSelectedRange();
      var normalizedSelection = selRanges ? normalizeSelection(selRanges) : [];
      this.runLocalHooks("executeCommand", selectedItem.key, normalizedSelection, event);
      if (this.isSubMenu()) {
        this.parentMenu.runLocalHooks("executeCommand", selectedItem.key, normalizedSelection, event);
      }
    }
  }, {
    key: "isCommandPassive",
    value: function isCommandPassive(commandDescriptor) {
      var isCommand = commandDescriptor.isCommand, commandName = commandDescriptor.name, disabled = commandDescriptor.disabled, submenu = commandDescriptor.submenu;
      var isItemDisabled = disabled === true || typeof disabled === "function" && disabled.call(this.hot) === true;
      return isCommand === false || commandName === KEY || isItemDisabled === true || submenu;
    }
  }, {
    key: "setPosition",
    value: function setPosition(coords) {
      var cursor = new Cursor(coords, this.container.ownerDocument.defaultView);
      if (this.options.keepInViewport) {
        if (cursor.fitsBelow(this.container)) {
          this.setPositionBelowCursor(cursor);
        } else if (cursor.fitsAbove(this.container)) {
          this.setPositionAboveCursor(cursor);
        } else {
          this.setPositionBelowCursor(cursor);
        }
        if (this.hot.isLtr()) {
          this.setHorizontalPositionForLtr(cursor);
        } else {
          this.setHorizontalPositionForRtl(cursor);
        }
      } else {
        this.setPositionBelowCursor(cursor);
        this.setPositionOnRightOfCursor(cursor);
      }
    }
  }, {
    key: "setHorizontalPositionForRtl",
    value: function setHorizontalPositionForRtl(cursor) {
      if (cursor.fitsOnLeft(this.container)) {
        this.setPositionOnLeftOfCursor(cursor);
      } else {
        this.setPositionOnRightOfCursor(cursor);
      }
    }
  }, {
    key: "setHorizontalPositionForLtr",
    value: function setHorizontalPositionForLtr(cursor) {
      if (cursor.fitsOnRight(this.container)) {
        this.setPositionOnRightOfCursor(cursor);
      } else {
        this.setPositionOnLeftOfCursor(cursor);
      }
    }
  }, {
    key: "setPositionAboveCursor",
    value: function setPositionAboveCursor(cursor) {
      var top = this.offset.above + cursor.top - this.container.offsetHeight;
      if (this.isSubMenu()) {
        top = cursor.top + cursor.cellHeight - this.container.offsetHeight + 3;
      }
      this.container.style.top = "".concat(top, "px");
    }
  }, {
    key: "setPositionBelowCursor",
    value: function setPositionBelowCursor(cursor) {
      var top = this.offset.below + cursor.top + 1;
      if (this.isSubMenu()) {
        top = cursor.top - 1;
      }
      this.container.style.top = "".concat(top, "px");
    }
  }, {
    key: "setPositionOnRightOfCursor",
    value: function setPositionOnRightOfCursor(cursor) {
      var left = cursor.left;
      if (this.isSubMenu()) {
        var _this$parentMenu$cont = this.parentMenu.container.getBoundingClientRect(), parentMenuRight = _this$parentMenu$cont.right;
        left += cursor.cellWidth + parentMenuRight - (cursor.left + cursor.cellWidth);
      } else {
        left += this.offset.right;
      }
      this.container.style.left = "".concat(left, "px");
    }
  }, {
    key: "setPositionOnLeftOfCursor",
    value: function setPositionOnLeftOfCursor(cursor) {
      var left = this.offset.left + cursor.left - this.container.offsetWidth;
      if (this.isSubMenu()) {
        var _this$parentMenu$cont2 = this.parentMenu.container.getBoundingClientRect(), parentMenuLeft = _this$parentMenu$cont2.left;
        left -= cursor.left - parentMenuLeft;
      }
      this.container.style.left = "".concat(left, "px");
    }
  }, {
    key: "selectFirstCell",
    value: function selectFirstCell() {
      var cell = this.hotMenu.getCell(0, 0);
      if (isSeparator(cell) || isDisabled(cell) || isSelectionDisabled(cell)) {
        this.selectNextCell(0, 0);
      } else {
        this.hotMenu.selectCell(0, 0);
      }
    }
  }, {
    key: "selectLastCell",
    value: function selectLastCell() {
      var lastRow = this.hotMenu.countRows() - 1;
      var cell = this.hotMenu.getCell(lastRow, 0);
      if (isSeparator(cell) || isDisabled(cell) || isSelectionDisabled(cell)) {
        this.selectPrevCell(lastRow, 0);
      } else {
        this.hotMenu.selectCell(lastRow, 0, void 0, void 0, false);
        this.hotMenu.scrollViewportTo(lastRow, 0, true, false);
      }
    }
  }, {
    key: "selectNextCell",
    value: function selectNextCell(row, col) {
      var nextRow = row + 1;
      var cell = nextRow < this.hotMenu.countRows() ? this.hotMenu.getCell(nextRow, col) : null;
      if (!cell) {
        return;
      }
      if (isSeparator(cell) || isDisabled(cell) || isSelectionDisabled(cell)) {
        this.selectNextCell(nextRow, col);
      } else {
        this.hotMenu.selectCell(nextRow, col);
      }
    }
  }, {
    key: "selectPrevCell",
    value: function selectPrevCell(row, col) {
      var prevRow = row - 1;
      var cell = prevRow >= 0 ? this.hotMenu.getCell(prevRow, col) : null;
      if (!cell) {
        return;
      }
      if (isSeparator(cell) || isDisabled(cell) || isSelectionDisabled(cell)) {
        this.selectPrevCell(prevRow, col);
      } else {
        this.hotMenu.selectCell(prevRow, col);
      }
    }
  }, {
    key: "menuItemRenderer",
    value: function menuItemRenderer(hot, TD, row, col, prop, value) {
      var _this4 = this;
      var item = hot.getSourceDataAtRow(row);
      var wrapper = this.hot.rootDocument.createElement("div");
      var isSubMenu = function isSubMenu2(itemToTest) {
        return hasOwnProperty(itemToTest, "submenu");
      };
      var itemIsSeparator = function itemIsSeparator2(itemToTest) {
        return new RegExp(KEY, "i").test(itemToTest.name);
      };
      var itemIsDisabled = function itemIsDisabled2(itemToTest) {
        return itemToTest.disabled === true || typeof itemToTest.disabled === "function" && itemToTest.disabled.call(_this4.hot) === true;
      };
      var itemIsSelectionDisabled = function itemIsSelectionDisabled2(itemToTest) {
        return itemToTest.disableSelection;
      };
      var itemValue = value;
      if (typeof itemValue === "function") {
        itemValue = itemValue.call(this.hot);
      }
      empty(TD);
      addClass(wrapper, "htItemWrapper");
      TD.appendChild(wrapper);
      if (itemIsSeparator(item)) {
        addClass(TD, "htSeparator");
      } else if (typeof item.renderer === "function") {
        addClass(TD, "htCustomMenuRenderer");
        TD.appendChild(item.renderer(hot, wrapper, row, col, prop, itemValue));
      } else {
        fastInnerHTML(wrapper, itemValue);
      }
      if (itemIsDisabled(item)) {
        addClass(TD, "htDisabled");
        this.eventManager.addEventListener(TD, "mouseenter", function() {
          return hot.deselectCell();
        });
      } else if (itemIsSelectionDisabled(item)) {
        addClass(TD, "htSelectionDisabled");
        this.eventManager.addEventListener(TD, "mouseenter", function() {
          return hot.deselectCell();
        });
      } else if (isSubMenu(item)) {
        addClass(TD, "htSubmenu");
        if (itemIsSelectionDisabled(item)) {
          this.eventManager.addEventListener(TD, "mouseenter", function() {
            return hot.deselectCell();
          });
        } else {
          this.eventManager.addEventListener(TD, "mouseenter", function() {
            return hot.selectCell(row, col, void 0, void 0, false, false);
          });
        }
      } else {
        removeClass(TD, ["htSubmenu", "htDisabled"]);
        if (itemIsSelectionDisabled(item)) {
          this.eventManager.addEventListener(TD, "mouseenter", function() {
            return hot.deselectCell();
          });
        } else {
          this.eventManager.addEventListener(TD, "mouseenter", function() {
            return hot.selectCell(row, col, void 0, void 0, false, false);
          });
        }
      }
    }
  }, {
    key: "createContainer",
    value: function createContainer() {
      var name = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      var doc = this.options.container.ownerDocument;
      var className = name;
      var container;
      if (className) {
        if (isFunction(className)) {
          className = className.call(this.hot);
          if (className === null || isUndefined(className)) {
            className = "";
          } else {
            className = className.toString();
          }
        }
        className = className.replace(/[^A-z0-9]/g, "_");
        className = "".concat(this.options.className, "Sub_").concat(className);
        container = doc.querySelector(".".concat(this.options.className, ".").concat(className));
      }
      if (!container) {
        container = doc.createElement("div");
        addClass(container, "htMenu ".concat(this.options.className));
        if (className) {
          addClass(container, className);
        }
        this.options.container.appendChild(container);
      }
      return container;
    }
  }, {
    key: "blockMainTableCallbacks",
    value: function blockMainTableCallbacks() {
      this._afterScrollCallback = function() {
      };
      this.hot.addHook("afterScrollVertically", this._afterScrollCallback);
      this.hot.addHook("afterScrollHorizontally", this._afterScrollCallback);
    }
  }, {
    key: "releaseMainTableCallbacks",
    value: function releaseMainTableCallbacks() {
      if (this._afterScrollCallback) {
        this.hot.removeHook("afterScrollVertically", this._afterScrollCallback);
        this.hot.removeHook("afterScrollHorizontally", this._afterScrollCallback);
        this._afterScrollCallback = null;
      }
    }
  }, {
    key: "onAfterInit",
    value: function onAfterInit() {
      var wtTable = this.hotMenu.view._wt.wtTable;
      var data = this.hotMenu.getSettings().data;
      var hiderStyle = wtTable.hider.style;
      var holderStyle = wtTable.holder.style;
      var currentHiderWidth = parseInt(hiderStyle.width, 10);
      var realHeight = arrayReduce(data, function(accumulator, value) {
        return accumulator + (value.name === KEY ? 1 : 26);
      }, 0);
      holderStyle.width = "".concat(currentHiderWidth + 3, "px");
      holderStyle.height = "".concat(realHeight + 3, "px");
      hiderStyle.height = holderStyle.height;
    }
  }, {
    key: "onAfterSelection",
    value: function onAfterSelection(r, c, r2, c2, preventScrolling) {
      if (this.keyEvent === false) {
        preventScrolling.value = true;
      }
    }
  }, {
    key: "onDocumentMouseDown",
    value: function onDocumentMouseDown(event) {
      if (!this.isOpened()) {
        return;
      }
      if (this.options.standalone && this.hotMenu && !isChildOf(event.target, this.hotMenu.rootElement)) {
        this.close(true);
      } else if ((this.isAllSubMenusClosed() || this.isSubMenu()) && !isChildOf(event.target, ".htMenu")) {
        this.close(true);
      }
    }
  }, {
    key: "onDocumentContextMenu",
    value: function onDocumentContextMenu(event) {
      if (!this.isOpened()) {
        return;
      }
      if (hasClass(event.target, "htCore") && isChildOf(event.target, this.hotMenu.rootElement)) {
        event.preventDefault();
      }
    }
  }]);
  return Menu2;
}();
mixin(Menu, localHooks);

function _typeof$j(obj) {
  "@babel/helpers - typeof";
  return _typeof$j = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$j(obj);
}
function _classCallCheck$u(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$u(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$u(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$u(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$u(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$h() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$h = Reflect.get.bind();
  } else {
    _get$h = function _get2(target, property, receiver) {
      var base = _superPropBase$h(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$h.apply(this, arguments);
}
function _superPropBase$h(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$j(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$j(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$j(subClass, superClass);
}
function _setPrototypeOf$j(o, p) {
  _setPrototypeOf$j = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$j(o, p);
}
function _createSuper$j(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$j();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$j(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$j(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$j(this, result);
  };
}
function _possibleConstructorReturn$j(self, call) {
  if (call && (_typeof$j(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$j(self);
}
function _assertThisInitialized$j(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$j() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$j(o) {
  _getPrototypeOf$j = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$j(o);
}
var PLUGIN_KEY$9 = "contextMenu";
var PLUGIN_PRIORITY$8 = 70;
Hooks.getSingleton().register("afterContextMenuDefaultOptions");
Hooks.getSingleton().register("beforeContextMenuShow");
Hooks.getSingleton().register("afterContextMenuShow");
Hooks.getSingleton().register("afterContextMenuHide");
Hooks.getSingleton().register("afterContextMenuExecute");
var ContextMenu = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$j(ContextMenu2, _BasePlugin);
  var _super = _createSuper$j(ContextMenu2);
  function ContextMenu2(hotInstance) {
    var _this;
    _classCallCheck$u(this, ContextMenu2);
    _this = _super.call(this, hotInstance);
    _this.eventManager = new EventManager(_assertThisInitialized$j(_this));
    _this.commandExecutor = new CommandExecutor(_this.hot);
    _this.itemsFactory = null;
    _this.menu = null;
    return _this;
  }
  _createClass$u(ContextMenu2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$9];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      var settings = this.hot.getSettings()[PLUGIN_KEY$9];
      if (typeof settings.callback === "function") {
        this.commandExecutor.setCommonCallback(settings.callback);
      }
      this.menu = new Menu(this.hot, {
        className: "htContextMenu",
        keepInViewport: true,
        container: settings.uiContainer || this.hot.rootDocument.body
      });
      this.menu.addLocalHook("beforeOpen", function() {
        return _this2.onMenuBeforeOpen();
      });
      this.menu.addLocalHook("afterOpen", function() {
        return _this2.onMenuAfterOpen();
      });
      this.menu.addLocalHook("afterClose", function() {
        return _this2.onMenuAfterClose();
      });
      this.menu.addLocalHook("executeCommand", function() {
        var _this2$executeCommand;
        for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
          params[_key] = arguments[_key];
        }
        return (_this2$executeCommand = _this2.executeCommand).call.apply(_this2$executeCommand, [_this2].concat(params));
      });
      this.addHook("afterOnCellContextMenu", function(event) {
        return _this2.onAfterOnCellContextMenu(event);
      });
      _get$h(_getPrototypeOf$j(ContextMenu2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      _get$h(_getPrototypeOf$j(ContextMenu2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.close();
      if (this.menu) {
        this.menu.destroy();
        this.menu = null;
      }
      _get$h(_getPrototypeOf$j(ContextMenu2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "open",
    value: function open(event) {
      if (!this.menu) {
        return;
      }
      this.prepareMenuItems();
      this.menu.open();
      if (!this.menu.isOpened()) {
        return;
      }
      var offsetTop = 0;
      var offsetLeft = 0;
      if (this.hot.rootDocument !== this.menu.container.ownerDocument) {
        var frameElement = this.hot.rootWindow.frameElement;
        var _frameElement$getBoun = frameElement.getBoundingClientRect(), top = _frameElement$getBoun.top, left = _frameElement$getBoun.left;
        offsetTop = top - getWindowScrollTop(event.view);
        offsetLeft = left - getWindowScrollLeft(event.view);
      } else {
        offsetTop = -1 * getWindowScrollTop(this.menu.hotMenu.rootWindow);
        offsetLeft = -1 * getWindowScrollLeft(this.menu.hotMenu.rootWindow);
      }
      this.menu.setPosition({
        top: parseInt(event.pageY, 10) + offsetTop,
        left: parseInt(event.pageX, 10) + offsetLeft
      });
    }
  }, {
    key: "close",
    value: function close() {
      if (!this.menu) {
        return;
      }
      this.menu.close();
      this.itemsFactory = null;
    }
  }, {
    key: "executeCommand",
    value: function executeCommand(commandName) {
      var _this$commandExecutor;
      if (this.itemsFactory === null) {
        this.prepareMenuItems();
      }
      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        params[_key2 - 1] = arguments[_key2];
      }
      (_this$commandExecutor = this.commandExecutor).execute.apply(_this$commandExecutor, [commandName].concat(params));
    }
  }, {
    key: "prepareMenuItems",
    value: function prepareMenuItems() {
      var _this3 = this;
      this.itemsFactory = new ItemsFactory(this.hot, ContextMenu2.DEFAULT_ITEMS);
      var settings = this.hot.getSettings()[PLUGIN_KEY$9];
      var predefinedItems = {
        items: this.itemsFactory.getItems(settings)
      };
      this.hot.runHooks("afterContextMenuDefaultOptions", predefinedItems);
      this.itemsFactory.setPredefinedItems(predefinedItems.items);
      var menuItems = this.itemsFactory.getItems(settings);
      this.hot.runHooks("beforeContextMenuSetItems", menuItems);
      this.menu.setMenuItems(menuItems);
      arrayEach(menuItems, function(command) {
        return _this3.commandExecutor.registerCommand(command.key, command);
      });
    }
  }, {
    key: "onAfterOnCellContextMenu",
    value: function onAfterOnCellContextMenu(event) {
      var settings = this.hot.getSettings();
      var showRowHeaders = settings.rowHeaders;
      var showColHeaders = settings.colHeaders;
      function isValidElement(element2) {
        return element2.nodeName === "TD" || element2.parentNode.nodeName === "TD";
      }
      var element = event.target;
      this.close();
      if (hasClass(element, "handsontableInput")) {
        return;
      }
      event.preventDefault();
      event.stopPropagation();
      if (!(showRowHeaders || showColHeaders)) {
        if (!isValidElement(element) && !(hasClass(element, "current") && hasClass(element, "wtBorder"))) {
          return;
        }
      }
      this.open(event);
    }
  }, {
    key: "onMenuBeforeOpen",
    value: function onMenuBeforeOpen() {
      this.hot.runHooks("beforeContextMenuShow", this);
    }
  }, {
    key: "onMenuAfterOpen",
    value: function onMenuAfterOpen() {
      this.hot.runHooks("afterContextMenuShow", this);
    }
  }, {
    key: "onMenuAfterClose",
    value: function onMenuAfterClose() {
      this.hot.listen();
      this.hot.runHooks("afterContextMenuHide", this);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.close();
      if (this.menu) {
        this.menu.destroy();
      }
      _get$h(_getPrototypeOf$j(ContextMenu2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$9;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$8;
    }
  }, {
    key: "PLUGIN_DEPS",
    get: function get() {
      return ["plugin:AutoColumnSize"];
    }
  }, {
    key: "DEFAULT_ITEMS",
    get: function get() {
      return [KEY$9, KEY$a, KEY, KEY$3, KEY$4, KEY, KEY$8, KEY$7, KEY, KEY$c, KEY$6, KEY, KEY$5, KEY, KEY$1];
    }
  }]);
  return ContextMenu2;
}(BasePlugin);
ContextMenu.SEPARATOR = {
  name: KEY
};

function copyItem(copyPastePlugin) {
  return {
    key: "copy",
    name: function name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_COPY);
    },
    callback: function callback() {
      copyPastePlugin.copy();
    },
    disabled: function disabled() {
      if (this.countRows() === 0 || this.countCols() === 0) {
        return true;
      }
      var selected = this.getSelected();
      if (!selected || selected.length > 1) {
        return true;
      }
      return false;
    },
    hidden: false
  };
}

function cutItem(copyPastePlugin) {
  return {
    key: "cut",
    name: function name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_CUT);
    },
    callback: function callback() {
      copyPastePlugin.cut();
    },
    disabled: function disabled() {
      if (this.countRows() === 0 || this.countCols() === 0) {
        return true;
      }
      var selected = this.getSelected();
      if (!selected || selected.length > 1) {
        return true;
      }
      return false;
    },
    hidden: false
  };
}

function _classCallCheck$v(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$v(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$v(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$v(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$v(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var ClipboardData = /* @__PURE__ */ function() {
  function ClipboardData2() {
    _classCallCheck$v(this, ClipboardData2);
    this.data = {};
  }
  _createClass$v(ClipboardData2, [{
    key: "setData",
    value: function setData(type, value) {
      this.data[type] = value;
    }
  }, {
    key: "getData",
    value: function getData(type) {
      return this.data[type] || void 0;
    }
  }]);
  return ClipboardData2;
}();

function _defineProperties$w(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$w(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$w(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$w(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _classCallCheck$w(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var PasteEvent = /* @__PURE__ */ _createClass$w(function PasteEvent2() {
  _classCallCheck$w(this, PasteEvent2);
  this.clipboardData = new ClipboardData();
});

function _classCallCheck$x(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$x(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$x(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$x(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$x(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var FocusableWrapper = /* @__PURE__ */ function() {
  function FocusableWrapper2(container) {
    _classCallCheck$x(this, FocusableWrapper2);
    this.rootDocument = container.defaultView ? container : container.ownerDocument;
    this.mainElement = null;
    this.eventManager = new EventManager(this);
    this.listenersCount = new WeakSet();
    this.container = container;
  }
  _createClass$x(FocusableWrapper2, [{
    key: "useSecondaryElement",
    value: function useSecondaryElement() {
      var el = createOrGetSecondaryElement(this.container);
      if (!this.listenersCount.has(el)) {
        this.listenersCount.add(el);
        forwardEventsToLocalHooks(this.eventManager, el, this);
      }
      this.mainElement = el;
    }
  }, {
    key: "setFocusableElement",
    value: function setFocusableElement(element) {
      if (!this.listenersCount.has(element)) {
        this.listenersCount.add(element);
        forwardEventsToLocalHooks(this.eventManager, element, this);
      }
      this.mainElement = element;
    }
  }, {
    key: "getFocusableElement",
    value: function getFocusableElement() {
      return this.mainElement;
    }
  }, {
    key: "focus",
    value: function focus() {
      this.mainElement.value = " ";
      if (!isMobileBrowser()) {
        selectElementIfAllowed(this.mainElement);
      }
    }
  }]);
  return FocusableWrapper2;
}();
mixin(FocusableWrapper, localHooks);
var refCounter = new WeakMap();
function createElement(container) {
  var focusableWrapper = new FocusableWrapper(container);
  var counter = refCounter.get(container);
  counter = isNaN(counter) ? 0 : counter;
  refCounter.set(container, counter + 1);
  return focusableWrapper;
}
function deactivateElement(wrapper) {
  wrapper.eventManager.clear();
}
var runLocalHooks = function runLocalHooks2(eventName, subject) {
  return function(event) {
    return subject.runLocalHooks(eventName, event);
  };
};
function forwardEventsToLocalHooks(eventManager, element, subject) {
  eventManager.addEventListener(element, "copy", runLocalHooks("copy", subject));
  eventManager.addEventListener(element, "cut", runLocalHooks("cut", subject));
  eventManager.addEventListener(element, "paste", runLocalHooks("paste", subject));
}
var secondaryElements = new WeakMap();
function createOrGetSecondaryElement(container) {
  var secondaryElement = secondaryElements.get(container);
  if (secondaryElement) {
    if (!secondaryElement.parentElement) {
      container.appendChild(secondaryElement);
    }
    return secondaryElement;
  }
  var doc = container.defaultView ? container : container.ownerDocument;
  var element = doc.createElement("textarea");
  secondaryElements.set(container, element);
  element.setAttribute("data-hot-input", "");
  element.className = "HandsontableCopyPaste";
  element.tabIndex = -1;
  element.autocomplete = "off";
  element.wrap = "hard";
  element.value = " ";
  container.appendChild(element);
  return element;
}
function destroyElement(wrapper) {
  if (!(wrapper instanceof FocusableWrapper)) {
    return;
  }
  var counter = refCounter.get(wrapper.container);
  counter = isNaN(counter) ? 0 : counter;
  if (counter > 0) {
    counter -= 1;
  }
  deactivateElement(wrapper);
  if (counter <= 0) {
    counter = 0;
    var secondaryElement = secondaryElements.get(wrapper.container);
    if (secondaryElement && secondaryElement.parentNode) {
      secondaryElement.parentNode.removeChild(secondaryElement);
      secondaryElements.delete(wrapper.container);
    }
    wrapper.mainElement = null;
  }
  refCounter.set(wrapper.container, counter);
}

function _slicedToArray$8(arr, i) {
  return _arrayWithHoles$9(arr) || _iterableToArrayLimit$8(arr, i) || _unsupportedIterableToArray$c(arr, i) || _nonIterableRest$9();
}
function _nonIterableRest$9() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$c(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$c(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$c(o, minLen);
}
function _arrayLikeToArray$c(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$8(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$9(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _typeof$k(obj) {
  "@babel/helpers - typeof";
  return _typeof$k = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$k(obj);
}
function _classCallCheck$y(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$y(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$y(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$y(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$y(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$i() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$i = Reflect.get.bind();
  } else {
    _get$i = function _get2(target, property, receiver) {
      var base = _superPropBase$i(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$i.apply(this, arguments);
}
function _superPropBase$i(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$k(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$k(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$k(subClass, superClass);
}
function _setPrototypeOf$k(o, p) {
  _setPrototypeOf$k = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$k(o, p);
}
function _createSuper$k(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$k();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$k(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$k(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$k(this, result);
  };
}
function _possibleConstructorReturn$k(self, call) {
  if (call && (_typeof$k(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$k(self);
}
function _assertThisInitialized$k(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$k() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$k(o) {
  _getPrototypeOf$k = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$k(o);
}
Hooks.getSingleton().register("afterCopyLimit");
Hooks.getSingleton().register("modifyCopyableRange");
Hooks.getSingleton().register("beforeCut");
Hooks.getSingleton().register("afterCut");
Hooks.getSingleton().register("beforePaste");
Hooks.getSingleton().register("afterPaste");
Hooks.getSingleton().register("beforeCopy");
Hooks.getSingleton().register("afterCopy");
var PLUGIN_KEY$a = "copyPaste";
var PLUGIN_PRIORITY$9 = 80;
var SETTING_KEYS$2 = ["fragmentSelection"];
var ROWS_LIMIT = Infinity;
var COLUMNS_LIMIT = Infinity;
var privatePool$4 = new WeakMap();
var META_HEAD = ['<meta name="generator" content="Handsontable"/>', '<style type="text/css">td{white-space:normal}br{mso-data-placement:same-cell}</style>'].join("");
var CopyPaste = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$k(CopyPaste2, _BasePlugin);
  var _super = _createSuper$k(CopyPaste2);
  function CopyPaste2(hotInstance) {
    var _this;
    _classCallCheck$y(this, CopyPaste2);
    _this = _super.call(this, hotInstance);
    _this.columnsLimit = COLUMNS_LIMIT;
    _this.copyableRanges = [];
    _this.focusableElement = void 0;
    _this.pasteMode = "overwrite";
    _this.rowsLimit = ROWS_LIMIT;
    _this.uiContainer = _this.hot.rootDocument.body;
    privatePool$4.set(_assertThisInitialized$k(_this), {
      isTriggeredByCopy: false,
      isTriggeredByCut: false,
      isBeginEditing: false,
      isFragmentSelectionEnabled: false
    });
    return _this;
  }
  _createClass$y(CopyPaste2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$a];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      var _this$hot$getSettings = this.hot.getSettings(), settings = _this$hot$getSettings[PLUGIN_KEY$a], fragmentSelection = _this$hot$getSettings.fragmentSelection;
      var priv = privatePool$4.get(this);
      priv.isFragmentSelectionEnabled = !!fragmentSelection;
      if (_typeof$k(settings) === "object") {
        this.pasteMode = settings.pasteMode || this.pasteMode;
        this.rowsLimit = isNaN(settings.rowsLimit) ? this.rowsLimit : settings.rowsLimit;
        this.columnsLimit = isNaN(settings.columnsLimit) ? this.columnsLimit : settings.columnsLimit;
        this.uiContainer = settings.uiContainer || this.uiContainer;
      }
      this.addHook("afterContextMenuDefaultOptions", function(options) {
        return _this2.onAfterContextMenuDefaultOptions(options);
      });
      this.addHook("afterOnCellMouseUp", function() {
        return _this2.onAfterOnCellMouseUp();
      });
      this.addHook("afterSelectionEnd", function() {
        return _this2.onAfterSelectionEnd();
      });
      this.addHook("beforeKeyDown", function() {
        return _this2.onBeforeKeyDown();
      });
      this.focusableElement = createElement(this.uiContainer);
      this.focusableElement.addLocalHook("copy", function(event) {
        return _this2.onCopy(event);
      }).addLocalHook("cut", function(event) {
        return _this2.onCut(event);
      }).addLocalHook("paste", function(event) {
        return _this2.onPaste(event);
      });
      _get$i(_getPrototypeOf$k(CopyPaste2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      this.getOrCreateFocusableElement();
      _get$i(_getPrototypeOf$k(CopyPaste2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      if (this.focusableElement) {
        destroyElement(this.focusableElement);
      }
      _get$i(_getPrototypeOf$k(CopyPaste2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "copy",
    value: function copy() {
      var priv = privatePool$4.get(this);
      priv.isTriggeredByCopy = true;
      this.getOrCreateFocusableElement();
      this.focusableElement.focus();
      this.hot.rootDocument.execCommand("copy");
    }
  }, {
    key: "cut",
    value: function cut() {
      var priv = privatePool$4.get(this);
      priv.isTriggeredByCut = true;
      this.getOrCreateFocusableElement();
      this.focusableElement.focus();
      this.hot.rootDocument.execCommand("cut");
    }
  }, {
    key: "getRangedCopyableData",
    value: function getRangedCopyableData(ranges) {
      var _this3 = this;
      var dataSet = [];
      var copyableRows = [];
      var copyableColumns = [];
      arrayEach(ranges, function(range) {
        rangeEach(range.startRow, range.endRow, function(row) {
          if (copyableRows.indexOf(row) === -1) {
            copyableRows.push(row);
          }
        });
        rangeEach(range.startCol, range.endCol, function(column) {
          if (copyableColumns.indexOf(column) === -1) {
            copyableColumns.push(column);
          }
        });
      });
      arrayEach(copyableRows, function(row) {
        var rowSet = [];
        arrayEach(copyableColumns, function(column) {
          rowSet.push(_this3.hot.getCopyableData(row, column));
        });
        dataSet.push(rowSet);
      });
      return stringify$1(dataSet);
    }
  }, {
    key: "getRangedData",
    value: function getRangedData(ranges) {
      var _this4 = this;
      var dataSet = [];
      var copyableRows = [];
      var copyableColumns = [];
      arrayEach(ranges, function(range) {
        rangeEach(range.startRow, range.endRow, function(row) {
          if (copyableRows.indexOf(row) === -1) {
            copyableRows.push(row);
          }
        });
        rangeEach(range.startCol, range.endCol, function(column) {
          if (copyableColumns.indexOf(column) === -1) {
            copyableColumns.push(column);
          }
        });
      });
      arrayEach(copyableRows, function(row) {
        var rowSet = [];
        arrayEach(copyableColumns, function(column) {
          rowSet.push(_this4.hot.getCopyableData(row, column));
        });
        dataSet.push(rowSet);
      });
      return dataSet;
    }
  }, {
    key: "paste",
    value: function paste() {
      var pastableText = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      var pastableHtml = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : pastableText;
      if (!pastableText && !pastableHtml) {
        return;
      }
      var pasteData = new PasteEvent();
      if (pastableText) {
        pasteData.clipboardData.setData("text/plain", pastableText);
      }
      if (pastableHtml) {
        pasteData.clipboardData.setData("text/html", pastableHtml);
      }
      this.getOrCreateFocusableElement();
      this.onPaste(pasteData);
    }
  }, {
    key: "setCopyableText",
    value: function setCopyableText() {
      var selRange = this.hot.getSelectedRangeLast();
      if (!selRange) {
        return;
      }
      var topStart = selRange.getTopStartCorner();
      var bottomEnd = selRange.getBottomEndCorner();
      var startRow = topStart.row;
      var startCol = topStart.col;
      var endRow = bottomEnd.row;
      var endCol = bottomEnd.col;
      var finalEndRow = Math.min(endRow, startRow + this.rowsLimit - 1);
      var finalEndCol = Math.min(endCol, startCol + this.columnsLimit - 1);
      this.copyableRanges.length = 0;
      this.copyableRanges.push({
        startRow,
        startCol,
        endRow: finalEndRow,
        endCol: finalEndCol
      });
      this.copyableRanges = this.hot.runHooks("modifyCopyableRange", this.copyableRanges);
      if (endRow !== finalEndRow || endCol !== finalEndCol) {
        this.hot.runHooks("afterCopyLimit", endRow - startRow + 1, endCol - startCol + 1, this.rowsLimit, this.columnsLimit);
      }
    }
  }, {
    key: "getOrCreateFocusableElement",
    value: function getOrCreateFocusableElement() {
      var editor = this.hot.getActiveEditor();
      var editableElement = editor ? editor.TEXTAREA : void 0;
      if (editableElement) {
        this.focusableElement.setFocusableElement(editableElement);
      } else {
        this.focusableElement.useSecondaryElement();
      }
    }
  }, {
    key: "isEditorOpened",
    value: function isEditorOpened() {
      var editor = this.hot.getActiveEditor();
      return editor && editor.isOpened();
    }
  }, {
    key: "populateValues",
    value: function populateValues(inputArray) {
      var selection = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.hot.getSelectedRangeLast();
      if (!inputArray.length) {
        return;
      }
      var populatedRowsLength = inputArray.length;
      var populatedColumnsLength = inputArray[0].length;
      var newRows = [];
      var _selection$getTopStar = selection.getTopStartCorner(), startRow = _selection$getTopStar.row, startColumn = _selection$getTopStar.col;
      var _selection$getBottomE = selection.getBottomEndCorner(), endRowFromSelection = _selection$getBottomE.row, endColumnFromSelection = _selection$getBottomE.col;
      var visualRowForPopulatedData = startRow;
      var visualColumnForPopulatedData = startColumn;
      var lastVisualRow = startRow;
      var lastVisualColumn = startColumn;
      while (newRows.length < populatedRowsLength || visualRowForPopulatedData <= endRowFromSelection) {
        var _this$hot$getCellMeta = this.hot.getCellMeta(visualRowForPopulatedData, startColumn), skipRowOnPaste = _this$hot$getCellMeta.skipRowOnPaste, visualRow = _this$hot$getCellMeta.visualRow;
        visualRowForPopulatedData = visualRow + 1;
        if (skipRowOnPaste === true) {
          continue;
        }
        lastVisualRow = visualRow;
        visualColumnForPopulatedData = startColumn;
        var newRow = [];
        var insertedRow = newRows.length % populatedRowsLength;
        while (newRow.length < populatedColumnsLength || visualColumnForPopulatedData <= endColumnFromSelection) {
          var _this$hot$getCellMeta2 = this.hot.getCellMeta(startRow, visualColumnForPopulatedData), skipColumnOnPaste = _this$hot$getCellMeta2.skipColumnOnPaste, visualCol = _this$hot$getCellMeta2.visualCol;
          visualColumnForPopulatedData = visualCol + 1;
          if (skipColumnOnPaste === true) {
            continue;
          }
          lastVisualColumn = visualCol;
          var insertedColumn = newRow.length % populatedColumnsLength;
          newRow.push(inputArray[insertedRow][insertedColumn]);
        }
        newRows.push(newRow);
      }
      this.hot.populateFromArray(startRow, startColumn, newRows, void 0, void 0, "CopyPaste.paste", this.pasteMode);
      return [startRow, startColumn, lastVisualRow, lastVisualColumn];
    }
  }, {
    key: "onCopy",
    value: function onCopy(event) {
      var priv = privatePool$4.get(this);
      if (!this.hot.isListening() && !priv.isTriggeredByCopy || this.isEditorOpened()) {
        return;
      }
      this.setCopyableText();
      priv.isTriggeredByCopy = false;
      var rangedData = this.getRangedData(this.copyableRanges);
      var allowCopying = !!this.hot.runHooks("beforeCopy", rangedData, this.copyableRanges);
      if (allowCopying) {
        var textPlain = stringify$1(rangedData);
        if (event && event.clipboardData) {
          var textHTML = _dataToHTML(rangedData, this.hot.rootDocument);
          event.clipboardData.setData("text/plain", textPlain);
          event.clipboardData.setData("text/html", [META_HEAD, textHTML].join(""));
        } else if (typeof ClipboardEvent === "undefined") {
          this.hot.rootWindow.clipboardData.setData("Text", textPlain);
        }
        this.hot.runHooks("afterCopy", rangedData, this.copyableRanges);
      }
      event.preventDefault();
    }
  }, {
    key: "onCut",
    value: function onCut(event) {
      var priv = privatePool$4.get(this);
      if (!this.hot.isListening() && !priv.isTriggeredByCut || this.isEditorOpened()) {
        return;
      }
      this.setCopyableText();
      priv.isTriggeredByCut = false;
      var rangedData = this.getRangedData(this.copyableRanges);
      var allowCuttingOut = !!this.hot.runHooks("beforeCut", rangedData, this.copyableRanges);
      if (allowCuttingOut) {
        var textPlain = stringify$1(rangedData);
        if (event && event.clipboardData) {
          var textHTML = _dataToHTML(rangedData, this.hot.rootDocument);
          event.clipboardData.setData("text/plain", textPlain);
          event.clipboardData.setData("text/html", [META_HEAD, textHTML].join(""));
        } else if (typeof ClipboardEvent === "undefined") {
          this.hot.rootWindow.clipboardData.setData("Text", textPlain);
        }
        this.hot.emptySelectedCells("CopyPaste.cut");
        this.hot.runHooks("afterCut", rangedData, this.copyableRanges);
      }
      event.preventDefault();
    }
  }, {
    key: "onPaste",
    value: function onPaste(event) {
      if (!this.hot.isListening() || this.isEditorOpened()) {
        return;
      }
      if (event && event.preventDefault) {
        event.preventDefault();
      }
      var pastedData;
      if (event && typeof event.clipboardData !== "undefined") {
        var textHTML = sanitize(event.clipboardData.getData("text/html"), {
          ADD_TAGS: ["meta"],
          ADD_ATTR: ["content"],
          FORCE_BODY: true
        });
        if (textHTML && /(<table)|(<TABLE)/g.test(textHTML)) {
          var parsedConfig = htmlToGridSettings(textHTML, this.hot.rootDocument);
          pastedData = parsedConfig.data;
        } else {
          pastedData = event.clipboardData.getData("text/plain");
        }
      } else if (typeof ClipboardEvent === "undefined" && typeof this.hot.rootWindow.clipboardData !== "undefined") {
        pastedData = this.hot.rootWindow.clipboardData.getData("Text");
      }
      if (typeof pastedData === "string") {
        pastedData = parse(pastedData);
      }
      if (pastedData && pastedData.length === 0) {
        return;
      }
      if (this.hot.runHooks("beforePaste", pastedData, this.copyableRanges) === false) {
        return;
      }
      var _this$populateValues = this.populateValues(pastedData), _this$populateValues2 = _slicedToArray$8(_this$populateValues, 4), startRow = _this$populateValues2[0], startColumn = _this$populateValues2[1], endRow = _this$populateValues2[2], endColumn = _this$populateValues2[3];
      this.hot.selectCell(startRow, startColumn, Math.min(this.hot.countRows() - 1, endRow), Math.min(this.hot.countCols() - 1, endColumn));
      this.hot.runHooks("afterPaste", pastedData, this.copyableRanges);
    }
  }, {
    key: "onAfterContextMenuDefaultOptions",
    value: function onAfterContextMenuDefaultOptions(options) {
      options.items.push({
        name: "---------"
      }, copyItem(this), cutItem(this));
    }
  }, {
    key: "onAfterOnCellMouseUp",
    value: function onAfterOnCellMouseUp() {
      if (!this.hot.isListening() || this.isEditorOpened() || this.hot.getSettings().fragmentSelection) {
        return;
      }
      this.getOrCreateFocusableElement();
      this.focusableElement.focus();
    }
  }, {
    key: "onAfterSelectionEnd",
    value: function onAfterSelectionEnd() {
      var _privatePool$get = privatePool$4.get(this), isFragmentSelectionEnabled = _privatePool$get.isFragmentSelectionEnabled;
      if (this.isEditorOpened()) {
        return;
      }
      this.getOrCreateFocusableElement();
      if (isFragmentSelectionEnabled && this.focusableElement.getFocusableElement() !== this.hot.rootDocument.activeElement && getSelectionText()) {
        return;
      }
      this.setCopyableText();
      this.focusableElement.focus();
    }
  }, {
    key: "onBeforeKeyDown",
    value: function onBeforeKeyDown() {
      if (!this.hot.isListening() || this.isEditorOpened()) {
        return;
      }
      var activeElement = this.hot.rootDocument.activeElement;
      var activeEditor = this.hot.getActiveEditor();
      if (!activeEditor || activeElement !== this.focusableElement.getFocusableElement() && activeElement !== activeEditor.select) {
        return;
      }
      this.getOrCreateFocusableElement();
      this.focusableElement.focus();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.focusableElement) {
        destroyElement(this.focusableElement);
        this.focusableElement = null;
      }
      _get$i(_getPrototypeOf$k(CopyPaste2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$a;
    }
  }, {
    key: "SETTING_KEYS",
    get: function get() {
      return [PLUGIN_KEY$a].concat(SETTING_KEYS$2);
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$9;
    }
  }]);
  return CopyPaste2;
}(BasePlugin);

function createId(row, col) {
  return "border_row".concat(row, "col").concat(col);
}
function createDefaultCustomBorder() {
  return {
    width: 1,
    color: "#000"
  };
}
function createSingleEmptyBorder() {
  return {
    hide: true
  };
}
function createDefaultHtBorder() {
  return {
    width: 1,
    color: "#000",
    cornerVisible: false
  };
}
function normalizeBorder(border) {
  if (isDefined(border.start) || isDefined(border.left)) {
    var _border$start;
    border.start = (_border$start = border.start) !== null && _border$start !== void 0 ? _border$start : border.left;
  }
  if (isDefined(border.end) || isDefined(border.right)) {
    var _border$end;
    border.end = (_border$end = border.end) !== null && _border$end !== void 0 ? _border$end : border.right;
  }
  delete border.left;
  delete border.right;
  return border;
}
function denormalizeBorder(border) {
  if (isDefined(border.start)) {
    border.left = border.start;
  }
  if (isDefined(border.end)) {
    border.right = border.end;
  }
  return border;
}
function createEmptyBorders(row, col) {
  return {
    id: createId(row, col),
    border: createDefaultHtBorder(),
    row,
    col,
    top: createSingleEmptyBorder(),
    bottom: createSingleEmptyBorder(),
    start: createSingleEmptyBorder(),
    end: createSingleEmptyBorder()
  };
}
function extendDefaultBorder(defaultBorder, customBorder) {
  if (hasOwnProperty(customBorder, "border") && customBorder.border) {
    defaultBorder.border = customBorder.border;
  }
  if (hasOwnProperty(customBorder, "top") && isDefined(customBorder.top)) {
    if (customBorder.top) {
      if (!isObject(customBorder.top)) {
        customBorder.top = createDefaultCustomBorder();
      }
      defaultBorder.top = customBorder.top;
    } else {
      customBorder.top = createSingleEmptyBorder();
      defaultBorder.top = customBorder.top;
    }
  }
  if (hasOwnProperty(customBorder, "bottom") && isDefined(customBorder.bottom)) {
    if (customBorder.bottom) {
      if (!isObject(customBorder.bottom)) {
        customBorder.bottom = createDefaultCustomBorder();
      }
      defaultBorder.bottom = customBorder.bottom;
    } else {
      customBorder.bottom = createSingleEmptyBorder();
      defaultBorder.bottom = customBorder.bottom;
    }
  }
  if (hasOwnProperty(customBorder, "start") && isDefined(customBorder.start)) {
    if (customBorder.start) {
      if (!isObject(customBorder.start)) {
        customBorder.start = createDefaultCustomBorder();
      }
      defaultBorder.start = customBorder.start;
    } else {
      customBorder.start = createSingleEmptyBorder();
      defaultBorder.start = customBorder.start;
    }
  }
  if (hasOwnProperty(customBorder, "end") && isDefined(customBorder.end)) {
    if (customBorder.end) {
      if (!isObject(customBorder.end)) {
        customBorder.end = createDefaultCustomBorder();
      }
      defaultBorder.end = customBorder.end;
    } else {
      customBorder.end = createSingleEmptyBorder();
      defaultBorder.end = customBorder.end;
    }
  }
  return defaultBorder;
}
function checkSelectionBorders(hot, direction) {
  var atLeastOneHasBorder = false;
  arrayEach(hot.getSelectedRange(), function(range) {
    range.forAll(function(r, c) {
      if (r < 0 || c < 0) {
        return;
      }
      var metaBorders = hot.getCellMeta(r, c).borders;
      if (metaBorders) {
        if (direction) {
          if (!hasOwnProperty(metaBorders[direction], "hide") || metaBorders[direction].hide === false) {
            atLeastOneHasBorder = true;
            return false;
          }
        } else {
          atLeastOneHasBorder = true;
          return false;
        }
      }
    });
  });
  return atLeastOneHasBorder;
}
function markSelected(label) {
  return '<span class="selected">'.concat(String.fromCharCode(10003), "</span>").concat(label);
}
function hasLeftRightTypeOptions(borders) {
  return borders.some(function(border) {
    return isDefined(border.left) || isDefined(border.right);
  });
}
function hasStartEndTypeOptions(borders) {
  return borders.some(function(border) {
    return isDefined(border.start) || isDefined(border.end);
  });
}
var physicalToInlinePropNames = new Map([["left", "start"], ["right", "end"]]);
function toInlinePropName(propName) {
  var _physicalToInlineProp;
  return (_physicalToInlineProp = physicalToInlinePropNames.get(propName)) !== null && _physicalToInlineProp !== void 0 ? _physicalToInlineProp : propName;
}

function bottom(customBordersPlugin) {
  return {
    key: "borders:bottom",
    name: function name() {
      var label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_BORDERS_BOTTOM);
      var hasBorder = checkSelectionBorders(this, "bottom");
      if (hasBorder) {
        label = markSelected(label);
      }
      return label;
    },
    callback: function callback(key, selected) {
      var hasBorder = checkSelectionBorders(this, "bottom");
      customBordersPlugin.prepareBorder(selected, "bottom", hasBorder);
    }
  };
}

function left(customBordersPlugin) {
  var borderDirection = customBordersPlugin.hot.isRtl() ? "end" : "start";
  return {
    key: "borders:left",
    name: function name() {
      var label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_BORDERS_LEFT);
      var hasBorder = checkSelectionBorders(this, borderDirection);
      if (hasBorder) {
        label = markSelected(label);
      }
      return label;
    },
    callback: function callback(key, selected) {
      var hasBorder = checkSelectionBorders(this, borderDirection);
      customBordersPlugin.prepareBorder(selected, borderDirection, hasBorder);
    }
  };
}

function noBorders(customBordersPlugin) {
  return {
    key: "borders:no_borders",
    name: function name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_REMOVE_BORDERS);
    },
    callback: function callback(key, selected) {
      customBordersPlugin.prepareBorder(selected, "noBorders");
    },
    disabled: function disabled() {
      return !checkSelectionBorders(this);
    }
  };
}

function right(customBordersPlugin) {
  var borderDirection = customBordersPlugin.hot.isRtl() ? "start" : "end";
  return {
    key: "borders:right",
    name: function name() {
      var label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_BORDERS_RIGHT);
      var hasBorder = checkSelectionBorders(this, borderDirection);
      if (hasBorder) {
        label = markSelected(label);
      }
      return label;
    },
    callback: function callback(key, selected) {
      var hasBorder = checkSelectionBorders(this, borderDirection);
      customBordersPlugin.prepareBorder(selected, borderDirection, hasBorder);
    }
  };
}

function top(customBordersPlugin) {
  return {
    key: "borders:top",
    name: function name() {
      var label = this.getTranslatedPhrase(CONTEXTMENU_ITEMS_BORDERS_TOP);
      var hasBorder = checkSelectionBorders(this, "top");
      if (hasBorder) {
        label = markSelected(label);
      }
      return label;
    },
    callback: function callback(key, selected) {
      var hasBorder = checkSelectionBorders(this, "top");
      customBordersPlugin.prepareBorder(selected, "top", hasBorder);
    }
  };
}

function _typeof$l(obj) {
  "@babel/helpers - typeof";
  return _typeof$l = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$l(obj);
}
function _slicedToArray$9(arr, i) {
  return _arrayWithHoles$a(arr) || _iterableToArrayLimit$9(arr, i) || _unsupportedIterableToArray$d(arr, i) || _nonIterableRest$a();
}
function _nonIterableRest$a() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$d(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$d(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$d(o, minLen);
}
function _arrayLikeToArray$d(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$9(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$a(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck$z(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$z(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$z(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$z(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$z(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$j() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$j = Reflect.get.bind();
  } else {
    _get$j = function _get2(target, property, receiver) {
      var base = _superPropBase$j(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$j.apply(this, arguments);
}
function _superPropBase$j(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$l(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$l(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$l(subClass, superClass);
}
function _setPrototypeOf$l(o, p) {
  _setPrototypeOf$l = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$l(o, p);
}
function _createSuper$l(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$l();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$l(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$l(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$l(this, result);
  };
}
function _possibleConstructorReturn$l(self, call) {
  if (call && (_typeof$l(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$l(self);
}
function _assertThisInitialized$l(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$l() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$l(o) {
  _getPrototypeOf$l = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$l(o);
}
function _defineProperty$8(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
var PLUGIN_KEY$b = "customBorders";
var PLUGIN_PRIORITY$a = 90;
var CustomBorders = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$l(CustomBorders2, _BasePlugin);
  var _super = _createSuper$l(CustomBorders2);
  function CustomBorders2() {
    var _this;
    _classCallCheck$z(this, CustomBorders2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty$8(_assertThisInitialized$l(_this), "savedBorders", []);
    return _this;
  }
  _createClass$z(CustomBorders2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$b];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.addHook("afterContextMenuDefaultOptions", function(options) {
        return _this2.onAfterContextMenuDefaultOptions(options);
      });
      this.addHook("init", function() {
        return _this2.onAfterInit();
      });
      _get$j(_getPrototypeOf$l(CustomBorders2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.hideBorders();
      _get$j(_getPrototypeOf$l(CustomBorders2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      this.changeBorderSettings();
      _get$j(_getPrototypeOf$l(CustomBorders2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "setBorders",
    value: function setBorders(selectionRanges, borderObject) {
      var _this3 = this;
      var borderKeys = ["top", "bottom", "start", "end"];
      var normBorder = null;
      if (borderObject) {
        this.checkSettingsCohesion([borderObject]);
        borderKeys = Object.keys(borderObject);
        normBorder = normalizeBorder(borderObject);
      }
      var selectionType = detectSelectionType(selectionRanges);
      var selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);
      arrayEach(selectionRanges, function(selection) {
        var _selectionSchemaNorma = selectionSchemaNormalizer(selection), _selectionSchemaNorma2 = _slicedToArray$9(_selectionSchemaNorma, 4), rowStart = _selectionSchemaNorma2[0], columnStart = _selectionSchemaNorma2[1], rowEnd = _selectionSchemaNorma2[2], columnEnd = _selectionSchemaNorma2[3];
        var _loop = function _loop2(row2) {
          var _loop22 = function _loop23(col2) {
            arrayEach(borderKeys, function(borderKey) {
              _this3.prepareBorderFromCustomAdded(row2, col2, normBorder, toInlinePropName(borderKey));
            });
          };
          for (var col = columnStart; col <= columnEnd; col += 1) {
            _loop22(col);
          }
        };
        for (var row = rowStart; row <= rowEnd; row += 1) {
          _loop(row);
        }
      });
      this.hot.view.render();
    }
  }, {
    key: "getBorders",
    value: function getBorders(selectionRanges) {
      var _this4 = this;
      if (!Array.isArray(selectionRanges)) {
        return this.savedBorders;
      }
      var selectionType = detectSelectionType(selectionRanges);
      var selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);
      var selectedBorders = [];
      arrayEach(selectionRanges, function(selection) {
        var _selectionSchemaNorma3 = selectionSchemaNormalizer(selection), _selectionSchemaNorma4 = _slicedToArray$9(_selectionSchemaNorma3, 4), rowStart = _selectionSchemaNorma4[0], columnStart = _selectionSchemaNorma4[1], rowEnd = _selectionSchemaNorma4[2], columnEnd = _selectionSchemaNorma4[3];
        var _loop3 = function _loop32(row2) {
          var _loop4 = function _loop42(col2) {
            arrayEach(_this4.savedBorders, function(border) {
              if (border.row === row2 && border.col === col2) {
                selectedBorders.push(denormalizeBorder(border));
              }
            });
          };
          for (var col = columnStart; col <= columnEnd; col += 1) {
            _loop4(col);
          }
        };
        for (var row = rowStart; row <= rowEnd; row += 1) {
          _loop3(row);
        }
      });
      return selectedBorders;
    }
  }, {
    key: "clearBorders",
    value: function clearBorders(selectionRanges) {
      var _this5 = this;
      if (selectionRanges) {
        this.setBorders(selectionRanges);
      } else {
        arrayEach(this.savedBorders, function(border) {
          _this5.clearBordersFromSelectionSettings(border.id);
          _this5.clearNullCellRange();
          _this5.hot.removeCellMeta(border.row, border.col, "borders");
        });
        this.savedBorders.length = 0;
      }
    }
  }, {
    key: "insertBorderIntoSettings",
    value: function insertBorderIntoSettings(border, place) {
      var hasSavedBorders = this.checkSavedBorders(border);
      if (!hasSavedBorders) {
        this.savedBorders.push(border);
      }
      var visualCellRange = this.hot._createCellRange(this.hot._createCellCoords(border.row, border.col));
      var hasCustomSelections = this.checkCustomSelections(border, visualCellRange, place);
      if (!hasCustomSelections) {
        this.hot.selection.highlight.addCustomSelection({
          border,
          visualCellRange
        });
      }
    }
  }, {
    key: "prepareBorderFromCustomAdded",
    value: function prepareBorderFromCustomAdded(row, column, borderDescriptor, place) {
      var nrOfRows = this.hot.countRows();
      var nrOfColumns = this.hot.countCols();
      if (row >= nrOfRows || column >= nrOfColumns) {
        return;
      }
      var border = createEmptyBorders(row, column);
      if (borderDescriptor) {
        border = extendDefaultBorder(border, borderDescriptor);
        arrayEach(this.hot.selection.highlight.customSelections, function(customSelection) {
          if (border.id === customSelection.settings.id) {
            Object.assign(customSelection.settings, borderDescriptor);
            border.id = customSelection.settings.id;
            border.top = customSelection.settings.top;
            border.bottom = customSelection.settings.bottom;
            border.start = customSelection.settings.start;
            border.end = customSelection.settings.end;
            return false;
          }
        });
      }
      this.hot.setCellMeta(row, column, "borders", denormalizeBorder(border));
      this.insertBorderIntoSettings(border, place);
    }
  }, {
    key: "prepareBorderFromCustomAddedRange",
    value: function prepareBorderFromCustomAddedRange(range, customBorder) {
      var _this6 = this;
      var lastRowIndex = Math.min(range.to.row, this.hot.countRows() - 1);
      var lastColumnIndex = Math.min(range.to.col, this.hot.countCols() - 1);
      rangeEach(range.from.row, lastRowIndex, function(rowIndex) {
        rangeEach(range.from.col, lastColumnIndex, function(colIndex) {
          var border = createEmptyBorders(rowIndex, colIndex);
          var add = 0;
          if (rowIndex === range.from.row) {
            if (hasOwnProperty(customBorder, "top")) {
              add += 1;
              border.top = customBorder.top;
            }
          }
          if (rowIndex === range.to.row) {
            if (hasOwnProperty(customBorder, "bottom")) {
              add += 1;
              border.bottom = customBorder.bottom;
            }
          }
          if (colIndex === range.from.col) {
            if (hasOwnProperty(customBorder, "start")) {
              add += 1;
              border.start = customBorder.start;
            }
          }
          if (colIndex === range.to.col) {
            if (hasOwnProperty(customBorder, "end")) {
              add += 1;
              border.end = customBorder.end;
            }
          }
          if (add > 0) {
            _this6.hot.setCellMeta(rowIndex, colIndex, "borders", denormalizeBorder(border));
            _this6.insertBorderIntoSettings(border);
          }
        });
      });
    }
  }, {
    key: "removeAllBorders",
    value: function removeAllBorders(row, column) {
      var borderId = createId(row, column);
      this.spliceBorder(borderId);
      this.clearBordersFromSelectionSettings(borderId);
      this.clearNullCellRange();
      this.hot.removeCellMeta(row, column, "borders");
    }
  }, {
    key: "setBorder",
    value: function setBorder(row, column, place, remove) {
      var bordersMeta = this.hot.getCellMeta(row, column).borders;
      if (!bordersMeta || bordersMeta.border === void 0) {
        bordersMeta = createEmptyBorders(row, column);
      } else {
        bordersMeta = normalizeBorder(bordersMeta);
      }
      if (remove) {
        bordersMeta[place] = createSingleEmptyBorder();
        var hideCount = this.countHide(bordersMeta);
        if (hideCount === 4) {
          this.removeAllBorders(row, column);
        } else {
          var customSelectionsChecker = this.checkCustomSelectionsFromContextMenu(bordersMeta, place, remove);
          if (!customSelectionsChecker) {
            this.insertBorderIntoSettings(bordersMeta);
          }
          this.hot.setCellMeta(row, column, "borders", denormalizeBorder(bordersMeta));
        }
      } else {
        bordersMeta[place] = createDefaultCustomBorder();
        var _customSelectionsChecker = this.checkCustomSelectionsFromContextMenu(bordersMeta, place, remove);
        if (!_customSelectionsChecker) {
          this.insertBorderIntoSettings(bordersMeta);
        }
        this.hot.setCellMeta(row, column, "borders", denormalizeBorder(bordersMeta));
      }
    }
  }, {
    key: "prepareBorder",
    value: function prepareBorder(selected, place, remove) {
      var _this7 = this;
      arrayEach(selected, function(_ref) {
        var start = _ref.start, end = _ref.end;
        if (start.row === end.row && start.col === end.col) {
          if (place === "noBorders") {
            _this7.removeAllBorders(start.row, start.col);
          } else {
            _this7.setBorder(start.row, start.col, place, remove);
          }
        } else {
          switch (place) {
            case "noBorders":
              rangeEach(start.col, end.col, function(colIndex) {
                rangeEach(start.row, end.row, function(rowIndex) {
                  _this7.removeAllBorders(rowIndex, colIndex);
                });
              });
              break;
            case "top":
              rangeEach(start.col, end.col, function(topCol) {
                _this7.setBorder(start.row, topCol, place, remove);
              });
              break;
            case "bottom":
              rangeEach(start.col, end.col, function(bottomCol) {
                _this7.setBorder(end.row, bottomCol, place, remove);
              });
              break;
            case "start":
              rangeEach(start.row, end.row, function(rowStart) {
                _this7.setBorder(rowStart, start.col, place, remove);
              });
              break;
            case "end":
              rangeEach(start.row, end.row, function(rowEnd) {
                _this7.setBorder(rowEnd, end.col, place, remove);
              });
              break;
          }
        }
      });
    }
  }, {
    key: "createCustomBorders",
    value: function createCustomBorders(customBorders) {
      var _this8 = this;
      arrayEach(customBorders, function(customBorder) {
        var normCustomBorder = normalizeBorder(customBorder);
        if (customBorder.range) {
          _this8.prepareBorderFromCustomAddedRange(customBorder.range, normCustomBorder);
        } else {
          _this8.prepareBorderFromCustomAdded(customBorder.row, customBorder.col, normCustomBorder);
        }
      });
    }
  }, {
    key: "countHide",
    value: function countHide(border) {
      var top = border.top, bottom = border.bottom, start = border.start, end = border.end;
      var values = [top, bottom, start, end];
      return arrayReduce(values, function(accumulator, value) {
        var result = accumulator;
        if (value && value.hide) {
          result += 1;
        }
        return result;
      }, 0);
    }
  }, {
    key: "clearBordersFromSelectionSettings",
    value: function clearBordersFromSelectionSettings(borderId) {
      var index = arrayMap(this.hot.selection.highlight.customSelections, function(customSelection) {
        return customSelection.settings.id;
      }).indexOf(borderId);
      if (index > -1) {
        this.hot.selection.highlight.customSelections[index].clear();
      }
    }
  }, {
    key: "clearNullCellRange",
    value: function clearNullCellRange() {
      var _this9 = this;
      arrayEach(this.hot.selection.highlight.customSelections, function(customSelection, index) {
        if (customSelection.cellRange === null) {
          _this9.hot.selection.highlight.customSelections[index].destroy();
          _this9.hot.selection.highlight.customSelections.splice(index, 1);
          return false;
        }
      });
    }
  }, {
    key: "hideBorders",
    value: function hideBorders() {
      var _this10 = this;
      arrayEach(this.savedBorders, function(border) {
        _this10.clearBordersFromSelectionSettings(border.id);
        _this10.clearNullCellRange();
      });
    }
  }, {
    key: "spliceBorder",
    value: function spliceBorder(borderId) {
      var index = arrayMap(this.savedBorders, function(border) {
        return border.id;
      }).indexOf(borderId);
      if (index > -1) {
        this.savedBorders.splice(index, 1);
      }
    }
  }, {
    key: "checkSavedBorders",
    value: function checkSavedBorders(border) {
      var _this11 = this;
      var check = false;
      var hideCount = this.countHide(border);
      if (hideCount === 4) {
        this.spliceBorder(border.id);
        check = true;
      } else {
        arrayEach(this.savedBorders, function(savedBorder, index) {
          if (border.id === savedBorder.id) {
            _this11.savedBorders[index] = border;
            check = true;
            return false;
          }
        });
      }
      return check;
    }
  }, {
    key: "checkCustomSelectionsFromContextMenu",
    value: function checkCustomSelectionsFromContextMenu(border, place, remove) {
      var check = false;
      arrayEach(this.hot.selection.highlight.customSelections, function(customSelection) {
        if (border.id === customSelection.settings.id) {
          objectEach(customSelection.instanceBorders, function(borderObject) {
            borderObject.toggleHiddenClass(place, remove);
          });
          check = true;
          return false;
        }
      });
      return check;
    }
  }, {
    key: "checkCustomSelections",
    value: function checkCustomSelections(border, cellRange, place) {
      var hideCount = this.countHide(border);
      var check = false;
      if (hideCount === 4) {
        this.removeAllBorders(border.row, border.col);
        check = true;
      } else {
        arrayEach(this.hot.selection.highlight.customSelections, function(customSelection) {
          if (border.id === customSelection.settings.id) {
            customSelection.visualCellRange = cellRange;
            customSelection.commit();
            if (place) {
              objectEach(customSelection.instanceBorders, function(borderObject) {
                borderObject.changeBorderStyle(place, border);
              });
            }
            check = true;
            return false;
          }
        });
      }
      return check;
    }
  }, {
    key: "changeBorderSettings",
    value: function changeBorderSettings() {
      var customBorders = this.hot.getSettings()[PLUGIN_KEY$b];
      if (Array.isArray(customBorders)) {
        var bordersClone = deepClone(customBorders);
        this.checkSettingsCohesion(bordersClone);
        if (!bordersClone.length) {
          this.savedBorders = bordersClone;
        }
        this.createCustomBorders(bordersClone);
      } else if (customBorders !== void 0) {
        this.createCustomBorders(this.savedBorders);
      }
    }
  }, {
    key: "checkSettingsCohesion",
    value: function checkSettingsCohesion(customBorders) {
      var hasLeftOrRight = hasLeftRightTypeOptions(customBorders);
      var hasStartOrEnd = hasStartEndTypeOptions(customBorders);
      if (hasLeftOrRight && hasStartOrEnd) {
        throw new Error('The "left"/"right" and "start"/"end" options should not be used together. Please use only the option "start"/"end".');
      }
      if (this.hot.isRtl() && hasLeftOrRight) {
        throw new Error('The "left"/"right" properties are not supported for RTL. Please use option "start"/"end".');
      }
    }
  }, {
    key: "onAfterContextMenuDefaultOptions",
    value: function onAfterContextMenuDefaultOptions(defaultOptions) {
      if (!this.hot.getSettings()[PLUGIN_KEY$b]) {
        return;
      }
      defaultOptions.items.push({
        name: "---------"
      }, {
        key: "borders",
        name: function name() {
          return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_BORDERS);
        },
        disabled: function disabled() {
          return this.selection.isSelectedByCorner();
        },
        submenu: {
          items: [top(this), right(this), bottom(this), left(this), noBorders(this)]
        }
      });
    }
  }, {
    key: "onAfterInit",
    value: function onAfterInit() {
      this.changeBorderSettings();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get$j(_getPrototypeOf$l(CustomBorders2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$b;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$a;
    }
  }]);
  return CustomBorders2;
}(BasePlugin);

function _typeof$m(obj) {
  "@babel/helpers - typeof";
  return _typeof$m = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$m(obj);
}
function _classCallCheck$A(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$A(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$A(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$A(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$A(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$k() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$k = Reflect.get.bind();
  } else {
    _get$k = function _get2(target, property, receiver) {
      var base = _superPropBase$k(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$k.apply(this, arguments);
}
function _superPropBase$k(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$m(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$m(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$m(subClass, superClass);
}
function _setPrototypeOf$m(o, p) {
  _setPrototypeOf$m = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$m(o, p);
}
function _createSuper$m(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$m();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$m(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$m(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$m(this, result);
  };
}
function _possibleConstructorReturn$m(self, call) {
  if (call && (_typeof$m(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$m(self);
}
function _assertThisInitialized$m(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$m() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$m(o) {
  _getPrototypeOf$m = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$m(o);
}
var PLUGIN_KEY$c = "dragToScroll";
var PLUGIN_PRIORITY$b = 100;
var DragToScroll = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$m(DragToScroll2, _BasePlugin);
  var _super = _createSuper$m(DragToScroll2);
  function DragToScroll2(hotInstance) {
    var _this;
    _classCallCheck$A(this, DragToScroll2);
    _this = _super.call(this, hotInstance);
    _this.eventManager = new EventManager(_assertThisInitialized$m(_this));
    _this.boundaries = null;
    _this.callback = null;
    _this.listening = false;
    return _this;
  }
  _createClass$A(DragToScroll2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$c];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.addHook("afterOnCellMouseDown", function(event) {
        return _this2.setupListening(event);
      });
      this.addHook("afterOnCellCornerMouseDown", function(event) {
        return _this2.setupListening(event);
      });
      this.registerEvents();
      _get$k(_getPrototypeOf$m(DragToScroll2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      _get$k(_getPrototypeOf$m(DragToScroll2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.unregisterEvents();
      _get$k(_getPrototypeOf$m(DragToScroll2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "setBoundaries",
    value: function setBoundaries(boundaries) {
      this.boundaries = boundaries;
    }
  }, {
    key: "setCallback",
    value: function setCallback(callback) {
      this.callback = callback;
    }
  }, {
    key: "check",
    value: function check(x, y) {
      var diffX = 0;
      var diffY = 0;
      if (y < this.boundaries.top) {
        diffY = y - this.boundaries.top;
      } else if (y > this.boundaries.bottom) {
        diffY = y - this.boundaries.bottom;
      }
      if (x < this.boundaries.left) {
        diffX = x - this.boundaries.left;
      } else if (x > this.boundaries.right) {
        diffX = x - this.boundaries.right;
      }
      this.callback(diffX, diffY);
    }
  }, {
    key: "listen",
    value: function listen() {
      this.listening = true;
    }
  }, {
    key: "unlisten",
    value: function unlisten() {
      this.listening = false;
    }
  }, {
    key: "isListening",
    value: function isListening() {
      return this.listening;
    }
  }, {
    key: "registerEvents",
    value: function registerEvents() {
      var _this3 = this;
      var rootWindow = this.hot.rootWindow;
      var frame = rootWindow;
      while (frame) {
        this.eventManager.addEventListener(frame.document, "contextmenu", function() {
          return _this3.unlisten();
        });
        this.eventManager.addEventListener(frame.document, "mouseup", function() {
          return _this3.unlisten();
        });
        this.eventManager.addEventListener(frame.document, "mousemove", function(event) {
          return _this3.onMouseMove(event);
        });
        frame = getParentWindow(frame);
      }
    }
  }, {
    key: "unregisterEvents",
    value: function unregisterEvents() {
      this.eventManager.clear();
    }
  }, {
    key: "setupListening",
    value: function setupListening(event) {
      if (isRightClick(event)) {
        return;
      }
      var scrollHandler = this.hot.view._wt.wtTable.holder;
      if (scrollHandler === this.hot.rootWindow) {
        return;
      }
      this.setBoundaries(scrollHandler.getBoundingClientRect());
      this.setCallback(function(scrollX, scrollY) {
        if (scrollX < 0) {
          scrollHandler.scrollLeft -= 50;
        } else if (scrollX > 0) {
          scrollHandler.scrollLeft += 50;
        }
        if (scrollY < 0) {
          scrollHandler.scrollTop -= 20;
        } else if (scrollY > 0) {
          scrollHandler.scrollTop += 20;
        }
      });
      this.listen();
    }
  }, {
    key: "onMouseMove",
    value: function onMouseMove(event) {
      if (!this.isListening()) {
        return;
      }
      this.check(event.clientX, event.clientY);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get$k(_getPrototypeOf$m(DragToScroll2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$c;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$b;
    }
  }]);
  return DragToScroll2;
}(BasePlugin);

function _typeof$n(obj) {
  "@babel/helpers - typeof";
  return _typeof$n = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$n(obj);
}
function _classCallCheck$B(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$B(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$B(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$B(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$B(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$l() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$l = Reflect.get.bind();
  } else {
    _get$l = function _get2(target, property, receiver) {
      var base = _superPropBase$l(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$l.apply(this, arguments);
}
function _superPropBase$l(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$n(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$n(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$n(subClass, superClass);
}
function _setPrototypeOf$n(o, p) {
  _setPrototypeOf$n = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$n(o, p);
}
function _createSuper$n(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$n();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$n(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$n(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$n(this, result);
  };
}
function _possibleConstructorReturn$n(self, call) {
  if (call && (_typeof$n(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$n(self);
}
function _assertThisInitialized$n(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$n() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$n(o) {
  _getPrototypeOf$n = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$n(o);
}
Hooks.getSingleton().register("afterDropdownMenuDefaultOptions");
Hooks.getSingleton().register("beforeDropdownMenuShow");
Hooks.getSingleton().register("afterDropdownMenuShow");
Hooks.getSingleton().register("afterDropdownMenuHide");
Hooks.getSingleton().register("afterDropdownMenuExecute");
var PLUGIN_KEY$d = "dropdownMenu";
var PLUGIN_PRIORITY$c = 230;
var BUTTON_CLASS_NAME = "changeType";
var DropdownMenu = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$n(DropdownMenu2, _BasePlugin);
  var _super = _createSuper$n(DropdownMenu2);
  function DropdownMenu2(hotInstance) {
    var _this;
    _classCallCheck$B(this, DropdownMenu2);
    _this = _super.call(this, hotInstance);
    _this.eventManager = new EventManager(_assertThisInitialized$n(_this));
    _this.commandExecutor = new CommandExecutor(_this.hot);
    _this.itemsFactory = null;
    _this.menu = null;
    _this.hot.addHook("afterGetColHeader", function(col, TH) {
      return _this.onAfterGetColHeader(col, TH);
    });
    return _this;
  }
  _createClass$B(DropdownMenu2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return this.hot.getSettings()[PLUGIN_KEY$d];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.itemsFactory = new ItemsFactory(this.hot, DropdownMenu2.DEFAULT_ITEMS);
      var settings = this.hot.getSettings()[PLUGIN_KEY$d];
      var predefinedItems = {
        items: this.itemsFactory.getItems(settings)
      };
      this.registerEvents();
      if (typeof settings.callback === "function") {
        this.commandExecutor.setCommonCallback(settings.callback);
      }
      _get$l(_getPrototypeOf$n(DropdownMenu2.prototype), "enablePlugin", this).call(this);
      this.callOnPluginsReady(function() {
        _this2.hot.runHooks("afterDropdownMenuDefaultOptions", predefinedItems);
        _this2.itemsFactory.setPredefinedItems(predefinedItems.items);
        var menuItems = _this2.itemsFactory.getItems(settings);
        if (_this2.menu) {
          _this2.menu.destroy();
        }
        _this2.menu = new Menu(_this2.hot, {
          className: "htDropdownMenu",
          keepInViewport: true,
          container: settings.uiContainer || _this2.hot.rootDocument.body
        });
        _this2.hot.runHooks("beforeDropdownMenuSetItems", menuItems);
        _this2.menu.setMenuItems(menuItems);
        _this2.menu.addLocalHook("beforeOpen", function() {
          return _this2.onMenuBeforeOpen();
        });
        _this2.menu.addLocalHook("afterOpen", function() {
          return _this2.onMenuAfterOpen();
        });
        _this2.menu.addLocalHook("afterClose", function() {
          return _this2.onMenuAfterClose();
        });
        _this2.menu.addLocalHook("executeCommand", function() {
          var _this2$executeCommand;
          for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
          }
          return (_this2$executeCommand = _this2.executeCommand).call.apply(_this2$executeCommand, [_this2].concat(params));
        });
        arrayEach(menuItems, function(command) {
          return _this2.commandExecutor.registerCommand(command.key, command);
        });
      });
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      _get$l(_getPrototypeOf$n(DropdownMenu2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.close();
      if (this.menu) {
        this.menu.destroy();
      }
      _get$l(_getPrototypeOf$n(DropdownMenu2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "registerEvents",
    value: function registerEvents() {
      var _this3 = this;
      this.eventManager.addEventListener(this.hot.rootElement, "click", function(event) {
        return _this3.onTableClick(event);
      });
    }
  }, {
    key: "open",
    value: function open(position) {
      if (!this.menu) {
        return;
      }
      this.menu.open();
      if (position.width) {
        this.menu.setOffset("left", position.width);
      }
      this.menu.setPosition(position);
    }
  }, {
    key: "close",
    value: function close() {
      if (!this.menu) {
        return;
      }
      this.menu.close();
    }
  }, {
    key: "executeCommand",
    value: function executeCommand(commandName) {
      var _this$commandExecutor;
      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        params[_key2 - 1] = arguments[_key2];
      }
      (_this$commandExecutor = this.commandExecutor).execute.apply(_this$commandExecutor, [commandName].concat(params));
    }
  }, {
    key: "setListening",
    value: function setListening() {
      var listen = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      if (this.menu.isOpened()) {
        if (listen) {
          this.menu.hotMenu.listen();
        } else {
          this.menu.hotMenu.unlisten();
        }
      }
    }
  }, {
    key: "onTableClick",
    value: function onTableClick(event) {
      event.stopPropagation();
      if (hasClass(event.target, BUTTON_CLASS_NAME) && !this.menu.isOpened()) {
        var offsetTop = 0;
        var offsetLeft = 0;
        if (this.hot.rootDocument !== this.menu.container.ownerDocument) {
          var frameElement = this.hot.rootWindow.frameElement;
          var _frameElement$getBoun = frameElement.getBoundingClientRect(), top = _frameElement$getBoun.top, left = _frameElement$getBoun.left;
          offsetTop = top;
          offsetLeft = left;
        }
        var rect = event.target.getBoundingClientRect();
        this.open({
          left: rect.left + offsetLeft,
          top: rect.top + event.target.offsetHeight + 3 + offsetTop,
          width: rect.width,
          height: rect.height
        });
      }
    }
  }, {
    key: "onAfterGetColHeader",
    value: function onAfterGetColHeader(col, TH) {
      var headerRow = TH.parentNode;
      if (!headerRow) {
        return;
      }
      var headerRowList = headerRow.parentNode.childNodes;
      var level = Array.prototype.indexOf.call(headerRowList, headerRow);
      if (col < 0 || level !== headerRowList.length - 1) {
        return;
      }
      var existingButton = TH.querySelector(".".concat(BUTTON_CLASS_NAME));
      if (this.enabled && existingButton) {
        return;
      }
      if (!this.enabled) {
        if (existingButton) {
          existingButton.parentNode.removeChild(existingButton);
        }
        return;
      }
      var button = this.hot.rootDocument.createElement("button");
      button.className = BUTTON_CLASS_NAME;
      button.type = "button";
      button.onclick = function() {
        return false;
      };
      TH.firstChild.insertBefore(button, TH.firstChild.firstChild);
    }
  }, {
    key: "onMenuBeforeOpen",
    value: function onMenuBeforeOpen() {
      this.hot.runHooks("beforeDropdownMenuShow", this);
    }
  }, {
    key: "onMenuAfterOpen",
    value: function onMenuAfterOpen() {
      this.hot.runHooks("afterDropdownMenuShow", this);
    }
  }, {
    key: "onMenuAfterClose",
    value: function onMenuAfterClose() {
      this.hot.listen();
      this.hot.runHooks("afterDropdownMenuHide", this);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.close();
      if (this.menu) {
        this.menu.destroy();
      }
      _get$l(_getPrototypeOf$n(DropdownMenu2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$d;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$c;
    }
  }, {
    key: "PLUGIN_DEPS",
    get: function get() {
      return ["plugin:AutoColumnSize"];
    }
  }, {
    key: "DEFAULT_ITEMS",
    get: function get() {
      return [KEY$3, KEY$4, KEY, KEY$7, KEY, KEY$2, KEY, KEY$5, KEY, KEY$1];
    }
  }]);
  return DropdownMenu2;
}(BasePlugin);
DropdownMenu.SEPARATOR = {
  name: KEY
};

function _slicedToArray$a(arr, i) {
  return _arrayWithHoles$b(arr) || _iterableToArrayLimit$a(arr, i) || _unsupportedIterableToArray$e(arr, i) || _nonIterableRest$b();
}
function _nonIterableRest$b() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$e(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$e(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$e(o, minLen);
}
function _arrayLikeToArray$e(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$a(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$b(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck$C(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$C(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$C(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$C(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$C(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var DataProvider = /* @__PURE__ */ function() {
  function DataProvider2(hotInstance) {
    _classCallCheck$C(this, DataProvider2);
    this.hot = hotInstance;
    this.options = {};
  }
  _createClass$C(DataProvider2, [{
    key: "setOptions",
    value: function setOptions(options) {
      this.options = options;
    }
  }, {
    key: "getData",
    value: function getData() {
      var _this = this;
      var _this$_getDataRange = this._getDataRange(), startRow = _this$_getDataRange.startRow, startCol = _this$_getDataRange.startCol, endRow = _this$_getDataRange.endRow, endCol = _this$_getDataRange.endCol;
      var options = this.options;
      var data = [];
      rangeEach(startRow, endRow, function(rowIndex) {
        var row = [];
        if (!options.exportHiddenRows && _this._isHiddenRow(rowIndex)) {
          return;
        }
        rangeEach(startCol, endCol, function(colIndex) {
          if (!options.exportHiddenColumns && _this._isHiddenColumn(colIndex)) {
            return;
          }
          row.push(_this.hot.getDataAtCell(rowIndex, colIndex));
        });
        data.push(row);
      });
      return data;
    }
  }, {
    key: "getRowHeaders",
    value: function getRowHeaders() {
      var _this2 = this;
      var headers = [];
      if (this.options.rowHeaders) {
        var _this$_getDataRange2 = this._getDataRange(), startRow = _this$_getDataRange2.startRow, endRow = _this$_getDataRange2.endRow;
        var rowHeaders = this.hot.getRowHeader();
        rangeEach(startRow, endRow, function(row) {
          if (!_this2.options.exportHiddenRows && _this2._isHiddenRow(row)) {
            return;
          }
          headers.push(rowHeaders[row]);
        });
      }
      return headers;
    }
  }, {
    key: "getColumnHeaders",
    value: function getColumnHeaders() {
      var _this3 = this;
      var headers = [];
      if (this.options.columnHeaders) {
        var _this$_getDataRange3 = this._getDataRange(), startCol = _this$_getDataRange3.startCol, endCol = _this$_getDataRange3.endCol;
        var colHeaders = this.hot.getColHeader();
        rangeEach(startCol, endCol, function(column) {
          if (!_this3.options.exportHiddenColumns && _this3._isHiddenColumn(column)) {
            return;
          }
          headers.push(colHeaders[column]);
        });
      }
      return headers;
    }
  }, {
    key: "_getDataRange",
    value: function _getDataRange() {
      var cols = this.hot.countCols() - 1;
      var rows = this.hot.countRows() - 1;
      var _this$options$range = _slicedToArray$a(this.options.range, 4), _this$options$range$ = _this$options$range[0], startRow = _this$options$range$ === void 0 ? 0 : _this$options$range$, _this$options$range$2 = _this$options$range[1], startCol = _this$options$range$2 === void 0 ? 0 : _this$options$range$2, _this$options$range$3 = _this$options$range[2], endRow = _this$options$range$3 === void 0 ? rows : _this$options$range$3, _this$options$range$4 = _this$options$range[3], endCol = _this$options$range$4 === void 0 ? cols : _this$options$range$4;
      startRow = Math.max(startRow, 0);
      startCol = Math.max(startCol, 0);
      endRow = Math.min(endRow, rows);
      endCol = Math.min(endCol, cols);
      return {
        startRow,
        startCol,
        endRow,
        endCol
      };
    }
  }, {
    key: "_isHiddenRow",
    value: function _isHiddenRow(row) {
      return this.hot.rowIndexMapper.isHidden(this.hot.toPhysicalRow(row));
    }
  }, {
    key: "_isHiddenColumn",
    value: function _isHiddenColumn(column) {
      return this.hot.columnIndexMapper.isHidden(this.hot.toPhysicalColumn(column));
    }
  }]);
  return DataProvider2;
}();

function _classCallCheck$D(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$D(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$D(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$D(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$D(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var BaseType = /* @__PURE__ */ function() {
  function BaseType2(dataProvider, options) {
    _classCallCheck$D(this, BaseType2);
    this.dataProvider = dataProvider;
    this.options = this._mergeOptions(options);
    this.dataProvider.setOptions(this.options);
  }
  _createClass$D(BaseType2, [{
    key: "_mergeOptions",
    value: function _mergeOptions(options) {
      var _options = clone(this.constructor.DEFAULT_OPTIONS);
      var date = new Date();
      _options = extend(clone(BaseType2.DEFAULT_OPTIONS), _options);
      _options = extend(_options, options);
      _options.filename = substitute(_options.filename, {
        YYYY: date.getFullYear(),
        MM: "".concat(date.getMonth() + 1).padStart(2, "0"),
        DD: "".concat(date.getDate()).padStart(2, "0")
      });
      return _options;
    }
  }], [{
    key: "DEFAULT_OPTIONS",
    get: function get() {
      return {
        mimeType: "text/plain",
        fileExtension: "txt",
        filename: "Handsontable [YYYY]-[MM]-[DD]",
        encoding: "utf-8",
        bom: false,
        columnHeaders: false,
        rowHeaders: false,
        exportHiddenColumns: false,
        exportHiddenRows: false,
        range: []
      };
    }
  }]);
  return BaseType2;
}();

function _typeof$o(obj) {
  "@babel/helpers - typeof";
  return _typeof$o = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$o(obj);
}
function _classCallCheck$E(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$E(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$E(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$E(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$E(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _inherits$o(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$o(subClass, superClass);
}
function _setPrototypeOf$o(o, p) {
  _setPrototypeOf$o = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$o(o, p);
}
function _createSuper$o(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$o();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$o(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$o(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$o(this, result);
  };
}
function _possibleConstructorReturn$o(self, call) {
  if (call && (_typeof$o(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$o(self);
}
function _assertThisInitialized$o(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$o() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$o(o) {
  _getPrototypeOf$o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$o(o);
}
var CHAR_CARRIAGE_RETURN = String.fromCharCode(13);
var CHAR_DOUBLE_QUOTES = String.fromCharCode(34);
var CHAR_LINE_FEED = String.fromCharCode(10);
var Csv = /* @__PURE__ */ function(_BaseType) {
  _inherits$o(Csv2, _BaseType);
  var _super = _createSuper$o(Csv2);
  function Csv2() {
    _classCallCheck$E(this, Csv2);
    return _super.apply(this, arguments);
  }
  _createClass$E(Csv2, [{
    key: "export",
    value: function _export() {
      var _this = this;
      var options = this.options;
      var data = this.dataProvider.getData();
      var columnHeaders = this.dataProvider.getColumnHeaders();
      var hasColumnHeaders = columnHeaders.length > 0;
      var rowHeaders = this.dataProvider.getRowHeaders();
      var hasRowHeaders = rowHeaders.length > 0;
      var result = options.bom ? String.fromCharCode(65279) : "";
      if (hasColumnHeaders) {
        columnHeaders = arrayMap(columnHeaders, function(value) {
          return _this._escapeCell(value, true);
        });
        if (hasRowHeaders) {
          result += options.columnDelimiter;
        }
        result += columnHeaders.join(options.columnDelimiter);
        result += options.rowDelimiter;
      }
      arrayEach(data, function(value, index) {
        if (index > 0) {
          result += options.rowDelimiter;
        }
        if (hasRowHeaders) {
          result += _this._escapeCell(rowHeaders[index]) + options.columnDelimiter;
        }
        result += value.map(function(cellValue) {
          return _this._escapeCell(cellValue);
        }).join(options.columnDelimiter);
      });
      return result;
    }
  }, {
    key: "_escapeCell",
    value: function _escapeCell(value) {
      var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var escapedValue = stringify(value);
      if (escapedValue !== "" && (force || escapedValue.indexOf(CHAR_CARRIAGE_RETURN) >= 0 || escapedValue.indexOf(CHAR_DOUBLE_QUOTES) >= 0 || escapedValue.indexOf(CHAR_LINE_FEED) >= 0 || escapedValue.indexOf(this.options.columnDelimiter) >= 0)) {
        escapedValue = escapedValue.replace(new RegExp('"', "g"), '""');
        escapedValue = '"'.concat(escapedValue, '"');
      }
      return escapedValue;
    }
  }], [{
    key: "DEFAULT_OPTIONS",
    get: function get() {
      return {
        mimeType: "text/csv",
        fileExtension: "csv",
        bom: true,
        columnDelimiter: ",",
        rowDelimiter: "\r\n"
      };
    }
  }]);
  return Csv2;
}(BaseType);

function _defineProperty$9(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
var TYPE_CSV = "csv";
var EXPORT_TYPES = _defineProperty$9({}, TYPE_CSV, Csv);
function typeFactory(type, dataProvider, options) {
  if (typeof EXPORT_TYPES[type] === "function") {
    return new EXPORT_TYPES[type](dataProvider, options);
  }
  return null;
}

function _typeof$p(obj) {
  "@babel/helpers - typeof";
  return _typeof$p = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$p(obj);
}
function _classCallCheck$F(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$F(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$F(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$F(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$F(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _inherits$p(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$p(subClass, superClass);
}
function _setPrototypeOf$p(o, p) {
  _setPrototypeOf$p = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$p(o, p);
}
function _createSuper$p(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$p();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$p(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$p(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$p(this, result);
  };
}
function _possibleConstructorReturn$p(self, call) {
  if (call && (_typeof$p(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$p(self);
}
function _assertThisInitialized$p(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$p() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$p(o) {
  _getPrototypeOf$p = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$p(o);
}
var PLUGIN_KEY$e = "exportFile";
var PLUGIN_PRIORITY$d = 240;
var ExportFile = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$p(ExportFile2, _BasePlugin);
  var _super = _createSuper$p(ExportFile2);
  function ExportFile2() {
    _classCallCheck$F(this, ExportFile2);
    return _super.apply(this, arguments);
  }
  _createClass$F(ExportFile2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return true;
    }
  }, {
    key: "exportAsString",
    value: function exportAsString(format) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return this._createTypeFormatter(format, options).export();
    }
  }, {
    key: "exportAsBlob",
    value: function exportAsBlob(format) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return this._createBlob(this._createTypeFormatter(format, options));
    }
  }, {
    key: "downloadFile",
    value: function downloadFile(format) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var _this$hot = this.hot, rootDocument = _this$hot.rootDocument, rootWindow = _this$hot.rootWindow;
      var formatter = this._createTypeFormatter(format, options);
      var blob = this._createBlob(formatter);
      var URL = rootWindow.URL || rootWindow.webkitURL;
      var a = rootDocument.createElement("a");
      var name = "".concat(formatter.options.filename, ".").concat(formatter.options.fileExtension);
      if (a.download !== void 0) {
        var url = URL.createObjectURL(blob);
        a.style.display = "none";
        a.setAttribute("href", url);
        a.setAttribute("download", name);
        rootDocument.body.appendChild(a);
        a.dispatchEvent(new MouseEvent("click"));
        rootDocument.body.removeChild(a);
        setTimeout(function() {
          URL.revokeObjectURL(url);
        }, 100);
      } else if (navigator.msSaveOrOpenBlob) {
        navigator.msSaveOrOpenBlob(blob, name);
      }
    }
  }, {
    key: "_createTypeFormatter",
    value: function _createTypeFormatter(format) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (!EXPORT_TYPES[format]) {
        throw new Error('Export format type "'.concat(format, '" is not supported.'));
      }
      return typeFactory(format, new DataProvider(this.hot), options);
    }
  }, {
    key: "_createBlob",
    value: function _createBlob(typeFormatter) {
      var formatter = null;
      if (typeof Blob !== "undefined") {
        formatter = new Blob([typeFormatter.export()], {
          type: "".concat(typeFormatter.options.mimeType, ";charset=").concat(typeFormatter.options.encoding)
        });
      }
      return formatter;
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$e;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$d;
    }
  }]);
  return ExportFile2;
}(BasePlugin);

function _classCallCheck$G(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$G(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$G(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$G(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$G(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var BaseComponent = /* @__PURE__ */ function() {
  function BaseComponent2(hotInstance, _ref) {
    var id = _ref.id, _ref$stateless = _ref.stateless, stateless = _ref$stateless === void 0 ? true : _ref$stateless;
    _classCallCheck$G(this, BaseComponent2);
    this.hot = hotInstance;
    this.id = id;
    this.elements = [];
    this.hidden = false;
    this.stateId = "Filters.component.".concat(this.id);
    this.state = stateless ? null : this.hot.columnIndexMapper.registerMap(this.stateId, new LinkedPhysicalIndexToValueMap());
  }
  _createClass$G(BaseComponent2, [{
    key: "reset",
    value: function reset() {
      arrayEach(this.elements, function(ui) {
        return ui.reset();
      });
    }
  }, {
    key: "hide",
    value: function hide() {
      this.hidden = true;
    }
  }, {
    key: "show",
    value: function show() {
      this.hidden = false;
    }
  }, {
    key: "isHidden",
    value: function isHidden() {
      return this.hot === null || this.hidden;
    }
  }, {
    key: "restoreState",
    value: function restoreState(physicalColumn) {
      if (this.state) {
        this.setState(this.state.getValueAtIndex(physicalColumn));
      }
    }
  }, {
    key: "setState",
    value: function setState() {
      throw new Error("The state setting logic is not implemented");
    }
  }, {
    key: "saveState",
    value: function saveState(physicalColumn) {
      if (this.state) {
        this.state.setValueAtIndex(physicalColumn, this.getState());
      }
    }
  }, {
    key: "getState",
    value: function getState() {
      throw new Error("The state gathering logic is not implemented");
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.hot.columnIndexMapper.unregisterMap(this.stateId);
      this.clearLocalHooks();
      arrayEach(this.elements, function(ui) {
        return ui.destroy();
      });
      this.state = null;
      this.elements = null;
      this.hot = null;
    }
  }]);
  return BaseComponent2;
}();
mixin(BaseComponent, localHooks);

var conditions = {};
function getCondition(name, args) {
  if (!conditions[name]) {
    throw Error('Filter condition "'.concat(name, '" does not exist.'));
  }
  var _conditions$name = conditions[name], condition = _conditions$name.condition, descriptor = _conditions$name.descriptor;
  var conditionArguments = args;
  if (descriptor.inputValuesDecorator) {
    conditionArguments = descriptor.inputValuesDecorator(conditionArguments);
  }
  return function(dataRow) {
    return condition.apply(dataRow.meta.instance, [].concat([dataRow], [conditionArguments]));
  };
}
function getConditionDescriptor(name) {
  if (!conditions[name]) {
    throw Error('Filter condition "'.concat(name, '" does not exist.'));
  }
  return conditions[name].descriptor;
}
function registerCondition(name, condition, descriptor) {
  descriptor.key = name;
  conditions[name] = {
    condition,
    descriptor
  };
}

var CONDITION_NAME = "none";
function condition() {
  return true;
}
registerCondition(CONDITION_NAME, condition, {
  name: FILTERS_CONDITIONS_NONE,
  inputsCount: 0,
  showOperators: false
});

var CONDITION_NAME$1 = "empty";
function condition$1(dataRow) {
  return isEmpty(dataRow.value);
}
registerCondition(CONDITION_NAME$1, condition$1, {
  name: FILTERS_CONDITIONS_EMPTY,
  inputsCount: 0,
  showOperators: true
});

var CONDITION_NAME$2 = "not_empty";
function condition$2(dataRow, inputValues) {
  return !getCondition(CONDITION_NAME$1, inputValues)(dataRow);
}
registerCondition(CONDITION_NAME$2, condition$2, {
  name: FILTERS_CONDITIONS_NOT_EMPTY,
  inputsCount: 0,
  showOperators: true
});

function _slicedToArray$b(arr, i) {
  return _arrayWithHoles$c(arr) || _iterableToArrayLimit$b(arr, i) || _unsupportedIterableToArray$f(arr, i) || _nonIterableRest$c();
}
function _nonIterableRest$c() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$f(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$f(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$f(o, minLen);
}
function _arrayLikeToArray$f(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$b(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$c(arr) {
  if (Array.isArray(arr))
    return arr;
}
var CONDITION_NAME$3 = "eq";
function condition$3(dataRow, _ref) {
  var _ref2 = _slicedToArray$b(_ref, 1), value = _ref2[0];
  return stringify(dataRow.value).toLocaleLowerCase(dataRow.meta.locale) === stringify(value);
}
registerCondition(CONDITION_NAME$3, condition$3, {
  name: FILTERS_CONDITIONS_EQUAL,
  inputsCount: 1,
  showOperators: true
});

var CONDITION_NAME$4 = "neq";
function condition$4(dataRow, inputValues) {
  return !getCondition(CONDITION_NAME$3, inputValues)(dataRow);
}
registerCondition(CONDITION_NAME$4, condition$4, {
  name: FILTERS_CONDITIONS_NOT_EQUAL,
  inputsCount: 1,
  showOperators: true
});

function _slicedToArray$c(arr, i) {
  return _arrayWithHoles$d(arr) || _iterableToArrayLimit$c(arr, i) || _unsupportedIterableToArray$g(arr, i) || _nonIterableRest$d();
}
function _nonIterableRest$d() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$g(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$g(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$g(o, minLen);
}
function _arrayLikeToArray$g(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$c(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$d(arr) {
  if (Array.isArray(arr))
    return arr;
}
var CONDITION_NAME$5 = "gt";
function condition$5(dataRow, _ref) {
  var _ref2 = _slicedToArray$c(_ref, 1), value = _ref2[0];
  var conditionValue = value;
  if (dataRow.meta.type === "numeric") {
    conditionValue = parseFloat(conditionValue, 10);
  }
  return dataRow.value > conditionValue;
}
registerCondition(CONDITION_NAME$5, condition$5, {
  name: FILTERS_CONDITIONS_GREATER_THAN,
  inputsCount: 1,
  showOperators: true
});

function _slicedToArray$d(arr, i) {
  return _arrayWithHoles$e(arr) || _iterableToArrayLimit$d(arr, i) || _unsupportedIterableToArray$h(arr, i) || _nonIterableRest$e();
}
function _nonIterableRest$e() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$h(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$h(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$h(o, minLen);
}
function _arrayLikeToArray$h(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$d(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$e(arr) {
  if (Array.isArray(arr))
    return arr;
}
var CONDITION_NAME$6 = "gte";
function condition$6(dataRow, _ref) {
  var _ref2 = _slicedToArray$d(_ref, 1), value = _ref2[0];
  var conditionValue = value;
  if (dataRow.meta.type === "numeric") {
    conditionValue = parseFloat(conditionValue, 10);
  }
  return dataRow.value >= conditionValue;
}
registerCondition(CONDITION_NAME$6, condition$6, {
  name: FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL,
  inputsCount: 1,
  showOperators: true
});

function _slicedToArray$e(arr, i) {
  return _arrayWithHoles$f(arr) || _iterableToArrayLimit$e(arr, i) || _unsupportedIterableToArray$i(arr, i) || _nonIterableRest$f();
}
function _nonIterableRest$f() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$i(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$i(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$i(o, minLen);
}
function _arrayLikeToArray$i(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$e(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$f(arr) {
  if (Array.isArray(arr))
    return arr;
}
var CONDITION_NAME$7 = "lt";
function condition$7(dataRow, _ref) {
  var _ref2 = _slicedToArray$e(_ref, 1), value = _ref2[0];
  var conditionValue = value;
  if (dataRow.meta.type === "numeric") {
    conditionValue = parseFloat(conditionValue, 10);
  }
  return dataRow.value < conditionValue;
}
registerCondition(CONDITION_NAME$7, condition$7, {
  name: FILTERS_CONDITIONS_LESS_THAN,
  inputsCount: 1,
  showOperators: true
});

function _slicedToArray$f(arr, i) {
  return _arrayWithHoles$g(arr) || _iterableToArrayLimit$f(arr, i) || _unsupportedIterableToArray$j(arr, i) || _nonIterableRest$g();
}
function _nonIterableRest$g() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$j(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$j(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$j(o, minLen);
}
function _arrayLikeToArray$j(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$f(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$g(arr) {
  if (Array.isArray(arr))
    return arr;
}
var CONDITION_NAME$8 = "lte";
function condition$8(dataRow, _ref) {
  var _ref2 = _slicedToArray$f(_ref, 1), value = _ref2[0];
  var conditionValue = value;
  if (dataRow.meta.type === "numeric") {
    conditionValue = parseFloat(conditionValue, 10);
  }
  return dataRow.value <= conditionValue;
}
registerCondition(CONDITION_NAME$8, condition$8, {
  name: FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL,
  inputsCount: 1,
  showOperators: true
});

function _slicedToArray$g(arr, i) {
  return _arrayWithHoles$h(arr) || _iterableToArrayLimit$g(arr, i) || _unsupportedIterableToArray$k(arr, i) || _nonIterableRest$h();
}
function _nonIterableRest$h() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$k(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$k(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$k(o, minLen);
}
function _arrayLikeToArray$k(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$g(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$h(arr) {
  if (Array.isArray(arr))
    return arr;
}
var CONDITION_NAME$9 = "date_after";
function condition$9(dataRow, _ref) {
  var _ref2 = _slicedToArray$g(_ref, 1), value = _ref2[0];
  var date = hooks(dataRow.value, dataRow.meta.dateFormat);
  var inputDate = hooks(value, dataRow.meta.dateFormat);
  if (!date.isValid() || !inputDate.isValid()) {
    return false;
  }
  return date.diff(inputDate) >= 0;
}
registerCondition(CONDITION_NAME$9, condition$9, {
  name: FILTERS_CONDITIONS_AFTER,
  inputsCount: 1,
  showOperators: true
});

function _slicedToArray$h(arr, i) {
  return _arrayWithHoles$i(arr) || _iterableToArrayLimit$h(arr, i) || _unsupportedIterableToArray$l(arr, i) || _nonIterableRest$i();
}
function _nonIterableRest$i() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$l(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$l(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$l(o, minLen);
}
function _arrayLikeToArray$l(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$h(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$i(arr) {
  if (Array.isArray(arr))
    return arr;
}
var CONDITION_NAME$a = "date_before";
function condition$a(dataRow, _ref) {
  var _ref2 = _slicedToArray$h(_ref, 1), value = _ref2[0];
  var date = hooks(dataRow.value, dataRow.meta.dateFormat);
  var inputDate = hooks(value, dataRow.meta.dateFormat);
  if (!date.isValid() || !inputDate.isValid()) {
    return false;
  }
  return date.diff(inputDate) <= 0;
}
registerCondition(CONDITION_NAME$a, condition$a, {
  name: FILTERS_CONDITIONS_BEFORE,
  inputsCount: 1,
  showOperators: true
});

function _slicedToArray$i(arr, i) {
  return _arrayWithHoles$j(arr) || _iterableToArrayLimit$i(arr, i) || _unsupportedIterableToArray$m(arr, i) || _nonIterableRest$j();
}
function _nonIterableRest$j() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$m(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$m(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$m(o, minLen);
}
function _arrayLikeToArray$m(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$i(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$j(arr) {
  if (Array.isArray(arr))
    return arr;
}
var CONDITION_NAME$b = "between";
function condition$b(dataRow, _ref) {
  var _ref2 = _slicedToArray$i(_ref, 2), from = _ref2[0], to = _ref2[1];
  var fromValue = from;
  var toValue = to;
  if (dataRow.meta.type === "numeric") {
    var _from = parseFloat(fromValue, 10);
    var _to = parseFloat(toValue, 10);
    fromValue = Math.min(_from, _to);
    toValue = Math.max(_from, _to);
  } else if (dataRow.meta.type === "date") {
    var dateBefore = getCondition(CONDITION_NAME$a, [toValue]);
    var dateAfter = getCondition(CONDITION_NAME$9, [fromValue]);
    return dateBefore(dataRow) && dateAfter(dataRow);
  }
  return dataRow.value >= fromValue && dataRow.value <= toValue;
}
registerCondition(CONDITION_NAME$b, condition$b, {
  name: FILTERS_CONDITIONS_BETWEEN,
  inputsCount: 2,
  showOperators: true
});

var CONDITION_NAME$c = "not_between";
function condition$c(dataRow, inputValues) {
  return !getCondition(CONDITION_NAME$b, inputValues)(dataRow);
}
registerCondition(CONDITION_NAME$c, condition$c, {
  name: FILTERS_CONDITIONS_NOT_BETWEEN,
  inputsCount: 2,
  showOperators: true
});

function _slicedToArray$j(arr, i) {
  return _arrayWithHoles$k(arr) || _iterableToArrayLimit$j(arr, i) || _unsupportedIterableToArray$n(arr, i) || _nonIterableRest$k();
}
function _nonIterableRest$k() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$n(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$n(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$n(o, minLen);
}
function _arrayLikeToArray$n(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$j(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$k(arr) {
  if (Array.isArray(arr))
    return arr;
}
var CONDITION_NAME$d = "begins_with";
function condition$d(dataRow, _ref) {
  var _ref2 = _slicedToArray$j(_ref, 1), value = _ref2[0];
  return stringify(dataRow.value).toLocaleLowerCase(dataRow.meta.locale).startsWith(stringify(value));
}
registerCondition(CONDITION_NAME$d, condition$d, {
  name: FILTERS_CONDITIONS_BEGINS_WITH,
  inputsCount: 1,
  showOperators: true
});

var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;







// eslint-disable-next-line es/no-string-prototype-endswith -- safe
var nativeEndsWith = functionUncurryThis(''.endsWith);
var slice = functionUncurryThis(''.slice);
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegexpLogic('endsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG =  !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.endsWith` method
// https://tc39.es/ecma262/#sec-string.prototype.endswith
_export({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = toString_1(requireObjectCoercible(this));
    notARegexp(searchString);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = that.length;
    var end = endPosition === undefined ? len : min(toLength(endPosition), len);
    var search = toString_1(searchString);
    return nativeEndsWith
      ? nativeEndsWith(that, search, end)
      : slice(that, end - search.length, end) === search;
  }
});

function _slicedToArray$k(arr, i) {
  return _arrayWithHoles$l(arr) || _iterableToArrayLimit$k(arr, i) || _unsupportedIterableToArray$o(arr, i) || _nonIterableRest$l();
}
function _nonIterableRest$l() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$o(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$o(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$o(o, minLen);
}
function _arrayLikeToArray$o(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$k(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$l(arr) {
  if (Array.isArray(arr))
    return arr;
}
var CONDITION_NAME$e = "ends_with";
function condition$e(dataRow, _ref) {
  var _ref2 = _slicedToArray$k(_ref, 1), value = _ref2[0];
  return stringify(dataRow.value).toLocaleLowerCase(dataRow.meta.locale).endsWith(stringify(value));
}
registerCondition(CONDITION_NAME$e, condition$e, {
  name: FILTERS_CONDITIONS_ENDS_WITH,
  inputsCount: 1,
  showOperators: true
});

function _slicedToArray$l(arr, i) {
  return _arrayWithHoles$m(arr) || _iterableToArrayLimit$l(arr, i) || _unsupportedIterableToArray$p(arr, i) || _nonIterableRest$m();
}
function _nonIterableRest$m() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$p(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$p(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$p(o, minLen);
}
function _arrayLikeToArray$p(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$l(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$m(arr) {
  if (Array.isArray(arr))
    return arr;
}
var CONDITION_NAME$f = "contains";
function condition$f(dataRow, _ref) {
  var _ref2 = _slicedToArray$l(_ref, 1), value = _ref2[0];
  return stringify(dataRow.value).toLocaleLowerCase(dataRow.meta.locale).indexOf(stringify(value)) >= 0;
}
registerCondition(CONDITION_NAME$f, condition$f, {
  name: FILTERS_CONDITIONS_CONTAINS,
  inputsCount: 1,
  showOperators: true
});

var CONDITION_NAME$g = "not_contains";
function condition$g(dataRow, inputValues) {
  return !getCondition(CONDITION_NAME$f, inputValues)(dataRow);
}
registerCondition(CONDITION_NAME$g, condition$g, {
  name: FILTERS_CONDITIONS_NOT_CONTAIN,
  inputsCount: 1,
  showOperators: true
});

var CONDITION_NAME$h = "date_tomorrow";
function condition$h(dataRow) {
  var date = hooks(dataRow.value, dataRow.meta.dateFormat);
  if (!date.isValid()) {
    return false;
  }
  return date.isSame(hooks().subtract(-1, "days").startOf("day"), "d");
}
registerCondition(CONDITION_NAME$h, condition$h, {
  name: FILTERS_CONDITIONS_TOMORROW,
  inputsCount: 0
});

var CONDITION_NAME$i = "date_today";
function condition$i(dataRow) {
  var date = hooks(dataRow.value, dataRow.meta.dateFormat);
  if (!date.isValid()) {
    return false;
  }
  return date.isSame(hooks().startOf("day"), "d");
}
registerCondition(CONDITION_NAME$i, condition$i, {
  name: FILTERS_CONDITIONS_TODAY,
  inputsCount: 0
});

var CONDITION_NAME$j = "date_yesterday";
function condition$j(dataRow) {
  var date = hooks(dataRow.value, dataRow.meta.dateFormat);
  if (!date.isValid()) {
    return false;
  }
  return date.isSame(hooks().subtract(1, "days").startOf("day"), "d");
}
registerCondition(CONDITION_NAME$j, condition$j, {
  name: FILTERS_CONDITIONS_YESTERDAY,
  inputsCount: 0
});

var sortCompare = getComparisonFunction();
function toVisualValue(value, defaultEmptyValue) {
  var visualValue = value;
  if (visualValue === "") {
    visualValue = "(".concat(defaultEmptyValue, ")");
  }
  return visualValue;
}
var SUPPORT_SET_CONSTRUCTOR = new Set([1]).has(1);
var SUPPORT_FAST_DEDUPE = SUPPORT_SET_CONSTRUCTOR && typeof Array.from === "function";
function createArrayAssertion(initialData) {
  var dataset = initialData;
  if (SUPPORT_SET_CONSTRUCTOR) {
    dataset = new Set(dataset);
  }
  return function(value) {
    var result;
    if (SUPPORT_SET_CONSTRUCTOR) {
      result = dataset.has(value);
    } else {
      result = !!~dataset.indexOf(value);
    }
    return result;
  };
}
function toEmptyString(value) {
  return value === null || value === void 0 ? "" : value;
}
function unifyColumnValues(values) {
  var unifiedValues = values;
  if (SUPPORT_FAST_DEDUPE) {
    unifiedValues = Array.from(new Set(unifiedValues));
  } else {
    unifiedValues = arrayUnique(unifiedValues);
  }
  unifiedValues = unifiedValues.sort(function(a, b) {
    if (typeof a === "number" && typeof b === "number") {
      return a - b;
    }
    if (a === b) {
      return 0;
    }
    return a > b ? 1 : -1;
  });
  return unifiedValues;
}
function intersectValues(base, selected, defaultEmptyValue, callback) {
  var result = [];
  var same = base === selected;
  var selectedItemsAssertion;
  if (!same) {
    selectedItemsAssertion = createArrayAssertion(selected);
  }
  arrayEach(base, function(value) {
    var checked = false;
    if (same || selectedItemsAssertion(value)) {
      checked = true;
    }
    var item = {
      checked,
      value,
      visualValue: toVisualValue(value, defaultEmptyValue)
    };
    if (callback) {
      callback(item);
    }
    result.push(item);
  });
  return result;
}

function _slicedToArray$m(arr, i) {
  return _arrayWithHoles$n(arr) || _iterableToArrayLimit$m(arr, i) || _unsupportedIterableToArray$q(arr, i) || _nonIterableRest$n();
}
function _nonIterableRest$n() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$q(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$q(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$q(o, minLen);
}
function _arrayLikeToArray$q(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$m(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$n(arr) {
  if (Array.isArray(arr))
    return arr;
}
var CONDITION_NAME$k = "by_value";
function condition$k(dataRow, _ref) {
  var _ref2 = _slicedToArray$m(_ref, 1), value = _ref2[0];
  return value(dataRow.value);
}
registerCondition(CONDITION_NAME$k, condition$k, {
  name: "By value",
  inputsCount: 0,
  inputValuesDecorator: function inputValuesDecorator(_ref3) {
    var _ref4 = _slicedToArray$m(_ref3, 1), data = _ref4[0];
    return [createArrayAssertion(data)];
  },
  showOperators: false
});

var operations = {};
function getOperationFunc(id) {
  if (!operations[id]) {
    throw Error('Operation with id "'.concat(id, '" does not exist.'));
  }
  var func = operations[id].func;
  return function(conditions, value) {
    return func(conditions, value);
  };
}
function getOperationName(id) {
  return operations[id].name;
}
function registerOperation(id, name, func) {
  operations[id] = {
    name,
    func
  };
}

var OPERATION_ID = "conjunction";
var SHORT_NAME_FOR_COMPONENT = FILTERS_LABELS_CONJUNCTION;
function operationResult(conditions, value) {
  return conditions.every(function(condition) {
    return condition.func(value);
  });
}
registerOperation(OPERATION_ID, SHORT_NAME_FOR_COMPONENT, operationResult);

var OPERATION_ID$1 = "disjunction";
var SHORT_NAME_FOR_COMPONENT$1 = FILTERS_LABELS_DISJUNCTION;
function operationResult$1(conditions, value) {
  return conditions.some(function(condition) {
    return condition.func(value);
  });
}
registerOperation(OPERATION_ID$1, SHORT_NAME_FOR_COMPONENT$1, operationResult$1);

var OPERATION_ID$2 = "disjunctionWithExtraCondition";
var SHORT_NAME_FOR_COMPONENT$2 = FILTERS_LABELS_DISJUNCTION;
function operationResult$2(conditions, value) {
  if (conditions.length < 3) {
    throw Error("Operation doesn't work on less then three conditions.");
  }
  return conditions.slice(0, conditions.length - 1).some(function(condition) {
    return condition.func(value);
  }) && conditions[conditions.length - 1].func(value);
}
registerOperation(OPERATION_ID$2, SHORT_NAME_FOR_COMPONENT$2, operationResult$2);

var _TYPES;
function _defineProperty$a(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
var TYPE_NUMERIC = "numeric";
var TYPE_TEXT = "text";
var TYPE_DATE = "date";
var TYPES = (_TYPES = {}, _defineProperty$a(_TYPES, TYPE_NUMERIC, [CONDITION_NAME, KEY, CONDITION_NAME$1, CONDITION_NAME$2, KEY, CONDITION_NAME$3, CONDITION_NAME$4, KEY, CONDITION_NAME$5, CONDITION_NAME$6, CONDITION_NAME$7, CONDITION_NAME$8, CONDITION_NAME$b, CONDITION_NAME$c]), _defineProperty$a(_TYPES, TYPE_TEXT, [CONDITION_NAME, KEY, CONDITION_NAME$1, CONDITION_NAME$2, KEY, CONDITION_NAME$3, CONDITION_NAME$4, KEY, CONDITION_NAME$d, CONDITION_NAME$e, KEY, CONDITION_NAME$f, CONDITION_NAME$g]), _defineProperty$a(_TYPES, TYPE_DATE, [CONDITION_NAME, KEY, CONDITION_NAME$1, CONDITION_NAME$2, KEY, CONDITION_NAME$3, CONDITION_NAME$4, KEY, CONDITION_NAME$a, CONDITION_NAME$9, CONDITION_NAME$b, KEY, CONDITION_NAME$h, CONDITION_NAME$i, CONDITION_NAME$j]), _TYPES);
function getOptionsList(type) {
  var items = [];
  var typeName = type;
  if (!TYPES[typeName]) {
    typeName = TYPE_TEXT;
  }
  arrayEach(TYPES[typeName], function(typeValue) {
    var option;
    if (typeValue === KEY) {
      option = {
        name: KEY
      };
    } else {
      option = clone(getConditionDescriptor(typeValue));
    }
    items.push(option);
  });
  return items;
}

function _classCallCheck$H(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$H(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$H(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$H(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$H(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var STATE_BUILT = "built";
var STATE_BUILDING = "building";
var EVENTS_TO_REGISTER = ["click", "input", "keydown", "keypress", "keyup", "focus", "blur", "change"];
var BaseUI = /* @__PURE__ */ function() {
  function BaseUI2(hotInstance, options) {
    _classCallCheck$H(this, BaseUI2);
    this.hot = hotInstance;
    this.eventManager = new EventManager(this);
    this.options = extend(BaseUI2.DEFAULTS, options);
    this._element = this.hot.rootDocument.createElement(this.options.wrapIt ? "div" : this.options.tagName);
    this.buildState = null;
  }
  _createClass$H(BaseUI2, [{
    key: "setValue",
    value: function setValue(value) {
      this.options.value = value;
      this.update();
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.options.value;
    }
  }, {
    key: "element",
    get: function get() {
      if (this.buildState === STATE_BUILDING) {
        return this._element;
      }
      if (this.buildState === STATE_BUILT) {
        this.update();
        return this._element;
      }
      this.buildState = STATE_BUILDING;
      this.build();
      this.buildState = STATE_BUILT;
      return this._element;
    }
  }, {
    key: "isBuilt",
    value: function isBuilt() {
      return this.buildState === STATE_BUILT;
    }
  }, {
    key: "translateIfPossible",
    value: function translateIfPossible(value) {
      if (typeof value === "string" && value.startsWith(FILTERS_NAMESPACE)) {
        return this.hot.getTranslatedPhrase(value);
      }
      return value;
    }
  }, {
    key: "build",
    value: function build() {
      var _this = this;
      var registerEvent = function registerEvent2(element2, eventName) {
        _this.eventManager.addEventListener(element2, eventName, function(event) {
          return _this.runLocalHooks(eventName, event, _this);
        });
      };
      if (!this.buildState) {
        this.buildState = STATE_BUILDING;
      }
      if (this.options.className) {
        addClass(this._element, this.options.className);
      }
      if (this.options.children.length) {
        arrayEach(this.options.children, function(element2) {
          return _this._element.appendChild(element2.element);
        });
      } else if (this.options.wrapIt) {
        var element = this.hot.rootDocument.createElement(this.options.tagName);
        objectEach(this.options, function(value, key) {
          if (element[key] !== void 0 && key !== "className" && key !== "tagName" && key !== "children") {
            element[key] = _this.translateIfPossible(value);
          }
        });
        this._element.appendChild(element);
        arrayEach(EVENTS_TO_REGISTER, function(eventName) {
          return registerEvent(element, eventName);
        });
      } else {
        arrayEach(EVENTS_TO_REGISTER, function(eventName) {
          return registerEvent(_this._element, eventName);
        });
      }
    }
  }, {
    key: "update",
    value: function update() {
    }
  }, {
    key: "reset",
    value: function reset() {
      this.options.value = "";
      this.update();
    }
  }, {
    key: "show",
    value: function show() {
      this.element.style.display = "";
    }
  }, {
    key: "hide",
    value: function hide() {
      this.element.style.display = "none";
    }
  }, {
    key: "focus",
    value: function focus() {
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.eventManager.destroy();
      this.eventManager = null;
      this.hot = null;
      if (this._element.parentNode) {
        this._element.parentNode.removeChild(this._element);
      }
      this._element = null;
    }
  }], [{
    key: "DEFAULTS",
    get: function get() {
      return clone({
        className: "",
        value: "",
        tagName: "div",
        children: [],
        wrapIt: true
      });
    }
  }]);
  return BaseUI2;
}();
mixin(BaseUI, localHooks);

function _typeof$q(obj) {
  "@babel/helpers - typeof";
  return _typeof$q = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$q(obj);
}
function _classCallCheck$I(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$I(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$I(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$I(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$I(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$m() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$m = Reflect.get.bind();
  } else {
    _get$m = function _get2(target, property, receiver) {
      var base = _superPropBase$m(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$m.apply(this, arguments);
}
function _superPropBase$m(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$q(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$q(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$q(subClass, superClass);
}
function _setPrototypeOf$q(o, p) {
  _setPrototypeOf$q = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$q(o, p);
}
function _createSuper$q(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$q();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$q(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$q(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$q(this, result);
  };
}
function _possibleConstructorReturn$q(self, call) {
  if (call && (_typeof$q(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$q(self);
}
function _assertThisInitialized$q(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$q() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$q(o) {
  _getPrototypeOf$q = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$q(o);
}
var privatePool$5 = new WeakMap();
var InputUI = /* @__PURE__ */ function(_BaseUI) {
  _inherits$q(InputUI2, _BaseUI);
  var _super = _createSuper$q(InputUI2);
  function InputUI2(hotInstance, options) {
    var _this;
    _classCallCheck$I(this, InputUI2);
    _this = _super.call(this, hotInstance, extend(InputUI2.DEFAULTS, options));
    privatePool$5.set(_assertThisInitialized$q(_this), {});
    _this.registerHooks();
    return _this;
  }
  _createClass$I(InputUI2, [{
    key: "registerHooks",
    value: function registerHooks() {
      var _this2 = this;
      this.addLocalHook("click", function() {
        return _this2.onClick();
      });
      this.addLocalHook("keyup", function(event) {
        return _this2.onKeyup(event);
      });
    }
  }, {
    key: "build",
    value: function build() {
      _get$m(_getPrototypeOf$q(InputUI2.prototype), "build", this).call(this);
      var priv = privatePool$5.get(this);
      var icon = this.hot.rootDocument.createElement("div");
      priv.input = this._element.firstChild;
      addClass(this._element, "htUIInput");
      addClass(icon, "htUIInputIcon");
      this._element.appendChild(icon);
      this.update();
    }
  }, {
    key: "update",
    value: function update() {
      if (!this.isBuilt()) {
        return;
      }
      var input = privatePool$5.get(this).input;
      input.type = this.options.type;
      input.placeholder = this.translateIfPossible(this.options.placeholder);
      input.value = this.translateIfPossible(this.options.value);
    }
  }, {
    key: "focus",
    value: function focus() {
      if (this.isBuilt()) {
        privatePool$5.get(this).input.focus();
      }
    }
  }, {
    key: "onClick",
    value: function onClick() {
    }
  }, {
    key: "onKeyup",
    value: function onKeyup(event) {
      this.options.value = event.target.value;
    }
  }], [{
    key: "DEFAULTS",
    get: function get() {
      return clone({
        placeholder: "",
        type: "text",
        tagName: "input"
      });
    }
  }]);
  return InputUI2;
}(BaseUI);

function _typeof$r(obj) {
  "@babel/helpers - typeof";
  return _typeof$r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$r(obj);
}
function _classCallCheck$J(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$J(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$J(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$J(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$J(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$n() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$n = Reflect.get.bind();
  } else {
    _get$n = function _get2(target, property, receiver) {
      var base = _superPropBase$n(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$n.apply(this, arguments);
}
function _superPropBase$n(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$r(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$r(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$r(subClass, superClass);
}
function _setPrototypeOf$r(o, p) {
  _setPrototypeOf$r = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$r(o, p);
}
function _createSuper$r(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$r();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$r(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$r(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$r(this, result);
  };
}
function _possibleConstructorReturn$r(self, call) {
  if (call && (_typeof$r(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$r(self);
}
function _assertThisInitialized$r(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$r() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$r(o) {
  _getPrototypeOf$r = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$r(o);
}
var privatePool$6 = new WeakMap();
var SelectUI = /* @__PURE__ */ function(_BaseUI) {
  _inherits$r(SelectUI2, _BaseUI);
  var _super = _createSuper$r(SelectUI2);
  function SelectUI2(hotInstance, options) {
    var _this;
    _classCallCheck$J(this, SelectUI2);
    _this = _super.call(this, hotInstance, extend(SelectUI2.DEFAULTS, options));
    privatePool$6.set(_assertThisInitialized$r(_this), {});
    _this.menu = null;
    _this.items = [];
    _this.registerHooks();
    return _this;
  }
  _createClass$J(SelectUI2, [{
    key: "registerHooks",
    value: function registerHooks() {
      var _this2 = this;
      this.addLocalHook("click", function() {
        return _this2.onClick();
      });
    }
  }, {
    key: "setItems",
    value: function setItems(items) {
      this.items = this.translateNames(items);
      if (this.menu) {
        this.menu.setMenuItems(this.items);
      }
    }
  }, {
    key: "translateNames",
    value: function translateNames(items) {
      var _this3 = this;
      arrayEach(items, function(item) {
        item.name = _this3.translateIfPossible(item.name);
      });
      return items;
    }
  }, {
    key: "build",
    value: function build() {
      var _this4 = this;
      _get$n(_getPrototypeOf$r(SelectUI2.prototype), "build", this).call(this);
      this.menu = new Menu(this.hot, {
        className: "htSelectUI htFiltersConditionsMenu",
        keepInViewport: false,
        standalone: true,
        container: this.options.menuContainer
      });
      this.menu.setMenuItems(this.items);
      var caption = new BaseUI(this.hot, {
        className: "htUISelectCaption"
      });
      var dropdown = new BaseUI(this.hot, {
        className: "htUISelectDropdown"
      });
      var priv = privatePool$6.get(this);
      priv.caption = caption;
      priv.captionElement = caption.element;
      priv.dropdown = dropdown;
      arrayEach([caption, dropdown], function(element) {
        return _this4._element.appendChild(element.element);
      });
      this.menu.addLocalHook("select", function(command) {
        return _this4.onMenuSelect(command);
      });
      this.menu.addLocalHook("afterClose", function() {
        return _this4.onMenuClosed();
      });
      this.update();
    }
  }, {
    key: "update",
    value: function update() {
      if (!this.isBuilt()) {
        return;
      }
      var conditionName;
      if (this.options.value) {
        conditionName = this.options.value.name;
      } else {
        conditionName = this.menu.hot.getTranslatedPhrase(FILTERS_CONDITIONS_NONE);
      }
      privatePool$6.get(this).captionElement.textContent = conditionName;
      _get$n(_getPrototypeOf$r(SelectUI2.prototype), "update", this).call(this);
    }
  }, {
    key: "openOptions",
    value: function openOptions() {
      var rect = this.element.getBoundingClientRect();
      if (this.menu) {
        this.menu.open();
        this.menu.setPosition({
          left: this.hot.isLtr() ? rect.left - 5 : rect.left - 31,
          top: rect.top - 1,
          width: rect.width,
          height: rect.height
        });
      }
    }
  }, {
    key: "closeOptions",
    value: function closeOptions() {
      if (this.menu) {
        this.menu.close();
      }
    }
  }, {
    key: "onMenuSelect",
    value: function onMenuSelect(command) {
      if (command.name !== KEY) {
        this.options.value = command;
        this.update();
        this.runLocalHooks("select", this.options.value);
      }
    }
  }, {
    key: "onMenuClosed",
    value: function onMenuClosed() {
      this.runLocalHooks("afterClose");
    }
  }, {
    key: "onClick",
    value: function onClick() {
      this.openOptions();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.menu) {
        this.menu.destroy();
        this.menu = null;
      }
      var _privatePool$get = privatePool$6.get(this), caption = _privatePool$get.caption, dropdown = _privatePool$get.dropdown;
      if (caption) {
        caption.destroy();
      }
      if (dropdown) {
        dropdown.destroy();
      }
      _get$n(_getPrototypeOf$r(SelectUI2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "DEFAULTS",
    get: function get() {
      return clone({
        className: "htUISelect",
        wrapIt: false
      });
    }
  }]);
  return SelectUI2;
}(BaseUI);

function _typeof$s(obj) {
  "@babel/helpers - typeof";
  return _typeof$s = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$s(obj);
}
function _classCallCheck$K(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$K(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$K(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$K(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$K(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$o() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$o = Reflect.get.bind();
  } else {
    _get$o = function _get2(target, property, receiver) {
      var base = _superPropBase$o(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$o.apply(this, arguments);
}
function _superPropBase$o(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$s(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$s(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$s(subClass, superClass);
}
function _setPrototypeOf$s(o, p) {
  _setPrototypeOf$s = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$s(o, p);
}
function _createSuper$s(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$s();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$s(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$s(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$s(this, result);
  };
}
function _possibleConstructorReturn$s(self, call) {
  if (call && (_typeof$s(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$s(self);
}
function _assertThisInitialized$s(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$s() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$s(o) {
  _getPrototypeOf$s = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$s(o);
}
var ConditionComponent = /* @__PURE__ */ function(_BaseComponent) {
  _inherits$s(ConditionComponent2, _BaseComponent);
  var _super = _createSuper$s(ConditionComponent2);
  function ConditionComponent2(hotInstance, options) {
    var _this;
    _classCallCheck$K(this, ConditionComponent2);
    _this = _super.call(this, hotInstance, {
      id: options.id,
      stateless: false
    });
    _this.name = options.name;
    _this.addSeparator = options.addSeparator;
    _this.elements.push(new SelectUI(_this.hot, {
      menuContainer: options.menuContainer
    }));
    _this.elements.push(new InputUI(_this.hot, {
      placeholder: FILTERS_BUTTONS_PLACEHOLDER_VALUE
    }));
    _this.elements.push(new InputUI(_this.hot, {
      placeholder: FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE
    }));
    _this.registerHooks();
    return _this;
  }
  _createClass$K(ConditionComponent2, [{
    key: "registerHooks",
    value: function registerHooks() {
      var _this2 = this;
      this.getSelectElement().addLocalHook("select", function(command) {
        return _this2.onConditionSelect(command);
      });
      this.getSelectElement().addLocalHook("afterClose", function() {
        return _this2.onSelectUIClosed();
      });
      arrayEach(this.getInputElements(), function(input) {
        input.addLocalHook("keydown", function(event) {
          return _this2.onInputKeyDown(event);
        });
      });
    }
  }, {
    key: "setState",
    value: function setState(value) {
      var _this3 = this;
      this.reset();
      if (!value) {
        return;
      }
      var copyOfCommand = clone(value.command);
      if (copyOfCommand.name.startsWith(FILTERS_CONDITIONS_NAMESPACE)) {
        copyOfCommand.name = this.hot.getTranslatedPhrase(copyOfCommand.name);
      }
      this.getSelectElement().setValue(copyOfCommand);
      arrayEach(value.args, function(arg, index) {
        if (index > copyOfCommand.inputsCount - 1) {
          return false;
        }
        var element = _this3.getInputElement(index);
        element.setValue(arg);
        element[copyOfCommand.inputsCount > index ? "show" : "hide"]();
        if (!index) {
          setTimeout(function() {
            return element.focus();
          }, 10);
        }
      });
    }
  }, {
    key: "getState",
    value: function getState() {
      var command = this.getSelectElement().getValue() || getConditionDescriptor(CONDITION_NAME);
      var args = [];
      arrayEach(this.getInputElements(), function(element, index) {
        if (command.inputsCount > index) {
          args.push(element.getValue());
        }
      });
      return {
        command,
        args
      };
    }
  }, {
    key: "updateState",
    value: function updateState(condition, column) {
      var command = condition ? getConditionDescriptor(condition.name) : getConditionDescriptor(CONDITION_NAME);
      this.state.setValueAtIndex(column, {
        command,
        args: condition ? condition.args : []
      });
      if (!condition) {
        arrayEach(this.getInputElements(), function(element) {
          return element.setValue(null);
        });
      }
    }
  }, {
    key: "getSelectElement",
    value: function getSelectElement() {
      return this.elements.filter(function(element) {
        return element instanceof SelectUI;
      })[0];
    }
  }, {
    key: "getInputElement",
    value: function getInputElement() {
      var index = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      return this.getInputElements()[index];
    }
  }, {
    key: "getInputElements",
    value: function getInputElements() {
      return this.elements.filter(function(element) {
        return element instanceof InputUI;
      });
    }
  }, {
    key: "getMenuItemDescriptor",
    value: function getMenuItemDescriptor() {
      var _this4 = this;
      return {
        key: this.id,
        name: this.name,
        isCommand: false,
        disableSelection: true,
        hidden: function hidden() {
          return _this4.isHidden();
        },
        renderer: function renderer(hot, wrapper, row, col, prop, value) {
          addClass(wrapper.parentNode, "htFiltersMenuCondition");
          if (_this4.addSeparator) {
            addClass(wrapper.parentNode, "border");
          }
          var label = _this4.hot.rootDocument.createElement("div");
          addClass(label, "htFiltersMenuLabel");
          label.textContent = value;
          wrapper.appendChild(label);
          if (!wrapper.parentNode.hasAttribute("ghost-table")) {
            arrayEach(_this4.elements, function(ui) {
              return wrapper.appendChild(ui.element);
            });
          }
          return wrapper;
        }
      };
    }
  }, {
    key: "reset",
    value: function reset() {
      var selectedColumn = this.hot.getPlugin("filters").getSelectedColumn();
      var items = [getConditionDescriptor(CONDITION_NAME)];
      if (selectedColumn !== null) {
        var visualIndex = selectedColumn.visualIndex;
        items = getOptionsList(this.hot.getDataType(0, visualIndex, this.hot.countRows(), visualIndex));
      }
      arrayEach(this.getInputElements(), function(element) {
        return element.hide();
      });
      this.getSelectElement().setItems(items);
      _get$o(_getPrototypeOf$s(ConditionComponent2.prototype), "reset", this).call(this);
      this.getSelectElement().setValue(items[0]);
    }
  }, {
    key: "onConditionSelect",
    value: function onConditionSelect(command) {
      arrayEach(this.getInputElements(), function(element, index) {
        element[command.inputsCount > index ? "show" : "hide"]();
        if (index === 0) {
          setTimeout(function() {
            return element.focus();
          }, 10);
        }
      });
      this.runLocalHooks("change", command);
    }
  }, {
    key: "onSelectUIClosed",
    value: function onSelectUIClosed() {
      this.runLocalHooks("afterClose");
    }
  }, {
    key: "onInputKeyDown",
    value: function onInputKeyDown(event) {
      if (isKey(event.keyCode, "ENTER")) {
        this.runLocalHooks("accept");
        stopImmediatePropagation(event);
      } else if (isKey(event.keyCode, "ESCAPE")) {
        this.runLocalHooks("cancel");
        stopImmediatePropagation(event);
      }
    }
  }]);
  return ConditionComponent2;
}(BaseComponent);

function _typeof$t(obj) {
  "@babel/helpers - typeof";
  return _typeof$t = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$t(obj);
}
function _classCallCheck$L(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$L(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$L(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$L(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$L(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$p() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$p = Reflect.get.bind();
  } else {
    _get$p = function _get2(target, property, receiver) {
      var base = _superPropBase$p(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$p.apply(this, arguments);
}
function _superPropBase$p(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$t(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$t(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$t(subClass, superClass);
}
function _setPrototypeOf$t(o, p) {
  _setPrototypeOf$t = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$t(o, p);
}
function _createSuper$t(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$t();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$t(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$t(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$t(this, result);
  };
}
function _possibleConstructorReturn$t(self, call) {
  if (call && (_typeof$t(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$t(self);
}
function _assertThisInitialized$t(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$t() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$t(o) {
  _getPrototypeOf$t = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$t(o);
}
var privatePool$7 = new WeakMap();
var RadioInputUI = /* @__PURE__ */ function(_BaseUI) {
  _inherits$t(RadioInputUI2, _BaseUI);
  var _super = _createSuper$t(RadioInputUI2);
  function RadioInputUI2(hotInstance, options) {
    var _this;
    _classCallCheck$L(this, RadioInputUI2);
    _this = _super.call(this, hotInstance, extend(RadioInputUI2.DEFAULTS, options));
    privatePool$7.set(_assertThisInitialized$t(_this), {});
    return _this;
  }
  _createClass$L(RadioInputUI2, [{
    key: "build",
    value: function build() {
      _get$p(_getPrototypeOf$t(RadioInputUI2.prototype), "build", this).call(this);
      var priv = privatePool$7.get(this);
      priv.input = this._element.firstChild;
      var label = this.hot.rootDocument.createElement("label");
      label.textContent = this.translateIfPossible(this.options.label.textContent);
      label.htmlFor = this.translateIfPossible(this.options.label.htmlFor);
      priv.label = label;
      this._element.appendChild(label);
      this.update();
    }
  }, {
    key: "update",
    value: function update() {
      if (!this.isBuilt()) {
        return;
      }
      var priv = privatePool$7.get(this);
      priv.input.checked = this.options.checked;
      priv.label.textContent = this.translateIfPossible(this.options.label.textContent);
    }
  }, {
    key: "isChecked",
    value: function isChecked() {
      return this.options.checked;
    }
  }, {
    key: "setChecked",
    value: function setChecked() {
      var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      this.options.checked = value;
      this.update();
    }
  }, {
    key: "focus",
    value: function focus() {
      if (this.isBuilt()) {
        privatePool$7.get(this).input.focus();
      }
    }
  }], [{
    key: "DEFAULTS",
    get: function get() {
      return clone({
        type: "radio",
        tagName: "input",
        className: "htUIRadio",
        label: {}
      });
    }
  }]);
  return RadioInputUI2;
}(BaseUI);

function _typeof$u(obj) {
  "@babel/helpers - typeof";
  return _typeof$u = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$u(obj);
}
var _templateObject$1;
function _taggedTemplateLiteral$1(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {raw: {value: Object.freeze(raw)}}));
}
function _classCallCheck$M(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$M(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$M(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$M(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$M(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _inherits$u(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$u(subClass, superClass);
}
function _setPrototypeOf$u(o, p) {
  _setPrototypeOf$u = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$u(o, p);
}
function _createSuper$u(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$u();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$u(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$u(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$u(this, result);
  };
}
function _possibleConstructorReturn$u(self, call) {
  if (call && (_typeof$u(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$u(self);
}
function _assertThisInitialized$u(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$u() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$u(o) {
  _getPrototypeOf$u = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$u(o);
}
var SELECTED_AT_START_ELEMENT_INDEX = 0;
var OperatorsComponent = /* @__PURE__ */ function(_BaseComponent) {
  _inherits$u(OperatorsComponent2, _BaseComponent);
  var _super = _createSuper$u(OperatorsComponent2);
  function OperatorsComponent2(hotInstance, options) {
    var _this;
    _classCallCheck$M(this, OperatorsComponent2);
    _this = _super.call(this, hotInstance, {
      id: options.id,
      stateless: false
    });
    _this.name = options.name;
    _this.buildOperatorsElement();
    return _this;
  }
  _createClass$M(OperatorsComponent2, [{
    key: "getMenuItemDescriptor",
    value: function getMenuItemDescriptor() {
      var _this2 = this;
      return {
        key: this.id,
        name: this.name,
        isCommand: false,
        disableSelection: true,
        hidden: function hidden() {
          return _this2.isHidden();
        },
        renderer: function renderer(hot, wrapper) {
          addClass(wrapper.parentNode, "htFiltersMenuOperators");
          if (!wrapper.parentNode.hasAttribute("ghost-table")) {
            arrayEach(_this2.elements, function(ui) {
              return wrapper.appendChild(ui.element);
            });
          }
          return wrapper;
        }
      };
    }
  }, {
    key: "buildOperatorsElement",
    value: function buildOperatorsElement() {
      var _this3 = this;
      var operationKeys = [OPERATION_ID, OPERATION_ID$1];
      arrayEach(operationKeys, function(operation) {
        var radioInput = new RadioInputUI(_this3.hot, {
          name: "operator",
          label: {
            htmlFor: operation,
            textContent: getOperationName(operation)
          },
          value: operation,
          checked: operation === operationKeys[SELECTED_AT_START_ELEMENT_INDEX],
          id: operation
        });
        radioInput.addLocalHook("change", function(event) {
          return _this3.onRadioInputChange(event);
        });
        _this3.elements.push(radioInput);
      });
    }
  }, {
    key: "setChecked",
    value: function setChecked(searchedIndex) {
      if (this.elements.length < searchedIndex) {
        throw Error(toSingleLine(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral$1(["Radio button with index ", " doesn't exist."])), searchedIndex));
      }
      arrayEach(this.elements, function(element, index) {
        element.setChecked(index === searchedIndex);
      });
    }
  }, {
    key: "getActiveOperationId",
    value: function getActiveOperationId() {
      var operationElement = this.elements.find(function(element) {
        return element instanceof RadioInputUI && element.isChecked();
      });
      if (operationElement) {
        return operationElement.getValue();
      }
      return OPERATION_ID;
    }
  }, {
    key: "getState",
    value: function getState() {
      return this.getActiveOperationId();
    }
  }, {
    key: "setState",
    value: function setState(value) {
      this.reset();
      if (value && this.getActiveOperationId() !== value) {
        arrayEach(this.elements, function(element) {
          element.setChecked(element.getValue() === value);
        });
      }
    }
  }, {
    key: "updateState",
    value: function updateState() {
      var operationId = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : OPERATION_ID;
      var column = arguments.length > 1 ? arguments[1] : void 0;
      var selectedOperationId = operationId;
      if (selectedOperationId === OPERATION_ID$2) {
        selectedOperationId = OPERATION_ID$1;
      }
      this.state.setValueAtIndex(column, selectedOperationId);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.setChecked(SELECTED_AT_START_ELEMENT_INDEX);
    }
  }, {
    key: "onRadioInputChange",
    value: function onRadioInputChange(event) {
      this.setState(event.target.value);
    }
  }]);
  return OperatorsComponent2;
}(BaseComponent);

var quot = /"/g;
var replace = functionUncurryThis(''.replace);

// `CreateHTML` abstract operation
// https://tc39.es/ecma262/#sec-createhtml
var createHtml = function (string, tag, attribute, value) {
  var S = toString_1(requireObjectCoercible(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + replace(toString_1(value), quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};

// check the existence of a method, lowercase
// of a tag and escaping quotes in arguments
var stringHtmlForced = function (METHOD_NAME) {
  return fails(function () {
    var test = ''[METHOD_NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  });
};

// `String.prototype.link` method
// https://tc39.es/ecma262/#sec-string.prototype.link
_export({ target: 'String', proto: true, forced: stringHtmlForced('link') }, {
  link: function link(url) {
    return createHtml(this, 'a', 'href', url);
  }
});

function _typeof$v(obj) {
  "@babel/helpers - typeof";
  return _typeof$v = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$v(obj);
}
function _classCallCheck$N(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$N(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$N(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$N(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$N(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$q() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$q = Reflect.get.bind();
  } else {
    _get$q = function _get2(target, property, receiver) {
      var base = _superPropBase$q(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$q.apply(this, arguments);
}
function _superPropBase$q(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$v(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$v(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$v(subClass, superClass);
}
function _setPrototypeOf$v(o, p) {
  _setPrototypeOf$v = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$v(o, p);
}
function _createSuper$v(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$v();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$v(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$v(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$v(this, result);
  };
}
function _possibleConstructorReturn$v(self, call) {
  if (call && (_typeof$v(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$v(self);
}
function _assertThisInitialized$v(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$v() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$v(o) {
  _getPrototypeOf$v = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$v(o);
}
var privatePool$8 = new WeakMap();
var LinkUI = /* @__PURE__ */ function(_BaseUI) {
  _inherits$v(LinkUI2, _BaseUI);
  var _super = _createSuper$v(LinkUI2);
  function LinkUI2(hotInstance, options) {
    var _this;
    _classCallCheck$N(this, LinkUI2);
    _this = _super.call(this, hotInstance, extend(LinkUI2.DEFAULTS, options));
    privatePool$8.set(_assertThisInitialized$v(_this), {});
    return _this;
  }
  _createClass$N(LinkUI2, [{
    key: "build",
    value: function build() {
      _get$q(_getPrototypeOf$v(LinkUI2.prototype), "build", this).call(this);
      var priv = privatePool$8.get(this);
      priv.link = this._element.firstChild;
    }
  }, {
    key: "update",
    value: function update() {
      if (!this.isBuilt()) {
        return;
      }
      privatePool$8.get(this).link.textContent = this.translateIfPossible(this.options.textContent);
    }
  }], [{
    key: "DEFAULTS",
    get: function get() {
      return clone({
        href: "#",
        tagName: "a"
      });
    }
  }]);
  return LinkUI2;
}(BaseUI);

function _typeof$w(obj) {
  "@babel/helpers - typeof";
  return _typeof$w = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$w(obj);
}
function _toConsumableArray$4(arr) {
  return _arrayWithoutHoles$4(arr) || _iterableToArray$5(arr) || _unsupportedIterableToArray$r(arr) || _nonIterableSpread$4();
}
function _nonIterableSpread$4() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$r(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$r(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$r(o, minLen);
}
function _iterableToArray$5(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$4(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$r(arr);
}
function _arrayLikeToArray$r(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _classCallCheck$O(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$O(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$O(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$O(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$O(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$r() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$r = Reflect.get.bind();
  } else {
    _get$r = function _get2(target, property, receiver) {
      var base = _superPropBase$r(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$r.apply(this, arguments);
}
function _superPropBase$r(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$w(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$w(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$w(subClass, superClass);
}
function _setPrototypeOf$w(o, p) {
  _setPrototypeOf$w = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$w(o, p);
}
function _createSuper$w(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$w();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$w(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$w(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$w(this, result);
  };
}
function _possibleConstructorReturn$w(self, call) {
  if (call && (_typeof$w(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$w(self);
}
function _assertThisInitialized$w(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$w() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$w(o) {
  _getPrototypeOf$w = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$w(o);
}
var privatePool$9 = new WeakMap();
var SHORTCUTS_GROUP$4 = "multipleSelect.itemBox";
var MultipleSelectUI = /* @__PURE__ */ function(_BaseUI) {
  _inherits$w(MultipleSelectUI2, _BaseUI);
  var _super = _createSuper$w(MultipleSelectUI2);
  function MultipleSelectUI2(hotInstance, options) {
    var _this;
    _classCallCheck$O(this, MultipleSelectUI2);
    _this = _super.call(this, hotInstance, extend(MultipleSelectUI2.DEFAULTS, options));
    privatePool$9.set(_assertThisInitialized$w(_this), {});
    _this.searchInput = new InputUI(_this.hot, {
      placeholder: FILTERS_BUTTONS_PLACEHOLDER_SEARCH,
      className: "htUIMultipleSelectSearch"
    });
    _this.selectAllUI = new LinkUI(_this.hot, {
      textContent: FILTERS_BUTTONS_SELECT_ALL,
      className: "htUISelectAll"
    });
    _this.clearAllUI = new LinkUI(_this.hot, {
      textContent: FILTERS_BUTTONS_CLEAR,
      className: "htUIClearAll"
    });
    _this.items = [];
    _this.itemsBox = null;
    _this.registerHooks();
    return _this;
  }
  _createClass$O(MultipleSelectUI2, [{
    key: "registerHooks",
    value: function registerHooks() {
      var _this2 = this;
      this.searchInput.addLocalHook("keydown", function(event) {
        return _this2.onInputKeyDown(event);
      });
      this.searchInput.addLocalHook("input", function(event) {
        return _this2.onInput(event);
      });
      this.selectAllUI.addLocalHook("click", function(event) {
        return _this2.onSelectAllClick(event);
      });
      this.clearAllUI.addLocalHook("click", function(event) {
        return _this2.onClearAllClick(event);
      });
    }
  }, {
    key: "setItems",
    value: function setItems(items) {
      this.items = items;
      if (this.itemsBox) {
        this.itemsBox.loadData(this.items);
      }
    }
  }, {
    key: "setLocale",
    value: function setLocale(locale) {
      this.locale = locale;
    }
  }, {
    key: "getLocale",
    value: function getLocale() {
      return this.locale;
    }
  }, {
    key: "getItems",
    value: function getItems() {
      return _toConsumableArray$4(this.items);
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return itemsToValue(this.items);
    }
  }, {
    key: "isSelectedAllValues",
    value: function isSelectedAllValues() {
      return this.items.length === this.getValue().length;
    }
  }, {
    key: "build",
    value: function build() {
      var _this3 = this;
      _get$r(_getPrototypeOf$w(MultipleSelectUI2.prototype), "build", this).call(this);
      var rootDocument = this.hot.rootDocument;
      var itemsBoxWrapper = rootDocument.createElement("div");
      var selectionControl = new BaseUI(this.hot, {
        className: "htUISelectionControls",
        children: [this.selectAllUI, this.clearAllUI]
      });
      this._element.appendChild(this.searchInput.element);
      this._element.appendChild(selectionControl.element);
      this._element.appendChild(itemsBoxWrapper);
      var hotInitializer = function hotInitializer2(wrapper) {
        if (!_this3._element) {
          return;
        }
        if (_this3.itemsBox) {
          _this3.itemsBox.destroy();
        }
        addClass(wrapper, "htUIMultipleSelectHot");
        _this3.itemsBox = new _this3.hot.constructor(wrapper, {
          data: _this3.items,
          columns: [{
            data: "checked",
            type: "checkbox",
            label: {
              property: "visualValue",
              position: "after"
            }
          }],
          beforeRenderer: function beforeRenderer(TD, row, col, prop, value, cellProperties) {
            TD.title = cellProperties.instance.getDataAtRowProp(row, cellProperties.label.property);
          },
          maxCols: 1,
          autoWrapCol: true,
          height: 110,
          colWidths: function colWidths() {
            return _this3.itemsBox.container.scrollWidth - getScrollbarWidth(rootDocument);
          },
          copyPaste: false,
          disableVisualSelection: "area",
          fillHandle: false,
          fragmentSelection: "cell",
          tabMoves: {
            row: 1,
            col: 0
          },
          layoutDirection: _this3.hot.isRtl() ? "rtl" : "ltr"
        });
        _this3.itemsBox.init();
        var shortcutManager = _this3.itemsBox.getShortcutManager();
        var gridContext = shortcutManager.getContext("grid");
        gridContext.addShortcut({
          keys: [["Escape"]],
          callback: function callback(event) {
            _this3.runLocalHooks("keydown", event, _this3);
          },
          group: SHORTCUTS_GROUP$4
        });
      };
      hotInitializer(itemsBoxWrapper);
      setTimeout(function() {
        return hotInitializer(itemsBoxWrapper);
      }, 100);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.searchInput.reset();
      this.selectAllUI.reset();
      this.clearAllUI.reset();
    }
  }, {
    key: "update",
    value: function update() {
      if (!this.isBuilt()) {
        return;
      }
      this.itemsBox.loadData(valueToItems(this.items, this.options.value));
      _get$r(_getPrototypeOf$w(MultipleSelectUI2.prototype), "update", this).call(this);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.itemsBox) {
        this.itemsBox.destroy();
      }
      this.searchInput.destroy();
      this.clearAllUI.destroy();
      this.selectAllUI.destroy();
      this.searchInput = null;
      this.clearAllUI = null;
      this.selectAllUI = null;
      this.itemsBox = null;
      this.items = null;
      _get$r(_getPrototypeOf$w(MultipleSelectUI2.prototype), "destroy", this).call(this);
    }
  }, {
    key: "onInput",
    value: function onInput(event) {
      var _this4 = this;
      var value = event.target.value.toLocaleLowerCase(this.getLocale());
      var filteredItems;
      if (value === "") {
        filteredItems = _toConsumableArray$4(this.items);
      } else {
        filteredItems = arrayFilter(this.items, function(item) {
          return "".concat(item.value).toLocaleLowerCase(_this4.getLocale()).indexOf(value) >= 0;
        });
      }
      this.itemsBox.loadData(filteredItems);
    }
  }, {
    key: "onInputKeyDown",
    value: function onInputKeyDown(event) {
      this.runLocalHooks("keydown", event, this);
      var isKeyCode = partial(isKey, event.keyCode);
      if (isKeyCode("ARROW_DOWN|TAB") && !this.itemsBox.isListening()) {
        stopImmediatePropagation(event);
        this.itemsBox.listen();
        this.itemsBox.selectCell(0, 0);
      }
    }
  }, {
    key: "onSelectAllClick",
    value: function onSelectAllClick(event) {
      var changes = [];
      event.preventDefault();
      arrayEach(this.itemsBox.getSourceData(), function(row, rowIndex) {
        row.checked = true;
        changes.push(dataRowToChangesArray(row, rowIndex)[0]);
      });
      this.itemsBox.setSourceDataAtCell(changes);
    }
  }, {
    key: "onClearAllClick",
    value: function onClearAllClick(event) {
      var changes = [];
      event.preventDefault();
      arrayEach(this.itemsBox.getSourceData(), function(row, rowIndex) {
        row.checked = false;
        changes.push(dataRowToChangesArray(row, rowIndex)[0]);
      });
      this.itemsBox.setSourceDataAtCell(changes);
    }
  }], [{
    key: "DEFAULTS",
    get: function get() {
      return clone({
        className: "htUIMultipleSelect",
        value: []
      });
    }
  }]);
  return MultipleSelectUI2;
}(BaseUI);
function valueToItems(availableItems, selectedValue) {
  var arrayAssertion = createArrayAssertion(selectedValue);
  return arrayMap(availableItems, function(item) {
    item.checked = arrayAssertion(item.value);
    return item;
  });
}
function itemsToValue(availableItems) {
  var items = [];
  arrayEach(availableItems, function(item) {
    if (item.checked) {
      items.push(item.value);
    }
  });
  return items;
}

function _typeof$x(obj) {
  "@babel/helpers - typeof";
  return _typeof$x = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$x(obj);
}
function _slicedToArray$n(arr, i) {
  return _arrayWithHoles$o(arr) || _iterableToArrayLimit$n(arr, i) || _unsupportedIterableToArray$s(arr, i) || _nonIterableRest$o();
}
function _nonIterableRest$o() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$s(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$s(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$s(o, minLen);
}
function _arrayLikeToArray$s(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$n(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$o(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck$P(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$P(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$P(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$P(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$P(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$s() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$s = Reflect.get.bind();
  } else {
    _get$s = function _get2(target, property, receiver) {
      var base = _superPropBase$s(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$s.apply(this, arguments);
}
function _superPropBase$s(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$x(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$x(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$x(subClass, superClass);
}
function _setPrototypeOf$x(o, p) {
  _setPrototypeOf$x = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$x(o, p);
}
function _createSuper$x(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$x();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$x(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$x(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$x(this, result);
  };
}
function _possibleConstructorReturn$x(self, call) {
  if (call && (_typeof$x(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$x(self);
}
function _assertThisInitialized$x(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$x() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$x(o) {
  _getPrototypeOf$x = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$x(o);
}
var ValueComponent = /* @__PURE__ */ function(_BaseComponent) {
  _inherits$x(ValueComponent2, _BaseComponent);
  var _super = _createSuper$x(ValueComponent2);
  function ValueComponent2(hotInstance, options) {
    var _this;
    _classCallCheck$P(this, ValueComponent2);
    _this = _super.call(this, hotInstance, {
      id: options.id,
      stateless: false
    });
    _this.name = options.name;
    _this.elements.push(new MultipleSelectUI(_this.hot));
    _this.registerHooks();
    return _this;
  }
  _createClass$P(ValueComponent2, [{
    key: "registerHooks",
    value: function registerHooks() {
      var _this2 = this;
      this.getMultipleSelectElement().addLocalHook("keydown", function(event) {
        return _this2.onInputKeyDown(event);
      });
    }
  }, {
    key: "setState",
    value: function setState(value) {
      this.reset();
      if (value && value.command.key === CONDITION_NAME$k) {
        var select = this.getMultipleSelectElement();
        select.setItems(value.itemsSnapshot);
        select.setValue(value.args[0]);
        select.setLocale(value.locale);
      }
    }
  }, {
    key: "getState",
    value: function getState() {
      var select = this.getMultipleSelectElement();
      var availableItems = select.getItems();
      return {
        command: {
          key: select.isSelectedAllValues() || !availableItems.length ? CONDITION_NAME : CONDITION_NAME$k
        },
        args: [select.getValue()],
        itemsSnapshot: availableItems
      };
    }
  }, {
    key: "updateState",
    value: function updateState(stateInfo) {
      var _this3 = this;
      var updateColumnState = function updateColumnState2(physicalColumn, conditions, conditionArgsChange, filteredRowsFactory, conditionsStack) {
        var _arrayFilter = arrayFilter(conditions, function(condition) {
          return condition.name === CONDITION_NAME$k;
        }), _arrayFilter2 = _slicedToArray$n(_arrayFilter, 1), firstByValueCondition = _arrayFilter2[0];
        var state = {};
        var defaultBlankCellValue = _this3.hot.getTranslatedPhrase(FILTERS_VALUES_BLANK_CELLS);
        if (firstByValueCondition) {
          var rowValues = unifyColumnValues(arrayMap(filteredRowsFactory(physicalColumn, conditionsStack), function(row) {
            return row.value;
          }));
          if (conditionArgsChange) {
            firstByValueCondition.args[0] = conditionArgsChange;
          }
          var selectedValues = [];
          var itemsSnapshot = intersectValues(rowValues, firstByValueCondition.args[0], defaultBlankCellValue, function(item) {
            if (item.checked) {
              selectedValues.push(item.value);
            }
          });
          var column = stateInfo.editedConditionStack.column;
          state.locale = _this3.hot.getCellMeta(0, column).locale;
          state.args = [selectedValues];
          state.command = getConditionDescriptor(CONDITION_NAME$k);
          state.itemsSnapshot = itemsSnapshot;
        } else {
          state.args = [];
          state.command = getConditionDescriptor(CONDITION_NAME);
        }
        _this3.state.setValueAtIndex(physicalColumn, state);
      };
      updateColumnState(stateInfo.editedConditionStack.column, stateInfo.editedConditionStack.conditions, stateInfo.conditionArgsChange, stateInfo.filteredRowsFactory);
      if (stateInfo.dependentConditionStacks.length) {
        updateColumnState(stateInfo.dependentConditionStacks[0].column, stateInfo.dependentConditionStacks[0].conditions, stateInfo.conditionArgsChange, stateInfo.filteredRowsFactory, stateInfo.editedConditionStack);
      }
    }
  }, {
    key: "getMultipleSelectElement",
    value: function getMultipleSelectElement() {
      return this.elements.filter(function(element) {
        return element instanceof MultipleSelectUI;
      })[0];
    }
  }, {
    key: "getMenuItemDescriptor",
    value: function getMenuItemDescriptor() {
      var _this4 = this;
      return {
        key: this.id,
        name: this.name,
        isCommand: false,
        disableSelection: true,
        hidden: function hidden() {
          return _this4.isHidden();
        },
        renderer: function renderer(hot, wrapper, row, col, prop, value) {
          addClass(wrapper.parentNode, "htFiltersMenuValue");
          var label = _this4.hot.rootDocument.createElement("div");
          addClass(label, "htFiltersMenuLabel");
          label.textContent = value;
          wrapper.appendChild(label);
          if (!wrapper.parentNode.hasAttribute("ghost-table")) {
            arrayEach(_this4.elements, function(ui) {
              return wrapper.appendChild(ui.element);
            });
          }
          return wrapper;
        }
      };
    }
  }, {
    key: "reset",
    value: function reset() {
      var defaultBlankCellValue = this.hot.getTranslatedPhrase(FILTERS_VALUES_BLANK_CELLS);
      var values = unifyColumnValues(this._getColumnVisibleValues());
      var items = intersectValues(values, values, defaultBlankCellValue);
      this.getMultipleSelectElement().setItems(items);
      _get$s(_getPrototypeOf$x(ValueComponent2.prototype), "reset", this).call(this);
      this.getMultipleSelectElement().setValue(values);
      var selectedColumn = this.hot.getPlugin("filters").getSelectedColumn();
      if (selectedColumn !== null) {
        this.getMultipleSelectElement().setLocale(this.hot.getCellMeta(0, selectedColumn.visualIndex).locale);
      }
    }
  }, {
    key: "onInputKeyDown",
    value: function onInputKeyDown(event) {
      if (isKey(event.keyCode, "ESCAPE")) {
        this.runLocalHooks("cancel");
        stopImmediatePropagation(event);
      }
    }
  }, {
    key: "_getColumnVisibleValues",
    value: function _getColumnVisibleValues() {
      var selectedColumn = this.hot.getPlugin("filters").getSelectedColumn();
      if (selectedColumn === null) {
        return [];
      }
      return arrayMap(this.hot.getDataAtCol(selectedColumn.visualIndex), function(v) {
        return toEmptyString(v);
      });
    }
  }]);
  return ValueComponent2;
}(BaseComponent);

function _typeof$y(obj) {
  "@babel/helpers - typeof";
  return _typeof$y = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$y(obj);
}
function _classCallCheck$Q(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$Q(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$Q(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$Q(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$Q(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _inherits$y(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$y(subClass, superClass);
}
function _setPrototypeOf$y(o, p) {
  _setPrototypeOf$y = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$y(o, p);
}
function _createSuper$y(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$y();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$y(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$y(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$y(this, result);
  };
}
function _possibleConstructorReturn$y(self, call) {
  if (call && (_typeof$y(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$y(self);
}
function _assertThisInitialized$y(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$y() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$y(o) {
  _getPrototypeOf$y = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$y(o);
}
var ActionBarComponent = /* @__PURE__ */ function(_BaseComponent) {
  _inherits$y(ActionBarComponent2, _BaseComponent);
  var _super = _createSuper$y(ActionBarComponent2);
  function ActionBarComponent2(hotInstance, options) {
    var _this;
    _classCallCheck$Q(this, ActionBarComponent2);
    _this = _super.call(this, hotInstance, {
      id: options.id,
      stateless: true
    });
    _this.name = options.name;
    _this.elements.push(new InputUI(_this.hot, {
      type: "button",
      value: FILTERS_BUTTONS_OK,
      className: "htUIButton htUIButtonOK",
      identifier: ActionBarComponent2.BUTTON_OK
    }));
    _this.elements.push(new InputUI(_this.hot, {
      type: "button",
      value: FILTERS_BUTTONS_CANCEL,
      className: "htUIButton htUIButtonCancel",
      identifier: ActionBarComponent2.BUTTON_CANCEL
    }));
    _this.registerHooks();
    return _this;
  }
  _createClass$Q(ActionBarComponent2, [{
    key: "registerHooks",
    value: function registerHooks() {
      var _this2 = this;
      arrayEach(this.elements, function(element) {
        element.addLocalHook("click", function(event, button) {
          return _this2.onButtonClick(event, button);
        });
      });
    }
  }, {
    key: "getMenuItemDescriptor",
    value: function getMenuItemDescriptor() {
      var _this3 = this;
      return {
        key: this.id,
        name: this.name,
        isCommand: false,
        disableSelection: true,
        hidden: function hidden() {
          return _this3.isHidden();
        },
        renderer: function renderer(hot, wrapper) {
          addClass(wrapper.parentNode, "htFiltersMenuActionBar");
          if (!wrapper.parentNode.hasAttribute("ghost-table")) {
            arrayEach(_this3.elements, function(ui) {
              return wrapper.appendChild(ui.element);
            });
          }
          return wrapper;
        }
      };
    }
  }, {
    key: "accept",
    value: function accept() {
      this.runLocalHooks("accept");
    }
  }, {
    key: "cancel",
    value: function cancel() {
      this.runLocalHooks("cancel");
    }
  }, {
    key: "onButtonClick",
    value: function onButtonClick(event, button) {
      if (button.options.identifier === ActionBarComponent2.BUTTON_OK) {
        this.accept();
      } else {
        this.cancel();
      }
    }
  }], [{
    key: "BUTTON_OK",
    get: function get() {
      return "ok";
    }
  }, {
    key: "BUTTON_CANCEL",
    get: function get() {
      return "cancel";
    }
  }]);
  return ActionBarComponent2;
}(BaseComponent);

var _templateObject$2, _templateObject2;
function _slicedToArray$o(arr, i) {
  return _arrayWithHoles$p(arr) || _iterableToArrayLimit$o(arr, i) || _unsupportedIterableToArray$t(arr, i) || _nonIterableRest$p();
}
function _nonIterableRest$p() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$t(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$t(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$t(o, minLen);
}
function _arrayLikeToArray$t(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$o(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$p(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _taggedTemplateLiteral$2(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {raw: {value: Object.freeze(raw)}}));
}
function _classCallCheck$R(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$R(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$R(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$R(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$R(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var MAP_NAME = "ConditionCollection.filteringStates";
var ConditionCollection = /* @__PURE__ */ function() {
  function ConditionCollection2(hot) {
    var isMapRegistrable = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    _classCallCheck$R(this, ConditionCollection2);
    this.hot = hot;
    this.isMapRegistrable = isMapRegistrable;
    this.filteringStates = new LinkedPhysicalIndexToValueMap();
    if (this.isMapRegistrable === true) {
      this.hot.columnIndexMapper.registerMap(MAP_NAME, this.filteringStates);
    } else {
      this.filteringStates.init(this.hot.columnIndexMapper.getNumberOfIndexes());
    }
  }
  _createClass$R(ConditionCollection2, [{
    key: "isEmpty",
    value: function isEmpty() {
      return this.getFilteredColumns().length === 0;
    }
  }, {
    key: "isMatch",
    value: function isMatch(value, column) {
      var _stateForColumn$condi;
      var stateForColumn = this.filteringStates.getValueAtIndex(column);
      var conditions = (_stateForColumn$condi = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.conditions) !== null && _stateForColumn$condi !== void 0 ? _stateForColumn$condi : [];
      var operation = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.operation;
      return this.isMatchInConditions(conditions, value, operation);
    }
  }, {
    key: "isMatchInConditions",
    value: function isMatchInConditions(conditions, value) {
      var operationType = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : OPERATION_ID;
      if (conditions.length) {
        return getOperationFunc(operationType)(conditions, value);
      }
      return true;
    }
  }, {
    key: "addCondition",
    value: function addCondition(column, conditionDefinition) {
      var operation = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : OPERATION_ID;
      var position = arguments.length > 3 ? arguments[3] : void 0;
      var localeForColumn = this.hot.getCellMeta(0, column).locale;
      var args = arrayMap(conditionDefinition.args, function(v) {
        return typeof v === "string" ? v.toLocaleLowerCase(localeForColumn) : v;
      });
      var name = conditionDefinition.name || conditionDefinition.command.key;
      this.runLocalHooks("beforeAdd", column);
      var columnType = this.getOperation(column);
      if (columnType) {
        if (columnType !== operation) {
          throw Error(toSingleLine(_templateObject$2 || (_templateObject$2 = _taggedTemplateLiteral$2(["The column of index ", " has been already applied with a `", "` \n        filter operation. Use `removeConditions` to clear the current conditions and then add new ones. \n        Mind that you cannot mix different types of operations (for instance, if you use `conjunction`, \n        use it consequently for a particular column)."], ["The column of index ", " has been already applied with a \\`", "\\`\\x20\n        filter operation. Use \\`removeConditions\\` to clear the current conditions and then add new ones.\\x20\n        Mind that you cannot mix different types of operations (for instance, if you use \\`conjunction\\`,\\x20\n        use it consequently for a particular column)."])), column, columnType));
        }
      } else if (isUndefined(operations[operation])) {
        throw new Error(toSingleLine(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral$2(["Unexpected operation named `", "`. Possible ones are \n        `disjunction` and `conjunction`."], ["Unexpected operation named \\`", "\\`. Possible ones are\\x20\n        \\`disjunction\\` and \\`conjunction\\`."])), operation));
      }
      var conditionsForColumn = this.getConditions(column);
      if (conditionsForColumn.length === 0) {
        this.filteringStates.setValueAtIndex(column, {
          operation,
          conditions: [{
            name,
            args,
            func: getCondition(name, args)
          }]
        }, position);
      } else {
        conditionsForColumn.push({
          name,
          args,
          func: getCondition(name, args)
        });
      }
      this.runLocalHooks("afterAdd", column);
    }
  }, {
    key: "getConditions",
    value: function getConditions(column) {
      var _this$filteringStates, _this$filteringStates2;
      return (_this$filteringStates = (_this$filteringStates2 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates2 === void 0 ? void 0 : _this$filteringStates2.conditions) !== null && _this$filteringStates !== void 0 ? _this$filteringStates : [];
    }
  }, {
    key: "getOperation",
    value: function getOperation(column) {
      var _this$filteringStates3;
      return (_this$filteringStates3 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates3 === void 0 ? void 0 : _this$filteringStates3.operation;
    }
  }, {
    key: "getFilteredColumns",
    value: function getFilteredColumns() {
      return this.filteringStates.getEntries().map(function(_ref) {
        var _ref2 = _slicedToArray$o(_ref, 1), physicalColumn = _ref2[0];
        return physicalColumn;
      });
    }
  }, {
    key: "getColumnStackPosition",
    value: function getColumnStackPosition(column) {
      return this.getFilteredColumns().indexOf(column);
    }
  }, {
    key: "exportAllConditions",
    value: function exportAllConditions() {
      return arrayReduce(this.filteringStates.getEntries(), function(allConditions, _ref3) {
        var _ref4 = _slicedToArray$o(_ref3, 2), column = _ref4[0], _ref4$ = _ref4[1], operation = _ref4$.operation, conditions = _ref4$.conditions;
        allConditions.push({
          column,
          operation,
          conditions: arrayMap(conditions, function(_ref5) {
            var name = _ref5.name, args = _ref5.args;
            return {
              name,
              args
            };
          })
        });
        return allConditions;
      }, []);
    }
  }, {
    key: "importAllConditions",
    value: function importAllConditions(conditions) {
      var _this = this;
      this.clean();
      arrayEach(conditions, function(stack) {
        arrayEach(stack.conditions, function(condition) {
          return _this.addCondition(stack.column, condition);
        });
      });
    }
  }, {
    key: "removeConditions",
    value: function removeConditions(column) {
      this.runLocalHooks("beforeRemove", column);
      this.filteringStates.clearValue(column);
      this.runLocalHooks("afterRemove", column);
    }
  }, {
    key: "clean",
    value: function clean() {
      this.runLocalHooks("beforeClean");
      this.filteringStates.clear();
      this.runLocalHooks("afterClean");
    }
  }, {
    key: "hasConditions",
    value: function hasConditions(column, name) {
      var conditions = this.getConditions(column);
      if (name) {
        return conditions.some(function(condition) {
          return condition.name === name;
        });
      }
      return conditions.length > 0;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.isMapRegistrable) {
        this.hot.columnIndexMapper.unregisterMap(MAP_NAME);
      }
      this.filteringStates = null;
      this.clearLocalHooks();
    }
  }]);
  return ConditionCollection2;
}();
mixin(ConditionCollection, localHooks);

function _classCallCheck$S(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$S(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$S(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$S(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$S(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var DataFilter = /* @__PURE__ */ function() {
  function DataFilter2(conditionCollection) {
    var columnDataFactory = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
      return [];
    };
    _classCallCheck$S(this, DataFilter2);
    this.conditionCollection = conditionCollection;
    this.columnDataFactory = columnDataFactory;
  }
  _createClass$S(DataFilter2, [{
    key: "filter",
    value: function filter() {
      var _this = this;
      var filteredData = [];
      arrayEach(this.conditionCollection.getFilteredColumns(), function(physicalColumn, index) {
        var columnData = _this.columnDataFactory(physicalColumn);
        if (index) {
          columnData = _this._getIntersectData(columnData, filteredData);
        }
        filteredData = _this.filterByColumn(physicalColumn, columnData);
      });
      return filteredData;
    }
  }, {
    key: "filterByColumn",
    value: function filterByColumn(column) {
      var _this2 = this;
      var dataSource = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      var filteredData = [];
      arrayEach(dataSource, function(dataRow) {
        if (dataRow !== void 0 && _this2.conditionCollection.isMatch(dataRow, column)) {
          filteredData.push(dataRow);
        }
      });
      return filteredData;
    }
  }, {
    key: "_getIntersectData",
    value: function _getIntersectData(data, needles) {
      var result = [];
      arrayEach(needles, function(needleRow) {
        var row = needleRow.meta.visualRow;
        if (data[row] !== void 0) {
          result[row] = data[row];
        }
      });
      return result;
    }
  }]);
  return DataFilter2;
}();

function _classCallCheck$T(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$T(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$T(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$T(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$T(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var ConditionUpdateObserver = /* @__PURE__ */ function() {
  function ConditionUpdateObserver2(hot, conditionCollection) {
    var _this = this;
    var columnDataFactory = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
      return [];
    };
    _classCallCheck$T(this, ConditionUpdateObserver2);
    this.hot = hot;
    this.conditionCollection = conditionCollection;
    this.columnDataFactory = columnDataFactory;
    this.changes = [];
    this.grouping = false;
    this.latestEditedColumnPosition = -1;
    this.latestOrderStack = [];
    this.conditionCollection.addLocalHook("beforeRemove", function(column) {
      return _this._onConditionBeforeModify(column);
    });
    this.conditionCollection.addLocalHook("afterRemove", function(column) {
      return _this.updateStatesAtColumn(column);
    });
    this.conditionCollection.addLocalHook("afterAdd", function(column) {
      return _this.updateStatesAtColumn(column);
    });
    this.conditionCollection.addLocalHook("beforeClean", function() {
      return _this._onConditionBeforeClean();
    });
    this.conditionCollection.addLocalHook("afterClean", function() {
      return _this._onConditionAfterClean();
    });
  }
  _createClass$T(ConditionUpdateObserver2, [{
    key: "groupChanges",
    value: function groupChanges() {
      this.grouping = true;
    }
  }, {
    key: "flush",
    value: function flush() {
      var _this2 = this;
      this.grouping = false;
      arrayEach(this.changes, function(column) {
        _this2.updateStatesAtColumn(column);
      });
      this.changes.length = 0;
    }
  }, {
    key: "_onConditionBeforeModify",
    value: function _onConditionBeforeModify(column) {
      this.latestEditedColumnPosition = this.conditionCollection.getColumnStackPosition(column);
    }
  }, {
    key: "updateStatesAtColumn",
    value: function updateStatesAtColumn(column, conditionArgsChange) {
      var _this3 = this;
      if (this.grouping) {
        if (this.changes.indexOf(column) === -1) {
          this.changes.push(column);
        }
        return;
      }
      var allConditions = this.conditionCollection.exportAllConditions();
      var editedColumnPosition = this.conditionCollection.getColumnStackPosition(column);
      if (editedColumnPosition === -1) {
        editedColumnPosition = this.latestEditedColumnPosition;
      }
      var conditionsBefore = allConditions.slice(0, editedColumnPosition);
      var conditionsAfter = allConditions.slice(editedColumnPosition);
      if (conditionsAfter.length && conditionsAfter[0].column === column) {
        conditionsAfter.shift();
      }
      var visibleDataFactory = curry(function(curriedConditionsBefore, curriedColumn) {
        var conditionsStack = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
        var splitConditionCollection = new ConditionCollection(_this3.hot, false);
        var curriedConditionsBeforeArray = [].concat(curriedConditionsBefore, conditionsStack);
        splitConditionCollection.importAllConditions(curriedConditionsBeforeArray);
        var allRows = _this3.columnDataFactory(curriedColumn);
        var visibleRows;
        if (splitConditionCollection.isEmpty()) {
          visibleRows = allRows;
        } else {
          visibleRows = new DataFilter(splitConditionCollection, function(columnData) {
            return _this3.columnDataFactory(columnData);
          }).filter();
        }
        visibleRows = arrayMap(visibleRows, function(rowData) {
          return rowData.meta.visualRow;
        });
        var visibleRowsAssertion = createArrayAssertion(visibleRows);
        splitConditionCollection.destroy();
        return arrayFilter(allRows, function(rowData) {
          return visibleRowsAssertion(rowData.meta.visualRow);
        });
      })(conditionsBefore);
      var editedConditions = [].concat(this.conditionCollection.getConditions(column));
      this.runLocalHooks("update", {
        editedConditionStack: {
          column,
          conditions: editedConditions
        },
        dependentConditionStacks: conditionsAfter,
        filteredRowsFactory: visibleDataFactory,
        conditionArgsChange
      });
    }
  }, {
    key: "_onConditionBeforeClean",
    value: function _onConditionBeforeClean() {
      this.latestOrderStack = this.conditionCollection.getFilteredColumns();
    }
  }, {
    key: "_onConditionAfterClean",
    value: function _onConditionAfterClean() {
      var _this4 = this;
      arrayEach(this.latestOrderStack, function(column) {
        _this4.updateStatesAtColumn(column);
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this5 = this;
      this.clearLocalHooks();
      objectEach(this, function(value, property) {
        _this5[property] = null;
      });
    }
  }]);
  return ConditionUpdateObserver2;
}();
mixin(ConditionUpdateObserver, localHooks);

function _typeof$z(obj) {
  "@babel/helpers - typeof";
  return _typeof$z = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$z(obj);
}
var _templateObject$3;
function _taggedTemplateLiteral$3(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {raw: {value: Object.freeze(raw)}}));
}
function _slicedToArray$p(arr, i) {
  return _arrayWithHoles$q(arr) || _iterableToArrayLimit$p(arr, i) || _unsupportedIterableToArray$u(arr, i) || _nonIterableRest$q();
}
function _nonIterableRest$q() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$u(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$u(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$u(o, minLen);
}
function _arrayLikeToArray$u(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$p(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$q(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck$U(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$U(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$U(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$U(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$U(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$t() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$t = Reflect.get.bind();
  } else {
    _get$t = function _get2(target, property, receiver) {
      var base = _superPropBase$t(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$t.apply(this, arguments);
}
function _superPropBase$t(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$z(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$z(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$z(subClass, superClass);
}
function _setPrototypeOf$z(o, p) {
  _setPrototypeOf$z = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$z(o, p);
}
function _createSuper$z(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$z();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$z(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$z(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$z(this, result);
  };
}
function _possibleConstructorReturn$z(self, call) {
  if (call && (_typeof$z(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$z(self);
}
function _assertThisInitialized$z(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$z() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$z(o) {
  _getPrototypeOf$z = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$z(o);
}
var PLUGIN_KEY$f = "filters";
var PLUGIN_PRIORITY$e = 250;
var Filters = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$z(Filters2, _BasePlugin);
  var _super = _createSuper$z(Filters2);
  function Filters2(hotInstance) {
    var _this;
    _classCallCheck$U(this, Filters2);
    _this = _super.call(this, hotInstance);
    _this.eventManager = new EventManager(_assertThisInitialized$z(_this));
    _this.dropdownMenuPlugin = null;
    _this.conditionCollection = null;
    _this.conditionUpdateObserver = null;
    _this.components = new Map([["filter_by_condition", null], ["filter_operators", null], ["filter_by_condition2", null], ["filter_by_value", null], ["filter_action_bar", null]]);
    _this.lastSelectedColumn = null;
    _this.filtersRowsMap = null;
    _this.hot.addHook("afterGetColHeader", function(col, TH) {
      return _this.onAfterGetColHeader(col, TH);
    });
    return _this;
  }
  _createClass$U(Filters2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return this.hot.getSettings()[PLUGIN_KEY$f] ? true : false;
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.filtersRowsMap = this.hot.rowIndexMapper.registerMap(this.pluginName, new TrimmingMap());
      this.dropdownMenuPlugin = this.hot.getPlugin("dropdownMenu");
      var dropdownSettings = this.hot.getSettings().dropdownMenu;
      var menuContainer = dropdownSettings && dropdownSettings.uiContainer || this.hot.rootDocument.body;
      var addConfirmationHooks = function addConfirmationHooks2(component) {
        component.addLocalHook("accept", function() {
          return _this2.onActionBarSubmit("accept");
        });
        component.addLocalHook("cancel", function() {
          return _this2.onActionBarSubmit("cancel");
        });
        component.addLocalHook("change", function(command) {
          return _this2.onComponentChange(component, command);
        });
        return component;
      };
      var filterByConditionLabel = function filterByConditionLabel2() {
        return "".concat(_this2.hot.getTranslatedPhrase(FILTERS_DIVS_FILTER_BY_CONDITION), ":");
      };
      var filterValueLabel = function filterValueLabel2() {
        return "".concat(_this2.hot.getTranslatedPhrase(FILTERS_DIVS_FILTER_BY_VALUE), ":");
      };
      if (!this.components.get("filter_by_condition")) {
        var conditionComponent = new ConditionComponent(this.hot, {
          id: "filter_by_condition",
          name: filterByConditionLabel,
          addSeparator: false,
          menuContainer
        });
        conditionComponent.addLocalHook("afterClose", function() {
          return _this2.onSelectUIClosed();
        });
        this.components.set("filter_by_condition", addConfirmationHooks(conditionComponent));
      }
      if (!this.components.get("filter_operators")) {
        this.components.set("filter_operators", new OperatorsComponent(this.hot, {
          id: "filter_operators",
          name: "Operators"
        }));
      }
      if (!this.components.get("filter_by_condition2")) {
        var _conditionComponent = new ConditionComponent(this.hot, {
          id: "filter_by_condition2",
          name: "",
          addSeparator: true,
          menuContainer
        });
        _conditionComponent.addLocalHook("afterClose", function() {
          return _this2.onSelectUIClosed();
        });
        this.components.set("filter_by_condition2", addConfirmationHooks(_conditionComponent));
      }
      if (!this.components.get("filter_by_value")) {
        this.components.set("filter_by_value", addConfirmationHooks(new ValueComponent(this.hot, {
          id: "filter_by_value",
          name: filterValueLabel
        })));
      }
      if (!this.components.get("filter_action_bar")) {
        this.components.set("filter_action_bar", addConfirmationHooks(new ActionBarComponent(this.hot, {
          id: "filter_action_bar",
          name: "Action bar"
        })));
      }
      if (!this.conditionCollection) {
        this.conditionCollection = new ConditionCollection(this.hot);
      }
      if (!this.conditionUpdateObserver) {
        this.conditionUpdateObserver = new ConditionUpdateObserver(this.hot, this.conditionCollection, function(physicalColumn) {
          return _this2.getDataMapAtColumn(physicalColumn);
        });
        this.conditionUpdateObserver.addLocalHook("update", function(conditionState) {
          return _this2.updateComponents(conditionState);
        });
      }
      this.components.forEach(function(component) {
        return component.show();
      });
      this.addHook("beforeDropdownMenuSetItems", function(items) {
        return _this2.onBeforeDropdownMenuSetItems(items);
      });
      this.addHook("afterDropdownMenuDefaultOptions", function(defaultOptions) {
        return _this2.onAfterDropdownMenuDefaultOptions(defaultOptions);
      });
      this.addHook("afterDropdownMenuShow", function() {
        return _this2.onAfterDropdownMenuShow();
      });
      this.addHook("afterDropdownMenuHide", function() {
        return _this2.onAfterDropdownMenuHide();
      });
      this.addHook("afterChange", function(changes) {
        return _this2.onAfterChange(changes);
      });
      if (this.hot.getSettings().dropdownMenu && this.dropdownMenuPlugin) {
        this.dropdownMenuPlugin.disablePlugin();
        this.dropdownMenuPlugin.enablePlugin();
      }
      _get$t(_getPrototypeOf$z(Filters2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      var _this3 = this;
      if (this.enabled) {
        var _this$dropdownMenuPlu;
        if ((_this$dropdownMenuPlu = this.dropdownMenuPlugin) !== null && _this$dropdownMenuPlu !== void 0 && _this$dropdownMenuPlu.enabled) {
          this.dropdownMenuPlugin.menu.clearLocalHooks();
        }
        this.components.forEach(function(component, key) {
          component.destroy();
          _this3.components.set(key, null);
        });
        this.conditionCollection.destroy();
        this.conditionCollection = null;
        this.hot.rowIndexMapper.unregisterMap(this.pluginName);
      }
      _get$t(_getPrototypeOf$z(Filters2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "addCondition",
    value: function addCondition(column, name, args) {
      var operationId = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : OPERATION_ID;
      var physicalColumn = this.hot.toPhysicalColumn(column);
      this.conditionCollection.addCondition(physicalColumn, {
        command: {
          key: name
        },
        args
      }, operationId);
    }
  }, {
    key: "removeConditions",
    value: function removeConditions(column) {
      var physicalColumn = this.hot.toPhysicalColumn(column);
      this.conditionCollection.removeConditions(physicalColumn);
    }
  }, {
    key: "clearConditions",
    value: function clearConditions(column) {
      if (column === void 0) {
        this.conditionCollection.clean();
      } else {
        var physicalColumn = this.hot.toPhysicalColumn(column);
        this.conditionCollection.removeConditions(physicalColumn);
      }
    }
  }, {
    key: "filter",
    value: function filter() {
      var _this4 = this;
      var dataFilter = this._createDataFilter();
      var needToFilter = !this.conditionCollection.isEmpty();
      var visibleVisualRows = [];
      var conditions = this.conditionCollection.exportAllConditions();
      var allowFiltering = this.hot.runHooks("beforeFilter", conditions);
      if (allowFiltering !== false) {
        if (needToFilter) {
          var trimmedRows = [];
          this.hot.batchExecution(function() {
            _this4.filtersRowsMap.clear();
            visibleVisualRows = arrayMap(dataFilter.filter(), function(rowData) {
              return rowData.meta.visualRow;
            });
            var visibleVisualRowsAssertion = createArrayAssertion(visibleVisualRows);
            rangeEach(_this4.hot.countSourceRows() - 1, function(row) {
              if (!visibleVisualRowsAssertion(row)) {
                trimmedRows.push(row);
              }
            });
            arrayEach(trimmedRows, function(physicalRow) {
              _this4.filtersRowsMap.setValueAtIndex(physicalRow, true);
            });
          }, true);
          if (!visibleVisualRows.length) {
            this.hot.deselectCell();
          }
        } else {
          this.filtersRowsMap.clear();
        }
      }
      this.hot.runHooks("afterFilter", conditions);
      this.hot.view.adjustElementsSize(true);
      this.hot.render();
      this.clearColumnSelection();
    }
  }, {
    key: "getSelectedColumn",
    value: function getSelectedColumn() {
      var _this$hot$getSelected;
      var highlight = (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight;
      if (!highlight) {
        return null;
      }
      return {
        visualIndex: highlight.col,
        physicalIndex: this.hot.toPhysicalColumn(highlight.col)
      };
    }
  }, {
    key: "clearColumnSelection",
    value: function clearColumnSelection() {
      var selectedColumn = this.getSelectedColumn();
      if (selectedColumn !== null) {
        this.hot.selectCell(0, selectedColumn.visualIndex);
      }
    }
  }, {
    key: "getDataMapAtColumn",
    value: function getDataMapAtColumn(column) {
      var _this5 = this;
      var visualColumn = this.hot.toVisualColumn(column);
      var data = [];
      arrayEach(this.hot.getSourceDataAtCol(visualColumn), function(value, rowIndex) {
        var _this5$hot$getDataAtC;
        var _this5$hot$getCellMet = _this5.hot.getCellMeta(rowIndex, visualColumn), row = _this5$hot$getCellMet.row, col = _this5$hot$getCellMet.col, visualCol = _this5$hot$getCellMet.visualCol, visualRow = _this5$hot$getCellMet.visualRow, type = _this5$hot$getCellMet.type, instance = _this5$hot$getCellMet.instance, dateFormat = _this5$hot$getCellMet.dateFormat, locale = _this5$hot$getCellMet.locale;
        var dataValue = (_this5$hot$getDataAtC = _this5.hot.getDataAtCell(_this5.hot.toVisualRow(rowIndex), visualColumn)) !== null && _this5$hot$getDataAtC !== void 0 ? _this5$hot$getDataAtC : value;
        data.push({
          meta: {
            row,
            col,
            visualCol,
            visualRow,
            type,
            instance,
            dateFormat,
            locale
          },
          value: toEmptyString(dataValue)
        });
      });
      return data;
    }
  }, {
    key: "onAfterChange",
    value: function onAfterChange(changes) {
      var _this6 = this;
      if (changes) {
        arrayEach(changes, function(change) {
          var _change = _slicedToArray$p(change, 2), prop = _change[1];
          var columnIndex = _this6.hot.propToCol(prop);
          if (_this6.conditionCollection.hasConditions(columnIndex)) {
            _this6.updateValueComponentCondition(columnIndex);
          }
        });
      }
    }
  }, {
    key: "updateValueComponentCondition",
    value: function updateValueComponentCondition(columnIndex) {
      var dataAtCol = this.hot.getDataAtCol(columnIndex);
      var selectedValues = unifyColumnValues(dataAtCol);
      this.conditionUpdateObserver.updateStatesAtColumn(columnIndex, selectedValues);
    }
  }, {
    key: "restoreComponents",
    value: function restoreComponents(components) {
      var _this$getSelectedColu;
      var physicalIndex = (_this$getSelectedColu = this.getSelectedColumn()) === null || _this$getSelectedColu === void 0 ? void 0 : _this$getSelectedColu.physicalIndex;
      components.forEach(function(component) {
        if (component.isHidden()) {
          return;
        }
        component.restoreState(physicalIndex);
      });
      this.updateDependentComponentsVisibility();
    }
  }, {
    key: "onAfterDropdownMenuShow",
    value: function onAfterDropdownMenuShow() {
      this.restoreComponents(Array.from(this.components.values()));
    }
  }, {
    key: "onAfterDropdownMenuHide",
    value: function onAfterDropdownMenuHide() {
      this.components.get("filter_by_condition").getSelectElement().closeOptions();
      this.components.get("filter_by_condition2").getSelectElement().closeOptions();
    }
  }, {
    key: "onBeforeDropdownMenuSetItems",
    value: function onBeforeDropdownMenuSetItems() {
      var _this7 = this;
      if (this.dropdownMenuPlugin) {
        this.dropdownMenuPlugin.menu.addLocalHook("afterOpen", function() {
          _this7.dropdownMenuPlugin.menu.hotMenu.updateSettings({
            hiddenRows: true
          });
        });
      }
    }
  }, {
    key: "onAfterDropdownMenuDefaultOptions",
    value: function onAfterDropdownMenuDefaultOptions(defaultOptions) {
      defaultOptions.items.push({
        name: KEY
      });
      this.components.forEach(function(component) {
        defaultOptions.items.push(component.getMenuItemDescriptor());
      });
    }
  }, {
    key: "getOperationBasedOnArguments",
    value: function getOperationBasedOnArguments(suggestedOperation, byConditionState1, byConditionState2, byValueState) {
      var operation = suggestedOperation;
      if (operation === OPERATION_ID$1 && byConditionState1.command.key !== CONDITION_NAME && byConditionState2.command.key !== CONDITION_NAME && byValueState.command.key !== CONDITION_NAME) {
        operation = OPERATION_ID$2;
      } else if (byValueState.command.key !== CONDITION_NAME) {
        if (byConditionState1.command.key === CONDITION_NAME || byConditionState2.command.key === CONDITION_NAME) {
          operation = OPERATION_ID;
        }
      }
      return operation;
    }
  }, {
    key: "onActionBarSubmit",
    value: function onActionBarSubmit(submitType) {
      var _this$dropdownMenuPlu3;
      if (submitType === "accept") {
        var selectedColumn = this.getSelectedColumn();
        if (selectedColumn === null) {
          var _this$dropdownMenuPlu2;
          (_this$dropdownMenuPlu2 = this.dropdownMenuPlugin) === null || _this$dropdownMenuPlu2 === void 0 ? void 0 : _this$dropdownMenuPlu2.close();
          return;
        }
        var physicalIndex = selectedColumn.physicalIndex;
        var byConditionState1 = this.components.get("filter_by_condition").getState();
        var byConditionState2 = this.components.get("filter_by_condition2").getState();
        var byValueState = this.components.get("filter_by_value").getState();
        var operation = this.getOperationBasedOnArguments(this.components.get("filter_operators").getActiveOperationId(), byConditionState1, byConditionState2, byValueState);
        this.conditionUpdateObserver.groupChanges();
        var columnStackPosition = this.conditionCollection.getColumnStackPosition(physicalIndex);
        if (columnStackPosition === -1) {
          columnStackPosition = void 0;
        }
        this.conditionCollection.removeConditions(physicalIndex);
        if (byConditionState1.command.key !== CONDITION_NAME) {
          this.conditionCollection.addCondition(physicalIndex, byConditionState1, operation, columnStackPosition);
          if (byConditionState2.command.key !== CONDITION_NAME) {
            this.conditionCollection.addCondition(physicalIndex, byConditionState2, operation, columnStackPosition);
          }
        }
        if (byValueState.command.key !== CONDITION_NAME) {
          this.conditionCollection.addCondition(physicalIndex, byValueState, operation, columnStackPosition);
        }
        this.conditionUpdateObserver.flush();
        this.components.forEach(function(component) {
          return component.saveState(physicalIndex);
        });
        this.filtersRowsMap.clear();
        this.filter();
      }
      (_this$dropdownMenuPlu3 = this.dropdownMenuPlugin) === null || _this$dropdownMenuPlu3 === void 0 ? void 0 : _this$dropdownMenuPlu3.close();
    }
  }, {
    key: "onComponentChange",
    value: function onComponentChange(component, command) {
      this.updateDependentComponentsVisibility();
      if (component.constructor === ConditionComponent && !command.inputsCount) {
        this.setListeningDropdownMenu();
      }
    }
  }, {
    key: "onSelectUIClosed",
    value: function onSelectUIClosed() {
      this.setListeningDropdownMenu();
    }
  }, {
    key: "setListeningDropdownMenu",
    value: function setListeningDropdownMenu() {
      if (this.dropdownMenuPlugin) {
        this.dropdownMenuPlugin.setListening();
      }
    }
  }, {
    key: "updateDependentComponentsVisibility",
    value: function updateDependentComponentsVisibility() {
      var component = this.components.get("filter_by_condition");
      var _component$getState = component.getState(), command = _component$getState.command;
      var componentsToShow = [this.components.get("filter_by_condition2"), this.components.get("filter_operators")];
      if (command.showOperators) {
        this.showComponents.apply(this, componentsToShow);
      } else {
        this.hideComponents.apply(this, componentsToShow);
      }
    }
  }, {
    key: "onAfterGetColHeader",
    value: function onAfterGetColHeader(col, TH) {
      var physicalColumn = this.hot.toPhysicalColumn(col);
      if (this.enabled && this.conditionCollection.hasConditions(physicalColumn)) {
        addClass(TH, "htFiltersActive");
      } else {
        removeClass(TH, "htFiltersActive");
      }
    }
  }, {
    key: "_createDataFilter",
    value: function _createDataFilter() {
      var _this8 = this;
      var conditionCollection = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.conditionCollection;
      return new DataFilter(conditionCollection, function(physicalColumn) {
        return _this8.getDataMapAtColumn(physicalColumn);
      });
    }
  }, {
    key: "updateComponents",
    value: function updateComponents(conditionsState) {
      var _this$dropdownMenuPlu4;
      if (!((_this$dropdownMenuPlu4 = this.dropdownMenuPlugin) !== null && _this$dropdownMenuPlu4 !== void 0 && _this$dropdownMenuPlu4.enabled)) {
        return;
      }
      var _conditionsState$edit = conditionsState.editedConditionStack, conditions = _conditionsState$edit.conditions, column = _conditionsState$edit.column;
      var conditionsByValue = conditions.filter(function(condition) {
        return condition.name === CONDITION_NAME$k;
      });
      var conditionsWithoutByValue = conditions.filter(function(condition) {
        return condition.name !== CONDITION_NAME$k;
      });
      if (conditionsByValue.length >= 2 || conditionsWithoutByValue.length >= 3) {
        warn(toSingleLine(_templateObject$3 || (_templateObject$3 = _taggedTemplateLiteral$3(["The filter conditions have been applied properly, but couldn’t be displayed visually. \n        The overall amount of conditions exceed the capability of the dropdown menu. \n        For more details see the documentation."], ["The filter conditions have been applied properly, but couldn’t be displayed visually.\\x20\n        The overall amount of conditions exceed the capability of the dropdown menu.\\x20\n        For more details see the documentation."]))));
      } else {
        var operationType = this.conditionCollection.getOperation(column);
        this.components.get("filter_by_condition").updateState(conditionsWithoutByValue[0], column);
        this.components.get("filter_by_condition2").updateState(conditionsWithoutByValue[1], column);
        this.components.get("filter_operators").updateState(operationType, column);
        this.components.get("filter_by_value").updateState(conditionsState);
      }
    }
  }, {
    key: "getIndexesOfComponents",
    value: function getIndexesOfComponents() {
      var indexes = [];
      if (!this.dropdownMenuPlugin) {
        return indexes;
      }
      var menu = this.dropdownMenuPlugin.menu;
      for (var _len = arguments.length, components = new Array(_len), _key = 0; _key < _len; _key++) {
        components[_key] = arguments[_key];
      }
      arrayEach(components, function(component) {
        arrayEach(menu.menuItems, function(item, index) {
          if (item.key === component.getMenuItemDescriptor().key) {
            indexes.push(index);
          }
        });
      });
      return indexes;
    }
  }, {
    key: "changeComponentsVisibility",
    value: function changeComponentsVisibility() {
      var visible = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      if (!this.dropdownMenuPlugin) {
        return;
      }
      var menu = this.dropdownMenuPlugin.menu;
      var hotMenu = menu.hotMenu;
      var hiddenRows = hotMenu.getPlugin("hiddenRows");
      for (var _len2 = arguments.length, components = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        components[_key2 - 1] = arguments[_key2];
      }
      var indexes = this.getIndexesOfComponents.apply(this, components);
      if (visible) {
        hiddenRows.showRows(indexes);
      } else {
        hiddenRows.hideRows(indexes);
      }
      hotMenu.render();
    }
  }, {
    key: "hideComponents",
    value: function hideComponents() {
      for (var _len3 = arguments.length, components = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        components[_key3] = arguments[_key3];
      }
      this.changeComponentsVisibility.apply(this, [false].concat(components));
    }
  }, {
    key: "showComponents",
    value: function showComponents() {
      for (var _len4 = arguments.length, components = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        components[_key4] = arguments[_key4];
      }
      this.changeComponentsVisibility.apply(this, [true].concat(components));
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this9 = this;
      if (this.enabled) {
        this.components.forEach(function(component, key) {
          if (component !== null) {
            component.destroy();
            _this9.components.set(key, null);
          }
        });
        this.conditionCollection.destroy();
        this.conditionUpdateObserver.destroy();
        this.hot.rowIndexMapper.unregisterMap(this.pluginName);
      }
      _get$t(_getPrototypeOf$z(Filters2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$f;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$e;
    }
  }, {
    key: "PLUGIN_DEPS",
    get: function get() {
      return ["plugin:DropdownMenu", "plugin:HiddenRows", "cell-type:checkbox"];
    }
  }]);
  return Filters2;
}(BasePlugin);

function ownKeys$3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$3(Object(source), true).forEach(function(key) {
      _defineProperty$b(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$b(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
var DEFAULT_LICENSE_KEY = "internal-use-in-handsontable";
var DEFAULT_SETTINGS = {
  licenseKey: DEFAULT_LICENSE_KEY,
  useArrayArithmetic: true,
  useColumnIndex: false,
  useStats: false,
  evaluateNullToZero: true,
  precisionEpsilon: 1e-13,
  precisionRounding: 14,
  smartRounding: true,
  leapYear1900: true,
  nullDate: {
    year: 1899,
    month: 12,
    day: 31
  },
  nullYear: 30,
  dateFormats: ["DD/MM/YYYY", "DD/MM/YY"],
  timeFormats: ["hh:mm", "hh:mm:ss.sss"],
  matchWholeCell: true,
  useRegularExpressions: false,
  useWildcards: true,
  functionArgSeparator: ",",
  thousandSeparator: "",
  decimalSeparator: ".",
  language: "enGB"
};
function getEngineSettingsOverrides(hotSettings) {
  var _hotSettings$PLUGIN_K, _hotSettings$PLUGIN_K2;
  return {
    maxColumns: hotSettings.maxColumns,
    maxRows: hotSettings.maxRows,
    language: (_hotSettings$PLUGIN_K = hotSettings[PLUGIN_KEY$g]) === null || _hotSettings$PLUGIN_K === void 0 ? void 0 : (_hotSettings$PLUGIN_K2 = _hotSettings$PLUGIN_K.language) === null || _hotSettings$PLUGIN_K2 === void 0 ? void 0 : _hotSettings$PLUGIN_K2.langCode
  };
}
function cleanEngineSettings(pluginSettings) {
  return Object.keys(pluginSettings).reduce(function(obj, key) {
    if (key !== "hyperformula") {
      obj[key] = pluginSettings[key];
    }
    return obj;
  }, {});
}
function getEngineSettingsWithDefaultsAndOverrides(hotSettings) {
  var _pluginSettings$engin;
  var pluginSettings = hotSettings[PLUGIN_KEY$g];
  var userSettings = cleanEngineSettings(pluginSettings !== null && pluginSettings !== void 0 && (_pluginSettings$engin = pluginSettings.engine) !== null && _pluginSettings$engin !== void 0 && _pluginSettings$engin.hyperformula ? pluginSettings.engine : {});
  var overrides = getEngineSettingsOverrides(hotSettings);
  return _objectSpread$3(_objectSpread$3(_objectSpread$3({}, DEFAULT_SETTINGS), userSettings), overrides);
}
function getEngineSettingsWithOverrides(hotSettings) {
  var _pluginSettings$engin2;
  var pluginSettings = hotSettings[PLUGIN_KEY$g];
  var userSettings = cleanEngineSettings(pluginSettings !== null && pluginSettings !== void 0 && (_pluginSettings$engin2 = pluginSettings.engine) !== null && _pluginSettings$engin2 !== void 0 && _pluginSettings$engin2.hyperformula ? pluginSettings.engine : {});
  var overrides = getEngineSettingsOverrides(hotSettings);
  return _objectSpread$3(_objectSpread$3({}, userSettings), overrides);
}

function _typeof$A(obj) {
  "@babel/helpers - typeof";
  return _typeof$A = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$A(obj);
}
function getEngineRelationshipRegistry() {
  var registryKey = "engine_relationship";
  var pluginStaticRegistry = staticRegister(PLUGIN_KEY$g);
  if (!pluginStaticRegistry.hasItem(registryKey)) {
    pluginStaticRegistry.register(registryKey, new Map());
  }
  return pluginStaticRegistry.getItem(registryKey);
}
function getSharedEngineUsageRegistry() {
  var registryKey = "shared_engine_usage";
  var pluginStaticRegistry = staticRegister(PLUGIN_KEY$g);
  if (!pluginStaticRegistry.hasItem(registryKey)) {
    pluginStaticRegistry.register(registryKey, new Map());
  }
  return pluginStaticRegistry.getItem(registryKey);
}
function setupEngine(hotInstance) {
  var hotSettings = hotInstance.getSettings();
  var pluginSettings = hotSettings[PLUGIN_KEY$g];
  var engineConfigItem = pluginSettings === null || pluginSettings === void 0 ? void 0 : pluginSettings.engine;
  if (pluginSettings === true) {
    return null;
  }
  if (isUndefined(engineConfigItem)) {
    return null;
  }
  if (typeof engineConfigItem.hyperformula === "function" || typeof engineConfigItem === "function") {
    var _engineConfigItem$hyp;
    return registerEngine((_engineConfigItem$hyp = engineConfigItem.hyperformula) !== null && _engineConfigItem$hyp !== void 0 ? _engineConfigItem$hyp : engineConfigItem, hotSettings, hotInstance);
  } else if (_typeof$A(engineConfigItem) === "object" && isUndefined(engineConfigItem.hyperformula)) {
    var engineRelationship = getEngineRelationshipRegistry();
    var sharedEngineUsage = getSharedEngineUsageRegistry().get(engineConfigItem);
    if (!engineRelationship.has(engineConfigItem)) {
      engineRelationship.set(engineConfigItem, []);
    }
    engineRelationship.get(engineConfigItem).push(hotInstance);
    if (sharedEngineUsage) {
      sharedEngineUsage.push(hotInstance.guid);
    }
    if (!engineConfigItem.getConfig().licenseKey) {
      engineConfigItem.updateConfig({
        licenseKey: DEFAULT_LICENSE_KEY
      });
    }
    return engineConfigItem;
  }
  return null;
}
function registerEngine(engineClass, hotSettings, hotInstance) {
  var pluginSettings = hotSettings[PLUGIN_KEY$g];
  var engineSettings = getEngineSettingsWithDefaultsAndOverrides(hotSettings);
  var engineRegistry = getEngineRelationshipRegistry();
  var sharedEngineRegistry = getSharedEngineUsageRegistry();
  registerCustomFunctions(engineClass, pluginSettings.functions);
  registerLanguage(engineClass, pluginSettings.language);
  var engineInstance = engineClass.buildEmpty(engineSettings);
  engineRegistry.set(engineInstance, [hotInstance]);
  sharedEngineRegistry.set(engineInstance, [hotInstance.guid]);
  registerNamedExpressions(engineInstance, pluginSettings.namedExpressions);
  engineInstance.on("sheetAdded", function() {
    engineInstance.rebuildAndRecalculate();
  });
  engineInstance.on("sheetRemoved", function() {
    engineInstance.rebuildAndRecalculate();
  });
  return engineInstance;
}
function getRegisteredHotInstances(engine) {
  var _engineRegistry$get;
  var engineRegistry = getEngineRelationshipRegistry();
  var hotInstances = engineRegistry.size === 0 ? [] : Array.from((_engineRegistry$get = engineRegistry.get(engine)) !== null && _engineRegistry$get !== void 0 ? _engineRegistry$get : []);
  return new Map(hotInstances.map(function(hot) {
    return [hot.getPlugin("formulas").sheetId, hot];
  }));
}
function unregisterEngine(engine, hotInstance) {
  if (engine) {
    var engineRegistry = getEngineRelationshipRegistry();
    var engineHotRelationship = engineRegistry.get(engine);
    var sharedEngineRegistry = getSharedEngineUsageRegistry();
    var sharedEngineUsage = sharedEngineRegistry.get(engine);
    if (engineHotRelationship && engineHotRelationship.includes(hotInstance)) {
      engineHotRelationship.splice(engineHotRelationship.indexOf(hotInstance), 1);
      if (engineHotRelationship.length === 0) {
        engineRegistry.delete(engine);
      }
    }
    if (sharedEngineUsage && sharedEngineUsage.includes(hotInstance.guid)) {
      sharedEngineUsage.splice(sharedEngineUsage.indexOf(hotInstance.guid), 1);
      if (sharedEngineUsage.length === 0) {
        sharedEngineRegistry.delete(engine);
        engine.destroy();
      }
    }
  }
}
function registerCustomFunctions(engineClass, customFunctions) {
  if (customFunctions) {
    customFunctions.forEach(function(func) {
      var name = func.name, plugin = func.plugin, translations = func.translations;
      try {
        engineClass.registerFunction(name, plugin, translations);
      } catch (e) {
        warn(e.message);
      }
    });
  }
}
function registerLanguage(engineClass, languageSetting) {
  if (languageSetting) {
    var langCode = languageSetting.langCode;
    try {
      engineClass.registerLanguage(langCode, languageSetting);
    } catch (e) {
      warn(e.message);
    }
  }
}
function registerNamedExpressions(engineInstance, namedExpressions) {
  if (namedExpressions) {
    engineInstance.suspendEvaluation();
    namedExpressions.forEach(function(namedExp) {
      var name = namedExp.name, expression = namedExp.expression, scope = namedExp.scope, options = namedExp.options;
      try {
        engineInstance.addNamedExpression(name, expression, scope, options);
      } catch (e) {
        warn(e.message);
      }
    });
    engineInstance.resumeEvaluation();
  }
}
function setupSheet(engineInstance, sheetName) {
  if (isUndefined(sheetName) || !engineInstance.doesSheetExist(sheetName)) {
    sheetName = engineInstance.addSheet(sheetName);
  }
  return sheetName;
}

function isEscapedFormulaExpression(expression) {
  return typeof expression === "string" && expression.charAt(0) === "'" && expression.charAt(1) === "=";
}
function unescapeFormulaExpression(expression) {
  return isEscapedFormulaExpression(expression) ? expression.substr(1) : expression;
}

function _toConsumableArray$5(arr) {
  return _arrayWithoutHoles$5(arr) || _iterableToArray$6(arr) || _unsupportedIterableToArray$v(arr) || _nonIterableSpread$5();
}
function _nonIterableSpread$5() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray$6(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$5(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$v(arr);
}
function ownKeys$4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$4(Object(source), true).forEach(function(key) {
      _defineProperty$c(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _typeof$B(obj) {
  "@babel/helpers - typeof";
  return _typeof$B = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$B(obj);
}
function _slicedToArray$q(arr, i) {
  return _arrayWithHoles$r(arr) || _iterableToArrayLimit$q(arr, i) || _unsupportedIterableToArray$v(arr, i) || _nonIterableRest$r();
}
function _nonIterableRest$r() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$v(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$v(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$v(o, minLen);
}
function _arrayLikeToArray$v(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$q(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$r(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck$V(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$V(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$V(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$V(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$V(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$u() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$u = Reflect.get.bind();
  } else {
    _get$u = function _get2(target, property, receiver) {
      var base = _superPropBase$u(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$u.apply(this, arguments);
}
function _superPropBase$u(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$A(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$A(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$A(subClass, superClass);
}
function _setPrototypeOf$A(o, p) {
  _setPrototypeOf$A = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$A(o, p);
}
function _createSuper$A(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$A();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$A(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$A(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$A(this, result);
  };
}
function _possibleConstructorReturn$A(self, call) {
  if (call && (_typeof$B(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$A(self);
}
function _assertThisInitialized$A(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$A() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$A(o) {
  _getPrototypeOf$A = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$A(o);
}
function _defineProperty$c(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classPrivateFieldInitSpec$1(obj, privateMap, value) {
  _checkPrivateRedeclaration$2(obj, privateMap);
  privateMap.set(obj, value);
}
function _checkPrivateRedeclaration$2(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classPrivateFieldSet$1(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor$1(receiver, privateMap, "set");
  _classApplyDescriptorSet$1(receiver, descriptor, value);
  return value;
}
function _classApplyDescriptorSet$1(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}
function _classPrivateFieldGet$1(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor$1(receiver, privateMap, "get");
  return _classApplyDescriptorGet$1(receiver, descriptor);
}
function _classExtractFieldDescriptor$1(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classApplyDescriptorGet$1(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
var PLUGIN_KEY$g = "formulas";
var PLUGIN_PRIORITY$f = 260;
var ROW_MOVE_UNDO_REDO_NAME = "row_move";
Hooks.getSingleton().register("afterNamedExpressionAdded");
Hooks.getSingleton().register("afterNamedExpressionRemoved");
Hooks.getSingleton().register("afterSheetAdded");
Hooks.getSingleton().register("afterSheetRemoved");
Hooks.getSingleton().register("afterSheetRenamed");
Hooks.getSingleton().register("afterFormulasValuesUpdate");
var isBlockedSource = function isBlockedSource2(source) {
  return source === "UndoRedo.undo" || source === "UndoRedo.redo" || source === "auto";
};
var _internalOperationPending = /* @__PURE__ */ new WeakMap();
var _hotWasInitializedWithEmptyData = /* @__PURE__ */ new WeakMap();
var _engineListeners = /* @__PURE__ */ new WeakMap();
var Formulas = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$A(Formulas2, _BasePlugin);
  var _super = _createSuper$A(Formulas2);
  function Formulas2() {
    var _this;
    _classCallCheck$V(this, Formulas2);
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(_args));
    _classPrivateFieldInitSpec$1(_assertThisInitialized$A(_this), _internalOperationPending, {
      writable: true,
      value: false
    });
    _classPrivateFieldInitSpec$1(_assertThisInitialized$A(_this), _hotWasInitializedWithEmptyData, {
      writable: true,
      value: false
    });
    _classPrivateFieldInitSpec$1(_assertThisInitialized$A(_this), _engineListeners, {
      writable: true,
      value: [["valuesUpdated", function() {
        var _this2;
        return (_this2 = _this).onEngineValuesUpdated.apply(_this2, arguments);
      }], ["namedExpressionAdded", function() {
        var _this3;
        return (_this3 = _this).onEngineNamedExpressionsAdded.apply(_this3, arguments);
      }], ["namedExpressionRemoved", function() {
        var _this4;
        return (_this4 = _this).onEngineNamedExpressionsRemoved.apply(_this4, arguments);
      }], ["sheetAdded", function() {
        var _this5;
        return (_this5 = _this).onEngineSheetAdded.apply(_this5, arguments);
      }], ["sheetRenamed", function() {
        var _this6;
        return (_this6 = _this).onEngineSheetRenamed.apply(_this6, arguments);
      }], ["sheetRemoved", function() {
        var _this7;
        return (_this7 = _this).onEngineSheetRemoved.apply(_this7, arguments);
      }]]
    });
    _defineProperty$c(_assertThisInitialized$A(_this), "staticRegister", staticRegister("formulas"));
    _defineProperty$c(_assertThisInitialized$A(_this), "engine", null);
    _defineProperty$c(_assertThisInitialized$A(_this), "sheetName", null);
    return _this;
  }
  _createClass$V(Formulas2, [{
    key: "sheetId",
    get: function get() {
      return this.sheetName === null ? null : this.engine.getSheetId(this.sheetName);
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.hot.getSettings()[PLUGIN_KEY$g] ? true : false;
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _setupEngine, _this8 = this;
      if (this.enabled) {
        return;
      }
      this.engine = (_setupEngine = setupEngine(this.hot)) !== null && _setupEngine !== void 0 ? _setupEngine : this.engine;
      if (!this.engine) {
        warn("Missing the required `engine` key in the Formulas settings. Please fill it with either an engine class or an engine instance.");
        return;
      }
      if (this.sheetName !== null && !this.engine.doesSheetExist(this.sheetName)) {
        var newSheetName = this.addSheet(this.sheetName, this.hot.getSourceDataArray());
        if (newSheetName !== false) {
          this.sheetName = newSheetName;
        }
      }
      this.addHook("beforeLoadData", function() {
        return _this8.onBeforeLoadData.apply(_this8, arguments);
      });
      this.addHook("afterLoadData", function() {
        return _this8.onAfterLoadData.apply(_this8, arguments);
      });
      this.addHook("modifyData", function() {
        return _this8.onModifyData.apply(_this8, arguments);
      });
      this.addHook("modifySourceData", function() {
        return _this8.onModifySourceData.apply(_this8, arguments);
      });
      this.addHook("beforeValidate", function() {
        return _this8.onBeforeValidate.apply(_this8, arguments);
      });
      this.addHook("afterSetSourceDataAtCell", function() {
        return _this8.onAfterSetSourceDataAtCell.apply(_this8, arguments);
      });
      this.addHook("afterSetDataAtCell", function() {
        return _this8.onAfterSetDataAtCell.apply(_this8, arguments);
      });
      this.addHook("afterSetDataAtRowProp", function() {
        return _this8.onAfterSetDataAtCell.apply(_this8, arguments);
      });
      this.addHook("beforeCreateRow", function() {
        return _this8.onBeforeCreateRow.apply(_this8, arguments);
      });
      this.addHook("beforeCreateCol", function() {
        return _this8.onBeforeCreateCol.apply(_this8, arguments);
      });
      this.addHook("afterCreateRow", function() {
        return _this8.onAfterCreateRow.apply(_this8, arguments);
      });
      this.addHook("afterCreateCol", function() {
        return _this8.onAfterCreateCol.apply(_this8, arguments);
      });
      this.addHook("beforeRemoveRow", function() {
        return _this8.onBeforeRemoveRow.apply(_this8, arguments);
      });
      this.addHook("beforeRemoveCol", function() {
        return _this8.onBeforeRemoveCol.apply(_this8, arguments);
      });
      this.addHook("afterRemoveRow", function() {
        return _this8.onAfterRemoveRow.apply(_this8, arguments);
      });
      this.addHook("afterRemoveCol", function() {
        return _this8.onAfterRemoveCol.apply(_this8, arguments);
      });
      this.addHook("beforeUndo", function(action) {
        if ((action === null || action === void 0 ? void 0 : action.actionType) === ROW_MOVE_UNDO_REDO_NAME) {
          return;
        }
        _this8.engine.undo();
      });
      this.addHook("beforeRedo", function(action) {
        if ((action === null || action === void 0 ? void 0 : action.actionType) === ROW_MOVE_UNDO_REDO_NAME) {
          return;
        }
        _this8.engine.redo();
      });
      this.addHook("afterDetachChild", function() {
        return _this8.onAfterDetachChild.apply(_this8, arguments);
      });
      this.addHook("beforeAutofill", function() {
        return _this8.onBeforeAutofill.apply(_this8, arguments);
      });
      _classPrivateFieldGet$1(this, _engineListeners).forEach(function(_ref) {
        var _ref2 = _slicedToArray$q(_ref, 2), eventName = _ref2[0], listener = _ref2[1];
        return _this8.engine.on(eventName, listener);
      });
      _get$u(_getPrototypeOf$A(Formulas2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      var _this9 = this;
      _classPrivateFieldGet$1(this, _engineListeners).forEach(function(_ref3) {
        var _ref4 = _slicedToArray$q(_ref3, 2), eventName = _ref4[0], listener = _ref4[1];
        return _this9.engine.off(eventName, listener);
      });
      unregisterEngine(this.engine, this.hot);
      this.engine = null;
      _get$u(_getPrototypeOf$A(Formulas2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin(newSettings) {
      this.engine.updateConfig(getEngineSettingsWithOverrides(this.hot.getSettings()));
      var pluginSettings = this.hot.getSettings()[PLUGIN_KEY$g];
      if (isDefined(pluginSettings) && isDefined(pluginSettings.sheetName) && pluginSettings.sheetName !== this.sheetName) {
        this.switchSheet(pluginSettings.sheetName);
      }
      if (!newSettings.data && this.sheetName === null) {
        var sheetName = this.hot.getSettings()[PLUGIN_KEY$g].sheetName;
        if (sheetName && this.engine.doesSheetExist(sheetName)) {
          this.switchSheet(this.sheetName);
        } else {
          this.sheetName = this.addSheet(sheetName !== null && sheetName !== void 0 ? sheetName : void 0, this.hot.getSourceDataArray());
        }
      }
      _get$u(_getPrototypeOf$A(Formulas2.prototype), "updatePlugin", this).call(this, newSettings);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this10 = this;
      _classPrivateFieldGet$1(this, _engineListeners).forEach(function(_ref5) {
        var _this10$engine;
        var _ref6 = _slicedToArray$q(_ref5, 2), eventName = _ref6[0], listener = _ref6[1];
        return (_this10$engine = _this10.engine) === null || _this10$engine === void 0 ? void 0 : _this10$engine.off(eventName, listener);
      });
      _classPrivateFieldSet$1(this, _engineListeners, null);
      unregisterEngine(this.engine, this.hot);
      this.engine = null;
      _get$u(_getPrototypeOf$A(Formulas2.prototype), "destroy", this).call(this);
    }
  }, {
    key: "getPhysicalIndexPosition",
    value: function getPhysicalIndexPosition(visualIndex, physicalIndex, entriesCount, sourceEntriesCount, contained) {
      if (!contained) {
        if (visualIndex >= entriesCount) {
          return sourceEntriesCount + (visualIndex - entriesCount);
        }
      }
      return physicalIndex;
    }
  }, {
    key: "toPhysicalRowPosition",
    value: function toPhysicalRowPosition(row) {
      var contained = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      return this.getPhysicalIndexPosition(row, this.hot.toPhysicalRow(row), this.hot.countRows(), this.hot.countSourceRows(), contained);
    }
  }, {
    key: "toPhysicalColumnPosition",
    value: function toPhysicalColumnPosition(column) {
      var contained = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      return this.getPhysicalIndexPosition(column, this.hot.toPhysicalColumn(column), this.hot.countCols(), this.hot.countSourceCols(), contained);
    }
  }, {
    key: "addSheet",
    value: function addSheet(sheetName, sheetData) {
      if (isDefined(sheetData) && !isArrayOfArrays(sheetData)) {
        warn("The provided data should be an array of arrays.");
        return false;
      }
      if (sheetName !== void 0 && sheetName !== null && this.engine.doesSheetExist(sheetName)) {
        warn("Sheet with the provided name already exists.");
        return false;
      }
      try {
        var actualSheetName = this.engine.addSheet(sheetName !== null && sheetName !== void 0 ? sheetName : void 0);
        if (sheetData) {
          this.engine.setSheetContent(this.engine.getSheetId(actualSheetName), sheetData);
        }
        return actualSheetName;
      } catch (e) {
        warn(e.message);
        return false;
      }
    }
  }, {
    key: "switchSheet",
    value: function switchSheet(sheetName) {
      if (!this.engine.doesSheetExist(sheetName)) {
        error("The sheet named `".concat(sheetName, "` does not exist, switch aborted."));
        return;
      }
      this.sheetName = sheetName;
      var serialized = this.engine.getSheetSerialized(this.sheetId);
      if (serialized.length > 0) {
        this.hot.loadData(serialized, "".concat(toUpperCaseFirst(PLUGIN_KEY$g), ".switchSheet"));
      }
    }
  }, {
    key: "getCellType",
    value: function getCellType(row, column) {
      var sheet = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.sheetId;
      var physicalRow = this.hot.toPhysicalRow(row);
      var physicalColumn = this.hot.toPhysicalColumn(column);
      if (physicalRow !== null && physicalColumn !== null) {
        return this.engine.getCellType({
          sheet,
          row: physicalRow,
          col: physicalColumn
        });
      } else {
        return "EMPTY";
      }
    }
  }, {
    key: "isFormulaCellType",
    value: function isFormulaCellType(row, column) {
      var sheet = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.sheetId;
      var physicalRow = this.hot.toPhysicalRow(row);
      var physicalColumn = this.hot.toPhysicalColumn(column);
      if (physicalRow === null || physicalColumn === null) {
        return false;
      }
      return this.engine.doesCellHaveFormula({
        sheet,
        row: physicalRow,
        col: physicalColumn
      });
    }
  }, {
    key: "renderDependentSheets",
    value: function renderDependentSheets(dependentCells) {
      var _this11 = this;
      var renderSelf = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var affectedSheetIds = new Set();
      dependentCells.forEach(function(change) {
        var _change$address;
        var sheetId = change === null || change === void 0 ? void 0 : (_change$address = change.address) === null || _change$address === void 0 ? void 0 : _change$address.sheet;
        if (sheetId !== void 0) {
          if (!affectedSheetIds.has(sheetId)) {
            affectedSheetIds.add(sheetId);
          }
        }
      });
      getRegisteredHotInstances(this.engine).forEach(function(relatedHot, sheetId) {
        if ((renderSelf || sheetId !== _this11.sheetId) && affectedSheetIds.has(sheetId)) {
          var _relatedHot$view;
          relatedHot.render();
          (_relatedHot$view = relatedHot.view) === null || _relatedHot$view === void 0 ? void 0 : _relatedHot$view.adjustElementsSize();
        }
      });
    }
  }, {
    key: "validateDependentCells",
    value: function validateDependentCells(dependentCells) {
      var _this12 = this;
      var changedCells = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      var stringifyAddress = function stringifyAddress2(change) {
        var _change$address2;
        var _ref7 = (_change$address2 = change === null || change === void 0 ? void 0 : change.address) !== null && _change$address2 !== void 0 ? _change$address2 : {}, row = _ref7.row, col = _ref7.col, sheet = _ref7.sheet;
        return isDefined(sheet) ? "".concat(sheet, ":").concat(row, "x").concat(col) : "";
      };
      var changedCellsSet = new Set(changedCells.map(function(change) {
        return stringifyAddress(change);
      }));
      dependentCells.forEach(function(change) {
        var _change$address3, _change$address4;
        var _ref8 = (_change$address3 = change.address) !== null && _change$address3 !== void 0 ? _change$address3 : {}, row = _ref8.row, col = _ref8.col;
        var visualRow = isDefined(row) ? _this12.hot.toVisualRow(row) : null;
        var visualColumn = isDefined(col) ? _this12.hot.toVisualColumn(col) : null;
        if (visualRow === null || visualColumn === null) {
          return;
        }
        var sheetId = change === null || change === void 0 ? void 0 : (_change$address4 = change.address) === null || _change$address4 === void 0 ? void 0 : _change$address4.sheet;
        var addressId = stringifyAddress(change);
        if (sheetId !== void 0 && !changedCellsSet.has(addressId)) {
          var boundHot = getRegisteredHotInstances(_this12.engine).get(sheetId);
          if (!boundHot) {
            return;
          }
          boundHot.validateCell(boundHot.getDataAtCell(visualRow, visualColumn), boundHot.getCellMeta(visualRow, visualColumn), function() {
          });
        }
      });
    }
  }, {
    key: "syncChangeWithEngine",
    value: function syncChangeWithEngine(row, column, newValue) {
      var address = {
        row: this.toPhysicalRowPosition(row),
        col: this.toPhysicalColumnPosition(column),
        sheet: this.sheetId
      };
      if (!this.engine.isItPossibleToSetCellContents(address)) {
        warn("Not possible to set cell data at ".concat(JSON.stringify(address)));
        return;
      }
      return this.engine.setCellContents(address, newValue);
    }
  }, {
    key: "onBeforeValidate",
    value: function onBeforeValidate(value, visualRow, prop) {
      var visualColumn = this.hot.propToCol(prop);
      if (this.isFormulaCellType(visualRow, visualColumn)) {
        var address = {
          row: this.hot.toPhysicalRow(visualRow),
          col: this.hot.toPhysicalColumn(visualColumn),
          sheet: this.sheetId
        };
        var cellValue = this.engine.getCellValue(address);
        return _typeof$B(cellValue) === "object" && cellValue !== null ? cellValue.value : cellValue;
      }
      return value;
    }
  }, {
    key: "onBeforeAutofill",
    value: function onBeforeAutofill(fillData, sourceRange, targetRange) {
      var _this13 = this;
      var withSheetId = function withSheetId2(range) {
        return _objectSpread$4(_objectSpread$4({}, range), {}, {
          sheet: _this13.sheetId
        });
      };
      var engineSourceRange = {
        start: withSheetId(sourceRange.getTopStartCorner()),
        end: withSheetId(sourceRange.getBottomEndCorner())
      };
      var engineTargetRange = {
        start: withSheetId(targetRange.getTopStartCorner()),
        end: withSheetId(targetRange.getBottomEndCorner())
      };
      if (this.engine.isItPossibleToSetCellContents(engineTargetRange) === false) {
        return false;
      }
      return this.engine.getFillRangeData(engineSourceRange, engineTargetRange);
    }
  }, {
    key: "onBeforeLoadData",
    value: function onBeforeLoadData(sourceData, initialLoad) {
      var source = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
      if (source.includes(toUpperCaseFirst(PLUGIN_KEY$g))) {
        return;
      }
      _classPrivateFieldSet$1(this, _hotWasInitializedWithEmptyData, isUndefined(this.hot.getSettings().data));
    }
  }, {
    key: "onAfterLoadData",
    value: function onAfterLoadData(sourceData, initialLoad) {
      var source = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
      if (source.includes(toUpperCaseFirst(PLUGIN_KEY$g))) {
        return;
      }
      this.sheetName = setupSheet(this.engine, this.hot.getSettings()[PLUGIN_KEY$g].sheetName);
      if (!_classPrivateFieldGet$1(this, _hotWasInitializedWithEmptyData)) {
        var sourceDataArray = this.hot.getSourceDataArray();
        if (this.engine.isItPossibleToReplaceSheetContent(this.sheetId, sourceDataArray)) {
          _classPrivateFieldSet$1(this, _internalOperationPending, true);
          var dependentCells = this.engine.setSheetContent(this.sheetId, this.hot.getSourceDataArray());
          this.renderDependentSheets(dependentCells);
          _classPrivateFieldSet$1(this, _internalOperationPending, false);
        }
      } else {
        this.switchSheet(this.sheetName);
      }
    }
  }, {
    key: "onModifyData",
    value: function onModifyData(row, column, valueHolder, ioMode) {
      if (ioMode !== "get" || _classPrivateFieldGet$1(this, _internalOperationPending) || this.sheetName === null || !this.engine.doesSheetExist(this.sheetName)) {
        return;
      }
      var visualRow = this.hot.toVisualRow(row);
      var isFormulaCellType = this.isFormulaCellType(visualRow, column);
      if (!isFormulaCellType) {
        var cellType = this.getCellType(visualRow, column);
        if (cellType !== "ARRAY") {
          if (isEscapedFormulaExpression(valueHolder.value)) {
            valueHolder.value = unescapeFormulaExpression(valueHolder.value);
          }
          return;
        }
      }
      var address = {
        row,
        col: this.toPhysicalColumnPosition(column),
        sheet: this.sheetId
      };
      var cellValue = this.engine.getCellValue(address);
      var value = _typeof$B(cellValue) === "object" && cellValue !== null ? cellValue.value : cellValue;
      valueHolder.value = value;
    }
  }, {
    key: "onModifySourceData",
    value: function onModifySourceData(row, columnOrProp, valueHolder, ioMode) {
      if (ioMode !== "get" || _classPrivateFieldGet$1(this, _internalOperationPending) || this.sheetName === null || !this.engine.doesSheetExist(this.sheetName)) {
        return;
      }
      var visualRow = this.hot.toVisualRow(row);
      var visualColumn = this.hot.propToCol(columnOrProp);
      var isFormulaCellType = this.isFormulaCellType(visualRow, visualColumn);
      if (!isFormulaCellType) {
        var cellType = this.getCellType(visualRow, visualColumn);
        if (cellType !== "ARRAY") {
          return;
        }
      }
      var dimensions = this.engine.getSheetDimensions(this.engine.getSheetId(this.sheetName));
      if (dimensions.width === 0 && dimensions.height === 0) {
        return;
      }
      var address = {
        row,
        col: this.toPhysicalColumnPosition(visualColumn),
        sheet: this.sheetId
      };
      valueHolder.value = this.engine.getCellSerialized(address);
    }
  }, {
    key: "onAfterSetDataAtCell",
    value: function onAfterSetDataAtCell(changes, source) {
      var _this14 = this;
      if (isBlockedSource(source)) {
        return;
      }
      var outOfBoundsChanges = [];
      var changedCells = [];
      var dependentCells = this.engine.batch(function() {
        changes.forEach(function(_ref9) {
          var _ref10 = _slicedToArray$q(_ref9, 4), row = _ref10[0], prop = _ref10[1], newValue = _ref10[3];
          var column = _this14.hot.propToCol(prop);
          var physicalRow = _this14.hot.toPhysicalRow(row);
          var physicalColumn = _this14.hot.toPhysicalColumn(column);
          var address = {
            row: physicalRow,
            col: physicalColumn,
            sheet: _this14.sheetId
          };
          if (physicalRow !== null && physicalColumn !== null) {
            _this14.syncChangeWithEngine(row, column, newValue);
          } else {
            outOfBoundsChanges.push([row, column, newValue]);
          }
          changedCells.push({
            address
          });
        });
      });
      if (outOfBoundsChanges.length) {
        this.hot.addHookOnce("afterChange", function() {
          var outOfBoundsDependentCells = _this14.engine.batch(function() {
            outOfBoundsChanges.forEach(function(_ref11) {
              var _ref12 = _slicedToArray$q(_ref11, 3), row = _ref12[0], column = _ref12[1], newValue = _ref12[2];
              _this14.syncChangeWithEngine(row, column, newValue);
            });
          });
          _this14.renderDependentSheets(outOfBoundsDependentCells, true);
        });
      }
      this.renderDependentSheets(dependentCells);
      this.validateDependentCells(dependentCells, changedCells);
    }
  }, {
    key: "onAfterSetSourceDataAtCell",
    value: function onAfterSetSourceDataAtCell(changes, source) {
      var _this15 = this;
      if (isBlockedSource(source)) {
        return;
      }
      var dependentCells = [];
      var changedCells = [];
      changes.forEach(function(_ref13) {
        var _ref14 = _slicedToArray$q(_ref13, 4), row = _ref14[0], prop = _ref14[1], newValue = _ref14[3];
        var column = _this15.hot.propToCol(prop);
        if (!isNumeric(column)) {
          return;
        }
        var address = {
          row,
          col: _this15.toPhysicalColumnPosition(column),
          sheet: _this15.sheetId
        };
        if (!_this15.engine.isItPossibleToSetCellContents(address)) {
          warn("Not possible to set source cell data at ".concat(JSON.stringify(address)));
          return;
        }
        changedCells.push({
          address
        });
        dependentCells.push.apply(dependentCells, _toConsumableArray$5(_this15.engine.setCellContents(address, newValue)));
      });
      this.renderDependentSheets(dependentCells);
      this.validateDependentCells(dependentCells, changedCells);
    }
  }, {
    key: "onBeforeCreateRow",
    value: function onBeforeCreateRow(row, amount) {
      if (this.sheetId === null || !this.engine.doesSheetExist(this.sheetName) || !this.engine.isItPossibleToAddRows(this.sheetId, [this.toPhysicalRowPosition(row), amount])) {
        return false;
      }
    }
  }, {
    key: "onBeforeCreateCol",
    value: function onBeforeCreateCol(col, amount) {
      if (this.sheetId === null || !this.engine.doesSheetExist(this.sheetName) || !this.engine.isItPossibleToAddColumns(this.sheetId, [this.toPhysicalColumnPosition(col), amount])) {
        return false;
      }
    }
  }, {
    key: "onBeforeRemoveRow",
    value: function onBeforeRemoveRow(row, amount, physicalRows) {
      var _this16 = this;
      var possible = physicalRows.every(function(physicalRow) {
        return _this16.engine.isItPossibleToRemoveRows(_this16.sheetId, [physicalRow, 1]);
      });
      return possible === false ? false : void 0;
    }
  }, {
    key: "onBeforeRemoveCol",
    value: function onBeforeRemoveCol(col, amount, physicalColumns) {
      var _this17 = this;
      var possible = physicalColumns.every(function(physicalColumn) {
        return _this17.engine.isItPossibleToRemoveColumns(_this17.sheetId, [physicalColumn, 1]);
      });
      return possible === false ? false : void 0;
    }
  }, {
    key: "onAfterCreateRow",
    value: function onAfterCreateRow(row, amount, source) {
      if (isBlockedSource(source)) {
        return;
      }
      var changes = this.engine.addRows(this.sheetId, [this.toPhysicalRowPosition(row), amount]);
      this.renderDependentSheets(changes);
    }
  }, {
    key: "onAfterCreateCol",
    value: function onAfterCreateCol(col, amount, source) {
      if (isBlockedSource(source)) {
        return;
      }
      var changes = this.engine.addColumns(this.sheetId, [this.toPhysicalColumnPosition(col), amount]);
      this.renderDependentSheets(changes);
    }
  }, {
    key: "onAfterRemoveRow",
    value: function onAfterRemoveRow(row, amount, physicalRows, source) {
      var _this18 = this;
      if (isBlockedSource(source)) {
        return;
      }
      var descendingPhysicalRows = physicalRows.sort().reverse();
      var changes = this.engine.batch(function() {
        descendingPhysicalRows.forEach(function(physicalRow) {
          _this18.engine.removeRows(_this18.sheetId, [physicalRow, 1]);
        });
      });
      this.renderDependentSheets(changes);
    }
  }, {
    key: "onAfterRemoveCol",
    value: function onAfterRemoveCol(col, amount, physicalColumns, source) {
      var _this19 = this;
      if (isBlockedSource(source)) {
        return;
      }
      var descendingPhysicalColumns = physicalColumns.sort().reverse();
      var changes = this.engine.batch(function() {
        descendingPhysicalColumns.forEach(function(physicalColumn) {
          _this19.engine.removeColumns(_this19.sheetId, [physicalColumn, 1]);
        });
      });
      this.renderDependentSheets(changes);
    }
  }, {
    key: "onAfterDetachChild",
    value: function onAfterDetachChild(parent, element, finalElementRowIndex) {
      var _element$__children, _this20 = this;
      _classPrivateFieldSet$1(this, _internalOperationPending, true);
      var rowsData = this.hot.getSourceDataArray(finalElementRowIndex, 0, finalElementRowIndex + (((_element$__children = element.__children) === null || _element$__children === void 0 ? void 0 : _element$__children.length) || 0), this.hot.countSourceCols());
      _classPrivateFieldSet$1(this, _internalOperationPending, false);
      rowsData.forEach(function(row, relativeRowIndex) {
        row.forEach(function(value, colIndex) {
          _this20.engine.setCellContents({
            col: colIndex,
            row: finalElementRowIndex + relativeRowIndex,
            sheet: _this20.sheetId
          }, [[value]]);
        });
      });
    }
  }, {
    key: "onEngineValuesUpdated",
    value: function onEngineValuesUpdated(changes) {
      this.hot.runHooks("afterFormulasValuesUpdate", changes);
    }
  }, {
    key: "onEngineNamedExpressionsAdded",
    value: function onEngineNamedExpressionsAdded(namedExpressionName, changes) {
      this.hot.runHooks("afterNamedExpressionAdded", namedExpressionName, changes);
    }
  }, {
    key: "onEngineNamedExpressionsRemoved",
    value: function onEngineNamedExpressionsRemoved(namedExpressionName, changes) {
      this.hot.runHooks("afterNamedExpressionRemoved", namedExpressionName, changes);
    }
  }, {
    key: "onEngineSheetAdded",
    value: function onEngineSheetAdded(addedSheetDisplayName) {
      this.hot.runHooks("afterSheetAdded", addedSheetDisplayName);
    }
  }, {
    key: "onEngineSheetRenamed",
    value: function onEngineSheetRenamed(oldDisplayName, newDisplayName) {
      this.hot.runHooks("afterSheetRenamed", oldDisplayName, newDisplayName);
    }
  }, {
    key: "onEngineSheetRemoved",
    value: function onEngineSheetRemoved(removedSheetDisplayName, changes) {
      this.hot.runHooks("afterSheetRemoved", removedSheetDisplayName, changes);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$g;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$f;
    }
  }]);
  return Formulas2;
}(BasePlugin);

function _slicedToArray$r(arr, i) {
  return _arrayWithHoles$s(arr) || _iterableToArrayLimit$r(arr, i) || _unsupportedIterableToArray$w(arr, i) || _nonIterableRest$s();
}
function _nonIterableRest$s() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$w(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$w(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$w(o, minLen);
}
function _arrayLikeToArray$w(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$r(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$s(arr) {
  if (Array.isArray(arr))
    return arr;
}
function hideColumnItem(hiddenColumnsPlugin) {
  return {
    key: "hidden_columns_hide",
    name: function name() {
      var selection = this.getSelectedLast();
      var pluralForm = 0;
      if (Array.isArray(selection)) {
        var _selection = _slicedToArray$r(selection, 4), fromColumn = _selection[1], toColumn = _selection[3];
        if (fromColumn - toColumn !== 0) {
          pluralForm = 1;
        }
      }
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_HIDE_COLUMN, pluralForm);
    },
    callback: function callback() {
      var _this$getSelectedRang = this.getSelectedRangeLast(), from = _this$getSelectedRang.from, to = _this$getSelectedRang.to;
      var start = Math.max(Math.min(from.col, to.col), 0);
      var end = Math.max(from.col, to.col);
      var columnsToHide = [];
      for (var visualColumn = start; visualColumn <= end; visualColumn += 1) {
        columnsToHide.push(visualColumn);
      }
      hiddenColumnsPlugin.hideColumns(columnsToHide);
      var lastHiddenColumn = columnsToHide[columnsToHide.length - 1];
      var columnToSelect = this.columnIndexMapper.getNearestNotHiddenIndex(lastHiddenColumn, 1, true);
      if (Number.isInteger(columnToSelect) && columnToSelect >= 0) {
        this.selectColumns(columnToSelect);
      } else {
        this.deselectCell();
      }
      this.render();
      this.view.adjustElementsSize(true);
    },
    disabled: false,
    hidden: function hidden() {
      return !(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner());
    }
  };
}

function _toConsumableArray$6(arr) {
  return _arrayWithoutHoles$6(arr) || _iterableToArray$7(arr) || _unsupportedIterableToArray$x(arr) || _nonIterableSpread$6();
}
function _nonIterableSpread$6() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$x(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$x(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$x(o, minLen);
}
function _iterableToArray$7(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$6(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$x(arr);
}
function _arrayLikeToArray$x(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function showColumnItem(hiddenColumnsPlugin) {
  var columns = [];
  return {
    key: "hidden_columns_show",
    name: function name() {
      var pluralForm = columns.length > 1 ? 1 : 0;
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_SHOW_COLUMN, pluralForm);
    },
    callback: function callback() {
      var _this$columnIndexMapp, _this$columnIndexMapp2;
      if (columns.length === 0) {
        return;
      }
      var startVisualColumn = columns[0];
      var endVisualColumn = columns[columns.length - 1];
      startVisualColumn = (_this$columnIndexMapp = this.columnIndexMapper.getNearestNotHiddenIndex(startVisualColumn - 1, -1)) !== null && _this$columnIndexMapp !== void 0 ? _this$columnIndexMapp : 0;
      endVisualColumn = (_this$columnIndexMapp2 = this.columnIndexMapper.getNearestNotHiddenIndex(endVisualColumn + 1, 1)) !== null && _this$columnIndexMapp2 !== void 0 ? _this$columnIndexMapp2 : this.countCols() - 1;
      hiddenColumnsPlugin.showColumns(columns);
      this.render();
      this.view.adjustElementsSize(true);
      var allColumnsSelected = endVisualColumn - startVisualColumn + 1 === this.countCols();
      if (!allColumnsSelected) {
        this.selectColumns(startVisualColumn, endVisualColumn);
      }
    },
    disabled: false,
    hidden: function hidden() {
      var _this = this;
      var hiddenPhysicalColumns = arrayMap(hiddenColumnsPlugin.getHiddenColumns(), function(visualColumnIndex) {
        return _this.toPhysicalColumn(visualColumnIndex);
      });
      if (!(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner()) || hiddenPhysicalColumns.length < 1) {
        return true;
      }
      columns.length = 0;
      var selectedRangeLast = this.getSelectedRangeLast();
      var visualStartColumn = selectedRangeLast.getTopStartCorner().col;
      var visualEndColumn = selectedRangeLast.getBottomEndCorner().col;
      var columnIndexMapper = this.columnIndexMapper;
      var renderableStartColumn = columnIndexMapper.getRenderableFromVisualIndex(visualStartColumn);
      var renderableEndColumn = columnIndexMapper.getRenderableFromVisualIndex(visualEndColumn);
      var notTrimmedColumnIndexes = columnIndexMapper.getNotTrimmedIndexes();
      var physicalColumnIndexes = [];
      if (visualStartColumn !== visualEndColumn) {
        var visualColumnsInRange = visualEndColumn - visualStartColumn + 1;
        var renderedColumnsInRange = renderableEndColumn - renderableStartColumn + 1;
        if (visualColumnsInRange > renderedColumnsInRange) {
          var physicalIndexesInRange = notTrimmedColumnIndexes.slice(visualStartColumn, visualEndColumn + 1);
          physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray$6(physicalIndexesInRange.filter(function(physicalIndex) {
            return hiddenPhysicalColumns.includes(physicalIndex);
          })));
        }
      } else if (renderableStartColumn === 0 && renderableStartColumn < visualStartColumn) {
        physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray$6(notTrimmedColumnIndexes.slice(0, visualStartColumn)));
      } else if (renderableStartColumn === null) {
        physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray$6(notTrimmedColumnIndexes.slice(0, this.countCols())));
      } else {
        var lastVisualIndex = this.countCols() - 1;
        var lastRenderableIndex = columnIndexMapper.getRenderableFromVisualIndex(columnIndexMapper.getNearestNotHiddenIndex(lastVisualIndex, -1));
        if (renderableEndColumn === lastRenderableIndex && lastVisualIndex > visualEndColumn) {
          physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray$6(notTrimmedColumnIndexes.slice(visualEndColumn + 1)));
        }
      }
      arrayEach(physicalColumnIndexes, function(physicalColumnIndex) {
        columns.push(_this.toVisualColumn(physicalColumnIndex));
      });
      return columns.length === 0;
    }
  };
}

function _typeof$C(obj) {
  "@babel/helpers - typeof";
  return _typeof$C = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$C(obj);
}
function _classCallCheck$W(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$W(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$W(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$W(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$W(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$v() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$v = Reflect.get.bind();
  } else {
    _get$v = function _get2(target, property, receiver) {
      var base = _superPropBase$v(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$v.apply(this, arguments);
}
function _superPropBase$v(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$B(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$B(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$B(subClass, superClass);
}
function _setPrototypeOf$B(o, p) {
  _setPrototypeOf$B = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$B(o, p);
}
function _createSuper$B(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$B();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$B(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$B(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$B(this, result);
  };
}
function _possibleConstructorReturn$B(self, call) {
  if (call && (_typeof$C(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$B(self);
}
function _assertThisInitialized$B(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$B() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$B(o) {
  _getPrototypeOf$B = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$B(o);
}
function _classPrivateFieldInitSpec$2(obj, privateMap, value) {
  _checkPrivateRedeclaration$3(obj, privateMap);
  privateMap.set(obj, value);
}
function _checkPrivateRedeclaration$3(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classPrivateFieldGet$2(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor$2(receiver, privateMap, "get");
  return _classApplyDescriptorGet$2(receiver, descriptor);
}
function _classApplyDescriptorGet$2(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
function _classPrivateFieldSet$2(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor$2(receiver, privateMap, "set");
  _classApplyDescriptorSet$2(receiver, descriptor, value);
  return value;
}
function _classExtractFieldDescriptor$2(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classApplyDescriptorSet$2(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}
Hooks.getSingleton().register("beforeHideColumns");
Hooks.getSingleton().register("afterHideColumns");
Hooks.getSingleton().register("beforeUnhideColumns");
Hooks.getSingleton().register("afterUnhideColumns");
var PLUGIN_KEY$h = "hiddenColumns";
var PLUGIN_PRIORITY$g = 310;
var _settings = /* @__PURE__ */ new WeakMap();
var _hiddenColumnsMap = /* @__PURE__ */ new WeakMap();
var HiddenColumns = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$B(HiddenColumns2, _BasePlugin);
  var _super = _createSuper$B(HiddenColumns2);
  function HiddenColumns2() {
    var _this;
    _classCallCheck$W(this, HiddenColumns2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _classPrivateFieldInitSpec$2(_assertThisInitialized$B(_this), _settings, {
      writable: true,
      value: {}
    });
    _classPrivateFieldInitSpec$2(_assertThisInitialized$B(_this), _hiddenColumnsMap, {
      writable: true,
      value: null
    });
    return _this;
  }
  _createClass$W(HiddenColumns2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$h];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      var pluginSettings = this.hot.getSettings()[PLUGIN_KEY$h];
      if (isObject(pluginSettings)) {
        _classPrivateFieldSet$2(this, _settings, pluginSettings);
        if (isUndefined(pluginSettings.copyPasteEnabled)) {
          pluginSettings.copyPasteEnabled = true;
        }
      }
      _classPrivateFieldSet$2(this, _hiddenColumnsMap, new HidingMap());
      _classPrivateFieldGet$2(this, _hiddenColumnsMap).addLocalHook("init", function() {
        return _this2.onMapInit();
      });
      this.hot.columnIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet$2(this, _hiddenColumnsMap));
      this.addHook("afterContextMenuDefaultOptions", function() {
        return _this2.onAfterContextMenuDefaultOptions.apply(_this2, arguments);
      });
      this.addHook("afterGetCellMeta", function(row, col, cellProperties) {
        return _this2.onAfterGetCellMeta(row, col, cellProperties);
      });
      this.addHook("modifyColWidth", function(width, col) {
        return _this2.onModifyColWidth(width, col);
      });
      this.addHook("afterGetColHeader", function() {
        return _this2.onAfterGetColHeader.apply(_this2, arguments);
      });
      this.addHook("modifyCopyableRange", function(ranges) {
        return _this2.onModifyCopyableRange(ranges);
      });
      _get$v(_getPrototypeOf$B(HiddenColumns2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      _get$v(_getPrototypeOf$B(HiddenColumns2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.hot.columnIndexMapper.unregisterMap(this.pluginName);
      _classPrivateFieldSet$2(this, _settings, {});
      _get$v(_getPrototypeOf$B(HiddenColumns2.prototype), "disablePlugin", this).call(this);
      this.resetCellsMeta();
    }
  }, {
    key: "showColumns",
    value: function showColumns(columns) {
      var _this3 = this;
      var currentHideConfig = this.getHiddenColumns();
      var isValidConfig = this.isValidConfig(columns);
      var destinationHideConfig = currentHideConfig;
      var hidingMapValues = _classPrivateFieldGet$2(this, _hiddenColumnsMap).getValues().slice();
      var isAnyColumnShowed = columns.length > 0;
      if (isValidConfig && isAnyColumnShowed) {
        var physicalColumns = columns.map(function(visualColumn) {
          return _this3.hot.toPhysicalColumn(visualColumn);
        });
        arrayEach(physicalColumns, function(physicalColumn) {
          hidingMapValues[physicalColumn] = false;
        });
        destinationHideConfig = arrayReduce(hidingMapValues, function(hiddenIndexes, isHidden, physicalIndex) {
          if (isHidden) {
            hiddenIndexes.push(_this3.hot.toVisualColumn(physicalIndex));
          }
          return hiddenIndexes;
        }, []);
      }
      var continueHiding = this.hot.runHooks("beforeUnhideColumns", currentHideConfig, destinationHideConfig, isValidConfig && isAnyColumnShowed);
      if (continueHiding === false) {
        return;
      }
      if (isValidConfig && isAnyColumnShowed) {
        _classPrivateFieldGet$2(this, _hiddenColumnsMap).setValues(hidingMapValues);
      }
      this.hot.view.adjustElementsSize();
      this.hot.runHooks("afterUnhideColumns", currentHideConfig, destinationHideConfig, isValidConfig && isAnyColumnShowed, isValidConfig && destinationHideConfig.length < currentHideConfig.length);
    }
  }, {
    key: "showColumn",
    value: function showColumn() {
      for (var _len2 = arguments.length, column = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        column[_key2] = arguments[_key2];
      }
      this.showColumns(column);
    }
  }, {
    key: "hideColumns",
    value: function hideColumns(columns) {
      var _this4 = this;
      var currentHideConfig = this.getHiddenColumns();
      var isConfigValid = this.isValidConfig(columns);
      var destinationHideConfig = currentHideConfig;
      if (isConfigValid) {
        destinationHideConfig = Array.from(new Set(currentHideConfig.concat(columns)));
      }
      var continueHiding = this.hot.runHooks("beforeHideColumns", currentHideConfig, destinationHideConfig, isConfigValid);
      if (continueHiding === false) {
        return;
      }
      if (isConfigValid) {
        this.hot.batchExecution(function() {
          arrayEach(columns, function(visualColumn) {
            _classPrivateFieldGet$2(_this4, _hiddenColumnsMap).setValueAtIndex(_this4.hot.toPhysicalColumn(visualColumn), true);
          });
        }, true);
      }
      this.hot.runHooks("afterHideColumns", currentHideConfig, destinationHideConfig, isConfigValid, isConfigValid && destinationHideConfig.length > currentHideConfig.length);
    }
  }, {
    key: "hideColumn",
    value: function hideColumn() {
      for (var _len3 = arguments.length, column = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        column[_key3] = arguments[_key3];
      }
      this.hideColumns(column);
    }
  }, {
    key: "getHiddenColumns",
    value: function getHiddenColumns() {
      var _this5 = this;
      return arrayMap(_classPrivateFieldGet$2(this, _hiddenColumnsMap).getHiddenIndexes(), function(physicalColumnIndex) {
        return _this5.hot.toVisualColumn(physicalColumnIndex);
      });
    }
  }, {
    key: "isHidden",
    value: function isHidden(column) {
      return _classPrivateFieldGet$2(this, _hiddenColumnsMap).getValueAtIndex(this.hot.toPhysicalColumn(column)) || false;
    }
  }, {
    key: "isValidConfig",
    value: function isValidConfig(hiddenColumns) {
      var nrOfColumns = this.hot.countCols();
      if (Array.isArray(hiddenColumns) && hiddenColumns.length > 0) {
        return hiddenColumns.every(function(visualColumn) {
          return Number.isInteger(visualColumn) && visualColumn >= 0 && visualColumn < nrOfColumns;
        });
      }
      return false;
    }
  }, {
    key: "resetCellsMeta",
    value: function resetCellsMeta() {
      arrayEach(this.hot.getCellsMeta(), function(meta) {
        if (meta) {
          meta.skipColumnOnPaste = false;
        }
      });
    }
  }, {
    key: "onModifyColWidth",
    value: function onModifyColWidth(width, column) {
      if (this.isHidden(column)) {
        return 0;
      }
      if (_classPrivateFieldGet$2(this, _settings).indicators && (this.isHidden(column + 1) || this.isHidden(column - 1))) {
        if (typeof width === "number" && this.hot.hasColHeaders()) {
          return width + 15;
        }
      }
    }
  }, {
    key: "onAfterGetCellMeta",
    value: function onAfterGetCellMeta(row, column, cellProperties) {
      if (_classPrivateFieldGet$2(this, _settings).copyPasteEnabled === false && this.isHidden(column)) {
        cellProperties.skipColumnOnPaste = true;
      }
      if (this.isHidden(column - 1)) {
        cellProperties.className = cellProperties.className || "";
        if (cellProperties.className.indexOf("afterHiddenColumn") === -1) {
          cellProperties.className += " afterHiddenColumn";
        }
      } else if (cellProperties.className) {
        var classArr = cellProperties.className.split(" ");
        if (classArr.length > 0) {
          var containAfterHiddenColumn = classArr.indexOf("afterHiddenColumn");
          if (containAfterHiddenColumn > -1) {
            classArr.splice(containAfterHiddenColumn, 1);
          }
          cellProperties.className = classArr.join(" ");
        }
      }
    }
  }, {
    key: "onModifyCopyableRange",
    value: function onModifyCopyableRange(ranges) {
      var _this6 = this;
      if (_classPrivateFieldGet$2(this, _settings).copyPasteEnabled) {
        return ranges;
      }
      var newRanges = [];
      var pushRange = function pushRange2(startRow, endRow, startCol, endCol) {
        newRanges.push({
          startRow,
          endRow,
          startCol,
          endCol
        });
      };
      arrayEach(ranges, function(range) {
        var isHidden = true;
        var rangeStart = 0;
        rangeEach(range.startCol, range.endCol, function(visualColumn) {
          if (_this6.isHidden(visualColumn)) {
            if (!isHidden) {
              pushRange(range.startRow, range.endRow, rangeStart, visualColumn - 1);
            }
            isHidden = true;
          } else {
            if (isHidden) {
              rangeStart = visualColumn;
            }
            if (visualColumn === range.endCol) {
              pushRange(range.startRow, range.endRow, rangeStart, visualColumn);
            }
            isHidden = false;
          }
        });
      });
      return newRanges;
    }
  }, {
    key: "onAfterGetColHeader",
    value: function onAfterGetColHeader(column, TH) {
      if (!_classPrivateFieldGet$2(this, _settings).indicators || column < 0) {
        return;
      }
      var classList = [];
      if (column >= 1 && this.isHidden(column - 1)) {
        classList.push("afterHiddenColumn");
      }
      if (column < this.hot.countCols() - 1 && this.isHidden(column + 1)) {
        classList.push("beforeHiddenColumn");
      }
      addClass(TH, classList);
    }
  }, {
    key: "onAfterContextMenuDefaultOptions",
    value: function onAfterContextMenuDefaultOptions(options) {
      options.items.push({
        name: KEY
      }, hideColumnItem(this), showColumnItem(this));
    }
  }, {
    key: "onMapInit",
    value: function onMapInit() {
      if (Array.isArray(_classPrivateFieldGet$2(this, _settings).columns)) {
        this.hideColumns(_classPrivateFieldGet$2(this, _settings).columns);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _classPrivateFieldSet$2(this, _settings, null);
      _classPrivateFieldSet$2(this, _hiddenColumnsMap, null);
      _get$v(_getPrototypeOf$B(HiddenColumns2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$h;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$g;
    }
  }]);
  return HiddenColumns2;
}(BasePlugin);

function _slicedToArray$s(arr, i) {
  return _arrayWithHoles$t(arr) || _iterableToArrayLimit$s(arr, i) || _unsupportedIterableToArray$y(arr, i) || _nonIterableRest$t();
}
function _nonIterableRest$t() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$y(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$y(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$y(o, minLen);
}
function _arrayLikeToArray$y(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$s(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$t(arr) {
  if (Array.isArray(arr))
    return arr;
}
function hideRowItem(hiddenRowsPlugin) {
  return {
    key: "hidden_rows_hide",
    name: function name() {
      var selection = this.getSelectedLast();
      var pluralForm = 0;
      if (Array.isArray(selection)) {
        var _selection = _slicedToArray$s(selection, 3), fromRow = _selection[0], toRow = _selection[2];
        if (fromRow - toRow !== 0) {
          pluralForm = 1;
        }
      }
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_HIDE_ROW, pluralForm);
    },
    callback: function callback() {
      var _this$getSelectedRang = this.getSelectedRangeLast(), from = _this$getSelectedRang.from, to = _this$getSelectedRang.to;
      var start = Math.max(Math.min(from.row, to.row), 0);
      var end = Math.max(from.row, to.row);
      var rowsToHide = [];
      for (var visualRow = start; visualRow <= end; visualRow += 1) {
        rowsToHide.push(visualRow);
      }
      hiddenRowsPlugin.hideRows(rowsToHide);
      var lastHiddenRow = rowsToHide[rowsToHide.length - 1];
      var rowToSelect = this.rowIndexMapper.getNearestNotHiddenIndex(lastHiddenRow, 1, true);
      if (Number.isInteger(rowToSelect) && rowToSelect >= 0) {
        this.selectRows(rowToSelect);
      } else {
        this.deselectCell();
      }
      this.render();
      this.view.adjustElementsSize(true);
    },
    disabled: false,
    hidden: function hidden() {
      return !(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner());
    }
  };
}

function _toConsumableArray$7(arr) {
  return _arrayWithoutHoles$7(arr) || _iterableToArray$8(arr) || _unsupportedIterableToArray$z(arr) || _nonIterableSpread$7();
}
function _nonIterableSpread$7() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$z(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$z(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$z(o, minLen);
}
function _iterableToArray$8(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$7(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$z(arr);
}
function _arrayLikeToArray$z(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function showRowItem(hiddenRowsPlugin) {
  var rows = [];
  return {
    key: "hidden_rows_show",
    name: function name() {
      var pluralForm = rows.length > 1 ? 1 : 0;
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_SHOW_ROW, pluralForm);
    },
    callback: function callback() {
      var _this$rowIndexMapper$, _this$rowIndexMapper$2;
      if (rows.length === 0) {
        return;
      }
      var startVisualRow = rows[0];
      var endVisualRow = rows[rows.length - 1];
      startVisualRow = (_this$rowIndexMapper$ = this.rowIndexMapper.getNearestNotHiddenIndex(startVisualRow - 1, -1)) !== null && _this$rowIndexMapper$ !== void 0 ? _this$rowIndexMapper$ : 0;
      endVisualRow = (_this$rowIndexMapper$2 = this.rowIndexMapper.getNearestNotHiddenIndex(endVisualRow + 1, 1)) !== null && _this$rowIndexMapper$2 !== void 0 ? _this$rowIndexMapper$2 : this.countRows() - 1;
      hiddenRowsPlugin.showRows(rows);
      this.render();
      this.view.adjustElementsSize(true);
      var allRowsSelected = endVisualRow - startVisualRow + 1 === this.countRows();
      if (!allRowsSelected) {
        this.selectRows(startVisualRow, endVisualRow);
      }
    },
    disabled: false,
    hidden: function hidden() {
      var _this = this;
      var hiddenPhysicalRows = arrayMap(hiddenRowsPlugin.getHiddenRows(), function(visualRowIndex) {
        return _this.toPhysicalRow(visualRowIndex);
      });
      if (!(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner()) || hiddenPhysicalRows.length < 1) {
        return true;
      }
      rows.length = 0;
      var selectedRangeLast = this.getSelectedRangeLast();
      var visualStartRow = selectedRangeLast.getTopStartCorner().row;
      var visualEndRow = selectedRangeLast.getBottomEndCorner().row;
      var rowIndexMapper = this.rowIndexMapper;
      var renderableStartRow = rowIndexMapper.getRenderableFromVisualIndex(visualStartRow);
      var renderableEndRow = rowIndexMapper.getRenderableFromVisualIndex(visualEndRow);
      var notTrimmedRowIndexes = rowIndexMapper.getNotTrimmedIndexes();
      var physicalRowIndexes = [];
      if (visualStartRow !== visualEndRow) {
        var visualRowsInRange = visualEndRow - visualStartRow + 1;
        var renderedRowsInRange = renderableEndRow - renderableStartRow + 1;
        if (visualRowsInRange > renderedRowsInRange) {
          var physicalIndexesInRange = notTrimmedRowIndexes.slice(visualStartRow, visualEndRow + 1);
          physicalRowIndexes.push.apply(physicalRowIndexes, _toConsumableArray$7(physicalIndexesInRange.filter(function(physicalIndex) {
            return hiddenPhysicalRows.includes(physicalIndex);
          })));
        }
      } else if (renderableStartRow === 0 && renderableStartRow < visualStartRow) {
        physicalRowIndexes.push.apply(physicalRowIndexes, _toConsumableArray$7(notTrimmedRowIndexes.slice(0, visualStartRow)));
      } else if (renderableStartRow === null) {
        physicalRowIndexes.push.apply(physicalRowIndexes, _toConsumableArray$7(notTrimmedRowIndexes.slice(0, this.countRows())));
      } else {
        var lastVisualIndex = this.countRows() - 1;
        var lastRenderableIndex = rowIndexMapper.getRenderableFromVisualIndex(rowIndexMapper.getNearestNotHiddenIndex(lastVisualIndex, -1));
        if (renderableEndRow === lastRenderableIndex && lastVisualIndex > visualEndRow) {
          physicalRowIndexes.push.apply(physicalRowIndexes, _toConsumableArray$7(notTrimmedRowIndexes.slice(visualEndRow + 1)));
        }
      }
      arrayEach(physicalRowIndexes, function(physicalRowIndex) {
        rows.push(_this.toVisualRow(physicalRowIndex));
      });
      return rows.length === 0;
    }
  };
}

function _typeof$D(obj) {
  "@babel/helpers - typeof";
  return _typeof$D = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$D(obj);
}
function _classCallCheck$X(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$X(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$X(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$X(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$X(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$w() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$w = Reflect.get.bind();
  } else {
    _get$w = function _get2(target, property, receiver) {
      var base = _superPropBase$w(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$w.apply(this, arguments);
}
function _superPropBase$w(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$C(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$C(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$C(subClass, superClass);
}
function _setPrototypeOf$C(o, p) {
  _setPrototypeOf$C = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$C(o, p);
}
function _createSuper$C(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$C();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$C(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$C(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$C(this, result);
  };
}
function _possibleConstructorReturn$C(self, call) {
  if (call && (_typeof$D(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$C(self);
}
function _assertThisInitialized$C(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$C() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$C(o) {
  _getPrototypeOf$C = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$C(o);
}
function _classPrivateFieldInitSpec$3(obj, privateMap, value) {
  _checkPrivateRedeclaration$4(obj, privateMap);
  privateMap.set(obj, value);
}
function _checkPrivateRedeclaration$4(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classPrivateFieldGet$3(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor$3(receiver, privateMap, "get");
  return _classApplyDescriptorGet$3(receiver, descriptor);
}
function _classApplyDescriptorGet$3(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
function _classPrivateFieldSet$3(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor$3(receiver, privateMap, "set");
  _classApplyDescriptorSet$3(receiver, descriptor, value);
  return value;
}
function _classExtractFieldDescriptor$3(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classApplyDescriptorSet$3(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}
Hooks.getSingleton().register("beforeHideRows");
Hooks.getSingleton().register("afterHideRows");
Hooks.getSingleton().register("beforeUnhideRows");
Hooks.getSingleton().register("afterUnhideRows");
var PLUGIN_KEY$i = "hiddenRows";
var PLUGIN_PRIORITY$h = 320;
var _settings$1 = /* @__PURE__ */ new WeakMap();
var _hiddenRowsMap = /* @__PURE__ */ new WeakMap();
var HiddenRows = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$C(HiddenRows2, _BasePlugin);
  var _super = _createSuper$C(HiddenRows2);
  function HiddenRows2() {
    var _this;
    _classCallCheck$X(this, HiddenRows2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _classPrivateFieldInitSpec$3(_assertThisInitialized$C(_this), _settings$1, {
      writable: true,
      value: {}
    });
    _classPrivateFieldInitSpec$3(_assertThisInitialized$C(_this), _hiddenRowsMap, {
      writable: true,
      value: null
    });
    return _this;
  }
  _createClass$X(HiddenRows2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$i];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      var pluginSettings = this.hot.getSettings()[PLUGIN_KEY$i];
      if (isObject(pluginSettings)) {
        _classPrivateFieldSet$3(this, _settings$1, pluginSettings);
        if (isUndefined(pluginSettings.copyPasteEnabled)) {
          pluginSettings.copyPasteEnabled = true;
        }
      }
      _classPrivateFieldSet$3(this, _hiddenRowsMap, new HidingMap());
      _classPrivateFieldGet$3(this, _hiddenRowsMap).addLocalHook("init", function() {
        return _this2.onMapInit();
      });
      this.hot.rowIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet$3(this, _hiddenRowsMap));
      this.addHook("afterContextMenuDefaultOptions", function() {
        return _this2.onAfterContextMenuDefaultOptions.apply(_this2, arguments);
      });
      this.addHook("afterGetCellMeta", function(row, col, cellProperties) {
        return _this2.onAfterGetCellMeta(row, col, cellProperties);
      });
      this.addHook("modifyRowHeight", function(height, row) {
        return _this2.onModifyRowHeight(height, row);
      });
      this.addHook("afterGetRowHeader", function() {
        return _this2.onAfterGetRowHeader.apply(_this2, arguments);
      });
      this.addHook("modifyCopyableRange", function(ranges) {
        return _this2.onModifyCopyableRange(ranges);
      });
      _get$w(_getPrototypeOf$C(HiddenRows2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      _get$w(_getPrototypeOf$C(HiddenRows2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.hot.rowIndexMapper.unregisterMap(this.pluginName);
      _classPrivateFieldSet$3(this, _settings$1, {});
      _get$w(_getPrototypeOf$C(HiddenRows2.prototype), "disablePlugin", this).call(this);
      this.resetCellsMeta();
    }
  }, {
    key: "showRows",
    value: function showRows(rows) {
      var _this3 = this;
      var currentHideConfig = this.getHiddenRows();
      var isValidConfig = this.isValidConfig(rows);
      var destinationHideConfig = currentHideConfig;
      var hidingMapValues = _classPrivateFieldGet$3(this, _hiddenRowsMap).getValues().slice();
      var isAnyRowShowed = rows.length > 0;
      if (isValidConfig && isAnyRowShowed) {
        var physicalRows = rows.map(function(visualRow) {
          return _this3.hot.toPhysicalRow(visualRow);
        });
        arrayEach(physicalRows, function(physicalRow) {
          hidingMapValues[physicalRow] = false;
        });
        destinationHideConfig = arrayReduce(hidingMapValues, function(hiddenIndexes, isHidden, physicalIndex) {
          if (isHidden) {
            hiddenIndexes.push(_this3.hot.toVisualRow(physicalIndex));
          }
          return hiddenIndexes;
        }, []);
      }
      var continueHiding = this.hot.runHooks("beforeUnhideRows", currentHideConfig, destinationHideConfig, isValidConfig && isAnyRowShowed);
      if (continueHiding === false) {
        return;
      }
      if (isValidConfig && isAnyRowShowed) {
        _classPrivateFieldGet$3(this, _hiddenRowsMap).setValues(hidingMapValues);
      }
      this.hot.runHooks("afterUnhideRows", currentHideConfig, destinationHideConfig, isValidConfig && isAnyRowShowed, isValidConfig && destinationHideConfig.length < currentHideConfig.length);
    }
  }, {
    key: "showRow",
    value: function showRow() {
      for (var _len2 = arguments.length, row = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        row[_key2] = arguments[_key2];
      }
      this.showRows(row);
    }
  }, {
    key: "hideRows",
    value: function hideRows(rows) {
      var _this4 = this;
      var currentHideConfig = this.getHiddenRows();
      var isConfigValid = this.isValidConfig(rows);
      var destinationHideConfig = currentHideConfig;
      if (isConfigValid) {
        destinationHideConfig = Array.from(new Set(currentHideConfig.concat(rows)));
      }
      var continueHiding = this.hot.runHooks("beforeHideRows", currentHideConfig, destinationHideConfig, isConfigValid);
      if (continueHiding === false) {
        return;
      }
      if (isConfigValid) {
        this.hot.batchExecution(function() {
          arrayEach(rows, function(visualRow) {
            _classPrivateFieldGet$3(_this4, _hiddenRowsMap).setValueAtIndex(_this4.hot.toPhysicalRow(visualRow), true);
          });
        }, true);
      }
      this.hot.runHooks("afterHideRows", currentHideConfig, destinationHideConfig, isConfigValid, isConfigValid && destinationHideConfig.length > currentHideConfig.length);
    }
  }, {
    key: "hideRow",
    value: function hideRow() {
      for (var _len3 = arguments.length, row = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        row[_key3] = arguments[_key3];
      }
      this.hideRows(row);
    }
  }, {
    key: "getHiddenRows",
    value: function getHiddenRows() {
      var _this5 = this;
      return arrayMap(_classPrivateFieldGet$3(this, _hiddenRowsMap).getHiddenIndexes(), function(physicalRowIndex) {
        return _this5.hot.toVisualRow(physicalRowIndex);
      });
    }
  }, {
    key: "isHidden",
    value: function isHidden(row) {
      return _classPrivateFieldGet$3(this, _hiddenRowsMap).getValueAtIndex(this.hot.toPhysicalRow(row)) || false;
    }
  }, {
    key: "isValidConfig",
    value: function isValidConfig(hiddenRows) {
      var nrOfRows = this.hot.countRows();
      if (Array.isArray(hiddenRows) && hiddenRows.length > 0) {
        return hiddenRows.every(function(visualRow) {
          return Number.isInteger(visualRow) && visualRow >= 0 && visualRow < nrOfRows;
        });
      }
      return false;
    }
  }, {
    key: "resetCellsMeta",
    value: function resetCellsMeta() {
      arrayEach(this.hot.getCellsMeta(), function(meta) {
        if (meta) {
          meta.skipRowOnPaste = false;
        }
      });
    }
  }, {
    key: "onModifyRowHeight",
    value: function onModifyRowHeight(height, row) {
      if (this.isHidden(row)) {
        return 0;
      }
      return height;
    }
  }, {
    key: "onAfterGetCellMeta",
    value: function onAfterGetCellMeta(row, column, cellProperties) {
      if (_classPrivateFieldGet$3(this, _settings$1).copyPasteEnabled === false && this.isHidden(row)) {
        cellProperties.skipRowOnPaste = true;
      }
      if (this.isHidden(row - 1)) {
        cellProperties.className = cellProperties.className || "";
        if (cellProperties.className.indexOf("afterHiddenRow") === -1) {
          cellProperties.className += " afterHiddenRow";
        }
      } else if (cellProperties.className) {
        var classArr = cellProperties.className.split(" ");
        if (classArr.length > 0) {
          var containAfterHiddenRow = classArr.indexOf("afterHiddenRow");
          if (containAfterHiddenRow > -1) {
            classArr.splice(containAfterHiddenRow, 1);
          }
          cellProperties.className = classArr.join(" ");
        }
      }
    }
  }, {
    key: "onModifyCopyableRange",
    value: function onModifyCopyableRange(ranges) {
      var _this6 = this;
      if (_classPrivateFieldGet$3(this, _settings$1).copyPasteEnabled) {
        return ranges;
      }
      var newRanges = [];
      var pushRange = function pushRange2(startRow, endRow, startCol, endCol) {
        newRanges.push({
          startRow,
          endRow,
          startCol,
          endCol
        });
      };
      arrayEach(ranges, function(range) {
        var isHidden = true;
        var rangeStart = 0;
        rangeEach(range.startRow, range.endRow, function(visualRow) {
          if (_this6.isHidden(visualRow)) {
            if (!isHidden) {
              pushRange(rangeStart, visualRow - 1, range.startCol, range.endCol);
            }
            isHidden = true;
          } else {
            if (isHidden) {
              rangeStart = visualRow;
            }
            if (visualRow === range.endRow) {
              pushRange(rangeStart, visualRow, range.startCol, range.endCol);
            }
            isHidden = false;
          }
        });
      });
      return newRanges;
    }
  }, {
    key: "onAfterGetRowHeader",
    value: function onAfterGetRowHeader(row, TH) {
      if (!_classPrivateFieldGet$3(this, _settings$1).indicators || row < 0) {
        return;
      }
      var classList = [];
      if (row >= 1 && this.isHidden(row - 1)) {
        classList.push("afterHiddenRow");
      }
      if (row < this.hot.countRows() - 1 && this.isHidden(row + 1)) {
        classList.push("beforeHiddenRow");
      }
      addClass(TH, classList);
    }
  }, {
    key: "onAfterContextMenuDefaultOptions",
    value: function onAfterContextMenuDefaultOptions(options) {
      options.items.push({
        name: KEY
      }, hideRowItem(this), showRowItem(this));
    }
  }, {
    key: "onMapInit",
    value: function onMapInit() {
      if (Array.isArray(_classPrivateFieldGet$3(this, _settings$1).rows)) {
        this.hideRows(_classPrivateFieldGet$3(this, _settings$1).rows);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _classPrivateFieldSet$3(this, _settings$1, null);
      _classPrivateFieldSet$3(this, _hiddenRowsMap, null);
      _get$w(_getPrototypeOf$C(HiddenRows2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$i;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$h;
    }
  }]);
  return HiddenRows2;
}(BasePlugin);

function _slicedToArray$t(arr, i) {
  return _arrayWithHoles$u(arr) || _iterableToArrayLimit$t(arr, i) || _unsupportedIterableToArray$A(arr, i) || _nonIterableRest$u();
}
function _nonIterableRest$u() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$A(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$A(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$A(o, minLen);
}
function _arrayLikeToArray$A(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$t(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$u(arr) {
  if (Array.isArray(arr))
    return arr;
}
function freezeColumnItem(manualColumnFreezePlugin) {
  return {
    key: "freeze_column",
    name: function name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_FREEZE_COLUMN);
    },
    callback: function callback(key, selected) {
      var _selected = _slicedToArray$t(selected, 1), selectedColumn = _selected[0].start.col;
      manualColumnFreezePlugin.freezeColumn(selectedColumn);
      this.render();
      this.view.adjustElementsSize(true);
    },
    hidden: function hidden() {
      var selection = this.getSelectedRange();
      var hide = false;
      if (selection === void 0) {
        hide = true;
      } else if (selection.length > 1) {
        hide = true;
      } else if (selection[0].from.col !== selection[0].to.col || selection[0].from.col <= this.getSettings().fixedColumnsStart - 1) {
        hide = true;
      }
      return hide;
    }
  };
}

function _slicedToArray$u(arr, i) {
  return _arrayWithHoles$v(arr) || _iterableToArrayLimit$u(arr, i) || _unsupportedIterableToArray$B(arr, i) || _nonIterableRest$v();
}
function _nonIterableRest$v() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$B(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$B(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$B(o, minLen);
}
function _arrayLikeToArray$B(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$u(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$v(arr) {
  if (Array.isArray(arr))
    return arr;
}
function unfreezeColumnItem(manualColumnFreezePlugin) {
  return {
    key: "unfreeze_column",
    name: function name() {
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_UNFREEZE_COLUMN);
    },
    callback: function callback(key, selected) {
      var _selected = _slicedToArray$u(selected, 1), selectedColumn = _selected[0].start.col;
      manualColumnFreezePlugin.unfreezeColumn(selectedColumn);
      this.render();
      this.view.adjustElementsSize(true);
    },
    hidden: function hidden() {
      var selection = this.getSelectedRange();
      var hide = false;
      if (selection === void 0) {
        hide = true;
      } else if (selection.length > 1) {
        hide = true;
      } else if (selection[0].from.col !== selection[0].to.col || selection[0].from.col >= this.getSettings().fixedColumnsStart) {
        hide = true;
      }
      return hide;
    }
  };
}

function _typeof$E(obj) {
  "@babel/helpers - typeof";
  return _typeof$E = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$E(obj);
}
function _classCallCheck$Y(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$Y(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$Y(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$Y(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$Y(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$x() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$x = Reflect.get.bind();
  } else {
    _get$x = function _get2(target, property, receiver) {
      var base = _superPropBase$x(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$x.apply(this, arguments);
}
function _superPropBase$x(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$D(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$D(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$D(subClass, superClass);
}
function _setPrototypeOf$D(o, p) {
  _setPrototypeOf$D = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$D(o, p);
}
function _createSuper$D(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$D();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$D(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$D(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$D(this, result);
  };
}
function _possibleConstructorReturn$D(self, call) {
  if (call && (_typeof$E(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$D(self);
}
function _assertThisInitialized$D(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$D() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$D(o) {
  _getPrototypeOf$D = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$D(o);
}
Hooks.getSingleton().register("beforeColumnFreeze");
Hooks.getSingleton().register("afterColumnFreeze");
Hooks.getSingleton().register("beforeColumnUnfreeze");
Hooks.getSingleton().register("afterColumnUnfreeze");
var PLUGIN_KEY$j = "manualColumnFreeze";
var PLUGIN_PRIORITY$i = 110;
var privatePool$a = new WeakMap();
var ManualColumnFreeze = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$D(ManualColumnFreeze2, _BasePlugin);
  var _super = _createSuper$D(ManualColumnFreeze2);
  function ManualColumnFreeze2(hotInstance) {
    var _this;
    _classCallCheck$Y(this, ManualColumnFreeze2);
    _this = _super.call(this, hotInstance);
    privatePool$a.set(_assertThisInitialized$D(_this), {
      afterFirstUse: false
    });
    return _this;
  }
  _createClass$Y(ManualColumnFreeze2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$j];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.addHook("afterContextMenuDefaultOptions", function(options) {
        return _this2.addContextMenuEntry(options);
      });
      this.addHook("beforeColumnMove", function(columns, finalIndex) {
        return _this2.onBeforeColumnMove(columns, finalIndex);
      });
      _get$x(_getPrototypeOf$D(ManualColumnFreeze2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      var priv = privatePool$a.get(this);
      priv.afterFirstUse = false;
      _get$x(_getPrototypeOf$D(ManualColumnFreeze2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      _get$x(_getPrototypeOf$D(ManualColumnFreeze2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "freezeColumn",
    value: function freezeColumn(column) {
      var priv = privatePool$a.get(this);
      var settings = this.hot.getSettings();
      var freezePerformed = settings.fixedColumnsStart < this.hot.countCols() && column > settings.fixedColumnsStart - 1;
      if (!priv.afterFirstUse) {
        priv.afterFirstUse = true;
      }
      var beforeColumnFreezeHook = this.hot.runHooks("beforeColumnFreeze", column, freezePerformed);
      if (beforeColumnFreezeHook === false) {
        return;
      }
      if (freezePerformed) {
        this.hot.columnIndexMapper.moveIndexes(column, settings.fixedColumnsStart);
        settings._fixedColumnsStart += 1;
      }
      this.hot.runHooks("afterColumnFreeze", column, freezePerformed);
    }
  }, {
    key: "unfreezeColumn",
    value: function unfreezeColumn(column) {
      var priv = privatePool$a.get(this);
      var settings = this.hot.getSettings();
      var unfreezePerformed = settings.fixedColumnsStart > 0 && column <= settings.fixedColumnsStart - 1;
      if (!priv.afterFirstUse) {
        priv.afterFirstUse = true;
      }
      var beforeColumnUnfreezeHook = this.hot.runHooks("beforeColumnUnfreeze", column, unfreezePerformed);
      if (beforeColumnUnfreezeHook === false) {
        return;
      }
      if (unfreezePerformed) {
        settings._fixedColumnsStart -= 1;
        this.hot.columnIndexMapper.moveIndexes(column, settings.fixedColumnsStart);
      }
      this.hot.runHooks("afterColumnUnfreeze", column, unfreezePerformed);
    }
  }, {
    key: "addContextMenuEntry",
    value: function addContextMenuEntry(options) {
      options.items.push({
        name: "---------"
      }, freezeColumnItem(this), unfreezeColumnItem(this));
    }
  }, {
    key: "onBeforeColumnMove",
    value: function onBeforeColumnMove(columns, finalIndex) {
      var priv = privatePool$a.get(this);
      if (priv.afterFirstUse) {
        var freezeLine = this.hot.getSettings().fixedColumnsStart;
        if (finalIndex < freezeLine) {
          return false;
        }
        if (columns.some(function(column) {
          return column < freezeLine;
        })) {
          return false;
        }
      }
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$j;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$i;
    }
  }]);
  return ManualColumnFreeze2;
}(BasePlugin);

function _classCallCheck$Z(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$Z(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$Z(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$Z(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$Z(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var STATE_INITIALIZED = 0;
var STATE_BUILT$1 = 1;
var STATE_APPENDED = 2;
var UNIT = "px";
var BaseUI$1 = /* @__PURE__ */ function() {
  function BaseUI2(hotInstance) {
    _classCallCheck$Z(this, BaseUI2);
    this.hot = hotInstance;
    this._element = null;
    this.state = STATE_INITIALIZED;
    this.inlineProperty = hotInstance.isRtl() ? "right" : "left";
  }
  _createClass$Z(BaseUI2, [{
    key: "appendTo",
    value: function appendTo(wrapper) {
      wrapper.appendChild(this._element);
      this.state = STATE_APPENDED;
    }
  }, {
    key: "build",
    value: function build() {
      if (this.state !== STATE_INITIALIZED) {
        return;
      }
      this._element = this.hot.rootDocument.createElement("div");
      this.state = STATE_BUILT$1;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.isAppended()) {
        this._element.parentElement.removeChild(this._element);
      }
      this._element = null;
      this.state = STATE_INITIALIZED;
    }
  }, {
    key: "isAppended",
    value: function isAppended() {
      return this.state === STATE_APPENDED;
    }
  }, {
    key: "isBuilt",
    value: function isBuilt() {
      return this.state >= STATE_BUILT$1;
    }
  }, {
    key: "setPosition",
    value: function setPosition(top, inlinePosition) {
      if (isNumeric(top)) {
        this._element.style.top = top + UNIT;
      }
      if (isNumeric(inlinePosition)) {
        this._element.style[this.inlineProperty] = inlinePosition + UNIT;
      }
    }
  }, {
    key: "getPosition",
    value: function getPosition() {
      var style = this._element.style;
      return {
        top: style.top ? parseInt(style.top, 10) : 0,
        start: style[this.inlineProperty] ? parseInt(style[this.inlineProperty], 10) : 0
      };
    }
  }, {
    key: "setSize",
    value: function setSize(width, height) {
      if (isNumeric(width)) {
        this._element.style.width = width + UNIT;
      }
      if (isNumeric(height)) {
        this._element.style.height = height + UNIT;
      }
    }
  }, {
    key: "getSize",
    value: function getSize() {
      return {
        width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,
        height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0
      };
    }
  }, {
    key: "setOffset",
    value: function setOffset(top, inlineOffset) {
      if (isNumeric(top)) {
        this._element.style.marginTop = top + UNIT;
      }
      if (isNumeric(inlineOffset)) {
        this._element.style["margin".concat(toUpperCaseFirst(this.inlineProperty))] = inlineOffset + UNIT;
      }
    }
  }, {
    key: "getOffset",
    value: function getOffset() {
      var style = this._element.style;
      var inlineProp = "margin".concat(toUpperCaseFirst(this.inlineProperty));
      return {
        top: style.marginTop ? parseInt(style.marginTop, 10) : 0,
        start: style[inlineProp] ? parseInt(style[inlineProp], 10) : 0
      };
    }
  }]);
  return BaseUI2;
}();

function _typeof$F(obj) {
  "@babel/helpers - typeof";
  return _typeof$F = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$F(obj);
}
function _classCallCheck$_(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$_(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$_(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$_(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$_(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$y() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$y = Reflect.get.bind();
  } else {
    _get$y = function _get2(target, property, receiver) {
      var base = _superPropBase$y(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$y.apply(this, arguments);
}
function _superPropBase$y(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$E(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$E(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$E(subClass, superClass);
}
function _setPrototypeOf$E(o, p) {
  _setPrototypeOf$E = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$E(o, p);
}
function _createSuper$E(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$E();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$E(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$E(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$E(this, result);
  };
}
function _possibleConstructorReturn$E(self, call) {
  if (call && (_typeof$F(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$E(self);
}
function _assertThisInitialized$E(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$E() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$E(o) {
  _getPrototypeOf$E = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$E(o);
}
var CSS_CLASSNAME = "ht__manualColumnMove--backlight";
var BacklightUI = /* @__PURE__ */ function(_BaseUI) {
  _inherits$E(BacklightUI2, _BaseUI);
  var _super = _createSuper$E(BacklightUI2);
  function BacklightUI2() {
    _classCallCheck$_(this, BacklightUI2);
    return _super.apply(this, arguments);
  }
  _createClass$_(BacklightUI2, [{
    key: "build",
    value: function build() {
      _get$y(_getPrototypeOf$E(BacklightUI2.prototype), "build", this).call(this);
      addClass(this._element, CSS_CLASSNAME);
    }
  }]);
  return BacklightUI2;
}(BaseUI$1);

function _typeof$G(obj) {
  "@babel/helpers - typeof";
  return _typeof$G = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$G(obj);
}
function _classCallCheck$$(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$$(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$$(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$$(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$$(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$z() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$z = Reflect.get.bind();
  } else {
    _get$z = function _get2(target, property, receiver) {
      var base = _superPropBase$z(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$z.apply(this, arguments);
}
function _superPropBase$z(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$F(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$F(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$F(subClass, superClass);
}
function _setPrototypeOf$F(o, p) {
  _setPrototypeOf$F = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$F(o, p);
}
function _createSuper$F(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$F();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$F(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$F(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$F(this, result);
  };
}
function _possibleConstructorReturn$F(self, call) {
  if (call && (_typeof$G(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$F(self);
}
function _assertThisInitialized$F(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$F() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$F(o) {
  _getPrototypeOf$F = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$F(o);
}
var CSS_CLASSNAME$1 = "ht__manualColumnMove--guideline";
var GuidelineUI = /* @__PURE__ */ function(_BaseUI) {
  _inherits$F(GuidelineUI2, _BaseUI);
  var _super = _createSuper$F(GuidelineUI2);
  function GuidelineUI2() {
    _classCallCheck$$(this, GuidelineUI2);
    return _super.apply(this, arguments);
  }
  _createClass$$(GuidelineUI2, [{
    key: "build",
    value: function build() {
      _get$z(_getPrototypeOf$F(GuidelineUI2.prototype), "build", this).call(this);
      addClass(this._element, CSS_CLASSNAME$1);
    }
  }]);
  return GuidelineUI2;
}(BaseUI$1);

function _typeof$H(obj) {
  "@babel/helpers - typeof";
  return _typeof$H = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$H(obj);
}
function _classCallCheck$10(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$10(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$10(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$10(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$10(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$A() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$A = Reflect.get.bind();
  } else {
    _get$A = function _get2(target, property, receiver) {
      var base = _superPropBase$A(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$A.apply(this, arguments);
}
function _superPropBase$A(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$G(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$G(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$G(subClass, superClass);
}
function _setPrototypeOf$G(o, p) {
  _setPrototypeOf$G = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$G(o, p);
}
function _createSuper$G(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$G();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$G(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$G(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$G(this, result);
  };
}
function _possibleConstructorReturn$G(self, call) {
  if (call && (_typeof$H(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$G(self);
}
function _assertThisInitialized$G(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$G() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$G(o) {
  _getPrototypeOf$G = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$G(o);
}
Hooks.getSingleton().register("beforeColumnMove");
Hooks.getSingleton().register("afterColumnMove");
var PLUGIN_KEY$k = "manualColumnMove";
var PLUGIN_PRIORITY$j = 120;
var privatePool$b = new WeakMap();
var CSS_PLUGIN = "ht__manualColumnMove";
var CSS_SHOW_UI = "show-ui";
var CSS_ON_MOVING = "on-moving--columns";
var CSS_AFTER_SELECTION = "after-selection--columns";
var ManualColumnMove = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$G(ManualColumnMove2, _BasePlugin);
  var _super = _createSuper$G(ManualColumnMove2);
  function ManualColumnMove2(hotInstance) {
    var _this;
    _classCallCheck$10(this, ManualColumnMove2);
    _this = _super.call(this, hotInstance);
    privatePool$b.set(_assertThisInitialized$G(_this), {
      columnsToMove: [],
      countCols: 0,
      fixedColumns: 0,
      pressed: void 0,
      target: {
        eventPageX: void 0,
        coords: void 0,
        TD: void 0,
        col: void 0
      },
      cachedDropIndex: void 0
    });
    _this.eventManager = new EventManager(_assertThisInitialized$G(_this));
    _this.backlight = new BacklightUI(hotInstance);
    _this.guideline = new GuidelineUI(hotInstance);
    return _this;
  }
  _createClass$10(ManualColumnMove2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$k];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.addHook("beforeOnCellMouseDown", function() {
        return _this2.onBeforeOnCellMouseDown.apply(_this2, arguments);
      });
      this.addHook("beforeOnCellMouseOver", function() {
        return _this2.onBeforeOnCellMouseOver.apply(_this2, arguments);
      });
      this.addHook("afterScrollVertically", function() {
        return _this2.onAfterScrollVertically();
      });
      this.addHook("afterLoadData", function() {
        return _this2.onAfterLoadData.apply(_this2, arguments);
      });
      this.buildPluginUI();
      this.registerEvents();
      addClass(this.hot.rootElement, CSS_PLUGIN);
      _get$A(_getPrototypeOf$G(ManualColumnMove2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      this.moveBySettingsOrLoad();
      _get$A(_getPrototypeOf$G(ManualColumnMove2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      removeClass(this.hot.rootElement, CSS_PLUGIN);
      this.unregisterEvents();
      this.backlight.destroy();
      this.guideline.destroy();
      _get$A(_getPrototypeOf$G(ManualColumnMove2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "moveColumn",
    value: function moveColumn(column, finalIndex) {
      return this.moveColumns([column], finalIndex);
    }
  }, {
    key: "moveColumns",
    value: function moveColumns(columns, finalIndex) {
      var priv = privatePool$b.get(this);
      var dropIndex = priv.cachedDropIndex;
      var movePossible = this.isMovePossible(columns, finalIndex);
      var beforeMoveHook = this.hot.runHooks("beforeColumnMove", columns, finalIndex, dropIndex, movePossible);
      priv.cachedDropIndex = void 0;
      if (beforeMoveHook === false) {
        return;
      }
      if (movePossible) {
        this.hot.columnIndexMapper.moveIndexes(columns, finalIndex);
      }
      var movePerformed = movePossible && this.isColumnOrderChanged(columns, finalIndex);
      this.hot.runHooks("afterColumnMove", columns, finalIndex, dropIndex, movePossible, movePerformed);
      return movePerformed;
    }
  }, {
    key: "dragColumn",
    value: function dragColumn(column, dropIndex) {
      return this.dragColumns([column], dropIndex);
    }
  }, {
    key: "dragColumns",
    value: function dragColumns(columns, dropIndex) {
      var finalIndex = this.countFinalIndex(columns, dropIndex);
      var priv = privatePool$b.get(this);
      priv.cachedDropIndex = dropIndex;
      return this.moveColumns(columns, finalIndex);
    }
  }, {
    key: "isMovePossible",
    value: function isMovePossible(movedColumns, finalIndex) {
      var length = this.hot.columnIndexMapper.getNotTrimmedIndexesLength();
      var tooHighDestinationIndex = movedColumns.length + finalIndex > length;
      var tooLowDestinationIndex = finalIndex < 0;
      var tooLowMovedColumnIndex = movedColumns.some(function(movedColumn) {
        return movedColumn < 0;
      });
      var tooHighMovedColumnIndex = movedColumns.some(function(movedColumn) {
        return movedColumn >= length;
      });
      if (tooHighDestinationIndex || tooLowDestinationIndex || tooLowMovedColumnIndex || tooHighMovedColumnIndex) {
        return false;
      }
      return true;
    }
  }, {
    key: "isColumnOrderChanged",
    value: function isColumnOrderChanged(movedColumns, finalIndex) {
      return movedColumns.some(function(column, nrOfMovedElement) {
        return column - nrOfMovedElement !== finalIndex;
      });
    }
  }, {
    key: "countFinalIndex",
    value: function countFinalIndex(movedColumns, dropIndex) {
      var numberOfColumnsLowerThanDropIndex = arrayReduce(movedColumns, function(numberOfColumns, currentColumnIndex) {
        if (currentColumnIndex < dropIndex) {
          numberOfColumns += 1;
        }
        return numberOfColumns;
      }, 0);
      return dropIndex - numberOfColumnsLowerThanDropIndex;
    }
  }, {
    key: "getColumnsWidth",
    value: function getColumnsWidth(fromColumn, toColumn) {
      var columnMapper = this.hot.columnIndexMapper;
      var columnsWidth = 0;
      for (var visualColumnIndex = fromColumn; visualColumnIndex <= toColumn; visualColumnIndex += 1) {
        var renderableIndex = columnMapper.getRenderableFromVisualIndex(visualColumnIndex);
        if (visualColumnIndex < 0) {
          columnsWidth += this.hot.view._wt.wtViewport.getRowHeaderWidth() || 0;
        } else if (renderableIndex !== null) {
          columnsWidth += this.hot.view._wt.wtTable.getStretchedColumnWidth(renderableIndex) || 0;
        }
      }
      return columnsWidth;
    }
  }, {
    key: "moveBySettingsOrLoad",
    value: function moveBySettingsOrLoad() {
      var pluginSettings = this.hot.getSettings()[PLUGIN_KEY$k];
      if (Array.isArray(pluginSettings)) {
        this.moveColumns(pluginSettings, 0);
      } else if (pluginSettings !== void 0) {
        var persistentState = this.persistentStateLoad();
        if (persistentState.length) {
          this.moveColumns(persistentState, 0);
        }
      }
    }
  }, {
    key: "isFixedColumnsStart",
    value: function isFixedColumnsStart(column) {
      return column < this.hot.getSettings().fixedColumnsStart;
    }
  }, {
    key: "persistentStateSave",
    value: function persistentStateSave() {
      this.hot.runHooks("persistentStateSave", "manualColumnMove", this.hot.columnIndexMapper.getIndexesSequence());
    }
  }, {
    key: "persistentStateLoad",
    value: function persistentStateLoad() {
      var storedState = {};
      this.hot.runHooks("persistentStateLoad", "manualColumnMove", storedState);
      return storedState.value ? storedState.value : [];
    }
  }, {
    key: "prepareColumnsToMoving",
    value: function prepareColumnsToMoving(start, end) {
      var selectedColumns = [];
      rangeEach(start, end, function(i) {
        selectedColumns.push(i);
      });
      return selectedColumns;
    }
  }, {
    key: "refreshPositions",
    value: function refreshPositions() {
      var priv = privatePool$b.get(this);
      var firstVisible = this.hot.view.getFirstFullyVisibleColumn();
      if (this.isFixedColumnsStart(priv.hoveredColumn) && firstVisible > 0) {
        this.hot.scrollViewportTo(void 0, this.hot.columnIndexMapper.getNearestNotHiddenIndex(firstVisible - 1, -1));
      }
      var wtTable = this.hot.view._wt.wtTable;
      var scrollableElement = this.hot.view._wt.wtOverlays.scrollableElement;
      var scrollStart = typeof scrollableElement.scrollX === "number" ? scrollableElement.scrollX : scrollableElement.scrollLeft;
      var tdOffsetStart = this.hot.view.THEAD.offsetLeft + this.getColumnsWidth(0, priv.hoveredColumn - 1);
      var hiderWidth = wtTable.hider.offsetWidth;
      var tbodyOffsetLeft = wtTable.TBODY.offsetLeft;
      var backlightElemMarginStart = this.backlight.getOffset().start;
      var backlightElemWidth = this.backlight.getSize().width;
      var rowHeaderWidth = 0;
      var mouseOffsetStart = 0;
      if (this.hot.isRtl()) {
        var rootWindow = this.hot.rootWindow;
        var containerWidth = outerWidth(this.hot.rootElement);
        var gridMostRightPos = rootWindow.innerWidth - priv.rootElementOffset - containerWidth;
        mouseOffsetStart = rootWindow.innerWidth - priv.target.eventPageX - gridMostRightPos - (scrollableElement.scrollX === void 0 ? scrollStart : 0);
      } else {
        mouseOffsetStart = priv.target.eventPageX - (priv.rootElementOffset - (scrollableElement.scrollX === void 0 ? scrollStart : 0));
      }
      if (priv.hasRowHeaders) {
        rowHeaderWidth = this.hot.view._wt.wtOverlays.inlineStartOverlay.clone.wtTable.getColumnHeader(-1).offsetWidth;
      }
      if (this.isFixedColumnsStart(priv.hoveredColumn)) {
        tdOffsetStart += scrollStart;
      }
      tdOffsetStart += rowHeaderWidth;
      if (priv.hoveredColumn < 0) {
        if (priv.fixedColumnsStart > 0) {
          priv.target.col = 0;
        } else {
          priv.target.col = firstVisible > 0 ? firstVisible - 1 : firstVisible;
        }
      } else if (priv.target.TD.offsetWidth / 2 + tdOffsetStart <= mouseOffsetStart) {
        var newCoordsCol = priv.hoveredColumn >= priv.countCols ? priv.countCols - 1 : priv.hoveredColumn;
        priv.target.col = newCoordsCol + 1;
        tdOffsetStart += priv.target.TD.offsetWidth;
      } else {
        priv.target.col = priv.hoveredColumn;
      }
      var backlightStart = mouseOffsetStart;
      var guidelineStart = tdOffsetStart;
      if (mouseOffsetStart + backlightElemWidth + backlightElemMarginStart >= hiderWidth) {
        backlightStart = hiderWidth - backlightElemWidth - backlightElemMarginStart;
      } else if (mouseOffsetStart + backlightElemMarginStart < tbodyOffsetLeft + rowHeaderWidth) {
        backlightStart = tbodyOffsetLeft + rowHeaderWidth + Math.abs(backlightElemMarginStart);
      }
      if (tdOffsetStart >= hiderWidth - 1) {
        guidelineStart = hiderWidth - 1;
      } else if (guidelineStart === 0) {
        guidelineStart = 1;
      } else if (scrollableElement.scrollX !== void 0 && priv.hoveredColumn < priv.fixedColumnsStart) {
        guidelineStart -= priv.rootElementOffset <= scrollableElement.scrollX ? priv.rootElementOffset : 0;
      }
      this.backlight.setPosition(null, backlightStart);
      this.guideline.setPosition(null, guidelineStart);
    }
  }, {
    key: "registerEvents",
    value: function registerEvents() {
      var _this3 = this;
      var documentElement = this.hot.rootDocument.documentElement;
      this.eventManager.addEventListener(documentElement, "mousemove", function(event) {
        return _this3.onMouseMove(event);
      });
      this.eventManager.addEventListener(documentElement, "mouseup", function() {
        return _this3.onMouseUp();
      });
    }
  }, {
    key: "unregisterEvents",
    value: function unregisterEvents() {
      this.eventManager.clear();
    }
  }, {
    key: "onBeforeOnCellMouseDown",
    value: function onBeforeOnCellMouseDown(event, coords, TD, controller) {
      var wtTable = this.hot.view._wt.wtTable;
      var isHeaderSelection = this.hot.selection.isSelectedByColumnHeader();
      var selection = this.hot.getSelectedRangeLast();
      var priv = privatePool$b.get(this);
      var isSortingElement = hasClass(event.target, "sortAction");
      if (!selection || !isHeaderSelection || priv.pressed || event.button !== 0 || isSortingElement) {
        priv.pressed = false;
        priv.columnsToMove.length = 0;
        removeClass(this.hot.rootElement, [CSS_ON_MOVING, CSS_SHOW_UI]);
        return;
      }
      var guidelineIsNotReady = this.guideline.isBuilt() && !this.guideline.isAppended();
      var backlightIsNotReady = this.backlight.isBuilt() && !this.backlight.isAppended();
      if (guidelineIsNotReady && backlightIsNotReady) {
        this.guideline.appendTo(wtTable.hider);
        this.backlight.appendTo(wtTable.hider);
      }
      var from = selection.from, to = selection.to;
      var start = Math.min(from.col, to.col);
      var end = Math.max(from.col, to.col);
      if (coords.row < 0 && coords.col >= start && coords.col <= end) {
        controller.column = true;
        priv.pressed = true;
        priv.target.eventPageX = event.pageX;
        priv.target.eventOffsetX = event.offsetX;
        priv.hoveredColumn = coords.col;
        priv.target.TD = TD;
        priv.target.col = coords.col;
        priv.columnsToMove = this.prepareColumnsToMoving(start, end);
        priv.hasRowHeaders = !!this.hot.getSettings().rowHeaders;
        priv.countCols = this.hot.countCols();
        priv.fixedColumnsStart = this.hot.getSettings().fixedColumnsStart;
        priv.rootElementOffset = offset(this.hot.rootElement).left;
        var countColumnsFrom = priv.hasRowHeaders ? -1 : 0;
        var topPos = wtTable.holder.scrollTop + wtTable.getColumnHeaderHeight(0) + 1;
        var fixedColumnsStart = coords.col < priv.fixedColumnsStart;
        var horizontalScrollPosition = Math.abs(this.hot.view._wt.wtOverlays.inlineStartOverlay.getScrollPosition());
        var offsetX = Math.abs(event.offsetX - (this.hot.isRtl() ? event.target.offsetWidth : 0));
        var inlineOffset = this.getColumnsWidth(start, coords.col - 1) + offsetX;
        var inlinePos = this.getColumnsWidth(countColumnsFrom, start - 1) + (fixedColumnsStart ? horizontalScrollPosition : 0) + inlineOffset;
        this.backlight.setPosition(topPos, inlinePos);
        this.backlight.setSize(this.getColumnsWidth(start, end), wtTable.hider.offsetHeight - topPos);
        this.backlight.setOffset(null, -inlineOffset);
        addClass(this.hot.rootElement, CSS_ON_MOVING);
      } else {
        removeClass(this.hot.rootElement, CSS_AFTER_SELECTION);
        priv.pressed = false;
        priv.columnsToMove.length = 0;
      }
    }
  }, {
    key: "onMouseMove",
    value: function onMouseMove(event) {
      var priv = privatePool$b.get(this);
      if (!priv.pressed) {
        return;
      }
      if (event.target === this.backlight.element) {
        var width = this.backlight.getSize().width;
        this.backlight.setSize(0);
        setTimeout(function() {
          this.backlight.setPosition(width);
        });
      }
      priv.target.eventPageX = event.pageX;
      this.refreshPositions();
    }
  }, {
    key: "onBeforeOnCellMouseOver",
    value: function onBeforeOnCellMouseOver(event, coords, TD, controller) {
      var selectedRange = this.hot.getSelectedRangeLast();
      var priv = privatePool$b.get(this);
      if (!selectedRange || !priv.pressed) {
        return;
      }
      if (priv.columnsToMove.indexOf(coords.col) > -1) {
        removeClass(this.hot.rootElement, CSS_SHOW_UI);
      } else {
        addClass(this.hot.rootElement, CSS_SHOW_UI);
      }
      controller.row = true;
      controller.column = true;
      controller.cell = true;
      priv.hoveredColumn = coords.col;
      priv.target.TD = TD;
    }
  }, {
    key: "onMouseUp",
    value: function onMouseUp() {
      var priv = privatePool$b.get(this);
      var target = priv.target.col;
      var columnsLen = priv.columnsToMove.length;
      priv.hoveredColumn = void 0;
      priv.pressed = false;
      priv.backlightWidth = 0;
      removeClass(this.hot.rootElement, [CSS_ON_MOVING, CSS_SHOW_UI, CSS_AFTER_SELECTION]);
      if (this.hot.selection.isSelectedByColumnHeader()) {
        addClass(this.hot.rootElement, CSS_AFTER_SELECTION);
      }
      if (columnsLen < 1 || target === void 0) {
        return;
      }
      var firstMovedVisualColumn = priv.columnsToMove[0];
      var firstMovedPhysicalColumn = this.hot.toPhysicalColumn(firstMovedVisualColumn);
      var movePerformed = this.dragColumns(priv.columnsToMove, target);
      priv.columnsToMove.length = 0;
      if (movePerformed === true) {
        this.persistentStateSave();
        this.hot.render();
        this.hot.view.adjustElementsSize(true);
        var selectionStart = this.hot.toVisualColumn(firstMovedPhysicalColumn);
        var selectionEnd = selectionStart + columnsLen - 1;
        this.hot.selectColumns(selectionStart, selectionEnd);
      }
    }
  }, {
    key: "onAfterScrollVertically",
    value: function onAfterScrollVertically() {
      var wtTable = this.hot.view._wt.wtTable;
      var headerHeight = wtTable.getColumnHeaderHeight(0) + 1;
      var scrollTop = wtTable.holder.scrollTop;
      var posTop = headerHeight + scrollTop;
      this.backlight.setPosition(posTop);
      this.backlight.setSize(null, wtTable.hider.offsetHeight - posTop);
    }
  }, {
    key: "buildPluginUI",
    value: function buildPluginUI() {
      this.backlight.build();
      this.guideline.build();
    }
  }, {
    key: "onAfterLoadData",
    value: function onAfterLoadData() {
      this.moveBySettingsOrLoad();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.backlight.destroy();
      this.guideline.destroy();
      _get$A(_getPrototypeOf$G(ManualColumnMove2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$k;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$j;
    }
  }]);
  return ManualColumnMove2;
}(BasePlugin);

function _typeof$I(obj) {
  "@babel/helpers - typeof";
  return _typeof$I = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$I(obj);
}
function _classCallCheck$11(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$11(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$11(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$11(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$11(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$B() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$B = Reflect.get.bind();
  } else {
    _get$B = function _get2(target, property, receiver) {
      var base = _superPropBase$B(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$B.apply(this, arguments);
}
function _superPropBase$B(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$H(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$H(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$H(subClass, superClass);
}
function _setPrototypeOf$H(o, p) {
  _setPrototypeOf$H = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$H(o, p);
}
function _createSuper$H(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$H();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$H(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$H(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$H(this, result);
  };
}
function _possibleConstructorReturn$H(self, call) {
  if (call && (_typeof$I(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$H(self);
}
function _assertThisInitialized$H(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$H() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$H(o) {
  _getPrototypeOf$H = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$H(o);
}
var PLUGIN_KEY$l = "manualColumnResize";
var PLUGIN_PRIORITY$k = 130;
var PERSISTENT_STATE_KEY = "manualColumnWidths";
var privatePool$c = new WeakMap();
var ManualColumnResize = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$H(ManualColumnResize2, _BasePlugin);
  var _super = _createSuper$H(ManualColumnResize2);
  function ManualColumnResize2(hotInstance) {
    var _this;
    _classCallCheck$11(this, ManualColumnResize2);
    _this = _super.call(this, hotInstance);
    var rootDocument = _this.hot.rootDocument;
    _this.currentTH = null;
    _this.currentCol = null;
    _this.selectedCols = [];
    _this.currentWidth = null;
    _this.newSize = null;
    _this.startY = null;
    _this.startWidth = null;
    _this.startOffset = null;
    _this.handle = rootDocument.createElement("DIV");
    _this.guide = rootDocument.createElement("DIV");
    _this.eventManager = new EventManager(_assertThisInitialized$H(_this));
    _this.pressed = null;
    _this.dblclick = 0;
    _this.autoresizeTimeout = null;
    _this.columnWidthsMap = void 0;
    privatePool$c.set(_assertThisInitialized$H(_this), {
      config: void 0
    });
    addClass(_this.handle, "manualColumnResizer");
    addClass(_this.guide, "manualColumnResizerGuide");
    return _this;
  }
  _createClass$11(ManualColumnResize2, [{
    key: "inlineDir",
    get: function get() {
      return this.hot.isRtl() ? "right" : "left";
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.hot.getSettings()[PLUGIN_KEY$l];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.columnWidthsMap = new PhysicalIndexToValueMap();
      this.columnWidthsMap.addLocalHook("init", function() {
        return _this2.onMapInit();
      });
      this.hot.columnIndexMapper.registerMap(this.pluginName, this.columnWidthsMap);
      this.addHook("modifyColWidth", function(width, col) {
        return _this2.onModifyColWidth(width, col);
      });
      this.addHook("beforeStretchingColumnWidth", function(stretchedWidth, column) {
        return _this2.onBeforeStretchingColumnWidth(stretchedWidth, column);
      });
      this.addHook("beforeColumnResize", function(newSize, column, isDoubleClick) {
        return _this2.onBeforeColumnResize(newSize, column, isDoubleClick);
      });
      this.bindEvents();
      _get$B(_getPrototypeOf$H(ManualColumnResize2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      _get$B(_getPrototypeOf$H(ManualColumnResize2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      var priv = privatePool$c.get(this);
      priv.config = this.columnWidthsMap.getValues();
      this.hot.columnIndexMapper.unregisterMap(this.pluginName);
      _get$B(_getPrototypeOf$H(ManualColumnResize2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "saveManualColumnWidths",
    value: function saveManualColumnWidths() {
      this.hot.runHooks("persistentStateSave", PERSISTENT_STATE_KEY, this.columnWidthsMap.getValues());
    }
  }, {
    key: "loadManualColumnWidths",
    value: function loadManualColumnWidths() {
      var storedState = {};
      this.hot.runHooks("persistentStateLoad", PERSISTENT_STATE_KEY, storedState);
      return storedState.value;
    }
  }, {
    key: "setManualSize",
    value: function setManualSize(column, width) {
      var newWidth = Math.max(width, 20);
      var physicalColumn = this.hot.toPhysicalColumn(column);
      this.columnWidthsMap.setValueAtIndex(physicalColumn, newWidth);
      return newWidth;
    }
  }, {
    key: "clearManualSize",
    value: function clearManualSize(column) {
      var physicalColumn = this.hot.toPhysicalColumn(column);
      this.columnWidthsMap.setValueAtIndex(physicalColumn, null);
    }
  }, {
    key: "onMapInit",
    value: function onMapInit() {
      var _this3 = this;
      var priv = privatePool$c.get(this);
      var initialSetting = this.hot.getSettings()[PLUGIN_KEY$l];
      var loadedManualColumnWidths = this.loadManualColumnWidths();
      if (typeof loadedManualColumnWidths !== "undefined") {
        this.hot.batchExecution(function() {
          loadedManualColumnWidths.forEach(function(width, physicalIndex) {
            _this3.columnWidthsMap.setValueAtIndex(physicalIndex, width);
          });
        }, true);
      } else if (Array.isArray(initialSetting)) {
        this.hot.batchExecution(function() {
          initialSetting.forEach(function(width, physicalIndex) {
            _this3.columnWidthsMap.setValueAtIndex(physicalIndex, width);
          });
        }, true);
        priv.config = initialSetting;
      } else if (initialSetting === true && Array.isArray(priv.config)) {
        this.hot.batchExecution(function() {
          priv.config.forEach(function(width, physicalIndex) {
            _this3.columnWidthsMap.setValueAtIndex(physicalIndex, width);
          });
        }, true);
      }
    }
  }, {
    key: "setupHandlePosition",
    value: function setupHandlePosition(TH) {
      var _this4 = this;
      if (!TH.parentNode) {
        return;
      }
      this.currentTH = TH;
      var wt = this.hot.view._wt;
      var cellCoords = wt.wtTable.getCoords(this.currentTH);
      var col = cellCoords.col;
      if (col < 0) {
        return;
      }
      var headerHeight = outerHeight(this.currentTH);
      var box = this.currentTH.getBoundingClientRect();
      var fixedColumn = col < wt.getSetting("fixedColumnsStart");
      var relativeHeaderPosition;
      if (fixedColumn) {
        relativeHeaderPosition = wt.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(this.currentTH, cellCoords.row, cellCoords.col);
      }
      if (!relativeHeaderPosition) {
        relativeHeaderPosition = wt.wtOverlays.topOverlay.getRelativeCellPosition(this.currentTH, cellCoords.row, cellCoords.col);
      }
      this.currentCol = this.hot.columnIndexMapper.getVisualFromRenderableIndex(col);
      this.selectedCols = [];
      var isFullColumnSelected = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByColumnHeader();
      if (this.hot.selection.isSelected() && isFullColumnSelected) {
        var selectionRanges = this.hot.getSelectedRange();
        arrayEach(selectionRanges, function(selectionRange) {
          var fromColumn = selectionRange.getTopStartCorner().col;
          var toColumn = selectionRange.getBottomEndCorner().col;
          rangeEach(fromColumn, toColumn, function(columnIndex) {
            if (!_this4.selectedCols.includes(columnIndex)) {
              _this4.selectedCols.push(columnIndex);
            }
          });
        });
      }
      if (!this.selectedCols.includes(this.currentCol)) {
        this.selectedCols = [this.currentCol];
      }
      this.startOffset = relativeHeaderPosition.start - 6;
      this.startWidth = parseInt(box.width, 10);
      this.handle.style.top = "".concat(relativeHeaderPosition.top, "px");
      this.handle.style[this.inlineDir] = "".concat(this.startOffset + this.startWidth, "px");
      this.handle.style.height = "".concat(headerHeight, "px");
      this.hot.rootElement.appendChild(this.handle);
    }
  }, {
    key: "refreshHandlePosition",
    value: function refreshHandlePosition() {
      this.handle.style[this.inlineDir] = "".concat(this.startOffset + this.currentWidth, "px");
    }
  }, {
    key: "setupGuidePosition",
    value: function setupGuidePosition() {
      var handleHeight = parseInt(outerHeight(this.handle), 10);
      var handleBottomPosition = parseInt(this.handle.style.top, 10) + handleHeight;
      var maximumVisibleElementHeight = parseInt(this.hot.view.maximumVisibleElementHeight(0), 10);
      addClass(this.handle, "active");
      addClass(this.guide, "active");
      this.guide.style.top = "".concat(handleBottomPosition, "px");
      this.refreshGuidePosition();
      this.guide.style.height = "".concat(maximumVisibleElementHeight - handleHeight, "px");
      this.hot.rootElement.appendChild(this.guide);
    }
  }, {
    key: "refreshGuidePosition",
    value: function refreshGuidePosition() {
      this.guide.style[this.inlineDir] = this.handle.style[this.inlineDir];
    }
  }, {
    key: "hideHandleAndGuide",
    value: function hideHandleAndGuide() {
      removeClass(this.handle, "active");
      removeClass(this.guide, "active");
    }
  }, {
    key: "checkIfColumnHeader",
    value: function checkIfColumnHeader(element) {
      return !!closest(element, ["THEAD"], this.hot.rootElement);
    }
  }, {
    key: "getClosestTHParent",
    value: function getClosestTHParent(element) {
      if (element.tagName !== "TABLE") {
        if (element.tagName === "TH") {
          return element;
        }
        return this.getClosestTHParent(element.parentNode);
      }
      return null;
    }
  }, {
    key: "onMouseOver",
    value: function onMouseOver(event) {
      if (isDetached(event.target)) {
        return;
      }
      if (this.checkIfColumnHeader(event.target)) {
        var th = this.getClosestTHParent(event.target);
        if (!th) {
          return;
        }
        var colspan = th.getAttribute("colspan");
        if (th && (colspan === null || colspan === "1")) {
          if (!this.pressed) {
            this.setupHandlePosition(th);
          }
        }
      }
    }
  }, {
    key: "afterMouseDownTimeout",
    value: function afterMouseDownTimeout() {
      var _this5 = this;
      var render = function render2() {
        _this5.hot.forceFullRender = true;
        _this5.hot.view.render();
        _this5.hot.view.adjustElementsSize(true);
      };
      var resize = function resize2(column, forceRender) {
        var hookNewSize = _this5.hot.runHooks("beforeColumnResize", _this5.newSize, column, true);
        if (hookNewSize !== void 0) {
          _this5.newSize = hookNewSize;
        }
        if (_this5.hot.getSettings().stretchH === "all") {
          _this5.clearManualSize(column);
        } else {
          _this5.setManualSize(column, _this5.newSize);
        }
        _this5.saveManualColumnWidths();
        _this5.hot.runHooks("afterColumnResize", _this5.newSize, column, true);
        if (forceRender) {
          render();
        }
      };
      if (this.dblclick >= 2) {
        var selectedColsLength = this.selectedCols.length;
        if (selectedColsLength > 1) {
          arrayEach(this.selectedCols, function(selectedCol) {
            resize(selectedCol);
          });
          render();
        } else {
          arrayEach(this.selectedCols, function(selectedCol) {
            resize(selectedCol, true);
          });
        }
      }
      this.dblclick = 0;
      this.autoresizeTimeout = null;
    }
  }, {
    key: "onMouseDown",
    value: function onMouseDown(event) {
      var _this6 = this;
      if (hasClass(event.target, "manualColumnResizer")) {
        this.setupHandlePosition(this.currentTH);
        this.setupGuidePosition();
        this.pressed = true;
        if (this.autoresizeTimeout === null) {
          this.autoresizeTimeout = setTimeout(function() {
            return _this6.afterMouseDownTimeout();
          }, 500);
          this.hot._registerTimeout(this.autoresizeTimeout);
        }
        this.dblclick += 1;
        this.startX = event.pageX;
        this.newSize = this.startWidth;
      }
    }
  }, {
    key: "onMouseMove",
    value: function onMouseMove(event) {
      var _this7 = this;
      if (this.pressed) {
        var change = (event.pageX - this.startX) * this.hot.getDirectionFactor();
        this.currentWidth = this.startWidth + change;
        arrayEach(this.selectedCols, function(selectedCol) {
          _this7.newSize = _this7.setManualSize(selectedCol, _this7.currentWidth);
        });
        this.refreshHandlePosition();
        this.refreshGuidePosition();
      }
    }
  }, {
    key: "onMouseUp",
    value: function onMouseUp() {
      var _this8 = this;
      var render = function render2() {
        _this8.hot.forceFullRender = true;
        _this8.hot.view.render();
        _this8.hot.view.adjustElementsSize(true);
      };
      var resize = function resize2(column, forceRender) {
        _this8.hot.runHooks("beforeColumnResize", _this8.newSize, column, false);
        if (forceRender) {
          render();
        }
        _this8.saveManualColumnWidths();
        _this8.hot.runHooks("afterColumnResize", _this8.newSize, column, false);
      };
      if (this.pressed) {
        this.hideHandleAndGuide();
        this.pressed = false;
        if (this.newSize !== this.startWidth) {
          var selectedColsLength = this.selectedCols.length;
          if (selectedColsLength > 1) {
            arrayEach(this.selectedCols, function(selectedCol) {
              resize(selectedCol);
            });
            render();
          } else {
            arrayEach(this.selectedCols, function(selectedCol) {
              resize(selectedCol, true);
            });
          }
        }
        this.setupHandlePosition(this.currentTH);
      }
    }
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      var _this9 = this;
      var _this$hot = this.hot, rootWindow = _this$hot.rootWindow, rootElement = _this$hot.rootElement;
      this.eventManager.addEventListener(rootElement, "mouseover", function(e) {
        return _this9.onMouseOver(e);
      });
      this.eventManager.addEventListener(rootElement, "mousedown", function(e) {
        return _this9.onMouseDown(e);
      });
      this.eventManager.addEventListener(rootWindow, "mousemove", function(e) {
        return _this9.onMouseMove(e);
      });
      this.eventManager.addEventListener(rootWindow, "mouseup", function() {
        return _this9.onMouseUp();
      });
    }
  }, {
    key: "onModifyColWidth",
    value: function onModifyColWidth(width, column) {
      var newWidth = width;
      if (this.enabled) {
        var physicalColumn = this.hot.toPhysicalColumn(column);
        var columnWidth = this.columnWidthsMap.getValueAtIndex(physicalColumn);
        if (this.hot.getSettings()[PLUGIN_KEY$l] && columnWidth) {
          newWidth = columnWidth;
        }
      }
      return newWidth;
    }
  }, {
    key: "onBeforeStretchingColumnWidth",
    value: function onBeforeStretchingColumnWidth(stretchedWidth, column) {
      var width = this.columnWidthsMap.getValueAtIndex(column);
      if (width === null) {
        width = stretchedWidth;
      }
      return width;
    }
  }, {
    key: "onBeforeColumnResize",
    value: function onBeforeColumnResize() {
      this.hot.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get$B(_getPrototypeOf$H(ManualColumnResize2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$l;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$k;
    }
  }]);
  return ManualColumnResize2;
}(BasePlugin);

function _classCallCheck$12(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$12(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$12(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$12(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$12(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var STATE_INITIALIZED$1 = 0;
var STATE_BUILT$2 = 1;
var STATE_APPENDED$1 = 2;
var UNIT$1 = "px";
var BaseUI$2 = /* @__PURE__ */ function() {
  function BaseUI2(hotInstance) {
    _classCallCheck$12(this, BaseUI2);
    this.hot = hotInstance;
    this._element = null;
    this.state = STATE_INITIALIZED$1;
  }
  _createClass$12(BaseUI2, [{
    key: "appendTo",
    value: function appendTo(wrapper) {
      wrapper.appendChild(this._element);
      this.state = STATE_APPENDED$1;
    }
  }, {
    key: "build",
    value: function build() {
      if (this.state !== STATE_INITIALIZED$1) {
        return;
      }
      this._element = this.hot.rootDocument.createElement("div");
      this.state = STATE_BUILT$2;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.isAppended()) {
        this._element.parentElement.removeChild(this._element);
      }
      this._element = null;
      this.state = STATE_INITIALIZED$1;
    }
  }, {
    key: "isAppended",
    value: function isAppended() {
      return this.state === STATE_APPENDED$1;
    }
  }, {
    key: "isBuilt",
    value: function isBuilt() {
      return this.state >= STATE_BUILT$2;
    }
  }, {
    key: "setPosition",
    value: function setPosition(top, left) {
      if (top !== void 0) {
        this._element.style.top = top + UNIT$1;
      }
      if (left !== void 0) {
        this._element.style.left = left + UNIT$1;
      }
    }
  }, {
    key: "getPosition",
    value: function getPosition() {
      return {
        top: this._element.style.top ? parseInt(this._element.style.top, 10) : 0,
        left: this._element.style.left ? parseInt(this._element.style.left, 10) : 0
      };
    }
  }, {
    key: "setSize",
    value: function setSize(width, height) {
      if (width) {
        this._element.style.width = width + UNIT$1;
      }
      if (height) {
        this._element.style.height = height + UNIT$1;
      }
    }
  }, {
    key: "getSize",
    value: function getSize() {
      return {
        width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,
        height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0
      };
    }
  }, {
    key: "setOffset",
    value: function setOffset(top, left) {
      if (top) {
        this._element.style.marginTop = top + UNIT$1;
      }
      if (left) {
        this._element.style.marginLeft = left + UNIT$1;
      }
    }
  }, {
    key: "getOffset",
    value: function getOffset() {
      return {
        top: this._element.style.marginTop ? parseInt(this._element.style.marginTop, 10) : 0,
        left: this._element.style.marginLeft ? parseInt(this._element.style.marginLeft, 10) : 0
      };
    }
  }]);
  return BaseUI2;
}();

function _typeof$J(obj) {
  "@babel/helpers - typeof";
  return _typeof$J = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$J(obj);
}
function _classCallCheck$13(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$13(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$13(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$13(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$13(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$C() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$C = Reflect.get.bind();
  } else {
    _get$C = function _get2(target, property, receiver) {
      var base = _superPropBase$C(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$C.apply(this, arguments);
}
function _superPropBase$C(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$I(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$I(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$I(subClass, superClass);
}
function _setPrototypeOf$I(o, p) {
  _setPrototypeOf$I = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$I(o, p);
}
function _createSuper$I(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$I();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$I(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$I(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$I(this, result);
  };
}
function _possibleConstructorReturn$I(self, call) {
  if (call && (_typeof$J(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$I(self);
}
function _assertThisInitialized$I(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$I() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$I(o) {
  _getPrototypeOf$I = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$I(o);
}
var CSS_CLASSNAME$2 = "ht__manualRowMove--backlight";
var BacklightUI$1 = /* @__PURE__ */ function(_BaseUI) {
  _inherits$I(BacklightUI2, _BaseUI);
  var _super = _createSuper$I(BacklightUI2);
  function BacklightUI2() {
    _classCallCheck$13(this, BacklightUI2);
    return _super.apply(this, arguments);
  }
  _createClass$13(BacklightUI2, [{
    key: "build",
    value: function build() {
      _get$C(_getPrototypeOf$I(BacklightUI2.prototype), "build", this).call(this);
      addClass(this._element, CSS_CLASSNAME$2);
    }
  }]);
  return BacklightUI2;
}(BaseUI$2);

function _typeof$K(obj) {
  "@babel/helpers - typeof";
  return _typeof$K = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$K(obj);
}
function _classCallCheck$14(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$14(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$14(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$14(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$14(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$D() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$D = Reflect.get.bind();
  } else {
    _get$D = function _get2(target, property, receiver) {
      var base = _superPropBase$D(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$D.apply(this, arguments);
}
function _superPropBase$D(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$J(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$J(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$J(subClass, superClass);
}
function _setPrototypeOf$J(o, p) {
  _setPrototypeOf$J = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$J(o, p);
}
function _createSuper$J(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$J();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$J(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$J(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$J(this, result);
  };
}
function _possibleConstructorReturn$J(self, call) {
  if (call && (_typeof$K(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$J(self);
}
function _assertThisInitialized$J(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$J() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$J(o) {
  _getPrototypeOf$J = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$J(o);
}
var CSS_CLASSNAME$3 = "ht__manualRowMove--guideline";
var GuidelineUI$1 = /* @__PURE__ */ function(_BaseUI) {
  _inherits$J(GuidelineUI2, _BaseUI);
  var _super = _createSuper$J(GuidelineUI2);
  function GuidelineUI2() {
    _classCallCheck$14(this, GuidelineUI2);
    return _super.apply(this, arguments);
  }
  _createClass$14(GuidelineUI2, [{
    key: "build",
    value: function build() {
      _get$D(_getPrototypeOf$J(GuidelineUI2.prototype), "build", this).call(this);
      addClass(this._element, CSS_CLASSNAME$3);
    }
  }]);
  return GuidelineUI2;
}(BaseUI$2);

function _typeof$L(obj) {
  "@babel/helpers - typeof";
  return _typeof$L = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$L(obj);
}
function _classCallCheck$15(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$15(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$15(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$15(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$15(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$E() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$E = Reflect.get.bind();
  } else {
    _get$E = function _get2(target, property, receiver) {
      var base = _superPropBase$E(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$E.apply(this, arguments);
}
function _superPropBase$E(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$K(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$K(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$K(subClass, superClass);
}
function _setPrototypeOf$K(o, p) {
  _setPrototypeOf$K = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$K(o, p);
}
function _createSuper$K(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$K();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$K(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$K(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$K(this, result);
  };
}
function _possibleConstructorReturn$K(self, call) {
  if (call && (_typeof$L(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$K(self);
}
function _assertThisInitialized$K(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$K() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$K(o) {
  _getPrototypeOf$K = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$K(o);
}
Hooks.getSingleton().register("beforeRowMove");
Hooks.getSingleton().register("afterRowMove");
var PLUGIN_KEY$m = "manualRowMove";
var PLUGIN_PRIORITY$l = 140;
var privatePool$d = new WeakMap();
var CSS_PLUGIN$1 = "ht__manualRowMove";
var CSS_SHOW_UI$1 = "show-ui";
var CSS_ON_MOVING$1 = "on-moving--rows";
var CSS_AFTER_SELECTION$1 = "after-selection--rows";
var ManualRowMove = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$K(ManualRowMove2, _BasePlugin);
  var _super = _createSuper$K(ManualRowMove2);
  function ManualRowMove2(hotInstance) {
    var _this;
    _classCallCheck$15(this, ManualRowMove2);
    _this = _super.call(this, hotInstance);
    privatePool$d.set(_assertThisInitialized$K(_this), {
      rowsToMove: [],
      pressed: void 0,
      target: {
        eventPageY: void 0,
        coords: void 0,
        TD: void 0,
        row: void 0
      },
      cachedDropIndex: void 0
    });
    _this.eventManager = new EventManager(_assertThisInitialized$K(_this));
    _this.backlight = new BacklightUI$1(hotInstance);
    _this.guideline = new GuidelineUI$1(hotInstance);
    return _this;
  }
  _createClass$15(ManualRowMove2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$m];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.addHook("beforeOnCellMouseDown", function() {
        return _this2.onBeforeOnCellMouseDown.apply(_this2, arguments);
      });
      this.addHook("beforeOnCellMouseOver", function() {
        return _this2.onBeforeOnCellMouseOver.apply(_this2, arguments);
      });
      this.addHook("afterScrollHorizontally", function() {
        return _this2.onAfterScrollHorizontally();
      });
      this.addHook("afterLoadData", function() {
        return _this2.onAfterLoadData.apply(_this2, arguments);
      });
      this.buildPluginUI();
      this.registerEvents();
      addClass(this.hot.rootElement, CSS_PLUGIN$1);
      _get$E(_getPrototypeOf$K(ManualRowMove2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      this.moveBySettingsOrLoad();
      _get$E(_getPrototypeOf$K(ManualRowMove2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      removeClass(this.hot.rootElement, CSS_PLUGIN$1);
      this.unregisterEvents();
      this.backlight.destroy();
      this.guideline.destroy();
      _get$E(_getPrototypeOf$K(ManualRowMove2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "moveRow",
    value: function moveRow(row, finalIndex) {
      return this.moveRows([row], finalIndex);
    }
  }, {
    key: "moveRows",
    value: function moveRows(rows, finalIndex) {
      var priv = privatePool$d.get(this);
      var dropIndex = priv.cachedDropIndex;
      var movePossible = this.isMovePossible(rows, finalIndex);
      var beforeMoveHook = this.hot.runHooks("beforeRowMove", rows, finalIndex, dropIndex, movePossible);
      priv.cachedDropIndex = void 0;
      if (beforeMoveHook === false) {
        return;
      }
      if (movePossible) {
        this.hot.rowIndexMapper.moveIndexes(rows, finalIndex);
      }
      var movePerformed = movePossible && this.isRowOrderChanged(rows, finalIndex);
      this.hot.runHooks("afterRowMove", rows, finalIndex, dropIndex, movePossible, movePerformed);
      return movePerformed;
    }
  }, {
    key: "dragRow",
    value: function dragRow(row, dropIndex) {
      return this.dragRows([row], dropIndex);
    }
  }, {
    key: "dragRows",
    value: function dragRows(rows, dropIndex) {
      var finalIndex = this.countFinalIndex(rows, dropIndex);
      var priv = privatePool$d.get(this);
      priv.cachedDropIndex = dropIndex;
      return this.moveRows(rows, finalIndex);
    }
  }, {
    key: "isMovePossible",
    value: function isMovePossible(movedRows, finalIndex) {
      var length = this.hot.rowIndexMapper.getNotTrimmedIndexesLength();
      var tooHighDestinationIndex = movedRows.length + finalIndex > length;
      var tooLowDestinationIndex = finalIndex < 0;
      var tooLowMovedRowIndex = movedRows.some(function(movedRow) {
        return movedRow < 0;
      });
      var tooHighMovedRowIndex = movedRows.some(function(movedRow) {
        return movedRow >= length;
      });
      if (tooHighDestinationIndex || tooLowDestinationIndex || tooLowMovedRowIndex || tooHighMovedRowIndex) {
        return false;
      }
      return true;
    }
  }, {
    key: "isRowOrderChanged",
    value: function isRowOrderChanged(movedRows, finalIndex) {
      return movedRows.some(function(row, nrOfMovedElement) {
        return row - nrOfMovedElement !== finalIndex;
      });
    }
  }, {
    key: "countFinalIndex",
    value: function countFinalIndex(movedRows, dropIndex) {
      var numberOfRowsLowerThanDropIndex = arrayReduce(movedRows, function(numberOfRows, currentRowIndex) {
        if (currentRowIndex < dropIndex) {
          numberOfRows += 1;
        }
        return numberOfRows;
      }, 0);
      return dropIndex - numberOfRowsLowerThanDropIndex;
    }
  }, {
    key: "getRowsHeight",
    value: function getRowsHeight(fromRow, toRow) {
      var rowMapper = this.hot.rowIndexMapper;
      var rowsHeight = 0;
      for (var visualRowIndex = fromRow; visualRowIndex <= toRow; visualRowIndex++) {
        var renderableIndex = rowMapper.getRenderableFromVisualIndex(visualRowIndex);
        if (renderableIndex !== null) {
          rowsHeight += this.hot.view._wt.wtTable.getRowHeight(renderableIndex) || 23;
        }
      }
      return rowsHeight;
    }
  }, {
    key: "moveBySettingsOrLoad",
    value: function moveBySettingsOrLoad() {
      var pluginSettings = this.hot.getSettings()[PLUGIN_KEY$m];
      if (Array.isArray(pluginSettings)) {
        this.moveRows(pluginSettings, 0);
      } else if (pluginSettings !== void 0) {
        var persistentState = this.persistentStateLoad();
        if (persistentState.length) {
          this.moveRows(persistentState, 0);
        }
      }
    }
  }, {
    key: "isFixedRowTop",
    value: function isFixedRowTop(row) {
      return row < this.hot.getSettings().fixedRowsTop;
    }
  }, {
    key: "isFixedRowBottom",
    value: function isFixedRowBottom(row) {
      return row > this.hot.countRows() - 1 - this.hot.getSettings().fixedRowsBottom;
    }
  }, {
    key: "persistentStateSave",
    value: function persistentStateSave() {
      this.hot.runHooks("persistentStateSave", "manualRowMove", this.hot.rowIndexMapper.getIndexesSequence());
    }
  }, {
    key: "persistentStateLoad",
    value: function persistentStateLoad() {
      var storedState = {};
      this.hot.runHooks("persistentStateLoad", "manualRowMove", storedState);
      return storedState.value ? storedState.value : [];
    }
  }, {
    key: "prepareRowsToMoving",
    value: function prepareRowsToMoving() {
      var selection = this.hot.getSelectedRangeLast();
      var selectedRows = [];
      if (!selection) {
        return selectedRows;
      }
      var from = selection.from, to = selection.to;
      var start = Math.min(from.row, to.row);
      var end = Math.max(from.row, to.row);
      rangeEach(start, end, function(i) {
        selectedRows.push(i);
      });
      return selectedRows;
    }
  }, {
    key: "refreshPositions",
    value: function refreshPositions() {
      var priv = privatePool$d.get(this);
      var coords = priv.target.coords;
      var firstVisible = this.hot.view.getFirstFullyVisibleRow();
      var lastVisible = this.hot.view.getLastFullyVisibleRow();
      var countRows = this.hot.countRows();
      if (this.isFixedRowTop(coords.row) && firstVisible > 0) {
        this.hot.scrollViewportTo(this.hot.rowIndexMapper.getNearestNotHiddenIndex(firstVisible - 1, -1));
      }
      if (this.isFixedRowBottom(coords.row) && lastVisible < countRows) {
        this.hot.scrollViewportTo(this.hot.rowIndexMapper.getNearestNotHiddenIndex(lastVisible + 1, 1), void 0, true);
      }
      var wtTable = this.hot.view._wt.wtTable;
      var TD = priv.target.TD;
      var rootElementOffset = offset(this.hot.rootElement);
      var tdOffsetTop = this.hot.view.THEAD.offsetHeight + this.getRowsHeight(0, coords.row - 1);
      var mouseOffsetTop = priv.target.eventPageY - rootElementOffset.top + wtTable.holder.scrollTop;
      var hiderHeight = wtTable.hider.offsetHeight;
      var tbodyOffsetTop = wtTable.TBODY.offsetTop;
      var backlightElemMarginTop = this.backlight.getOffset().top;
      var backlightElemHeight = this.backlight.getSize().height;
      if (this.isFixedRowTop(coords.row)) {
        tdOffsetTop += wtTable.holder.scrollTop;
      }
      if (coords.row < 0) {
        priv.target.row = firstVisible > 0 ? firstVisible - 1 : firstVisible;
      } else if (TD.offsetHeight / 2 + tdOffsetTop <= mouseOffsetTop) {
        priv.target.row = coords.row + 1;
        tdOffsetTop += coords.row === 0 ? TD.offsetHeight - 1 : TD.offsetHeight;
      } else {
        priv.target.row = coords.row;
      }
      var backlightTop = mouseOffsetTop;
      var guidelineTop = tdOffsetTop;
      if (mouseOffsetTop + backlightElemHeight + backlightElemMarginTop >= hiderHeight) {
        backlightTop = hiderHeight - backlightElemHeight - backlightElemMarginTop;
      } else if (mouseOffsetTop + backlightElemMarginTop < tbodyOffsetTop) {
        backlightTop = tbodyOffsetTop + Math.abs(backlightElemMarginTop);
      }
      if (tdOffsetTop >= hiderHeight - 1) {
        guidelineTop = hiderHeight - 1;
      }
      this.backlight.setPosition(backlightTop);
      this.guideline.setPosition(guidelineTop);
    }
  }, {
    key: "registerEvents",
    value: function registerEvents() {
      var _this3 = this;
      var documentElement = this.hot.rootDocument.documentElement;
      this.eventManager.addEventListener(documentElement, "mousemove", function(event) {
        return _this3.onMouseMove(event);
      });
      this.eventManager.addEventListener(documentElement, "mouseup", function() {
        return _this3.onMouseUp();
      });
    }
  }, {
    key: "unregisterEvents",
    value: function unregisterEvents() {
      this.eventManager.clear();
    }
  }, {
    key: "onBeforeOnCellMouseDown",
    value: function onBeforeOnCellMouseDown(event, coords, TD, controller) {
      var _this$hot$view$_wt = this.hot.view._wt, wtTable = _this$hot$view$_wt.wtTable, wtViewport = _this$hot$view$_wt.wtViewport;
      var isHeaderSelection = this.hot.selection.isSelectedByRowHeader();
      var selection = this.hot.getSelectedRangeLast();
      var priv = privatePool$d.get(this);
      if (!selection || !isHeaderSelection || priv.pressed || event.button !== 0) {
        priv.pressed = false;
        priv.rowsToMove.length = 0;
        removeClass(this.hot.rootElement, [CSS_ON_MOVING$1, CSS_SHOW_UI$1]);
        return;
      }
      var guidelineIsNotReady = this.guideline.isBuilt() && !this.guideline.isAppended();
      var backlightIsNotReady = this.backlight.isBuilt() && !this.backlight.isAppended();
      if (guidelineIsNotReady && backlightIsNotReady) {
        this.guideline.appendTo(wtTable.hider);
        this.backlight.appendTo(wtTable.hider);
      }
      var from = selection.from, to = selection.to;
      var start = Math.min(from.row, to.row);
      var end = Math.max(from.row, to.row);
      if (coords.col < 0 && coords.row >= start && coords.row <= end) {
        controller.row = true;
        priv.pressed = true;
        priv.target.eventPageY = event.pageY;
        priv.target.coords = coords;
        priv.target.TD = TD;
        priv.rowsToMove = this.prepareRowsToMoving();
        var leftPos = wtTable.holder.scrollLeft + wtViewport.getRowHeaderWidth();
        this.backlight.setPosition(null, leftPos);
        this.backlight.setSize(wtTable.hider.offsetWidth - leftPos, this.getRowsHeight(start, end));
        this.backlight.setOffset((this.getRowsHeight(start, coords.row - 1) + event.offsetY) * -1, null);
        addClass(this.hot.rootElement, CSS_ON_MOVING$1);
        this.refreshPositions();
      } else {
        removeClass(this.hot.rootElement, CSS_AFTER_SELECTION$1);
        priv.pressed = false;
        priv.rowsToMove.length = 0;
      }
    }
  }, {
    key: "onMouseMove",
    value: function onMouseMove(event) {
      var priv = privatePool$d.get(this);
      if (!priv.pressed) {
        return;
      }
      if (event.target === this.backlight.element) {
        var height = this.backlight.getSize().height;
        this.backlight.setSize(null, 0);
        setTimeout(function() {
          this.backlight.setPosition(null, height);
        });
      }
      priv.target.eventPageY = event.pageY;
      this.refreshPositions();
    }
  }, {
    key: "onBeforeOnCellMouseOver",
    value: function onBeforeOnCellMouseOver(event, coords, TD, controller) {
      var selectedRange = this.hot.getSelectedRangeLast();
      var priv = privatePool$d.get(this);
      if (!selectedRange || !priv.pressed) {
        return;
      }
      if (priv.rowsToMove.indexOf(coords.row) > -1) {
        removeClass(this.hot.rootElement, CSS_SHOW_UI$1);
      } else {
        addClass(this.hot.rootElement, CSS_SHOW_UI$1);
      }
      controller.row = true;
      controller.column = true;
      controller.cell = true;
      priv.target.coords = coords;
      priv.target.TD = TD;
    }
  }, {
    key: "onMouseUp",
    value: function onMouseUp() {
      var priv = privatePool$d.get(this);
      var target = priv.target.row;
      var rowsLen = priv.rowsToMove.length;
      priv.pressed = false;
      priv.backlightHeight = 0;
      removeClass(this.hot.rootElement, [CSS_ON_MOVING$1, CSS_SHOW_UI$1, CSS_AFTER_SELECTION$1]);
      if (this.hot.selection.isSelectedByRowHeader()) {
        addClass(this.hot.rootElement, CSS_AFTER_SELECTION$1);
      }
      if (rowsLen < 1 || target === void 0) {
        return;
      }
      var firstMovedVisualRow = priv.rowsToMove[0];
      var firstMovedPhysicalRow = this.hot.toPhysicalRow(firstMovedVisualRow);
      var movePerformed = this.dragRows(priv.rowsToMove, target);
      priv.rowsToMove.length = 0;
      if (movePerformed === true) {
        this.persistentStateSave();
        this.hot.render();
        this.hot.view.adjustElementsSize(true);
        var selectionStart = this.hot.toVisualRow(firstMovedPhysicalRow);
        var selectionEnd = selectionStart + rowsLen - 1;
        this.hot.selectRows(selectionStart, selectionEnd);
      }
    }
  }, {
    key: "onAfterScrollHorizontally",
    value: function onAfterScrollHorizontally() {
      var wtTable = this.hot.view._wt.wtTable;
      var headerWidth = this.hot.view._wt.wtViewport.getRowHeaderWidth();
      var scrollLeft = wtTable.holder.scrollLeft;
      var posLeft = headerWidth + scrollLeft;
      this.backlight.setPosition(null, posLeft);
      this.backlight.setSize(wtTable.hider.offsetWidth - posLeft);
    }
  }, {
    key: "buildPluginUI",
    value: function buildPluginUI() {
      this.backlight.build();
      this.guideline.build();
    }
  }, {
    key: "onAfterLoadData",
    value: function onAfterLoadData() {
      this.moveBySettingsOrLoad();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.backlight.destroy();
      this.guideline.destroy();
      _get$E(_getPrototypeOf$K(ManualRowMove2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$m;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$l;
    }
  }]);
  return ManualRowMove2;
}(BasePlugin);

function _typeof$M(obj) {
  "@babel/helpers - typeof";
  return _typeof$M = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$M(obj);
}
function _classCallCheck$16(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$16(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$16(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$16(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$16(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$F() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$F = Reflect.get.bind();
  } else {
    _get$F = function _get2(target, property, receiver) {
      var base = _superPropBase$F(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$F.apply(this, arguments);
}
function _superPropBase$F(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$L(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$L(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$L(subClass, superClass);
}
function _setPrototypeOf$L(o, p) {
  _setPrototypeOf$L = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$L(o, p);
}
function _createSuper$L(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$L();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$L(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$L(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$L(this, result);
  };
}
function _possibleConstructorReturn$L(self, call) {
  if (call && (_typeof$M(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$L(self);
}
function _assertThisInitialized$L(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$L() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$L(o) {
  _getPrototypeOf$L = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$L(o);
}
var PLUGIN_KEY$n = "manualRowResize";
var PLUGIN_PRIORITY$m = 30;
var PERSISTENT_STATE_KEY$1 = "manualRowHeights";
var privatePool$e = new WeakMap();
var ManualRowResize = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$L(ManualRowResize2, _BasePlugin);
  var _super = _createSuper$L(ManualRowResize2);
  function ManualRowResize2(hotInstance) {
    var _this;
    _classCallCheck$16(this, ManualRowResize2);
    _this = _super.call(this, hotInstance);
    var rootDocument = _this.hot.rootDocument;
    _this.currentTH = null;
    _this.currentRow = null;
    _this.selectedRows = [];
    _this.currentHeight = null;
    _this.newSize = null;
    _this.startY = null;
    _this.startHeight = null;
    _this.startOffset = null;
    _this.handle = rootDocument.createElement("DIV");
    _this.guide = rootDocument.createElement("DIV");
    _this.eventManager = new EventManager(_assertThisInitialized$L(_this));
    _this.pressed = null;
    _this.dblclick = 0;
    _this.autoresizeTimeout = null;
    _this.rowHeightsMap = void 0;
    privatePool$e.set(_assertThisInitialized$L(_this), {
      config: void 0
    });
    addClass(_this.handle, "manualRowResizer");
    addClass(_this.guide, "manualRowResizerGuide");
    return _this;
  }
  _createClass$16(ManualRowResize2, [{
    key: "inlineDir",
    get: function get() {
      return this.hot.isRtl() ? "right" : "left";
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.hot.getSettings()[PLUGIN_KEY$n];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.rowHeightsMap = new PhysicalIndexToValueMap();
      this.rowHeightsMap.addLocalHook("init", function() {
        return _this2.onMapInit();
      });
      this.hot.rowIndexMapper.registerMap(this.pluginName, this.rowHeightsMap);
      this.addHook("modifyRowHeight", function(height, row) {
        return _this2.onModifyRowHeight(height, row);
      });
      this.bindEvents();
      _get$F(_getPrototypeOf$L(ManualRowResize2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      _get$F(_getPrototypeOf$L(ManualRowResize2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      var priv = privatePool$e.get(this);
      priv.config = this.rowHeightsMap.getValues();
      this.hot.rowIndexMapper.unregisterMap(this.pluginName);
      _get$F(_getPrototypeOf$L(ManualRowResize2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "saveManualRowHeights",
    value: function saveManualRowHeights() {
      this.hot.runHooks("persistentStateSave", PERSISTENT_STATE_KEY$1, this.rowHeightsMap.getValues());
    }
  }, {
    key: "loadManualRowHeights",
    value: function loadManualRowHeights() {
      var storedState = {};
      this.hot.runHooks("persistentStateLoad", PERSISTENT_STATE_KEY$1, storedState);
      return storedState.value;
    }
  }, {
    key: "setManualSize",
    value: function setManualSize(row, height) {
      var physicalRow = this.hot.toPhysicalRow(row);
      var newHeight = Math.max(height, ViewportRowsCalculator.DEFAULT_HEIGHT);
      this.rowHeightsMap.setValueAtIndex(physicalRow, newHeight);
      return newHeight;
    }
  }, {
    key: "setupHandlePosition",
    value: function setupHandlePosition(TH) {
      var _this3 = this;
      this.currentTH = TH;
      var view = this.hot.view;
      var wt = view._wt;
      var cellCoords = wt.wtTable.getCoords(this.currentTH);
      var row = cellCoords.row;
      if (row < 0) {
        return;
      }
      var headerWidth = outerWidth(this.currentTH);
      var box = this.currentTH.getBoundingClientRect();
      var fixedRowTop = row < wt.getSetting("fixedRowsTop");
      var fixedRowBottom = row >= view.countNotHiddenRowIndexes(0, 1) - wt.getSetting("fixedRowsBottom");
      var relativeHeaderPosition;
      if (fixedRowTop) {
        relativeHeaderPosition = wt.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(this.currentTH, cellCoords.row, cellCoords.col);
      } else if (fixedRowBottom) {
        relativeHeaderPosition = wt.wtOverlays.bottomInlineStartCornerOverlay.getRelativeCellPosition(this.currentTH, cellCoords.row, cellCoords.col);
      }
      if (!relativeHeaderPosition) {
        relativeHeaderPosition = wt.wtOverlays.inlineStartOverlay.getRelativeCellPosition(this.currentTH, cellCoords.row, cellCoords.col);
      }
      this.currentRow = this.hot.rowIndexMapper.getVisualFromRenderableIndex(row);
      this.selectedRows = [];
      var isFullRowSelected = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByRowHeader();
      if (this.hot.selection.isSelected() && isFullRowSelected) {
        var selectionRanges = this.hot.getSelectedRange();
        arrayEach(selectionRanges, function(selectionRange) {
          var fromRow = selectionRange.getTopStartCorner().row;
          var toRow = selectionRange.getBottomStartCorner().row;
          rangeEach(fromRow, toRow, function(rowIndex) {
            if (!_this3.selectedRows.includes(rowIndex)) {
              _this3.selectedRows.push(rowIndex);
            }
          });
        });
      }
      if (!this.selectedRows.includes(this.currentRow)) {
        this.selectedRows = [this.currentRow];
      }
      this.startOffset = relativeHeaderPosition.top - 6;
      this.startHeight = parseInt(box.height, 10);
      this.handle.style.top = "".concat(this.startOffset + this.startHeight, "px");
      this.handle.style[this.inlineDir] = "".concat(relativeHeaderPosition.start, "px");
      this.handle.style.width = "".concat(headerWidth, "px");
      this.hot.rootElement.appendChild(this.handle);
    }
  }, {
    key: "refreshHandlePosition",
    value: function refreshHandlePosition() {
      this.handle.style.top = "".concat(this.startOffset + this.currentHeight, "px");
    }
  }, {
    key: "setupGuidePosition",
    value: function setupGuidePosition() {
      var handleWidth = parseInt(outerWidth(this.handle), 10);
      var handleEndPosition = parseInt(this.handle.style[this.inlineDir], 10) + handleWidth;
      var maximumVisibleElementWidth = parseInt(this.hot.view.maximumVisibleElementWidth(0), 10);
      addClass(this.handle, "active");
      addClass(this.guide, "active");
      this.guide.style.top = this.handle.style.top;
      this.guide.style[this.inlineDir] = "".concat(handleEndPosition, "px");
      this.guide.style.width = "".concat(maximumVisibleElementWidth - handleWidth, "px");
      this.hot.rootElement.appendChild(this.guide);
    }
  }, {
    key: "refreshGuidePosition",
    value: function refreshGuidePosition() {
      this.guide.style.top = this.handle.style.top;
    }
  }, {
    key: "hideHandleAndGuide",
    value: function hideHandleAndGuide() {
      removeClass(this.handle, "active");
      removeClass(this.guide, "active");
    }
  }, {
    key: "checkIfRowHeader",
    value: function checkIfRowHeader(element) {
      var _element$parentNode, _element$parentNode$p;
      var thElement = closest(element, ["TH"], this.hot.rootElement);
      return thElement && ((_element$parentNode = element.parentNode) === null || _element$parentNode === void 0 ? void 0 : (_element$parentNode$p = _element$parentNode.parentNode) === null || _element$parentNode$p === void 0 ? void 0 : _element$parentNode$p.tagName) === "TBODY";
    }
  }, {
    key: "getClosestTHParent",
    value: function getClosestTHParent(element) {
      if (element.tagName !== "TABLE") {
        if (element.tagName === "TH") {
          return element;
        }
        return this.getClosestTHParent(element.parentNode);
      }
      return null;
    }
  }, {
    key: "getActualRowHeight",
    value: function getActualRowHeight(row) {
      var walkontableHeight = this.hot.view._wt.wtTable.getRowHeight(row);
      if (walkontableHeight !== void 0 && this.newSize < walkontableHeight) {
        return walkontableHeight;
      }
      return this.newSize;
    }
  }, {
    key: "onMouseOver",
    value: function onMouseOver(event) {
      if (isDetached(event.target)) {
        return;
      }
      if (this.checkIfRowHeader(event.target)) {
        var th = this.getClosestTHParent(event.target);
        if (th) {
          if (!this.pressed) {
            this.setupHandlePosition(th);
          }
        }
      }
    }
  }, {
    key: "afterMouseDownTimeout",
    value: function afterMouseDownTimeout() {
      var _this4 = this;
      var render = function render2() {
        _this4.hot.forceFullRender = true;
        _this4.hot.view.render();
        _this4.hot.view.adjustElementsSize(true);
      };
      var resize = function resize2(row, forceRender) {
        var hookNewSize = _this4.hot.runHooks("beforeRowResize", _this4.getActualRowHeight(row), row, true);
        if (hookNewSize !== void 0) {
          _this4.newSize = hookNewSize;
        }
        _this4.setManualSize(row, _this4.newSize);
        _this4.hot.runHooks("afterRowResize", _this4.getActualRowHeight(row), row, true);
        if (forceRender) {
          render();
        }
      };
      if (this.dblclick >= 2) {
        var selectedRowsLength = this.selectedRows.length;
        if (selectedRowsLength > 1) {
          arrayEach(this.selectedRows, function(selectedRow) {
            resize(selectedRow);
          });
          render();
        } else {
          arrayEach(this.selectedRows, function(selectedRow) {
            resize(selectedRow, true);
          });
        }
      }
      this.dblclick = 0;
      this.autoresizeTimeout = null;
    }
  }, {
    key: "onMouseDown",
    value: function onMouseDown(event) {
      var _this5 = this;
      if (hasClass(event.target, "manualRowResizer")) {
        this.setupHandlePosition(this.currentTH);
        this.setupGuidePosition();
        this.pressed = true;
        if (this.autoresizeTimeout === null) {
          this.autoresizeTimeout = setTimeout(function() {
            return _this5.afterMouseDownTimeout();
          }, 500);
          this.hot._registerTimeout(this.autoresizeTimeout);
        }
        this.dblclick += 1;
        this.startY = event.pageY;
        this.newSize = this.startHeight;
      }
    }
  }, {
    key: "onMouseMove",
    value: function onMouseMove(event) {
      var _this6 = this;
      if (this.pressed) {
        this.currentHeight = this.startHeight + (event.pageY - this.startY);
        arrayEach(this.selectedRows, function(selectedRow) {
          _this6.newSize = _this6.setManualSize(selectedRow, _this6.currentHeight);
        });
        this.refreshHandlePosition();
        this.refreshGuidePosition();
      }
    }
  }, {
    key: "onMouseUp",
    value: function onMouseUp() {
      var _this7 = this;
      var render = function render2() {
        _this7.hot.forceFullRender = true;
        _this7.hot.view.render();
        _this7.hot.view.adjustElementsSize(true);
      };
      var runHooks = function runHooks2(row, forceRender) {
        _this7.hot.runHooks("beforeRowResize", _this7.getActualRowHeight(row), row, false);
        if (forceRender) {
          render();
        }
        _this7.saveManualRowHeights();
        _this7.hot.runHooks("afterRowResize", _this7.getActualRowHeight(row), row, false);
      };
      if (this.pressed) {
        this.hideHandleAndGuide();
        this.pressed = false;
        if (this.newSize !== this.startHeight) {
          var selectedRowsLength = this.selectedRows.length;
          if (selectedRowsLength > 1) {
            arrayEach(this.selectedRows, function(selectedRow) {
              runHooks(selectedRow);
            });
            render();
          } else {
            arrayEach(this.selectedRows, function(selectedRow) {
              runHooks(selectedRow, true);
            });
          }
        }
        this.setupHandlePosition(this.currentTH);
      }
    }
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      var _this8 = this;
      var _this$hot = this.hot, rootElement = _this$hot.rootElement, rootWindow = _this$hot.rootWindow;
      this.eventManager.addEventListener(rootElement, "mouseover", function(e) {
        return _this8.onMouseOver(e);
      });
      this.eventManager.addEventListener(rootElement, "mousedown", function(e) {
        return _this8.onMouseDown(e);
      });
      this.eventManager.addEventListener(rootWindow, "mousemove", function(e) {
        return _this8.onMouseMove(e);
      });
      this.eventManager.addEventListener(rootWindow, "mouseup", function() {
        return _this8.onMouseUp();
      });
    }
  }, {
    key: "onModifyRowHeight",
    value: function onModifyRowHeight(height, row) {
      var newHeight = height;
      if (this.enabled) {
        var physicalRow = this.hot.toPhysicalRow(row);
        var rowHeight = this.rowHeightsMap.getValueAtIndex(physicalRow);
        if (this.hot.getSettings()[PLUGIN_KEY$n] && rowHeight) {
          newHeight = rowHeight;
        }
      }
      return newHeight;
    }
  }, {
    key: "onMapInit",
    value: function onMapInit() {
      var _this9 = this;
      var priv = privatePool$e.get(this);
      var initialSetting = this.hot.getSettings()[PLUGIN_KEY$n];
      var loadedManualRowHeights = this.loadManualRowHeights();
      this.hot.batchExecution(function() {
        if (typeof loadedManualRowHeights !== "undefined") {
          loadedManualRowHeights.forEach(function(height, index) {
            _this9.rowHeightsMap.setValueAtIndex(index, height);
          });
        } else if (Array.isArray(initialSetting)) {
          initialSetting.forEach(function(height, index) {
            _this9.rowHeightsMap.setValueAtIndex(index, height);
          });
          priv.config = initialSetting;
        } else if (initialSetting === true && Array.isArray(priv.config)) {
          priv.config.forEach(function(height, index) {
            _this9.rowHeightsMap.setValueAtIndex(index, height);
          });
        }
      }, true);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get$F(_getPrototypeOf$L(ManualRowResize2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$n;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$m;
    }
  }]);
  return ManualRowResize2;
}(BasePlugin);

var _templateObject$4, _templateObject2$1, _templateObject3, _templateObject4;
function _taggedTemplateLiteral$4(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {raw: {value: Object.freeze(raw)}}));
}
function _classCallCheck$17(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$17(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$17(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$17(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$17(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var MergedCellCoords = /* @__PURE__ */ function() {
  function MergedCellCoords2(row, column, rowspan, colspan, cellCoordsFactory, cellRangeFactory) {
    _classCallCheck$17(this, MergedCellCoords2);
    this.row = row;
    this.col = column;
    this.rowspan = rowspan;
    this.colspan = colspan;
    this.removed = false;
    this.cellCoordsFactory = cellCoordsFactory;
    this.cellRangeFactory = cellRangeFactory;
  }
  _createClass$17(MergedCellCoords2, [{
    key: "normalize",
    value: function normalize(hotInstance) {
      var totalRows = hotInstance.countRows();
      var totalColumns = hotInstance.countCols();
      if (this.row < 0) {
        this.row = 0;
      } else if (this.row > totalRows - 1) {
        this.row = totalRows - 1;
      }
      if (this.col < 0) {
        this.col = 0;
      } else if (this.col > totalColumns - 1) {
        this.col = totalColumns - 1;
      }
      if (this.row + this.rowspan > totalRows - 1) {
        this.rowspan = totalRows - this.row;
      }
      if (this.col + this.colspan > totalColumns - 1) {
        this.colspan = totalColumns - this.col;
      }
    }
  }, {
    key: "includes",
    value: function includes(row, column) {
      return this.row <= row && this.col <= column && this.row + this.rowspan - 1 >= row && this.col + this.colspan - 1 >= column;
    }
  }, {
    key: "includesHorizontally",
    value: function includesHorizontally(column) {
      return this.col <= column && this.col + this.colspan - 1 >= column;
    }
  }, {
    key: "includesVertically",
    value: function includesVertically(row) {
      return this.row <= row && this.row + this.rowspan - 1 >= row;
    }
  }, {
    key: "shift",
    value: function shift(shiftVector, indexOfChange) {
      var shiftValue = shiftVector[0] || shiftVector[1];
      var shiftedIndex = indexOfChange + Math.abs(shiftVector[0] || shiftVector[1]) - 1;
      var span = shiftVector[0] ? "colspan" : "rowspan";
      var index = shiftVector[0] ? "col" : "row";
      var changeStart = Math.min(indexOfChange, shiftedIndex);
      var changeEnd = Math.max(indexOfChange, shiftedIndex);
      var mergeStart = this[index];
      var mergeEnd = this[index] + this[span] - 1;
      if (mergeStart >= indexOfChange) {
        this[index] += shiftValue;
      }
      if (shiftValue > 0) {
        if (indexOfChange <= mergeEnd && indexOfChange > mergeStart) {
          this[span] += shiftValue;
        }
      } else if (shiftValue < 0) {
        if (changeStart <= mergeStart && changeEnd >= mergeEnd) {
          this.removed = true;
          return false;
        } else if (mergeStart >= changeStart && mergeStart <= changeEnd) {
          var removedOffset = changeEnd - mergeStart + 1;
          var preRemovedOffset = Math.abs(shiftValue) - removedOffset;
          this[index] -= preRemovedOffset + shiftValue;
          this[span] -= removedOffset;
        } else if (mergeStart <= changeStart && mergeEnd >= changeEnd) {
          this[span] += shiftValue;
        } else if (mergeStart <= changeStart && mergeEnd >= changeStart && mergeEnd < changeEnd) {
          var removedPart = mergeEnd - changeStart + 1;
          this[span] -= removedPart;
        }
      }
      return true;
    }
  }, {
    key: "isFarther",
    value: function isFarther(mergedCell, direction) {
      if (!mergedCell) {
        return true;
      }
      if (direction === "down") {
        return mergedCell.row + mergedCell.rowspan - 1 < this.row + this.rowspan - 1;
      } else if (direction === "up") {
        return mergedCell.row > this.row;
      } else if (direction === "right") {
        return mergedCell.col + mergedCell.colspan - 1 < this.col + this.colspan - 1;
      } else if (direction === "left") {
        return mergedCell.col > this.col;
      }
      return null;
    }
  }, {
    key: "getLastRow",
    value: function getLastRow() {
      return this.row + this.rowspan - 1;
    }
  }, {
    key: "getLastColumn",
    value: function getLastColumn() {
      return this.col + this.colspan - 1;
    }
  }, {
    key: "getRange",
    value: function getRange() {
      return this.cellRangeFactory(this.cellCoordsFactory(this.row, this.col), this.cellCoordsFactory(this.row, this.col), this.cellCoordsFactory(this.getLastRow(), this.getLastColumn()));
    }
  }], [{
    key: "NEGATIVE_VALUES_WARNING",
    value: function NEGATIVE_VALUES_WARNING(newMergedCell) {
      return toSingleLine(_templateObject$4 || (_templateObject$4 = _taggedTemplateLiteral$4(["The merged cell declared with {row: ", ", col: ", ", \n      rowspan: ", ", colspan: ", "} contains negative values, which is \n      not supported. It will not be added to the collection."], ["The merged cell declared with {row: ", ", col: ", ",\\x20\n      rowspan: ", ", colspan: ", "} contains negative values, which is\\x20\n      not supported. It will not be added to the collection."])), newMergedCell.row, newMergedCell.col, newMergedCell.rowspan, newMergedCell.colspan);
    }
  }, {
    key: "IS_OUT_OF_BOUNDS_WARNING",
    value: function IS_OUT_OF_BOUNDS_WARNING(newMergedCell) {
      return toSingleLine(_templateObject2$1 || (_templateObject2$1 = _taggedTemplateLiteral$4(["The merged cell declared at [", ", ", "] is positioned \n      (or positioned partially) outside of the table range. It was not added to the table, please fix your setup."], ["The merged cell declared at [", ", ", "] is positioned\\x20\n      (or positioned partially) outside of the table range. It was not added to the table, please fix your setup."])), newMergedCell.row, newMergedCell.col);
    }
  }, {
    key: "IS_SINGLE_CELL",
    value: function IS_SINGLE_CELL(newMergedCell) {
      return toSingleLine(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral$4(["The merged cell declared at [", ", ", '] has both "rowspan" \n      and "colspan" declared as "1", which makes it a single cell. It cannot be added to the collection.'], ["The merged cell declared at [", ", ", '] has both "rowspan"\\x20\n      and "colspan" declared as "1", which makes it a single cell. It cannot be added to the collection.'])), newMergedCell.row, newMergedCell.col);
    }
  }, {
    key: "ZERO_SPAN_WARNING",
    value: function ZERO_SPAN_WARNING(newMergedCell) {
      return toSingleLine(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral$4(["The merged cell declared at [", ", ", '] has "rowspan" \n      or "colspan" declared as "0", which is not supported. It cannot be added to the collection.'], ["The merged cell declared at [", ", ", '] has "rowspan"\\x20\n      or "colspan" declared as "0", which is not supported. It cannot be added to the collection.'])), newMergedCell.row, newMergedCell.col);
    }
  }, {
    key: "containsNegativeValues",
    value: function containsNegativeValues(mergedCellInfo) {
      return mergedCellInfo.row < 0 || mergedCellInfo.col < 0 || mergedCellInfo.rowspan < 0 || mergedCellInfo.colspan < 0;
    }
  }, {
    key: "isSingleCell",
    value: function isSingleCell(mergedCellInfo) {
      return mergedCellInfo.colspan === 1 && mergedCellInfo.rowspan === 1;
    }
  }, {
    key: "containsZeroSpan",
    value: function containsZeroSpan(mergedCellInfo) {
      return mergedCellInfo.colspan === 0 || mergedCellInfo.rowspan === 0;
    }
  }, {
    key: "isOutOfBounds",
    value: function isOutOfBounds(mergeCell, rowCount, columnCount) {
      return mergeCell.row < 0 || mergeCell.col < 0 || mergeCell.row >= rowCount || mergeCell.row + mergeCell.rowspan - 1 >= rowCount || mergeCell.col >= columnCount || mergeCell.col + mergeCell.colspan - 1 >= columnCount;
    }
  }]);
  return MergedCellCoords2;
}();

function applySpanProperties(TD, mergedCellInfo, row, col) {
  if (mergedCellInfo) {
    if (mergedCellInfo.row === row && mergedCellInfo.col === col) {
      TD.setAttribute("rowspan", mergedCellInfo.rowspan.toString());
      TD.setAttribute("colspan", mergedCellInfo.colspan.toString());
    } else {
      TD.removeAttribute("rowspan");
      TD.removeAttribute("colspan");
      TD.style.display = "none";
    }
  } else {
    TD.removeAttribute("rowspan");
    TD.removeAttribute("colspan");
    TD.style.display = "";
  }
}

var _templateObject$5;
function _taggedTemplateLiteral$5(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {raw: {value: Object.freeze(raw)}}));
}
function _toConsumableArray$8(arr) {
  return _arrayWithoutHoles$8(arr) || _iterableToArray$9(arr) || _unsupportedIterableToArray$C(arr) || _nonIterableSpread$8();
}
function _nonIterableSpread$8() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$C(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$C(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$C(o, minLen);
}
function _iterableToArray$9(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$8(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$C(arr);
}
function _arrayLikeToArray$C(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _classCallCheck$18(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$18(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$18(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$18(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$18(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var MergedCellsCollection = /* @__PURE__ */ function() {
  function MergedCellsCollection2(plugin) {
    _classCallCheck$18(this, MergedCellsCollection2);
    this.plugin = plugin;
    this.mergedCells = [];
    this.hot = plugin.hot;
  }
  _createClass$18(MergedCellsCollection2, [{
    key: "get",
    value: function get(row, column) {
      var mergedCells = this.mergedCells;
      var result = false;
      arrayEach(mergedCells, function(mergedCell) {
        if (mergedCell.row <= row && mergedCell.row + mergedCell.rowspan - 1 >= row && mergedCell.col <= column && mergedCell.col + mergedCell.colspan - 1 >= column) {
          result = mergedCell;
          return false;
        }
        return true;
      });
      return result;
    }
  }, {
    key: "getByRange",
    value: function getByRange(range) {
      var mergedCells = this.mergedCells;
      var result = false;
      arrayEach(mergedCells, function(mergedCell) {
        if (mergedCell.row <= range.from.row && mergedCell.row + mergedCell.rowspan - 1 >= range.to.row && mergedCell.col <= range.from.col && mergedCell.col + mergedCell.colspan - 1 >= range.to.col) {
          result = mergedCell;
          return result;
        }
        return true;
      });
      return result;
    }
  }, {
    key: "getWithinRange",
    value: function getWithinRange(range) {
      var _this = this;
      var countPartials = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var mergedCells = this.mergedCells;
      var foundMergedCells = [];
      var testedRange = range;
      if (!testedRange.includesRange) {
        var from = this.hot._createCellCoords(testedRange.from.row, testedRange.from.col);
        var to = this.hot._createCellCoords(testedRange.to.row, testedRange.to.col);
        testedRange = this.hot._createCellRange(from, from, to);
      }
      arrayEach(mergedCells, function(mergedCell) {
        var mergedCellTopLeft = _this.hot._createCellCoords(mergedCell.row, mergedCell.col);
        var mergedCellBottomRight = _this.hot._createCellCoords(mergedCell.row + mergedCell.rowspan - 1, mergedCell.col + mergedCell.colspan - 1);
        var mergedCellRange = _this.hot._createCellRange(mergedCellTopLeft, mergedCellTopLeft, mergedCellBottomRight);
        if (countPartials) {
          if (testedRange.overlaps(mergedCellRange)) {
            foundMergedCells.push(mergedCell);
          }
        } else if (testedRange.includesRange(mergedCellRange)) {
          foundMergedCells.push(mergedCell);
        }
      });
      return foundMergedCells.length ? foundMergedCells : false;
    }
  }, {
    key: "add",
    value: function add(mergedCellInfo) {
      var mergedCells = this.mergedCells;
      var row = mergedCellInfo.row;
      var column = mergedCellInfo.col;
      var rowspan = mergedCellInfo.rowspan;
      var colspan = mergedCellInfo.colspan;
      var newMergedCell = new MergedCellCoords(row, column, rowspan, colspan, this.hot._createCellCoords, this.hot._createCellRange);
      var alreadyExists = this.get(row, column);
      var isOverlapping = this.isOverlapping(newMergedCell);
      if (!alreadyExists && !isOverlapping) {
        if (this.hot) {
          newMergedCell.normalize(this.hot);
        }
        mergedCells.push(newMergedCell);
        return newMergedCell;
      }
      warn(MergedCellsCollection2.IS_OVERLAPPING_WARNING(newMergedCell));
      return false;
    }
  }, {
    key: "remove",
    value: function remove(row, column) {
      var mergedCells = this.mergedCells;
      var wantedCollection = this.get(row, column);
      var wantedCollectionIndex = wantedCollection ? this.mergedCells.indexOf(wantedCollection) : -1;
      if (wantedCollection && wantedCollectionIndex !== -1) {
        mergedCells.splice(wantedCollectionIndex, 1);
        return wantedCollection;
      }
      return false;
    }
  }, {
    key: "clear",
    value: function clear() {
      var _this2 = this;
      var mergedCells = this.mergedCells;
      var mergedCellParentsToClear = [];
      var hiddenCollectionElements = [];
      arrayEach(mergedCells, function(mergedCell) {
        var TD = _this2.hot.getCell(mergedCell.row, mergedCell.col);
        if (TD) {
          mergedCellParentsToClear.push([TD, _this2.get(mergedCell.row, mergedCell.col), mergedCell.row, mergedCell.col]);
        }
      });
      this.mergedCells.length = 0;
      arrayEach(mergedCellParentsToClear, function(mergedCell, i) {
        rangeEach(0, mergedCell.rowspan - 1, function(j) {
          rangeEach(0, mergedCell.colspan - 1, function(k) {
            if (k !== 0 || j !== 0) {
              var TD = _this2.hot.getCell(mergedCell.row + j, mergedCell.col + k);
              if (TD) {
                hiddenCollectionElements.push([TD, null, null, null]);
              }
            }
          });
        });
        mergedCellParentsToClear[i][1] = null;
      });
      arrayEach(mergedCellParentsToClear, function(mergedCellParents) {
        applySpanProperties.apply(void 0, _toConsumableArray$8(mergedCellParents));
      });
      arrayEach(hiddenCollectionElements, function(hiddenCollectionElement) {
        applySpanProperties.apply(void 0, _toConsumableArray$8(hiddenCollectionElement));
      });
    }
  }, {
    key: "isOverlapping",
    value: function isOverlapping(mergedCell) {
      var _this3 = this;
      var mergedCellRange = this.hot._createCellRange(this.hot._createCellCoords(0, 0), this.hot._createCellCoords(mergedCell.row, mergedCell.col), this.hot._createCellCoords(mergedCell.row + mergedCell.rowspan - 1, mergedCell.col + mergedCell.colspan - 1));
      var result = false;
      arrayEach(this.mergedCells, function(col) {
        var currentRange = _this3.hot._createCellRange(_this3.hot._createCellCoords(0, 0), _this3.hot._createCellCoords(col.row, col.col), _this3.hot._createCellCoords(col.row + col.rowspan - 1, col.col + col.colspan - 1));
        if (currentRange.overlaps(mergedCellRange)) {
          result = true;
          return false;
        }
        return true;
      });
      return result;
    }
  }, {
    key: "isFirstRenderableMergedCell",
    value: function isFirstRenderableMergedCell(row, column) {
      var mergeParent = this.get(row, column);
      return mergeParent && this.hot.rowIndexMapper.getNearestNotHiddenIndex(mergeParent.row, 1) === row && this.hot.columnIndexMapper.getNearestNotHiddenIndex(mergeParent.col, 1) === column;
    }
  }, {
    key: "getFirstRenderableCoords",
    value: function getFirstRenderableCoords(row, column) {
      var mergeParent = this.get(row, column);
      if (!mergeParent || this.isFirstRenderableMergedCell(row, column)) {
        return this.hot._createCellCoords(row, column);
      }
      var firstRenderableRow = this.hot.rowIndexMapper.getNearestNotHiddenIndex(mergeParent.row, 1);
      var firstRenderableColumn = this.hot.columnIndexMapper.getNearestNotHiddenIndex(mergeParent.col, 1);
      return this.hot._createCellCoords(firstRenderableRow, firstRenderableColumn);
    }
  }, {
    key: "shiftCollections",
    value: function shiftCollections(direction, index, count) {
      var _this4 = this;
      var shiftVector = [0, 0];
      switch (direction) {
        case "right":
          shiftVector[0] += count;
          break;
        case "left":
          shiftVector[0] -= count;
          break;
        case "down":
          shiftVector[1] += count;
          break;
        case "up":
          shiftVector[1] -= count;
          break;
      }
      arrayEach(this.mergedCells, function(currentMerge) {
        currentMerge.shift(shiftVector, index);
      });
      rangeEachReverse(this.mergedCells.length - 1, 0, function(i) {
        var currentMerge = _this4.mergedCells[i];
        if (currentMerge && currentMerge.removed) {
          _this4.mergedCells.splice(_this4.mergedCells.indexOf(currentMerge), 1);
        }
      });
    }
  }], [{
    key: "IS_OVERLAPPING_WARNING",
    value: function IS_OVERLAPPING_WARNING(newMergedCell) {
      return toSingleLine(_templateObject$5 || (_templateObject$5 = _taggedTemplateLiteral$5(["The merged cell declared at [", ", ", "], overlaps \n      with the other declared merged cell. The overlapping merged cell was not added to the table, please \n      fix your setup."], ["The merged cell declared at [", ", ", "], overlaps\\x20\n      with the other declared merged cell. The overlapping merged cell was not added to the table, please\\x20\n      fix your setup."])), newMergedCell.row, newMergedCell.col);
    }
  }]);
  return MergedCellsCollection2;
}();

function _slicedToArray$v(arr, i) {
  return _arrayWithHoles$w(arr) || _iterableToArrayLimit$v(arr, i) || _unsupportedIterableToArray$D(arr, i) || _nonIterableRest$w();
}
function _nonIterableRest$w() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$D(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$D(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$D(o, minLen);
}
function _arrayLikeToArray$D(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$v(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$w(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck$19(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$19(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$19(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$19(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$19(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var AutofillCalculations = /* @__PURE__ */ function() {
  function AutofillCalculations2(plugin) {
    _classCallCheck$19(this, AutofillCalculations2);
    this.plugin = plugin;
    this.mergedCellsCollection = this.plugin.mergedCellsCollection;
    this.currentFillData = null;
  }
  _createClass$19(AutofillCalculations2, [{
    key: "correctSelectionAreaSize",
    value: function correctSelectionAreaSize(selectionArea) {
      if (selectionArea[0] === selectionArea[2] && selectionArea[1] === selectionArea[3]) {
        var mergedCell = this.mergedCellsCollection.get(selectionArea[0], selectionArea[1]);
        if (mergedCell) {
          selectionArea[2] = selectionArea[0] + mergedCell.rowspan - 1;
          selectionArea[3] = selectionArea[1] + mergedCell.colspan - 1;
        }
      }
    }
  }, {
    key: "getDirection",
    value: function getDirection(selectionArea, finalArea) {
      var direction = null;
      if (finalArea[0] === selectionArea[0] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {
        direction = "down";
      } else if (finalArea[2] === selectionArea[2] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {
        direction = "up";
      } else if (finalArea[1] === selectionArea[1] && finalArea[2] === selectionArea[2]) {
        direction = "right";
      } else {
        direction = "left";
      }
      return direction;
    }
  }, {
    key: "snapDragArea",
    value: function snapDragArea(baseArea, dragArea, dragDirection, foundMergedCells) {
      var newDragArea = dragArea.slice(0);
      var fillSize = this.getAutofillSize(baseArea, dragArea, dragDirection);
      var _baseArea = _slicedToArray$v(baseArea, 4), baseAreaStartRow = _baseArea[0], baseAreaStartColumn = _baseArea[1], baseAreaEndRow = _baseArea[2], baseAreaEndColumn = _baseArea[3];
      var verticalDirection = ["up", "down"].indexOf(dragDirection) > -1;
      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;
      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;
      var partials = fillSize - fulls;
      var farthestCollection = this.getFarthestCollection(baseArea, dragArea, dragDirection, foundMergedCells);
      if (farthestCollection) {
        if (dragDirection === "down") {
          var fill = farthestCollection.row + farthestCollection.rowspan - baseAreaStartRow - partials;
          var newLimit = newDragArea[2] + fill;
          if (newLimit >= this.plugin.hot.countRows()) {
            newDragArea[2] -= partials;
          } else {
            newDragArea[2] += partials ? fill : 0;
          }
        } else if (dragDirection === "right") {
          var _fill = farthestCollection.col + farthestCollection.colspan - baseAreaStartColumn - partials;
          var _newLimit = newDragArea[3] + _fill;
          if (_newLimit >= this.plugin.hot.countCols()) {
            newDragArea[3] -= partials;
          } else {
            newDragArea[3] += partials ? _fill : 0;
          }
        } else if (dragDirection === "up") {
          var _fill2 = baseAreaEndRow - partials - farthestCollection.row + 1;
          var _newLimit2 = newDragArea[0] + _fill2;
          if (_newLimit2 < 0) {
            newDragArea[0] += partials;
          } else {
            newDragArea[0] -= partials ? _fill2 : 0;
          }
        } else if (dragDirection === "left") {
          var _fill3 = baseAreaEndColumn - partials - farthestCollection.col + 1;
          var _newLimit3 = newDragArea[1] + _fill3;
          if (_newLimit3 < 0) {
            newDragArea[1] += partials;
          } else {
            newDragArea[1] -= partials ? _fill3 : 0;
          }
        }
      }
      this.updateCurrentFillCache({
        baseArea,
        dragDirection,
        foundMergedCells,
        fillSize,
        dragArea: newDragArea,
        cycleLength: fullCycle
      });
      return newDragArea;
    }
  }, {
    key: "updateCurrentFillCache",
    value: function updateCurrentFillCache(updateObject) {
      if (!this.currentFillData) {
        this.currentFillData = {};
      }
      extend(this.currentFillData, updateObject);
    }
  }, {
    key: "getAutofillSize",
    value: function getAutofillSize(baseArea, dragArea, direction) {
      var _baseArea2 = _slicedToArray$v(baseArea, 4), baseAreaStartRow = _baseArea2[0], baseAreaStartColumn = _baseArea2[1], baseAreaEndRow = _baseArea2[2], baseAreaEndColumn = _baseArea2[3];
      var _dragArea = _slicedToArray$v(dragArea, 4), dragAreaStartRow = _dragArea[0], dragAreaStartColumn = _dragArea[1], dragAreaEndRow = _dragArea[2], dragAreaEndColumn = _dragArea[3];
      switch (direction) {
        case "up":
          return baseAreaStartRow - dragAreaStartRow;
        case "down":
          return dragAreaEndRow - baseAreaEndRow;
        case "left":
          return baseAreaStartColumn - dragAreaStartColumn;
        case "right":
          return dragAreaEndColumn - baseAreaEndColumn;
        default:
          return null;
      }
    }
  }, {
    key: "getDragArea",
    value: function getDragArea(baseArea, dragArea, direction) {
      var _baseArea3 = _slicedToArray$v(baseArea, 4), baseAreaStartRow = _baseArea3[0], baseAreaStartColumn = _baseArea3[1], baseAreaEndRow = _baseArea3[2], baseAreaEndColumn = _baseArea3[3];
      var _dragArea2 = _slicedToArray$v(dragArea, 4), dragAreaStartRow = _dragArea2[0], dragAreaStartColumn = _dragArea2[1], dragAreaEndRow = _dragArea2[2], dragAreaEndColumn = _dragArea2[3];
      switch (direction) {
        case "up":
          return [dragAreaStartRow, dragAreaStartColumn, baseAreaStartRow - 1, baseAreaEndColumn];
        case "down":
          return [baseAreaEndRow + 1, baseAreaStartColumn, dragAreaEndRow, baseAreaEndColumn];
        case "left":
          return [dragAreaStartRow, dragAreaStartColumn, baseAreaEndRow, baseAreaStartColumn - 1];
        case "right":
          return [baseAreaStartRow, baseAreaEndColumn + 1, dragAreaEndRow, dragAreaEndColumn];
        default:
          return null;
      }
    }
  }, {
    key: "getFarthestCollection",
    value: function getFarthestCollection(baseArea, dragArea, direction, mergedCellArray) {
      var _baseArea4 = _slicedToArray$v(baseArea, 4), baseAreaStartRow = _baseArea4[0], baseAreaStartColumn = _baseArea4[1], baseAreaEndRow = _baseArea4[2], baseAreaEndColumn = _baseArea4[3];
      var verticalDirection = ["up", "down"].indexOf(direction) > -1;
      var baseEnd = verticalDirection ? baseAreaEndRow : baseAreaEndColumn;
      var baseStart = verticalDirection ? baseAreaStartRow : baseAreaStartColumn;
      var fillSize = this.getAutofillSize(baseArea, dragArea, direction);
      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;
      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;
      var partials = fillSize - fulls;
      var inclusionFunctionName = null;
      var farthestCollection = null;
      var endOfDragRecreationIndex = null;
      switch (direction) {
        case "up":
          inclusionFunctionName = "includesVertically";
          endOfDragRecreationIndex = baseEnd - partials + 1;
          break;
        case "left":
          inclusionFunctionName = "includesHorizontally";
          endOfDragRecreationIndex = baseEnd - partials + 1;
          break;
        case "down":
          inclusionFunctionName = "includesVertically";
          endOfDragRecreationIndex = baseStart + partials - 1;
          break;
        case "right":
          inclusionFunctionName = "includesHorizontally";
          endOfDragRecreationIndex = baseStart + partials - 1;
          break;
      }
      arrayEach(mergedCellArray, function(currentCollection) {
        if (currentCollection[inclusionFunctionName](endOfDragRecreationIndex) && currentCollection.isFarther(farthestCollection, direction)) {
          farthestCollection = currentCollection;
        }
      });
      return farthestCollection;
    }
  }, {
    key: "recreateAfterDataPopulation",
    value: function recreateAfterDataPopulation(changes) {
      if (!this.currentFillData) {
        return;
      }
      var fillRange = this.getRangeFromChanges(changes);
      var foundMergedCells = this.currentFillData.foundMergedCells;
      var dragDirection = this.currentFillData.dragDirection;
      var inBounds = function inBounds2(current2, offset) {
        switch (dragDirection) {
          case "up":
            return current2.row - offset >= fillRange.from.row;
          case "down":
            return current2.row + current2.rowspan - 1 + offset <= fillRange.to.row;
          case "left":
            return current2.col - offset >= fillRange.from.column;
          case "right":
            return current2.col + current2.colspan - 1 + offset <= fillRange.to.column;
          default:
            return null;
        }
      };
      var fillOffset = 0;
      var current = null;
      var multiplier = 1;
      do {
        for (var j = 0; j < foundMergedCells.length; j += 1) {
          current = foundMergedCells[j];
          fillOffset = multiplier * this.currentFillData.cycleLength;
          if (inBounds(current, fillOffset)) {
            switch (dragDirection) {
              case "up":
                this.plugin.mergedCellsCollection.add({
                  row: current.row - fillOffset,
                  rowspan: current.rowspan,
                  col: current.col,
                  colspan: current.colspan
                });
                break;
              case "down":
                this.plugin.mergedCellsCollection.add({
                  row: current.row + fillOffset,
                  rowspan: current.rowspan,
                  col: current.col,
                  colspan: current.colspan
                });
                break;
              case "left":
                this.plugin.mergedCellsCollection.add({
                  row: current.row,
                  rowspan: current.rowspan,
                  col: current.col - fillOffset,
                  colspan: current.colspan
                });
                break;
              case "right":
                this.plugin.mergedCellsCollection.add({
                  row: current.row,
                  rowspan: current.rowspan,
                  col: current.col + fillOffset,
                  colspan: current.colspan
                });
                break;
            }
          }
          if (j === foundMergedCells.length - 1) {
            multiplier += 1;
          }
        }
      } while (inBounds(current, fillOffset));
      this.currentFillData = null;
      this.plugin.hot.render();
    }
  }, {
    key: "getRangeFromChanges",
    value: function getRangeFromChanges(changes) {
      var _this = this;
      var rows = {
        min: null,
        max: null
      };
      var columns = {
        min: null,
        max: null
      };
      arrayEach(changes, function(change) {
        var rowIndex = change[0];
        var columnIndex = _this.plugin.hot.propToCol(change[1]);
        if (rows.min === null || rowIndex < rows.min) {
          rows.min = rowIndex;
        }
        if (rows.max === null || rowIndex > rows.max) {
          rows.max = rowIndex;
        }
        if (columns.min === null || columnIndex < columns.min) {
          columns.min = columnIndex;
        }
        if (columns.max === null || columnIndex > columns.max) {
          columns.max = columnIndex;
        }
      });
      return {
        from: {
          row: rows.min,
          column: columns.min
        },
        to: {
          row: rows.max,
          column: columns.max
        }
      };
    }
  }, {
    key: "dragAreaOverlapsCollections",
    value: function dragAreaOverlapsCollections(baseArea, fullArea, direction) {
      var dragArea = this.getDragArea(baseArea, fullArea, direction);
      var _dragArea3 = _slicedToArray$v(dragArea, 4), dragAreaStartRow = _dragArea3[0], dragAreaStartColumn = _dragArea3[1], dragAreaEndRow = _dragArea3[2], dragAreaEndColumn = _dragArea3[3];
      var topLeft = this.plugin.hot._createCellCoords(dragAreaStartRow, dragAreaStartColumn);
      var bottomRight = this.plugin.hot._createCellCoords(dragAreaEndRow, dragAreaEndColumn);
      var dragRange = this.plugin.hot._createCellRange(topLeft, topLeft, bottomRight);
      return !!this.mergedCellsCollection.getWithinRange(dragRange, true);
    }
  }]);
  return AutofillCalculations2;
}();

function _classCallCheck$1a(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1a(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1a(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1a(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1a(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var SelectionCalculations = /* @__PURE__ */ function() {
  function SelectionCalculations2(plugin) {
    _classCallCheck$1a(this, SelectionCalculations2);
    this.plugin = plugin;
    this.hot = plugin.hot;
    this.fullySelectedMergedCellClassName = "fullySelectedMergedCell";
  }
  _createClass$1a(SelectionCalculations2, [{
    key: "snapDelta",
    value: function snapDelta(delta, selectionRange, mergedCell) {
      var cellCoords = selectionRange.to;
      var newRow = cellCoords.row + delta.row;
      var newColumn = cellCoords.col + delta.col;
      if (delta.row) {
        this.jumpOverMergedCell(delta, mergedCell, newRow);
      } else if (delta.col) {
        this.jumpOverMergedCell(delta, mergedCell, newColumn);
      }
    }
  }, {
    key: "jumpOverMergedCell",
    value: function jumpOverMergedCell(delta, mergedCell, newIndex) {
      var flatDelta = delta.row || delta.col;
      var includesIndex = null;
      var firstIndex = null;
      var lastIndex = null;
      if (delta.row) {
        includesIndex = mergedCell.includesVertically(newIndex);
        firstIndex = mergedCell.row;
        lastIndex = mergedCell.getLastRow();
      } else if (delta.col) {
        includesIndex = mergedCell.includesHorizontally(newIndex);
        firstIndex = mergedCell.col;
        lastIndex = mergedCell.getLastColumn();
      }
      if (flatDelta === 0) {
        return;
      } else if (flatDelta > 0) {
        if (includesIndex && newIndex !== firstIndex) {
          flatDelta += lastIndex - newIndex + 1;
        }
      } else if (includesIndex && newIndex !== lastIndex) {
        flatDelta -= newIndex - firstIndex + 1;
      }
      if (delta.row) {
        delta.row = flatDelta;
      } else if (delta.col) {
        delta.col = flatDelta;
      }
    }
  }, {
    key: "getUpdatedSelectionRange",
    value: function getUpdatedSelectionRange(oldSelectionRange, delta) {
      return this.hot._createCellRange(oldSelectionRange.highlight, oldSelectionRange.from, this.hot._createCellCoords(oldSelectionRange.to.row + delta.row, oldSelectionRange.to.col + delta.col));
    }
  }, {
    key: "getSelectedMergedCellClassName",
    value: function getSelectedMergedCellClassName(currentRow, currentColumn, cornersOfSelection, layerLevel) {
      var startRow = Math.min(cornersOfSelection[0], cornersOfSelection[2]);
      var startColumn = Math.min(cornersOfSelection[1], cornersOfSelection[3]);
      var endRow = Math.max(cornersOfSelection[0], cornersOfSelection[2]);
      var endColumn = Math.max(cornersOfSelection[1], cornersOfSelection[3]);
      if (layerLevel === void 0) {
        return;
      }
      var isFirstRenderableMergedCell = this.plugin.mergedCellsCollection.isFirstRenderableMergedCell(currentRow, currentColumn);
      if (!isFirstRenderableMergedCell) {
        return;
      }
      var mergedCell = this.plugin.mergedCellsCollection.get(currentRow, currentColumn);
      if (!mergedCell) {
        return;
      }
      var mergeRowEnd = mergedCell.getLastRow();
      var mergeColumnEnd = mergedCell.getLastColumn();
      var fullMergeAreaWithinSelection = startRow <= mergedCell.row && startColumn <= mergedCell.col && endRow >= mergeRowEnd && endColumn >= mergeColumnEnd;
      if (fullMergeAreaWithinSelection) {
        return "".concat(this.fullySelectedMergedCellClassName, "-").concat(layerLevel);
      } else if (this.plugin.selectionCalculations.isMergeCellFullySelected(mergedCell, this.plugin.hot.getSelectedRange())) {
        return "".concat(this.fullySelectedMergedCellClassName, "-multiple");
      }
    }
  }, {
    key: "isMergeCellFullySelected",
    value: function isMergeCellFullySelected(mergedCell, selectionRangesArray) {
      var mergedCellIndividualCoords = [];
      if (!selectionRangesArray || !mergedCell) {
        return false;
      }
      for (var r = 0; r < mergedCell.rowspan; r += 1) {
        for (var c = 0; c < mergedCell.colspan; c += 1) {
          mergedCellIndividualCoords.push(this.hot._createCellCoords(mergedCell.row + r, mergedCell.col + c));
        }
      }
      for (var i = 0; i < mergedCellIndividualCoords.length; i += 1) {
        var insideSelections = [];
        for (var s = 0; s < selectionRangesArray.length; s += 1) {
          insideSelections[s] = selectionRangesArray[s].includes(mergedCellIndividualCoords[i]);
        }
        if (!insideSelections.includes(true)) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: "getSelectedMergedCellClassNameToRemove",
    value: function getSelectedMergedCellClassNameToRemove() {
      var classNames = [];
      for (var i = 0; i <= 7; i += 1) {
        classNames.push("".concat(this.fullySelectedMergedCellClassName, "-").concat(i));
      }
      classNames.push("".concat(this.fullySelectedMergedCellClassName, "-multiple"));
      return classNames;
    }
  }]);
  return SelectionCalculations2;
}();

function toggleMergeItem(plugin) {
  return {
    key: "mergeCells",
    name: function name() {
      var sel = this.getSelectedLast();
      if (sel) {
        var info = plugin.mergedCellsCollection.get(sel[0], sel[1]);
        if (info.row === sel[0] && info.col === sel[1] && info.row + info.rowspan - 1 === sel[2] && info.col + info.colspan - 1 === sel[3]) {
          return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_UNMERGE_CELLS);
        }
      }
      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_MERGE_CELLS);
    },
    callback: function callback() {
      plugin.toggleMergeOnSelection();
    },
    disabled: function disabled() {
      var sel = this.getSelectedLast();
      if (!sel) {
        return true;
      }
      var isSingleCell = MergedCellCoords.isSingleCell({
        row: sel[0],
        col: sel[1],
        rowspan: sel[2] - sel[0] + 1,
        colspan: sel[3] - sel[1] + 1
      });
      return isSingleCell || this.selection.isSelectedByCorner();
    },
    hidden: false
  };
}

function _typeof$N(obj) {
  "@babel/helpers - typeof";
  return _typeof$N = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$N(obj);
}
function _slicedToArray$w(arr, i) {
  return _arrayWithHoles$x(arr) || _iterableToArrayLimit$w(arr, i) || _unsupportedIterableToArray$E(arr, i) || _nonIterableRest$x();
}
function _nonIterableRest$x() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArrayLimit$w(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$x(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _toConsumableArray$9(arr) {
  return _arrayWithoutHoles$9(arr) || _iterableToArray$a(arr) || _unsupportedIterableToArray$E(arr) || _nonIterableSpread$9();
}
function _nonIterableSpread$9() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$E(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$E(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$E(o, minLen);
}
function _iterableToArray$a(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$9(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$E(arr);
}
function _arrayLikeToArray$E(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _classCallCheck$1b(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1b(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1b(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1b(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1b(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$G() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$G = Reflect.get.bind();
  } else {
    _get$G = function _get2(target, property, receiver) {
      var base = _superPropBase$G(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$G.apply(this, arguments);
}
function _superPropBase$G(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$M(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$M(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$M(subClass, superClass);
}
function _setPrototypeOf$M(o, p) {
  _setPrototypeOf$M = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$M(o, p);
}
function _createSuper$M(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$M();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$M(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$M(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$M(this, result);
  };
}
function _possibleConstructorReturn$M(self, call) {
  if (call && (_typeof$N(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$M(self);
}
function _assertThisInitialized$M(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$M() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$M(o) {
  _getPrototypeOf$M = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$M(o);
}
Hooks.getSingleton().register("beforeMergeCells");
Hooks.getSingleton().register("afterMergeCells");
Hooks.getSingleton().register("beforeUnmergeCells");
Hooks.getSingleton().register("afterUnmergeCells");
var PLUGIN_KEY$o = "mergeCells";
var PLUGIN_PRIORITY$n = 150;
var privatePool$f = new WeakMap();
var SHORTCUTS_GROUP$5 = PLUGIN_KEY$o;
var MergeCells = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$M(MergeCells2, _BasePlugin);
  var _super = _createSuper$M(MergeCells2);
  function MergeCells2(hotInstance) {
    var _this;
    _classCallCheck$1b(this, MergeCells2);
    _this = _super.call(this, hotInstance);
    privatePool$f.set(_assertThisInitialized$M(_this), {
      lastDesiredCoords: null
    });
    _this.mergedCellsCollection = null;
    _this.autofillCalculations = null;
    _this.selectionCalculations = null;
    return _this;
  }
  _createClass$1b(MergeCells2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$o];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.mergedCellsCollection = new MergedCellsCollection(this);
      this.autofillCalculations = new AutofillCalculations(this);
      this.selectionCalculations = new SelectionCalculations(this);
      this.addHook("afterInit", function() {
        return _this2.onAfterInit.apply(_this2, arguments);
      });
      this.addHook("modifyTransformStart", function() {
        return _this2.onModifyTransformStart.apply(_this2, arguments);
      });
      this.addHook("afterModifyTransformStart", function() {
        return _this2.onAfterModifyTransformStart.apply(_this2, arguments);
      });
      this.addHook("modifyTransformEnd", function() {
        return _this2.onModifyTransformEnd.apply(_this2, arguments);
      });
      this.addHook("modifyGetCellCoords", function() {
        return _this2.onModifyGetCellCoords.apply(_this2, arguments);
      });
      this.addHook("beforeSetRangeStart", function() {
        return _this2.onBeforeSetRangeStart.apply(_this2, arguments);
      });
      this.addHook("beforeSetRangeStartOnly", function() {
        return _this2.onBeforeSetRangeStart.apply(_this2, arguments);
      });
      this.addHook("beforeSetRangeEnd", function() {
        return _this2.onBeforeSetRangeEnd.apply(_this2, arguments);
      });
      this.addHook("afterIsMultipleSelection", function() {
        return _this2.onAfterIsMultipleSelection.apply(_this2, arguments);
      });
      this.addHook("afterRenderer", function() {
        return _this2.onAfterRenderer.apply(_this2, arguments);
      });
      this.addHook("afterContextMenuDefaultOptions", function() {
        return _this2.addMergeActionsToContextMenu.apply(_this2, arguments);
      });
      this.addHook("afterGetCellMeta", function() {
        return _this2.onAfterGetCellMeta.apply(_this2, arguments);
      });
      this.addHook("afterViewportRowCalculatorOverride", function() {
        return _this2.onAfterViewportRowCalculatorOverride.apply(_this2, arguments);
      });
      this.addHook("afterViewportColumnCalculatorOverride", function() {
        return _this2.onAfterViewportColumnCalculatorOverride.apply(_this2, arguments);
      });
      this.addHook("modifyAutofillRange", function() {
        return _this2.onModifyAutofillRange.apply(_this2, arguments);
      });
      this.addHook("afterCreateCol", function() {
        return _this2.onAfterCreateCol.apply(_this2, arguments);
      });
      this.addHook("afterRemoveCol", function() {
        return _this2.onAfterRemoveCol.apply(_this2, arguments);
      });
      this.addHook("afterCreateRow", function() {
        return _this2.onAfterCreateRow.apply(_this2, arguments);
      });
      this.addHook("afterRemoveRow", function() {
        return _this2.onAfterRemoveRow.apply(_this2, arguments);
      });
      this.addHook("afterChange", function() {
        return _this2.onAfterChange.apply(_this2, arguments);
      });
      this.addHook("beforeDrawBorders", function() {
        return _this2.onBeforeDrawAreaBorders.apply(_this2, arguments);
      });
      this.addHook("afterDrawSelection", function() {
        return _this2.onAfterDrawSelection.apply(_this2, arguments);
      });
      this.addHook("beforeRemoveCellClassNames", function() {
        return _this2.onBeforeRemoveCellClassNames.apply(_this2, arguments);
      });
      this.addHook("beforeUndoStackChange", function(action, source) {
        if (source === "MergeCells") {
          return false;
        }
      });
      this.registerShortcuts();
      _get$G(_getPrototypeOf$M(MergeCells2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.clearCollections();
      this.unregisterShortcuts();
      this.hot.render();
      _get$G(_getPrototypeOf$M(MergeCells2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      var settings = this.hot.getSettings()[PLUGIN_KEY$o];
      this.disablePlugin();
      this.enablePlugin();
      this.generateFromSettings(settings);
      _get$G(_getPrototypeOf$M(MergeCells2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "validateSetting",
    value: function validateSetting(setting) {
      var valid = true;
      if (!setting) {
        return false;
      }
      if (MergedCellCoords.containsNegativeValues(setting)) {
        warn(MergedCellCoords.NEGATIVE_VALUES_WARNING(setting));
        valid = false;
      } else if (MergedCellCoords.isOutOfBounds(setting, this.hot.countRows(), this.hot.countCols())) {
        warn(MergedCellCoords.IS_OUT_OF_BOUNDS_WARNING(setting));
        valid = false;
      } else if (MergedCellCoords.isSingleCell(setting)) {
        warn(MergedCellCoords.IS_SINGLE_CELL(setting));
        valid = false;
      } else if (MergedCellCoords.containsZeroSpan(setting)) {
        warn(MergedCellCoords.ZERO_SPAN_WARNING(setting));
        valid = false;
      }
      return valid;
    }
  }, {
    key: "generateFromSettings",
    value: function generateFromSettings(settings) {
      var _this3 = this;
      if (Array.isArray(settings)) {
        var _this$hot;
        var populationArgumentsList = [];
        arrayEach(settings, function(setting) {
          if (!_this3.validateSetting(setting)) {
            return;
          }
          var highlight = _this3.hot._createCellCoords(setting.row, setting.col);
          var rangeEnd = _this3.hot._createCellCoords(setting.row + setting.rowspan - 1, setting.col + setting.colspan - 1);
          var mergeRange = _this3.hot._createCellRange(highlight, highlight, rangeEnd);
          populationArgumentsList.push(_this3.mergeRange(mergeRange, true, true));
        });
        populationArgumentsList = populationArgumentsList.filter(function(value) {
          return value !== true;
        });
        var bulkPopulationData = this.getBulkCollectionData(populationArgumentsList);
        (_this$hot = this.hot).populateFromArray.apply(_this$hot, _toConsumableArray$9(bulkPopulationData));
      }
    }
  }, {
    key: "getBulkCollectionData",
    value: function getBulkCollectionData(populationArgumentsList) {
      var _this$hot2;
      var populationDataRange = this.getBulkCollectionDataRange(populationArgumentsList);
      var dataAtRange = (_this$hot2 = this.hot).getData.apply(_this$hot2, _toConsumableArray$9(populationDataRange));
      var newDataAtRange = dataAtRange.splice(0);
      arrayEach(populationArgumentsList, function(mergedCellArguments) {
        var _mergedCellArguments = _slicedToArray$w(mergedCellArguments, 3), mergedCellRowIndex = _mergedCellArguments[0], mergedCellColumnIndex = _mergedCellArguments[1], mergedCellData = _mergedCellArguments[2];
        arrayEach(mergedCellData, function(mergedCellRow, rowIndex) {
          arrayEach(mergedCellRow, function(mergedCellElement, columnIndex) {
            newDataAtRange[mergedCellRowIndex - populationDataRange[0] + rowIndex][mergedCellColumnIndex - populationDataRange[1] + columnIndex] = mergedCellElement;
          });
        });
      });
      return [populationDataRange[0], populationDataRange[1], newDataAtRange];
    }
  }, {
    key: "getBulkCollectionDataRange",
    value: function getBulkCollectionDataRange(populationArgumentsList) {
      var start = [0, 0];
      var end = [0, 0];
      var mergedCellRow = null;
      var mergedCellColumn = null;
      var mergedCellData = null;
      arrayEach(populationArgumentsList, function(mergedCellArguments) {
        mergedCellRow = mergedCellArguments[0];
        mergedCellColumn = mergedCellArguments[1];
        mergedCellData = mergedCellArguments[2];
        start[0] = Math.min(mergedCellRow, start[0]);
        start[1] = Math.min(mergedCellColumn, start[1]);
        end[0] = Math.max(mergedCellRow + mergedCellData.length - 1, end[0]);
        end[1] = Math.max(mergedCellColumn + mergedCellData[0].length - 1, end[1]);
      });
      return [].concat(start, end);
    }
  }, {
    key: "clearCollections",
    value: function clearCollections() {
      this.mergedCellsCollection.clear();
    }
  }, {
    key: "canMergeRange",
    value: function canMergeRange(newMergedCellInfo) {
      var auto = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      return auto ? true : this.validateSetting(newMergedCellInfo);
    }
  }, {
    key: "toggleMergeOnSelection",
    value: function toggleMergeOnSelection() {
      var currentRange = this.hot.getSelectedRangeLast();
      if (!currentRange) {
        return;
      }
      currentRange.setDirection(this.hot.isRtl() ? "NE-SW" : "NW-SE");
      var from = currentRange.from, to = currentRange.to;
      this.toggleMerge(currentRange);
      this.hot.selectCell(from.row, from.col, to.row, to.col, false);
    }
  }, {
    key: "mergeSelection",
    value: function mergeSelection() {
      var cellRange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.hot.getSelectedRangeLast();
      if (!cellRange) {
        return;
      }
      cellRange.setDirection(this.hot.isRtl() ? "NE-SW" : "NW-SE");
      var from = cellRange.from, to = cellRange.to;
      this.unmergeRange(cellRange, true);
      this.mergeRange(cellRange);
      this.hot.selectCell(from.row, from.col, to.row, to.col, false);
    }
  }, {
    key: "unmergeSelection",
    value: function unmergeSelection() {
      var cellRange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.hot.getSelectedRangeLast();
      if (!cellRange) {
        return;
      }
      var from = cellRange.from, to = cellRange.to;
      this.unmergeRange(cellRange, true);
      this.hot.selectCell(from.row, from.col, to.row, to.col, false);
    }
  }, {
    key: "mergeRange",
    value: function mergeRange(cellRange) {
      var _this4 = this;
      var auto = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var preventPopulation = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var topStart = cellRange.getTopStartCorner();
      var bottomEnd = cellRange.getBottomEndCorner();
      var mergeParent = {
        row: topStart.row,
        col: topStart.col,
        rowspan: bottomEnd.row - topStart.row + 1,
        colspan: bottomEnd.col - topStart.col + 1
      };
      var clearedData = [];
      var populationInfo = null;
      if (!this.canMergeRange(mergeParent, auto)) {
        return false;
      }
      this.hot.runHooks("beforeMergeCells", cellRange, auto);
      rangeEach(0, mergeParent.rowspan - 1, function(i) {
        rangeEach(0, mergeParent.colspan - 1, function(j) {
          var clearedValue = null;
          if (!clearedData[i]) {
            clearedData[i] = [];
          }
          if (i === 0 && j === 0) {
            clearedValue = _this4.hot.getDataAtCell(mergeParent.row, mergeParent.col);
          } else {
            _this4.hot.setCellMeta(mergeParent.row + i, mergeParent.col + j, "hidden", true);
          }
          clearedData[i][j] = clearedValue;
        });
      });
      this.hot.setCellMeta(mergeParent.row, mergeParent.col, "spanned", true);
      var mergedCellAdded = this.mergedCellsCollection.add(mergeParent);
      if (mergedCellAdded) {
        if (preventPopulation) {
          populationInfo = [mergeParent.row, mergeParent.col, clearedData];
        } else {
          this.hot.populateFromArray(mergeParent.row, mergeParent.col, clearedData, void 0, void 0, this.pluginName);
        }
        this.hot.runHooks("afterMergeCells", cellRange, mergeParent, auto);
        return populationInfo;
      }
      return true;
    }
  }, {
    key: "unmergeRange",
    value: function unmergeRange(cellRange) {
      var _this5 = this;
      var auto = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var mergedCells = this.mergedCellsCollection.getWithinRange(cellRange);
      if (!mergedCells) {
        return;
      }
      this.hot.runHooks("beforeUnmergeCells", cellRange, auto);
      arrayEach(mergedCells, function(currentCollection) {
        _this5.mergedCellsCollection.remove(currentCollection.row, currentCollection.col);
        rangeEach(0, currentCollection.rowspan - 1, function(i) {
          rangeEach(0, currentCollection.colspan - 1, function(j) {
            _this5.hot.removeCellMeta(currentCollection.row + i, currentCollection.col + j, "hidden");
          });
        });
        _this5.hot.removeCellMeta(currentCollection.row, currentCollection.col, "spanned");
      });
      this.hot.runHooks("afterUnmergeCells", cellRange, auto);
      this.hot.render();
    }
  }, {
    key: "toggleMerge",
    value: function toggleMerge(cellRange) {
      var mergedCell = this.mergedCellsCollection.get(cellRange.from.row, cellRange.from.col);
      var mergedCellCoversWholeRange = mergedCell.row === cellRange.from.row && mergedCell.col === cellRange.from.col && mergedCell.row + mergedCell.rowspan - 1 === cellRange.to.row && mergedCell.col + mergedCell.colspan - 1 === cellRange.to.col;
      if (mergedCellCoversWholeRange) {
        this.unmergeRange(cellRange);
      } else {
        this.mergeSelection(cellRange);
      }
    }
  }, {
    key: "merge",
    value: function merge(startRow, startColumn, endRow, endColumn) {
      var start = this.hot._createCellCoords(startRow, startColumn);
      var end = this.hot._createCellCoords(endRow, endColumn);
      this.mergeRange(this.hot._createCellRange(start, start, end));
    }
  }, {
    key: "unmerge",
    value: function unmerge(startRow, startColumn, endRow, endColumn) {
      var start = this.hot._createCellCoords(startRow, startColumn);
      var end = this.hot._createCellCoords(endRow, endColumn);
      this.unmergeRange(this.hot._createCellRange(start, start, end));
    }
  }, {
    key: "onAfterInit",
    value: function onAfterInit() {
      this.generateFromSettings(this.hot.getSettings()[PLUGIN_KEY$o]);
      this.hot.render();
    }
  }, {
    key: "registerShortcuts",
    value: function registerShortcuts() {
      var _this6 = this;
      var shortcutManager = this.hot.getShortcutManager();
      var gridContext = shortcutManager.getContext("grid");
      gridContext.addShortcut({
        keys: [["Control", "m"]],
        callback: function callback() {
          _this6.toggleMerge(_this6.hot.getSelectedRangeLast());
          _this6.hot.render();
        },
        runOnlyIf: function runOnlyIf(event) {
          return !event.altKey;
        },
        group: SHORTCUTS_GROUP$5
      });
    }
  }, {
    key: "unregisterShortcuts",
    value: function unregisterShortcuts() {
      var shortcutManager = this.hot.getShortcutManager();
      var gridContext = shortcutManager.getContext("grid");
      gridContext.removeShortcutsByGroup(SHORTCUTS_GROUP$5);
    }
  }, {
    key: "onAfterIsMultipleSelection",
    value: function onAfterIsMultipleSelection(isMultiple) {
      if (isMultiple) {
        var mergedCells = this.mergedCellsCollection.mergedCells;
        var selectionRange = this.hot.getSelectedRangeLast();
        for (var group = 0; group < mergedCells.length; group += 1) {
          if (selectionRange.from.row === mergedCells[group].row && selectionRange.from.col === mergedCells[group].col && selectionRange.to.row === mergedCells[group].row + mergedCells[group].rowspan - 1 && selectionRange.to.col === mergedCells[group].col + mergedCells[group].colspan - 1) {
            return false;
          }
        }
      }
      return isMultiple;
    }
  }, {
    key: "onModifyTransformStart",
    value: function onModifyTransformStart(delta) {
      var priv = privatePool$f.get(this);
      var currentlySelectedRange = this.hot.getSelectedRangeLast();
      var newDelta = {
        row: delta.row,
        col: delta.col
      };
      var nextPosition = null;
      var currentPosition = this.hot._createCellCoords(currentlySelectedRange.highlight.row, currentlySelectedRange.highlight.col);
      var mergedParent = this.mergedCellsCollection.get(currentPosition.row, currentPosition.col);
      if (!priv.lastDesiredCoords) {
        priv.lastDesiredCoords = this.hot._createCellCoords(null, null);
      }
      if (mergedParent) {
        var mergeTopLeft = this.hot._createCellCoords(mergedParent.row, mergedParent.col);
        var mergeBottomRight = this.hot._createCellCoords(mergedParent.row + mergedParent.rowspan - 1, mergedParent.col + mergedParent.colspan - 1);
        var mergeRange = this.hot._createCellRange(mergeTopLeft, mergeTopLeft, mergeBottomRight);
        if (!mergeRange.includes(priv.lastDesiredCoords)) {
          priv.lastDesiredCoords = this.hot._createCellCoords(null, null);
        }
        newDelta.row = priv.lastDesiredCoords.row ? priv.lastDesiredCoords.row - currentPosition.row : newDelta.row;
        newDelta.col = priv.lastDesiredCoords.col ? priv.lastDesiredCoords.col - currentPosition.col : newDelta.col;
        if (delta.row > 0) {
          newDelta.row = mergedParent.row + mergedParent.rowspan - 1 - currentPosition.row + delta.row;
        } else if (delta.row < 0) {
          newDelta.row = currentPosition.row - mergedParent.row + delta.row;
        }
        if (delta.col > 0) {
          newDelta.col = mergedParent.col + mergedParent.colspan - 1 - currentPosition.col + delta.col;
        } else if (delta.col < 0) {
          newDelta.col = currentPosition.col - mergedParent.col + delta.col;
        }
      }
      nextPosition = this.hot._createCellCoords(currentlySelectedRange.highlight.row + newDelta.row, currentlySelectedRange.highlight.col + newDelta.col);
      var nextPositionMergedCell = this.mergedCellsCollection.get(nextPosition.row, nextPosition.col);
      if (nextPositionMergedCell) {
        var firstRenderableCoords = this.mergedCellsCollection.getFirstRenderableCoords(nextPositionMergedCell.row, nextPositionMergedCell.col);
        priv.lastDesiredCoords = nextPosition;
        newDelta = {
          row: firstRenderableCoords.row - currentPosition.row,
          col: firstRenderableCoords.col - currentPosition.col
        };
      }
      if (newDelta.row !== 0) {
        delta.row = newDelta.row;
      }
      if (newDelta.col !== 0) {
        delta.col = newDelta.col;
      }
    }
  }, {
    key: "onModifyTransformEnd",
    value: function onModifyTransformEnd(delta) {
      var _this7 = this;
      var currentSelectionRange = this.hot.getSelectedRangeLast();
      var newDelta = clone(delta);
      var newSelectionRange = this.selectionCalculations.getUpdatedSelectionRange(currentSelectionRange, delta);
      var tempDelta = clone(newDelta);
      var mergedCellsWithinRange = this.mergedCellsCollection.getWithinRange(newSelectionRange, true);
      do {
        tempDelta = clone(newDelta);
        this.selectionCalculations.getUpdatedSelectionRange(currentSelectionRange, newDelta);
        arrayEach(mergedCellsWithinRange, function(mergedCell) {
          _this7.selectionCalculations.snapDelta(newDelta, currentSelectionRange, mergedCell);
        });
      } while (newDelta.row !== tempDelta.row || newDelta.col !== tempDelta.col);
      delta.row = newDelta.row;
      delta.col = newDelta.col;
    }
  }, {
    key: "onModifyGetCellCoords",
    value: function onModifyGetCellCoords(row, column) {
      if (row < 0 || column < 0) {
        return;
      }
      var mergeParent = this.mergedCellsCollection.get(row, column);
      if (!mergeParent) {
        return;
      }
      var mergeRow = mergeParent.row, mergeColumn = mergeParent.col, colspan = mergeParent.colspan, rowspan = mergeParent.rowspan;
      return [
        mergeRow,
        mergeColumn,
        mergeRow + rowspan - 1,
        mergeColumn + colspan - 1
      ];
    }
  }, {
    key: "addMergeActionsToContextMenu",
    value: function addMergeActionsToContextMenu(defaultOptions) {
      defaultOptions.items.push({
        name: "---------"
      }, toggleMergeItem(this));
    }
  }, {
    key: "onAfterRenderer",
    value: function onAfterRenderer(TD, row, col) {
      var mergedCell = this.mergedCellsCollection.get(row, col);
      var mergedCellCopy = isObject(mergedCell) ? clone(mergedCell) : void 0;
      if (isObject(mergedCellCopy)) {
        var _this$hot3 = this.hot, rowMapper = _this$hot3.rowIndexMapper, columnMapper = _this$hot3.columnIndexMapper;
        var mergeRow = mergedCellCopy.row, mergeColumn = mergedCellCopy.col, colspan = mergedCellCopy.colspan, rowspan = mergedCellCopy.rowspan;
        var _this$translateMerged = this.translateMergedCellToRenderable(mergeRow, rowspan, mergeColumn, colspan), _this$translateMerged2 = _slicedToArray$w(_this$translateMerged, 2), lastMergedRowIndex = _this$translateMerged2[0], lastMergedColumnIndex = _this$translateMerged2[1];
        var renderedRowIndex = rowMapper.getRenderableFromVisualIndex(row);
        var renderedColumnIndex = columnMapper.getRenderableFromVisualIndex(col);
        var maxRowSpan = lastMergedRowIndex - renderedRowIndex + 1;
        var maxColSpan = lastMergedColumnIndex - renderedColumnIndex + 1;
        mergedCellCopy.row = rowMapper.getNearestNotHiddenIndex(mergedCellCopy.row, 1);
        mergedCellCopy.col = columnMapper.getNearestNotHiddenIndex(mergedCellCopy.col, 1);
        mergedCellCopy.rowspan = Math.min(mergedCellCopy.rowspan, maxRowSpan);
        mergedCellCopy.colspan = Math.min(mergedCellCopy.colspan, maxColSpan);
      }
      applySpanProperties(TD, mergedCellCopy, row, col);
    }
  }, {
    key: "onBeforeSetRangeStart",
    value: function onBeforeSetRangeStart(coords) {
      if (this.mergedCellsCollection.isFirstRenderableMergedCell(coords.row, coords.col)) {
        var mergeParent = this.mergedCellsCollection.get(coords.row, coords.col);
        var _ref = [mergeParent.row, mergeParent.col];
        coords.row = _ref[0];
        coords.col = _ref[1];
      }
    }
  }, {
    key: "onBeforeSetRangeEnd",
    value: function onBeforeSetRangeEnd(coords) {
      var selRange = this.hot.getSelectedRangeLast();
      selRange.highlight = this.hot._createCellCoords(selRange.highlight.row, selRange.highlight.col);
      selRange.to = coords;
      var rangeExpanded = false;
      if (this.hot.selection.isSelectedByColumnHeader() || this.hot.selection.isSelectedByRowHeader()) {
        return;
      }
      do {
        rangeExpanded = false;
        for (var i = 0; i < this.mergedCellsCollection.mergedCells.length; i += 1) {
          var cellInfo = this.mergedCellsCollection.mergedCells[i];
          var mergedCellRange = cellInfo.getRange();
          if (selRange.expandByRange(mergedCellRange)) {
            coords.row = selRange.to.row;
            coords.col = selRange.to.col;
            rangeExpanded = true;
          }
        }
      } while (rangeExpanded);
    }
  }, {
    key: "onAfterGetCellMeta",
    value: function onAfterGetCellMeta(row, col, cellProperties) {
      var mergeParent = this.mergedCellsCollection.get(row, col);
      if (mergeParent) {
        if (mergeParent.row !== row || mergeParent.col !== col) {
          cellProperties.copyable = false;
        } else {
          cellProperties.rowspan = mergeParent.rowspan;
          cellProperties.colspan = mergeParent.colspan;
        }
      }
    }
  }, {
    key: "onAfterViewportRowCalculatorOverride",
    value: function onAfterViewportRowCalculatorOverride(calc) {
      var nrOfColumns = this.hot.countCols();
      this.modifyViewportRowStart(calc, nrOfColumns);
      this.modifyViewportRowEnd(calc, nrOfColumns);
    }
  }, {
    key: "modifyViewportRowStart",
    value: function modifyViewportRowStart(calc, nrOfColumns) {
      var rowMapper = this.hot.rowIndexMapper;
      var visualStartRow = rowMapper.getVisualFromRenderableIndex(calc.startRow);
      for (var visualColumnIndex = 0; visualColumnIndex < nrOfColumns; visualColumnIndex += 1) {
        var mergeParentForViewportStart = this.mergedCellsCollection.get(visualStartRow, visualColumnIndex);
        if (isObject(mergeParentForViewportStart)) {
          var renderableIndexAtMergeStart = rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(mergeParentForViewportStart.row, 1));
          if (renderableIndexAtMergeStart < calc.startRow) {
            calc.startRow = renderableIndexAtMergeStart;
            this.modifyViewportRowStart(calc, nrOfColumns);
            return;
          }
        }
      }
    }
  }, {
    key: "modifyViewportRowEnd",
    value: function modifyViewportRowEnd(calc, nrOfColumns) {
      var rowMapper = this.hot.rowIndexMapper;
      var visualEndRow = rowMapper.getVisualFromRenderableIndex(calc.endRow);
      for (var visualColumnIndex = 0; visualColumnIndex < nrOfColumns; visualColumnIndex += 1) {
        var mergeParentForViewportEnd = this.mergedCellsCollection.get(visualEndRow, visualColumnIndex);
        if (isObject(mergeParentForViewportEnd)) {
          var mergeEnd = mergeParentForViewportEnd.row + mergeParentForViewportEnd.rowspan - 1;
          var renderableIndexAtMergeEnd = rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(mergeEnd, -1));
          if (renderableIndexAtMergeEnd > calc.endRow) {
            calc.endRow = renderableIndexAtMergeEnd;
            this.modifyViewportRowEnd(calc, nrOfColumns);
            return;
          }
        }
      }
    }
  }, {
    key: "onAfterViewportColumnCalculatorOverride",
    value: function onAfterViewportColumnCalculatorOverride(calc) {
      var nrOfRows = this.hot.countRows();
      this.modifyViewportColumnStart(calc, nrOfRows);
      this.modifyViewportColumnEnd(calc, nrOfRows);
    }
  }, {
    key: "modifyViewportColumnStart",
    value: function modifyViewportColumnStart(calc, nrOfRows) {
      var columnMapper = this.hot.columnIndexMapper;
      var visualStartCol = columnMapper.getVisualFromRenderableIndex(calc.startColumn);
      for (var visualRowIndex = 0; visualRowIndex < nrOfRows; visualRowIndex += 1) {
        var mergeParentForViewportStart = this.mergedCellsCollection.get(visualRowIndex, visualStartCol);
        if (isObject(mergeParentForViewportStart)) {
          var renderableIndexAtMergeStart = columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(mergeParentForViewportStart.col, 1));
          if (renderableIndexAtMergeStart < calc.startColumn) {
            calc.startColumn = renderableIndexAtMergeStart;
            this.modifyViewportColumnStart(calc, nrOfRows);
            return;
          }
        }
      }
    }
  }, {
    key: "modifyViewportColumnEnd",
    value: function modifyViewportColumnEnd(calc, nrOfRows) {
      var columnMapper = this.hot.columnIndexMapper;
      var visualEndCol = columnMapper.getVisualFromRenderableIndex(calc.endColumn);
      for (var visualRowIndex = 0; visualRowIndex < nrOfRows; visualRowIndex += 1) {
        var mergeParentForViewportEnd = this.mergedCellsCollection.get(visualRowIndex, visualEndCol);
        if (isObject(mergeParentForViewportEnd)) {
          var mergeEnd = mergeParentForViewportEnd.col + mergeParentForViewportEnd.colspan - 1;
          var renderableIndexAtMergeEnd = columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(mergeEnd, -1));
          if (renderableIndexAtMergeEnd > calc.endColumn) {
            calc.endColumn = renderableIndexAtMergeEnd;
            this.modifyViewportColumnEnd(calc, nrOfRows);
            return;
          }
        }
      }
    }
  }, {
    key: "translateMergedCellToRenderable",
    value: function translateMergedCellToRenderable(parentRow, rowspan, parentColumn, colspan) {
      var _this$hot4 = this.hot, rowMapper = _this$hot4.rowIndexMapper, columnMapper = _this$hot4.columnIndexMapper;
      var firstNonHiddenRow;
      var firstNonHiddenColumn;
      if (rowspan === 0) {
        firstNonHiddenRow = rowMapper.getNearestNotHiddenIndex(parentRow, 1);
      } else {
        firstNonHiddenRow = rowMapper.getNearestNotHiddenIndex(parentRow + rowspan - 1, -1);
      }
      if (colspan === 0) {
        firstNonHiddenColumn = columnMapper.getNearestNotHiddenIndex(parentColumn, 1);
      } else {
        firstNonHiddenColumn = columnMapper.getNearestNotHiddenIndex(parentColumn + colspan - 1, -1);
      }
      var renderableRow = parentRow >= 0 ? rowMapper.getRenderableFromVisualIndex(firstNonHiddenRow) : parentRow;
      var renderableColumn = parentColumn >= 0 ? columnMapper.getRenderableFromVisualIndex(firstNonHiddenColumn) : parentColumn;
      return [renderableRow, renderableColumn];
    }
  }, {
    key: "onModifyAutofillRange",
    value: function onModifyAutofillRange(drag, select) {
      this.autofillCalculations.correctSelectionAreaSize(select);
      var dragDirection = this.autofillCalculations.getDirection(select, drag);
      var dragArea = drag;
      if (this.autofillCalculations.dragAreaOverlapsCollections(select, dragArea, dragDirection)) {
        dragArea = select;
        return dragArea;
      }
      var mergedCellsWithinSelectionArea = this.mergedCellsCollection.getWithinRange({
        from: {
          row: select[0],
          col: select[1]
        },
        to: {
          row: select[2],
          col: select[3]
        }
      });
      if (!mergedCellsWithinSelectionArea) {
        return dragArea;
      }
      dragArea = this.autofillCalculations.snapDragArea(select, dragArea, dragDirection, mergedCellsWithinSelectionArea);
      return dragArea;
    }
  }, {
    key: "onAfterCreateCol",
    value: function onAfterCreateCol(column, count) {
      this.mergedCellsCollection.shiftCollections("right", column, count);
    }
  }, {
    key: "onAfterRemoveCol",
    value: function onAfterRemoveCol(column, count) {
      this.mergedCellsCollection.shiftCollections("left", column, count);
    }
  }, {
    key: "onAfterCreateRow",
    value: function onAfterCreateRow(row, count, source) {
      if (source === "auto") {
        return;
      }
      this.mergedCellsCollection.shiftCollections("down", row, count);
    }
  }, {
    key: "onAfterRemoveRow",
    value: function onAfterRemoveRow(row, count) {
      this.mergedCellsCollection.shiftCollections("up", row, count);
    }
  }, {
    key: "onAfterChange",
    value: function onAfterChange(changes, source) {
      if (source !== "Autofill.fill") {
        return;
      }
      this.autofillCalculations.recreateAfterDataPopulation(changes);
    }
  }, {
    key: "onBeforeDrawAreaBorders",
    value: function onBeforeDrawAreaBorders(corners, className) {
      if (className && className === "area") {
        var selectedRange = this.hot.getSelectedRangeLast();
        var mergedCellsWithinRange = this.mergedCellsCollection.getWithinRange(selectedRange);
        arrayEach(mergedCellsWithinRange, function(mergedCell) {
          if (selectedRange.getBottomEndCorner().row === mergedCell.getLastRow() && selectedRange.getBottomEndCorner().col === mergedCell.getLastColumn()) {
            corners[2] = mergedCell.row;
            corners[3] = mergedCell.col;
          }
        });
      }
    }
  }, {
    key: "onAfterModifyTransformStart",
    value: function onAfterModifyTransformStart(coords, rowTransformDir, colTransformDir) {
      if (!this.enabled) {
        return;
      }
      var mergedCellAtCoords = this.mergedCellsCollection.get(coords.row, coords.col);
      if (!mergedCellAtCoords) {
        return;
      }
      var goingDown = rowTransformDir > 0;
      var goingUp = rowTransformDir < 0;
      var goingLeft = colTransformDir < 0;
      var goingRight = colTransformDir > 0;
      var mergedCellOnBottomEdge = mergedCellAtCoords.row + mergedCellAtCoords.rowspan - 1 === this.hot.countRows() - 1;
      var mergedCellOnTopEdge = mergedCellAtCoords.row === 0;
      var mergedCellOnRightEdge = mergedCellAtCoords.col + mergedCellAtCoords.colspan - 1 === this.hot.countCols() - 1;
      var mergedCellOnLeftEdge = mergedCellAtCoords.col === 0;
      if (goingDown && mergedCellOnBottomEdge || goingUp && mergedCellOnTopEdge || goingRight && mergedCellOnRightEdge || goingLeft && mergedCellOnLeftEdge) {
        coords.row = mergedCellAtCoords.row;
        coords.col = mergedCellAtCoords.col;
      }
    }
  }, {
    key: "onAfterDrawSelection",
    value: function onAfterDrawSelection(currentRow, currentColumn, cornersOfSelection, layerLevel) {
      if (!cornersOfSelection) {
        return;
      }
      return this.selectionCalculations.getSelectedMergedCellClassName(currentRow, currentColumn, cornersOfSelection, layerLevel);
    }
  }, {
    key: "onBeforeRemoveCellClassNames",
    value: function onBeforeRemoveCellClassNames() {
      return this.selectionCalculations.getSelectedMergedCellClassNameToRemove();
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$o;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$n;
    }
  }]);
  return MergeCells2;
}(BasePlugin);

function _toArray$1(arr) {
  return _arrayWithHoles$y(arr) || _iterableToArray$b(arr) || _unsupportedIterableToArray$F(arr) || _nonIterableRest$y();
}
function _nonIterableRest$y() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$F(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$F(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$F(o, minLen);
}
function _arrayLikeToArray$F(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArray$b(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithHoles$y(arr) {
  if (Array.isArray(arr))
    return arr;
}
function rootComparator$1(sortingOrders, columnMetas) {
  return function(rowIndexWithValues, nextRowIndexWithValues) {
    var _rowIndexWithValues = _toArray$1(rowIndexWithValues), values = _rowIndexWithValues.slice(1);
    var _nextRowIndexWithValu = _toArray$1(nextRowIndexWithValues), nextValues = _nextRowIndexWithValu.slice(1);
    return function getCompareResult(column) {
      var sortingOrder = sortingOrders[column];
      var columnMeta = columnMetas[column];
      var value = values[column];
      var nextValue = nextValues[column];
      var pluginSettings = columnMeta.multiColumnSorting;
      var compareFunctionFactory = pluginSettings.compareFunctionFactory ? pluginSettings.compareFunctionFactory : getCompareFunctionFactory(columnMeta.type);
      var compareResult = compareFunctionFactory(sortingOrder, columnMeta, pluginSettings)(value, nextValue);
      if (compareResult === DO_NOT_SWAP) {
        var nextSortedColumn = column + 1;
        if (typeof columnMetas[nextSortedColumn] !== "undefined") {
          return getCompareResult(nextSortedColumn);
        }
      }
      return compareResult;
    }(0);
  };
}

var _templateObject$6;
function _taggedTemplateLiteral$6(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {raw: {value: Object.freeze(raw)}}));
}
function warnAboutPluginsConflict() {
  warn(toSingleLine(_templateObject$6 || (_templateObject$6 = _taggedTemplateLiteral$6(["Plugins `columnSorting` and `multiColumnSorting` should not be enabled simultaneously. \n    Only `multiColumnSorting` will work."], ["Plugins \\`columnSorting\\` and \\`multiColumnSorting\\` should not be enabled simultaneously. \n    Only \\`multiColumnSorting\\` will work."]))));
}

var COLUMN_ORDER_PREFIX = "sort";
function getClassesToAdd$1(columnStatesManager, column, showSortIndicator) {
  var cssClasses = [];
  if (showSortIndicator === false) {
    return cssClasses;
  }
  if (columnStatesManager.isColumnSorted(column) && columnStatesManager.getNumberOfSortedColumns() > 1) {
    cssClasses.push("".concat(COLUMN_ORDER_PREFIX, "-").concat(columnStatesManager.getIndexOfColumnInSortQueue(column) + 1));
  }
  return cssClasses;
}
function getClassesToRemove$1(htmlElement) {
  var cssClasses = htmlElement.className.split(" ");
  var sortSequenceRegExp = new RegExp("^".concat(COLUMN_ORDER_PREFIX, "-[0-9]{1,2}$"));
  return cssClasses.filter(function(cssClass) {
    return sortSequenceRegExp.test(cssClass);
  });
}

function _typeof$O(obj) {
  "@babel/helpers - typeof";
  return _typeof$O = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$O(obj);
}
function _classCallCheck$1c(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1c(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1c(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1c(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1c(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$H() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$H = Reflect.get.bind();
  } else {
    _get$H = function _get2(target, property, receiver) {
      var base = _superPropBase$H(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$H.apply(this, arguments);
}
function _superPropBase$H(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$N(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$N(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$N(subClass, superClass);
}
function _setPrototypeOf$N(o, p) {
  _setPrototypeOf$N = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$N(o, p);
}
function _createSuper$N(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$N();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$N(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$N(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$N(this, result);
  };
}
function _possibleConstructorReturn$N(self, call) {
  if (call && (_typeof$O(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$N(self);
}
function _assertThisInitialized$N(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$N() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$N(o) {
  _getPrototypeOf$N = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$N(o);
}
var PLUGIN_KEY$p = "multiColumnSorting";
var PLUGIN_PRIORITY$o = 170;
var APPEND_COLUMN_CONFIG_STRATEGY$1 = "append";
var CONFLICTED_PLUGIN_KEY = "columnSorting";
registerRootComparator(PLUGIN_KEY$p, rootComparator$1);
var MultiColumnSorting = /* @__PURE__ */ function(_ColumnSorting) {
  _inherits$N(MultiColumnSorting2, _ColumnSorting);
  var _super = _createSuper$N(MultiColumnSorting2);
  function MultiColumnSorting2(hotInstance) {
    var _this;
    _classCallCheck$1c(this, MultiColumnSorting2);
    _this = _super.call(this, hotInstance);
    _this.pluginKey = PLUGIN_KEY$p;
    return _this;
  }
  _createClass$1c(MultiColumnSorting2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return _get$H(_getPrototypeOf$N(MultiColumnSorting2.prototype), "isEnabled", this).call(this);
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      if (!this.enabled && this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[CONFLICTED_PLUGIN_KEY]) {
        warnAboutPluginsConflict();
      }
      _get$H(_getPrototypeOf$N(MultiColumnSorting2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      _get$H(_getPrototypeOf$N(MultiColumnSorting2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "sort",
    value: function sort(sortConfig) {
      _get$H(_getPrototypeOf$N(MultiColumnSorting2.prototype), "sort", this).call(this, sortConfig);
    }
  }, {
    key: "clearSort",
    value: function clearSort() {
      _get$H(_getPrototypeOf$N(MultiColumnSorting2.prototype), "clearSort", this).call(this);
    }
  }, {
    key: "isSorted",
    value: function isSorted() {
      return _get$H(_getPrototypeOf$N(MultiColumnSorting2.prototype), "isSorted", this).call(this);
    }
  }, {
    key: "getSortConfig",
    value: function getSortConfig(column) {
      return _get$H(_getPrototypeOf$N(MultiColumnSorting2.prototype), "getSortConfig", this).call(this, column);
    }
  }, {
    key: "setSortConfig",
    value: function setSortConfig(sortConfig) {
      _get$H(_getPrototypeOf$N(MultiColumnSorting2.prototype), "setSortConfig", this).call(this, sortConfig);
    }
  }, {
    key: "getNormalizedSortConfigs",
    value: function getNormalizedSortConfigs() {
      var sortConfig = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      if (Array.isArray(sortConfig)) {
        return sortConfig;
      }
      return [sortConfig];
    }
  }, {
    key: "updateHeaderClasses",
    value: function updateHeaderClasses(headerSpanElement) {
      var _get2;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      (_get2 = _get$H(_getPrototypeOf$N(MultiColumnSorting2.prototype), "updateHeaderClasses", this)).call.apply(_get2, [this, headerSpanElement].concat(args));
      removeClass(headerSpanElement, getClassesToRemove$1(headerSpanElement));
      if (this.enabled !== false) {
        addClass(headerSpanElement, getClassesToAdd$1.apply(void 0, args));
      }
    }
  }, {
    key: "onUpdateSettings",
    value: function onUpdateSettings(newSettings) {
      if (this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[CONFLICTED_PLUGIN_KEY]) {
        warnAboutPluginsConflict();
      }
      _get$H(_getPrototypeOf$N(MultiColumnSorting2.prototype), "onUpdateSettings", this).call(this, newSettings);
    }
  }, {
    key: "onAfterOnCellMouseDown",
    value: function onAfterOnCellMouseDown(event, coords) {
      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {
        return;
      }
      if (this.wasClickableHeaderClicked(event, coords.col)) {
        if (this.hot.getShortcutManager().isCtrlPressed()) {
          this.hot.deselectCell();
          this.hot.selectColumns(coords.col);
          this.sort(this.getNextSortConfig(coords.col, APPEND_COLUMN_CONFIG_STRATEGY$1));
        } else {
          this.sort(this.getColumnNextConfig(coords.col));
        }
      }
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$p;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$o;
    }
  }]);
  return MultiColumnSorting2;
}(ColumnSorting);

function _typeof$P(obj) {
  "@babel/helpers - typeof";
  return _typeof$P = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$P(obj);
}
function _classCallCheck$1d(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1d(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1d(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1d(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1d(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$I() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$I = Reflect.get.bind();
  } else {
    _get$I = function _get2(target, property, receiver) {
      var base = _superPropBase$I(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$I.apply(this, arguments);
}
function _superPropBase$I(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$O(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$O(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$O(subClass, superClass);
}
function _setPrototypeOf$O(o, p) {
  _setPrototypeOf$O = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$O(o, p);
}
function _createSuper$O(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$O();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$O(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$O(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$O(this, result);
  };
}
function _possibleConstructorReturn$O(self, call) {
  if (call && (_typeof$P(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$O(self);
}
function _assertThisInitialized$O(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$O() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$O(o) {
  _getPrototypeOf$O = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$O(o);
}
var PLUGIN_KEY$q = "multipleSelectionHandles";
var PLUGIN_PRIORITY$p = 160;
var MultipleSelectionHandles = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$O(MultipleSelectionHandles2, _BasePlugin);
  var _super = _createSuper$O(MultipleSelectionHandles2);
  function MultipleSelectionHandles2(hotInstance) {
    var _this2;
    _classCallCheck$1d(this, MultipleSelectionHandles2);
    _this2 = _super.call(this, hotInstance);
    _this2.dragged = [];
    _this2.eventManager = null;
    _this2.lastSetCell = null;
    return _this2;
  }
  _createClass$1d(MultipleSelectionHandles2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return isMobileBrowser();
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      if (this.enabled) {
        return;
      }
      if (!this.eventManager) {
        this.eventManager = new EventManager(this);
      }
      this.registerListeners();
      _get$I(_getPrototypeOf$O(MultipleSelectionHandles2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "registerListeners",
    value: function registerListeners() {
      var _this3 = this;
      var _this = this;
      var rootElement = this.hot.rootElement;
      function removeFromDragged(query) {
        if (_this.dragged.length === 1) {
          _this.dragged.splice(0, _this.dragged.length);
          return true;
        }
        var entryPosition = _this.dragged.indexOf(query);
        if (entryPosition === -1) {
          return false;
        } else if (entryPosition === 0) {
          _this.dragged = _this.dragged.slice(0, 1);
        } else if (entryPosition === 1) {
          _this.dragged = _this.dragged.slice(-1);
        }
      }
      this.eventManager.addEventListener(rootElement, "touchstart", function(event) {
        var selectedRange;
        if (hasClass(event.target, "topSelectionHandle-HitArea")) {
          selectedRange = _this.hot.getSelectedRangeLast();
          _this.dragged.push("top");
          _this.touchStartRange = {
            width: selectedRange.getWidth(),
            height: selectedRange.getHeight(),
            direction: selectedRange.getDirection()
          };
          event.preventDefault();
          return false;
        } else if (hasClass(event.target, "bottomSelectionHandle-HitArea")) {
          selectedRange = _this.hot.getSelectedRangeLast();
          _this.dragged.push("bottom");
          _this.touchStartRange = {
            width: selectedRange.getWidth(),
            height: selectedRange.getHeight(),
            direction: selectedRange.getDirection()
          };
          event.preventDefault();
          return false;
        }
      });
      this.eventManager.addEventListener(rootElement, "touchend", function(event) {
        if (hasClass(event.target, "topSelectionHandle-HitArea")) {
          removeFromDragged.call(_this, "top");
          _this.touchStartRange = void 0;
          event.preventDefault();
          return false;
        } else if (hasClass(event.target, "bottomSelectionHandle-HitArea")) {
          removeFromDragged.call(_this, "bottom");
          _this.touchStartRange = void 0;
          event.preventDefault();
          return false;
        }
      });
      this.eventManager.addEventListener(rootElement, "touchmove", function(event) {
        var rootDocument = _this3.hot.rootDocument;
        var targetCoords;
        var selectedRange;
        var rangeWidth;
        var rangeHeight;
        var rangeDirection;
        var newRangeCoords;
        if (_this.dragged.length === 0) {
          return;
        }
        var endTarget = rootDocument.elementFromPoint(event.touches[0].clientX, event.touches[0].clientY);
        if (!endTarget || endTarget === _this.lastSetCell) {
          return;
        }
        if (endTarget.nodeName === "TD" || endTarget.nodeName === "TH") {
          targetCoords = _this.hot.getCoords(endTarget);
          if (targetCoords.col === -1) {
            targetCoords.col = 0;
          }
          selectedRange = _this.hot.getSelectedRangeLast();
          rangeWidth = selectedRange.getWidth();
          rangeHeight = selectedRange.getHeight();
          rangeDirection = selectedRange.getDirection();
          if (rangeWidth === 1 && rangeHeight === 1) {
            _this.hot.selection.setRangeEnd(targetCoords);
          }
          newRangeCoords = _this.getCurrentRangeCoords(selectedRange, targetCoords, _this.touchStartRange.direction, rangeDirection, _this.dragged[0]);
          if (newRangeCoords.start !== null) {
            _this.hot.selection.setRangeStart(newRangeCoords.start);
          }
          _this.hot.selection.setRangeEnd(newRangeCoords.end);
          _this.lastSetCell = endTarget;
        }
        event.preventDefault();
      });
    }
  }, {
    key: "getCurrentRangeCoords",
    value: function getCurrentRangeCoords(selectedRange, currentTouch, touchStartDirection, currentDirection, draggedHandle) {
      var topStartCorner = selectedRange.getTopStartCorner();
      var bottomEndCorner = selectedRange.getBottomEndCorner();
      var bottomStartCorner = selectedRange.getBottomStartCorner();
      var topEndCorner = selectedRange.getTopEndCorner();
      var newCoords = {
        start: null,
        end: null
      };
      switch (touchStartDirection) {
        case "NE-SW":
          switch (currentDirection) {
            case "NE-SW":
            case "NW-SE":
              if (draggedHandle === "top") {
                newCoords = {
                  start: this.hot._createCellCoords(currentTouch.row, selectedRange.highlight.col),
                  end: this.hot._createCellCoords(bottomStartCorner.row, currentTouch.col)
                };
              } else {
                newCoords = {
                  start: this.hot._createCellCoords(selectedRange.highlight.row, currentTouch.col),
                  end: this.hot._createCellCoords(currentTouch.row, topStartCorner.col)
                };
              }
              break;
            case "SE-NW":
              if (draggedHandle === "bottom") {
                newCoords = {
                  start: this.hot._createCellCoords(bottomEndCorner.row, currentTouch.col),
                  end: this.hot._createCellCoords(currentTouch.row, topStartCorner.col)
                };
              }
              break;
          }
          break;
        case "NW-SE":
          switch (currentDirection) {
            case "NE-SW":
              if (draggedHandle === "top") {
                newCoords = {
                  start: currentTouch,
                  end: bottomStartCorner
                };
              } else {
                newCoords.end = currentTouch;
              }
              break;
            case "NW-SE":
              if (draggedHandle === "top") {
                newCoords = {
                  start: currentTouch,
                  end: bottomEndCorner
                };
              } else {
                newCoords.end = currentTouch;
              }
              break;
            case "SE-NW":
              if (draggedHandle === "top") {
                newCoords = {
                  start: currentTouch,
                  end: topStartCorner
                };
              } else {
                newCoords.end = currentTouch;
              }
              break;
            case "SW-NE":
              if (draggedHandle === "top") {
                newCoords = {
                  start: currentTouch,
                  end: topEndCorner
                };
              } else {
                newCoords.end = currentTouch;
              }
              break;
          }
          break;
        case "SW-NE":
          switch (currentDirection) {
            case "NW-SE":
              if (draggedHandle === "bottom") {
                newCoords = {
                  start: this.hot._createCellCoords(currentTouch.row, topStartCorner.col),
                  end: this.hot._createCellCoords(bottomStartCorner.row, currentTouch.col)
                };
              } else {
                newCoords = {
                  start: this.hot._createCellCoords(topStartCorner.row, currentTouch.col),
                  end: this.hot._createCellCoords(currentTouch.row, bottomEndCorner.col)
                };
              }
              break;
            case "SW-NE":
              if (draggedHandle === "top") {
                newCoords = {
                  start: this.hot._createCellCoords(selectedRange.highlight.row, currentTouch.col),
                  end: this.hot._createCellCoords(currentTouch.row, bottomEndCorner.col)
                };
              } else {
                newCoords = {
                  start: this.hot._createCellCoords(currentTouch.row, topStartCorner.col),
                  end: this.hot._createCellCoords(topStartCorner.row, currentTouch.col)
                };
              }
              break;
            case "SE-NW":
              if (draggedHandle === "bottom") {
                newCoords = {
                  start: this.hot._createCellCoords(currentTouch.row, topEndCorner.col),
                  end: this.hot._createCellCoords(topStartCorner.row, currentTouch.col)
                };
              } else if (draggedHandle === "top") {
                newCoords = {
                  start: bottomStartCorner,
                  end: currentTouch
                };
              }
              break;
          }
          break;
        case "SE-NW":
          switch (currentDirection) {
            case "NW-SE":
            case "NE-SW":
            case "SW-NE":
              if (draggedHandle === "top") {
                newCoords.end = currentTouch;
              }
              break;
            case "SE-NW":
              if (draggedHandle === "top") {
                newCoords.end = currentTouch;
              } else {
                newCoords = {
                  start: currentTouch,
                  end: topStartCorner
                };
              }
              break;
          }
          break;
      }
      return newCoords;
    }
  }, {
    key: "isDragged",
    value: function isDragged() {
      return this.dragged.length > 0;
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$q;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$p;
    }
  }]);
  return MultipleSelectionHandles2;
}(BasePlugin);

function createDefaultHeaderSettings() {
  var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$label = _ref.label, label = _ref$label === void 0 ? "" : _ref$label, _ref$colspan = _ref.colspan, colspan = _ref$colspan === void 0 ? 1 : _ref$colspan, _ref$origColspan = _ref.origColspan, origColspan = _ref$origColspan === void 0 ? 1 : _ref$origColspan, _ref$collapsible = _ref.collapsible, collapsible = _ref$collapsible === void 0 ? false : _ref$collapsible, _ref$crossHiddenColum = _ref.crossHiddenColumns, crossHiddenColumns = _ref$crossHiddenColum === void 0 ? [] : _ref$crossHiddenColum, _ref$isCollapsed = _ref.isCollapsed, isCollapsed = _ref$isCollapsed === void 0 ? false : _ref$isCollapsed, _ref$isHidden = _ref.isHidden, isHidden = _ref$isHidden === void 0 ? false : _ref$isHidden, _ref$isRoot = _ref.isRoot, isRoot = _ref$isRoot === void 0 ? false : _ref$isRoot, _ref$isPlaceholder = _ref.isPlaceholder, isPlaceholder = _ref$isPlaceholder === void 0 ? false : _ref$isPlaceholder;
  return {
    label,
    colspan,
    origColspan,
    collapsible,
    isCollapsed,
    crossHiddenColumns,
    isHidden,
    isRoot,
    isPlaceholder
  };
}
function createPlaceholderHeaderSettings() {
  return {
    label: "",
    isPlaceholder: true
  };
}

function _toConsumableArray$a(arr) {
  return _arrayWithoutHoles$a(arr) || _iterableToArray$c(arr) || _unsupportedIterableToArray$G(arr) || _nonIterableSpread$a();
}
function _nonIterableSpread$a() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$G(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$G(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$G(o, minLen);
}
function _iterableToArray$c(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$a(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$G(arr);
}
function _arrayLikeToArray$G(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function normalizeSettings(sourceSettings) {
  var columnsLimit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Infinity;
  var normalizedSettings = [];
  if (columnsLimit === 0) {
    return normalizedSettings;
  }
  arrayEach(sourceSettings, function(headersSettings) {
    var columns = [];
    var columnIndex = 0;
    normalizedSettings.push(columns);
    arrayEach(headersSettings, function(sourceHeaderSettings) {
      var headerSettings = createDefaultHeaderSettings();
      if (isObject(sourceHeaderSettings)) {
        var label = sourceHeaderSettings.label, colspan = sourceHeaderSettings.colspan;
        headerSettings.label = stringify(label);
        if (typeof colspan === "number" && colspan > 1) {
          headerSettings.colspan = colspan;
          headerSettings.origColspan = colspan;
        }
      } else {
        headerSettings.label = stringify(sourceHeaderSettings);
      }
      columnIndex += headerSettings.origColspan;
      var cancelProcessing = false;
      if (columnIndex >= columnsLimit) {
        headerSettings.colspan = headerSettings.origColspan - (columnIndex - columnsLimit);
        headerSettings.origColspan = headerSettings.colspan;
        cancelProcessing = true;
      }
      columns.push(headerSettings);
      if (headerSettings.colspan > 1) {
        for (var i = 0; i < headerSettings.colspan - 1; i++) {
          columns.push(createPlaceholderHeaderSettings());
        }
      }
      return !cancelProcessing;
    });
  });
  var columnsLength = Math.max.apply(Math, _toConsumableArray$a(arrayMap(normalizedSettings, function(headersSettings) {
    return headersSettings.length;
  })));
  arrayEach(normalizedSettings, function(headersSettings) {
    if (headersSettings.length < columnsLength) {
      var defaultSettings = arrayMap(new Array(columnsLength - headersSettings.length), function() {
        return createDefaultHeaderSettings();
      });
      headersSettings.splice.apply(headersSettings, [headersSettings.length, 0].concat(_toConsumableArray$a(defaultSettings)));
    }
  });
  return normalizedSettings;
}

var _excluded$1 = ["row", "col"];
function ownKeys$5(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$5(Object(source), true).forEach(function(key) {
      _defineProperty$d(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$d(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties$1(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose$1(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose$1(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _classCallCheck$1e(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1e(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1e(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1e(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1e(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _classPrivateFieldInitSpec$4(obj, privateMap, value) {
  _checkPrivateRedeclaration$5(obj, privateMap);
  privateMap.set(obj, value);
}
function _checkPrivateRedeclaration$5(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classPrivateFieldGet$4(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor$4(receiver, privateMap, "get");
  return _classApplyDescriptorGet$4(receiver, descriptor);
}
function _classApplyDescriptorGet$4(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
function _classPrivateFieldSet$4(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor$4(receiver, privateMap, "set");
  _classApplyDescriptorSet$4(receiver, descriptor, value);
  return value;
}
function _classExtractFieldDescriptor$4(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classApplyDescriptorSet$4(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}
var HEADER_CONFIGURABLE_PROPS = ["label", "collapsible"];
var _data = /* @__PURE__ */ new WeakMap();
var _dataLength = /* @__PURE__ */ new WeakMap();
var _columnsLimit = /* @__PURE__ */ new WeakMap();
var SourceSettings = /* @__PURE__ */ function() {
  function SourceSettings2() {
    _classCallCheck$1e(this, SourceSettings2);
    _classPrivateFieldInitSpec$4(this, _data, {
      writable: true,
      value: []
    });
    _classPrivateFieldInitSpec$4(this, _dataLength, {
      writable: true,
      value: 0
    });
    _classPrivateFieldInitSpec$4(this, _columnsLimit, {
      writable: true,
      value: Infinity
    });
  }
  _createClass$1e(SourceSettings2, [{
    key: "setColumnsLimit",
    value: function setColumnsLimit(columnsCount) {
      _classPrivateFieldSet$4(this, _columnsLimit, columnsCount);
    }
  }, {
    key: "setData",
    value: function setData() {
      var nestedHeadersSettings = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      _classPrivateFieldSet$4(this, _data, normalizeSettings(nestedHeadersSettings, _classPrivateFieldGet$4(this, _columnsLimit)));
      _classPrivateFieldSet$4(this, _dataLength, _classPrivateFieldGet$4(this, _data).length);
    }
  }, {
    key: "getData",
    value: function getData() {
      return _classPrivateFieldGet$4(this, _data);
    }
  }, {
    key: "mergeWith",
    value: function mergeWith(additionalSettings) {
      var _this = this;
      arrayEach(additionalSettings, function(_ref) {
        var row = _ref.row, col = _ref.col, rest = _objectWithoutProperties$1(_ref, _excluded$1);
        var headerSettings = _this.getHeaderSettings(row, col);
        if (headerSettings !== null) {
          extend(headerSettings, rest, HEADER_CONFIGURABLE_PROPS);
        }
      });
    }
  }, {
    key: "map",
    value: function map(callback) {
      arrayEach(_classPrivateFieldGet$4(this, _data), function(header) {
        arrayEach(header, function(headerSettings) {
          var propsToExtend = callback(_objectSpread$5({}, headerSettings));
          if (isObject(propsToExtend)) {
            extend(headerSettings, propsToExtend, HEADER_CONFIGURABLE_PROPS);
          }
        });
      });
    }
  }, {
    key: "getHeaderSettings",
    value: function getHeaderSettings(headerLevel, columnIndex) {
      var _headersSettings$colu;
      if (headerLevel >= _classPrivateFieldGet$4(this, _dataLength) || headerLevel < 0) {
        return null;
      }
      var headersSettings = _classPrivateFieldGet$4(this, _data)[headerLevel];
      if (columnIndex >= headersSettings.length) {
        return null;
      }
      return (_headersSettings$colu = headersSettings[columnIndex]) !== null && _headersSettings$colu !== void 0 ? _headersSettings$colu : null;
    }
  }, {
    key: "getHeadersSettings",
    value: function getHeadersSettings(headerLevel, columnIndex) {
      var columnsLength = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var headersSettingsChunks = [];
      if (headerLevel >= _classPrivateFieldGet$4(this, _dataLength) || headerLevel < 0) {
        return headersSettingsChunks;
      }
      var headersSettings = _classPrivateFieldGet$4(this, _data)[headerLevel];
      var currentLength = 0;
      for (var i = columnIndex; i < headersSettings.length; i++) {
        var headerSettings = headersSettings[i];
        if (headerSettings.isPlaceholder) {
          throw new Error("The first column settings cannot overlap the other header layers");
        }
        currentLength += headerSettings.colspan;
        headersSettingsChunks.push(headerSettings);
        if (headerSettings.colspan > 1) {
          i += headerSettings.colspan - 1;
        }
        if (currentLength === columnsLength) {
          break;
        }
        if (currentLength > columnsLength) {
          throw new Error("The last column settings cannot overlap the other header layers");
        }
      }
      return headersSettingsChunks;
    }
  }, {
    key: "getLayersCount",
    value: function getLayersCount() {
      return _classPrivateFieldGet$4(this, _dataLength);
    }
  }, {
    key: "getColumnsCount",
    value: function getColumnsCount() {
      return _classPrivateFieldGet$4(this, _dataLength) > 0 ? _classPrivateFieldGet$4(this, _data)[0].length : 0;
    }
  }, {
    key: "clear",
    value: function clear() {
      _classPrivateFieldSet$4(this, _data, []);
      _classPrivateFieldSet$4(this, _dataLength, 0);
    }
  }]);
  return SourceSettings2;
}();

function ownKeys$6(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$6(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$6(Object(source), true).forEach(function(key) {
      _defineProperty$e(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _classCallCheck$1f(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1f(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1f(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1f(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1f(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _defineProperty$e(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toConsumableArray$b(arr) {
  return _arrayWithoutHoles$b(arr) || _iterableToArray$d(arr) || _unsupportedIterableToArray$H(arr) || _nonIterableSpread$b();
}
function _nonIterableSpread$b() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$H(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$H(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$H(o, minLen);
}
function _iterableToArray$d(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$b(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$H(arr);
}
function _arrayLikeToArray$H(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var TRAVERSAL_DF_PRE = "DF-pre-order";
function depthFirstPreOrder(callback, context) {
  var continueTraverse = callback.call(context, this);
  for (var i = 0; i < this.childs.length; i++) {
    if (continueTraverse === false) {
      return false;
    }
    continueTraverse = depthFirstPreOrder.call(this.childs[i], callback, context);
  }
  return continueTraverse;
}
var TRAVERSAL_DF_POST = "DF-post-order";
function depthFirstPostOrder(callback, context) {
  for (var i = 0; i < this.childs.length; i++) {
    var continueTraverse = depthFirstPostOrder.call(this.childs[i], callback, context);
    if (continueTraverse === false) {
      return false;
    }
  }
  return callback.call(context, this);
}
var TRAVERSAL_BF = "BF";
function breadthFirst(callback, context) {
  var queue = [this];
  function process() {
    if (queue.length === 0) {
      return;
    }
    var node = queue.shift();
    queue.push.apply(queue, _toConsumableArray$b(node.childs));
    if (callback.call(context, node) !== false) {
      process();
    }
  }
  process();
}
var DEFAULT_TRAVERSAL_STRATEGY = TRAVERSAL_BF;
var TRAVERSAL_STRATEGIES = new Map([[TRAVERSAL_DF_PRE, depthFirstPreOrder], [TRAVERSAL_DF_POST, depthFirstPostOrder], [TRAVERSAL_BF, breadthFirst]]);
var TreeNode = /* @__PURE__ */ function() {
  function TreeNode2(data) {
    _classCallCheck$1f(this, TreeNode2);
    _defineProperty$e(this, "data", {});
    _defineProperty$e(this, "parent", null);
    _defineProperty$e(this, "childs", []);
    this.data = data;
  }
  _createClass$1f(TreeNode2, [{
    key: "addChild",
    value: function addChild(node) {
      node.parent = this;
      this.childs.push(node);
    }
  }, {
    key: "cloneTree",
    value: function cloneTree() {
      var nodeTree = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this;
      var clonedNode = new TreeNode2(_objectSpread$6({}, nodeTree.data));
      for (var i = 0; i < nodeTree.childs.length; i++) {
        clonedNode.addChild(this.cloneTree(nodeTree.childs[i]));
      }
      return clonedNode;
    }
  }, {
    key: "replaceTreeWith",
    value: function replaceTreeWith(nodeTree) {
      this.data = _objectSpread$6({}, nodeTree.data);
      this.childs = [];
      for (var i = 0; i < nodeTree.childs.length; i++) {
        this.addChild(nodeTree.childs[i]);
      }
    }
  }, {
    key: "walkDown",
    value: function walkDown(callback) {
      var traversalStrategy = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_TRAVERSAL_STRATEGY;
      if (!TRAVERSAL_STRATEGIES.has(traversalStrategy)) {
        throw new Error('Traversal strategy "'.concat(traversalStrategy, '" does not exist'));
      }
      TRAVERSAL_STRATEGIES.get(traversalStrategy).call(this, callback, this);
    }
  }, {
    key: "walkUp",
    value: function walkUp(callback) {
      var context = this;
      var process = function process2(node) {
        var continueTraverse = callback.call(context, node);
        if (continueTraverse !== false && node.parent !== null) {
          process2(node.parent);
        }
      };
      process(this);
    }
  }]);
  return TreeNode2;
}();

function ownKeys$7(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$7(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$7(Object(source), true).forEach(function(key) {
      _defineProperty$f(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$f(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray$x(arr, i) {
  return _arrayWithHoles$z(arr) || _iterableToArrayLimit$x(arr, i) || _unsupportedIterableToArray$I(arr, i) || _nonIterableRest$z();
}
function _nonIterableRest$z() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$I(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$I(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$I(o, minLen);
}
function _arrayLikeToArray$I(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$x(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$z(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck$1g(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1g(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1g(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1g(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1g(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _classPrivateFieldInitSpec$5(obj, privateMap, value) {
  _checkPrivateRedeclaration$6(obj, privateMap);
  privateMap.set(obj, value);
}
function _checkPrivateRedeclaration$6(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classPrivateFieldGet$5(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor$5(receiver, privateMap, "get");
  return _classApplyDescriptorGet$5(receiver, descriptor);
}
function _classApplyDescriptorGet$5(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
function _classPrivateFieldSet$5(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor$5(receiver, privateMap, "set");
  _classApplyDescriptorSet$5(receiver, descriptor, value);
  return value;
}
function _classExtractFieldDescriptor$5(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classApplyDescriptorSet$5(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}
var _rootNodes = /* @__PURE__ */ new WeakMap();
var _rootsIndex = /* @__PURE__ */ new WeakMap();
var _sourceSettings = /* @__PURE__ */ new WeakMap();
var HeadersTree = /* @__PURE__ */ function() {
  function HeadersTree2(sourceSettings) {
    _classCallCheck$1g(this, HeadersTree2);
    _classPrivateFieldInitSpec$5(this, _rootNodes, {
      writable: true,
      value: new Map()
    });
    _classPrivateFieldInitSpec$5(this, _rootsIndex, {
      writable: true,
      value: new Map()
    });
    _classPrivateFieldInitSpec$5(this, _sourceSettings, {
      writable: true,
      value: null
    });
    _classPrivateFieldSet$5(this, _sourceSettings, sourceSettings);
  }
  _createClass$1g(HeadersTree2, [{
    key: "getRoots",
    value: function getRoots() {
      return Array.from(_classPrivateFieldGet$5(this, _rootNodes).values());
    }
  }, {
    key: "getRootByColumn",
    value: function getRootByColumn(columnIndex) {
      var node;
      if (_classPrivateFieldGet$5(this, _rootsIndex).has(columnIndex)) {
        node = _classPrivateFieldGet$5(this, _rootNodes).get(_classPrivateFieldGet$5(this, _rootsIndex).get(columnIndex));
      }
      return node;
    }
  }, {
    key: "getNode",
    value: function getNode(headerLevel, columnIndex) {
      var rootNode = this.getRootByColumn(columnIndex);
      if (!rootNode) {
        return;
      }
      var normColumnIndex = columnIndex - _classPrivateFieldGet$5(this, _rootsIndex).get(columnIndex);
      var columnCursor = 0;
      var treeNode;
      rootNode.walkDown(function(node) {
        var _node$data = node.data, origColspan = _node$data.origColspan, nodeHeaderLevel = _node$data.headerLevel;
        if (headerLevel === nodeHeaderLevel) {
          if (normColumnIndex >= columnCursor && normColumnIndex <= columnCursor + origColspan - 1) {
            treeNode = node;
            return false;
          }
          columnCursor += origColspan;
        }
      });
      return treeNode;
    }
  }, {
    key: "rebuildTreeIndex",
    value: function rebuildTreeIndex() {
      var _this = this;
      var columnIndex = 0;
      _classPrivateFieldGet$5(this, _rootsIndex).clear();
      arrayEach(_classPrivateFieldGet$5(this, _rootNodes), function(_ref) {
        var _ref2 = _slicedToArray$x(_ref, 2), colspan = _ref2[1].data.colspan;
        for (var i = columnIndex; i < columnIndex + colspan; i++) {
          _classPrivateFieldGet$5(_this, _rootsIndex).set(i, columnIndex);
        }
        columnIndex += colspan;
      });
    }
  }, {
    key: "buildTree",
    value: function buildTree() {
      this.clear();
      var columnsCount = _classPrivateFieldGet$5(this, _sourceSettings).getColumnsCount();
      var columnIndex = 0;
      while (columnIndex < columnsCount) {
        var columnSettings = _classPrivateFieldGet$5(this, _sourceSettings).getHeaderSettings(0, columnIndex);
        var rootNode = new TreeNode();
        _classPrivateFieldGet$5(this, _rootNodes).set(columnIndex, rootNode);
        this.buildLeaves(rootNode, columnIndex, 0, columnSettings.origColspan);
        columnIndex += columnSettings.origColspan;
      }
      this.rebuildTreeIndex();
    }
  }, {
    key: "buildLeaves",
    value: function buildLeaves(parentNode, columnIndex, headerLevel) {
      var _this2 = this;
      var extractionLength = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
      var columnsSettings = _classPrivateFieldGet$5(this, _sourceSettings).getHeadersSettings(headerLevel, columnIndex, extractionLength);
      headerLevel += 1;
      arrayEach(columnsSettings, function(columnSettings) {
        var nodeData = _objectSpread$7(_objectSpread$7({}, columnSettings), {}, {
          headerLevel: headerLevel - 1,
          columnIndex
        });
        var node;
        if (headerLevel === 1) {
          parentNode.data = nodeData;
          node = parentNode;
        } else {
          node = new TreeNode(nodeData);
          parentNode.addChild(node);
        }
        if (headerLevel < _classPrivateFieldGet$5(_this2, _sourceSettings).getLayersCount()) {
          _this2.buildLeaves(node, columnIndex, headerLevel, columnSettings.origColspan);
        }
        columnIndex += columnSettings.origColspan;
      });
    }
  }, {
    key: "clear",
    value: function clear() {
      _classPrivateFieldGet$5(this, _rootNodes).clear();
      _classPrivateFieldGet$5(this, _rootsIndex).clear();
    }
  }]);
  return HeadersTree2;
}();

function traverseHiddenNodeColumnIndexes(node, callback) {
  node.walkDown(function(_ref) {
    var data = _ref.data, childs = _ref.childs;
    if (!data.isHidden) {
      callback(data.columnIndex);
      if (childs.length === 0) {
        for (var i = 1; i < data.colspan; i++) {
          callback(data.columnIndex + i);
        }
      }
    }
  });
}
function getFirstChildProperty(_ref2, propertyName) {
  var childs = _ref2.childs;
  if (childs.length === 0) {
    return;
  }
  return childs[0].data[propertyName];
}
function isNodeReflectsFirstChildColspan(node) {
  return getFirstChildProperty(node, "origColspan") === node.data.origColspan;
}

function expandNode(nodeToProcess) {
  var nodeData = nodeToProcess.data, nodeChilds = nodeToProcess.childs;
  if (!nodeData.isCollapsed || nodeData.isHidden || nodeData.origColspan <= 1) {
    return {
      rollbackModification: function rollbackModification() {
      },
      affectedColumns: [],
      colspanCompensation: 0
    };
  }
  var isNodeReflected = isNodeReflectsFirstChildColspan(nodeToProcess);
  if (isNodeReflected) {
    return expandNode(nodeChilds[0]);
  }
  nodeData.isCollapsed = false;
  var allLeavesExceptMostLeft = nodeChilds.slice(1);
  var affectedColumns = new Set();
  var colspanCompensation = 0;
  if (allLeavesExceptMostLeft.length > 0) {
    arrayEach(allLeavesExceptMostLeft, function(node) {
      node.replaceTreeWith(node.data.clonedTree);
      node.data.clonedTree = null;
      var leafData = node.data;
      colspanCompensation += leafData.colspan;
      traverseHiddenNodeColumnIndexes(node, function(gridColumnIndex) {
        affectedColumns.add(gridColumnIndex);
      });
    });
  } else {
    var colspan = nodeData.colspan, origColspan = nodeData.origColspan, columnIndex = nodeData.columnIndex;
    colspanCompensation = origColspan - colspan;
    for (var i = 1; i < origColspan; i++) {
      affectedColumns.add(columnIndex + i);
    }
  }
  nodeToProcess.walkUp(function(node) {
    var data = node.data;
    data.colspan += colspanCompensation;
    if (data.colspan >= data.origColspan) {
      data.colspan = data.origColspan;
      data.isCollapsed = false;
    } else if (isNodeReflectsFirstChildColspan(node)) {
      data.isCollapsed = getFirstChildProperty(node, "isCollapsed");
    }
  });
  return {
    rollbackModification: function rollbackModification() {
      return collapseNode(nodeToProcess);
    },
    affectedColumns: Array.from(affectedColumns),
    colspanCompensation
  };
}

function collapseNode(nodeToProcess) {
  var _getFirstChildPropert;
  var nodeData = nodeToProcess.data, nodeChilds = nodeToProcess.childs;
  if (nodeData.isCollapsed || nodeData.isHidden || nodeData.origColspan <= 1) {
    return {
      rollbackModification: function rollbackModification() {
      },
      affectedColumns: [],
      colspanCompensation: 0
    };
  }
  var isNodeReflected = isNodeReflectsFirstChildColspan(nodeToProcess);
  if (isNodeReflected) {
    return collapseNode(nodeChilds[0]);
  }
  nodeData.isCollapsed = true;
  var allLeavesExceptMostLeft = nodeChilds.slice(1);
  var affectedColumns = new Set();
  if (allLeavesExceptMostLeft.length > 0) {
    arrayEach(allLeavesExceptMostLeft, function(node) {
      traverseHiddenNodeColumnIndexes(node, function(gridColumnIndex2) {
        affectedColumns.add(gridColumnIndex2);
      });
      node.data.clonedTree = node.cloneTree();
      node.walkDown(function(_ref) {
        var data = _ref.data;
        data.isHidden = true;
      });
    });
  } else {
    var origColspan = nodeData.origColspan, columnIndex = nodeData.columnIndex;
    for (var i = 1; i < origColspan; i++) {
      var gridColumnIndex = columnIndex + i;
      affectedColumns.add(gridColumnIndex);
    }
  }
  var colspanCompensation = nodeData.colspan - ((_getFirstChildPropert = getFirstChildProperty(nodeToProcess, "colspan")) !== null && _getFirstChildPropert !== void 0 ? _getFirstChildPropert : 1);
  nodeToProcess.walkUp(function(node) {
    var data = node.data;
    data.colspan -= colspanCompensation;
    if (data.colspan <= 1) {
      data.colspan = 1;
      data.isCollapsed = true;
    } else if (isNodeReflectsFirstChildColspan(node)) {
      data.isCollapsed = getFirstChildProperty(node, "isCollapsed");
    }
  });
  return {
    rollbackModification: function rollbackModification() {
      return expandNode(nodeToProcess);
    },
    affectedColumns: Array.from(affectedColumns),
    colspanCompensation
  };
}

var _templateObject$7;
function _taggedTemplateLiteral$7(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {raw: {value: Object.freeze(raw)}}));
}
function hideColumn(nodeToProcess, gridColumnIndex) {
  if (!Number.isInteger(gridColumnIndex)) {
    throw new Error("The passed gridColumnIndex argument has invalid type.");
  }
  if (nodeToProcess.childs.length > 0) {
    throw new Error(toSingleLine(_templateObject$7 || (_templateObject$7 = _taggedTemplateLiteral$7(["The passed node is not the last node on the tree. Only for \nthe last node, the hide column modification can be applied."], ["The passed node is not the last node on the tree. Only for\\x20\nthe last node, the hide column modification can be applied."]))));
  }
  var crossHiddenColumns = nodeToProcess.data.crossHiddenColumns;
  if (crossHiddenColumns.includes(gridColumnIndex)) {
    return;
  }
  var isCollapsibleNode = false;
  nodeToProcess.walkUp(function(node) {
    var collapsible = node.data.collapsible;
    if (collapsible) {
      isCollapsibleNode = true;
      return false;
    }
  });
  if (isCollapsibleNode) {
    return;
  }
  nodeToProcess.walkUp(function(node) {
    var data = node.data;
    data.crossHiddenColumns.push(gridColumnIndex);
    if (data.colspan > 1) {
      data.colspan -= 1;
    } else {
      data.isHidden = true;
    }
  });
}

var _templateObject$8;
function _taggedTemplateLiteral$8(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {raw: {value: Object.freeze(raw)}}));
}
function showColumn(nodeToProcess, gridColumnIndex) {
  if (!Number.isInteger(gridColumnIndex)) {
    throw new Error("The passed gridColumnIndex argument has invalid type.");
  }
  if (nodeToProcess.childs.length > 0) {
    throw new Error(toSingleLine(_templateObject$8 || (_templateObject$8 = _taggedTemplateLiteral$8(["The passed node is not the last node on the tree. Only for \nthe last node, the show column modification can be applied."], ["The passed node is not the last node on the tree. Only for\\x20\nthe last node, the show column modification can be applied."]))));
  }
  var crossHiddenColumns = nodeToProcess.data.crossHiddenColumns;
  if (!crossHiddenColumns.includes(gridColumnIndex)) {
    return;
  }
  var isCollapsibleNode = false;
  nodeToProcess.walkUp(function(node) {
    var collapsible = node.data.collapsible;
    if (collapsible) {
      isCollapsibleNode = true;
      return false;
    }
  });
  if (isCollapsibleNode) {
    return;
  }
  nodeToProcess.walkUp(function(node) {
    var data = node.data;
    data.crossHiddenColumns.splice(data.crossHiddenColumns.indexOf(gridColumnIndex), 1);
    if (!data.isHidden && data.colspan < data.origColspan) {
      data.colspan += 1;
    }
    data.isHidden = false;
  });
}

var availableModifiers = new Map([["collapse", collapseNode], ["expand", expandNode], ["hide-column", hideColumn], ["show-column", showColumn]]);
function triggerNodeModification(actionName, nodeToProcess, gridColumnIndex) {
  if (!availableModifiers.has(actionName)) {
    throw new Error('The node modifier action ("'.concat(actionName, '") does not exist.'));
  }
  return availableModifiers.get(actionName)(nodeToProcess, gridColumnIndex);
}

var _excluded$2 = ["crossHiddenColumns"];
function _objectWithoutProperties$2(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose$2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose$2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function generateMatrix(headerRoots) {
  var matrix = [];
  arrayEach(headerRoots, function(rootNode) {
    rootNode.walkDown(function(node) {
      var nodeData = node.data;
      var origColspan = nodeData.origColspan, columnIndex = nodeData.columnIndex, headerLevel = nodeData.headerLevel, crossHiddenColumns = nodeData.crossHiddenColumns;
      var colspanHeaderLayer = createNestedArrayIfNecessary(matrix, headerLevel);
      var isRootSettingsFound = false;
      for (var i = columnIndex; i < columnIndex + origColspan; i++) {
        var isColumnHidden = crossHiddenColumns.includes(i);
        if (isColumnHidden || isRootSettingsFound) {
          colspanHeaderLayer.push(createPlaceholderHeaderSettings());
        } else {
          var headerRootSettings = createHeaderSettings(nodeData);
          headerRootSettings.isRoot = true;
          colspanHeaderLayer.push(headerRootSettings);
          isRootSettingsFound = true;
        }
      }
    });
  });
  return matrix;
}
function createHeaderSettings(nodeData) {
  var _createDefaultHeaderS = createDefaultHeaderSettings(nodeData), headerRootSettings = _objectWithoutProperties$2(_createDefaultHeaderS, _excluded$2);
  return headerRootSettings;
}
function createNestedArrayIfNecessary(array, index) {
  var subArray;
  if (Array.isArray(array[index])) {
    subArray = array[index];
  } else {
    subArray = [];
    array[index] = subArray;
  }
  return subArray;
}

var _excluded$3 = ["row"];
function ownKeys$8(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$8(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$8(Object(source), true).forEach(function(key) {
      _defineProperty$g(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty$g(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties$3(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose$3(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose$3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _classCallCheck$1h(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1h(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1h(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1h(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1h(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _classPrivateFieldInitSpec$6(obj, privateMap, value) {
  _checkPrivateRedeclaration$7(obj, privateMap);
  privateMap.set(obj, value);
}
function _checkPrivateRedeclaration$7(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classPrivateFieldSet$6(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor$6(receiver, privateMap, "set");
  _classApplyDescriptorSet$6(receiver, descriptor, value);
  return value;
}
function _classApplyDescriptorSet$6(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}
function _classPrivateFieldGet$6(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor$6(receiver, privateMap, "get");
  return _classApplyDescriptorGet$6(receiver, descriptor);
}
function _classExtractFieldDescriptor$6(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classApplyDescriptorGet$6(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
var _sourceSettings$1 = /* @__PURE__ */ new WeakMap();
var _headersTree = /* @__PURE__ */ new WeakMap();
var _stateMatrix = /* @__PURE__ */ new WeakMap();
var StateManager = /* @__PURE__ */ function() {
  function StateManager2() {
    _classCallCheck$1h(this, StateManager2);
    _classPrivateFieldInitSpec$6(this, _sourceSettings$1, {
      writable: true,
      value: new SourceSettings()
    });
    _classPrivateFieldInitSpec$6(this, _headersTree, {
      writable: true,
      value: new HeadersTree(_classPrivateFieldGet$6(this, _sourceSettings$1))
    });
    _classPrivateFieldInitSpec$6(this, _stateMatrix, {
      writable: true,
      value: [[]]
    });
  }
  _createClass$1h(StateManager2, [{
    key: "setState",
    value: function setState(nestedHeadersSettings) {
      _classPrivateFieldGet$6(this, _sourceSettings$1).setData(nestedHeadersSettings);
      var hasError = false;
      try {
        _classPrivateFieldGet$6(this, _headersTree).buildTree();
      } catch (ex) {
        _classPrivateFieldGet$6(this, _headersTree).clear();
        _classPrivateFieldGet$6(this, _sourceSettings$1).clear();
        hasError = true;
      }
      _classPrivateFieldSet$6(this, _stateMatrix, generateMatrix(_classPrivateFieldGet$6(this, _headersTree).getRoots()));
      return hasError;
    }
  }, {
    key: "setColumnsLimit",
    value: function setColumnsLimit(columnsCount) {
      _classPrivateFieldGet$6(this, _sourceSettings$1).setColumnsLimit(columnsCount);
    }
  }, {
    key: "mergeStateWith",
    value: function mergeStateWith(settings) {
      var _this = this;
      var transformedSettings = arrayMap(settings, function(_ref) {
        var row = _ref.row, rest = _objectWithoutProperties$3(_ref, _excluded$3);
        return _objectSpread$8({
          row: row < 0 ? _this.rowCoordsToLevel(row) : row
        }, rest);
      });
      _classPrivateFieldGet$6(this, _sourceSettings$1).mergeWith(transformedSettings);
      _classPrivateFieldGet$6(this, _headersTree).buildTree();
      _classPrivateFieldSet$6(this, _stateMatrix, generateMatrix(_classPrivateFieldGet$6(this, _headersTree).getRoots()));
    }
  }, {
    key: "mapState",
    value: function mapState(callback) {
      _classPrivateFieldGet$6(this, _sourceSettings$1).map(callback);
      _classPrivateFieldGet$6(this, _headersTree).buildTree();
      _classPrivateFieldSet$6(this, _stateMatrix, generateMatrix(_classPrivateFieldGet$6(this, _headersTree).getRoots()));
    }
  }, {
    key: "mapNodes",
    value: function mapNodes(callback) {
      return arrayReduce(_classPrivateFieldGet$6(this, _headersTree).getRoots(), function(acc, rootNode) {
        rootNode.walkDown(function(node) {
          var result = callback(node.data);
          if (result !== void 0) {
            acc.push(result);
          }
        });
        return acc;
      }, []);
    }
  }, {
    key: "triggerNodeModification",
    value: function triggerNodeModification$1(action, headerLevel, columnIndex) {
      if (headerLevel < 0) {
        headerLevel = this.rowCoordsToLevel(headerLevel);
      }
      var nodeToProcess = _classPrivateFieldGet$6(this, _headersTree).getNode(headerLevel, columnIndex);
      var actionResult;
      if (nodeToProcess) {
        actionResult = triggerNodeModification(action, nodeToProcess, columnIndex);
        _classPrivateFieldSet$6(this, _stateMatrix, generateMatrix(_classPrivateFieldGet$6(this, _headersTree).getRoots()));
      }
      return actionResult;
    }
  }, {
    key: "triggerColumnModification",
    value: function triggerColumnModification(action, columnIndex) {
      return this.triggerNodeModification(action, -1, columnIndex);
    }
  }, {
    key: "rowCoordsToLevel",
    value: function rowCoordsToLevel(rowIndex) {
      var layersCount = Math.max(this.getLayersCount(), 1);
      var highestPossibleLevel = layersCount - 1;
      var lowestPossibleLevel = 0;
      return Math.min(Math.max(rowIndex + layersCount, lowestPossibleLevel), highestPossibleLevel);
    }
  }, {
    key: "levelToRowCoords",
    value: function levelToRowCoords(headerLevel) {
      var layersCount = Math.max(this.getLayersCount(), 1);
      var highestPossibleRow = -1;
      var lowestPossibleRow = -layersCount;
      return Math.min(Math.max(headerLevel - layersCount, lowestPossibleRow), highestPossibleRow);
    }
  }, {
    key: "getHeaderSettings",
    value: function getHeaderSettings(headerLevel, columnIndex) {
      var _classPrivateFieldGet2, _classPrivateFieldGet3;
      if (headerLevel < 0) {
        headerLevel = this.rowCoordsToLevel(headerLevel);
      }
      if (headerLevel >= this.getLayersCount()) {
        return null;
      }
      return (_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet$6(this, _stateMatrix)[headerLevel]) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3[columnIndex]) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : null;
    }
  }, {
    key: "getHeaderTreeNodeData",
    value: function getHeaderTreeNodeData(headerLevel, columnIndex) {
      if (headerLevel < 0) {
        headerLevel = this.rowCoordsToLevel(headerLevel);
      }
      var node = _classPrivateFieldGet$6(this, _headersTree).getNode(headerLevel, columnIndex);
      if (!node) {
        return null;
      }
      return _objectSpread$8({}, node.data);
    }
  }, {
    key: "findLeftMostColumnIndex",
    value: function findLeftMostColumnIndex(headerLevel, columnIndex) {
      var _this$getHeaderSettin;
      var _ref2 = (_this$getHeaderSettin = this.getHeaderSettings(headerLevel, columnIndex)) !== null && _this$getHeaderSettin !== void 0 ? _this$getHeaderSettin : {
        isRoot: true
      }, isRoot = _ref2.isRoot;
      if (isRoot) {
        return columnIndex;
      }
      var stepBackColumn = columnIndex - 1;
      while (stepBackColumn >= 0) {
        var _this$getHeaderSettin2;
        var _ref3 = (_this$getHeaderSettin2 = this.getHeaderSettings(headerLevel, stepBackColumn)) !== null && _this$getHeaderSettin2 !== void 0 ? _this$getHeaderSettin2 : {
          isRoot: true
        }, isRootNode = _ref3.isRoot;
        if (isRootNode) {
          break;
        }
        stepBackColumn -= 1;
      }
      return stepBackColumn;
    }
  }, {
    key: "getLayersCount",
    value: function getLayersCount() {
      return _classPrivateFieldGet$6(this, _sourceSettings$1).getLayersCount();
    }
  }, {
    key: "getColumnsCount",
    value: function getColumnsCount() {
      return _classPrivateFieldGet$6(this, _sourceSettings$1).getColumnsCount();
    }
  }, {
    key: "clear",
    value: function clear() {
      _classPrivateFieldSet$6(this, _stateMatrix, []);
      _classPrivateFieldGet$6(this, _sourceSettings$1).clear();
      _classPrivateFieldGet$6(this, _headersTree).clear();
    }
  }]);
  return StateManager2;
}();

function _classCallCheck$1i(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1i(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1i(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1i(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1i(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _defineProperty$h(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
var GhostTable$1 = /* @__PURE__ */ function() {
  function GhostTable2(hot, nestedHeaderSettingsGetter) {
    _classCallCheck$1i(this, GhostTable2);
    _defineProperty$h(this, "hot", void 0);
    _defineProperty$h(this, "nestedHeaderSettingsGetter", void 0);
    _defineProperty$h(this, "layersCount", 0);
    _defineProperty$h(this, "container", void 0);
    _defineProperty$h(this, "widthsMap", void 0);
    this.hot = hot;
    this.nestedHeaderSettingsGetter = nestedHeaderSettingsGetter;
    this.widthsMap = this.hot.columnIndexMapper.createAndRegisterIndexMap("nestedHeaders.widthsMap", "physicalIndexToValue");
  }
  _createClass$1i(GhostTable2, [{
    key: "setLayersCount",
    value: function setLayersCount(layersCount) {
      this.layersCount = layersCount;
      return this;
    }
  }, {
    key: "getWidth",
    value: function getWidth(visualColumn) {
      return this.widthsMap.getValueAtIndex(this.hot.toPhysicalColumn(visualColumn));
    }
  }, {
    key: "buildWidthsMap",
    value: function buildWidthsMap() {
      this.container = this.hot.rootDocument.createElement("div");
      this.container.classList.add("handsontable", "htGhostTable", "htAutoSize");
      this._buildGhostTable(this.container);
      this.hot.rootDocument.body.appendChild(this.container);
      var columns = this.container.querySelectorAll("tr:last-of-type th");
      var maxColumns = columns.length;
      this.widthsMap.clear();
      for (var column = 0; column < maxColumns; column++) {
        var visualColumnsIndex = this.hot.columnIndexMapper.getVisualFromRenderableIndex(column);
        var physicalColumnIndex = this.hot.toPhysicalColumn(visualColumnsIndex);
        this.widthsMap.setValueAtIndex(physicalColumnIndex, columns[column].offsetWidth);
      }
      this.container.parentNode.removeChild(this.container);
      this.container = null;
    }
  }, {
    key: "_buildGhostTable",
    value: function _buildGhostTable(container) {
      var _this$hot = this.hot, rootDocument = _this$hot.rootDocument, columnIndexMapper = _this$hot.columnIndexMapper;
      var fragment = rootDocument.createDocumentFragment();
      var table = rootDocument.createElement("table");
      var isDropdownEnabled = !!this.hot.getSettings().dropdownMenu;
      var maxRenderedCols = columnIndexMapper.getRenderableIndexesLength();
      for (var row = 0; row < this.layersCount; row++) {
        var tr = rootDocument.createElement("tr");
        for (var col = 0; col < maxRenderedCols; col++) {
          var visualColumnsIndex = columnIndexMapper.getVisualFromRenderableIndex(col);
          if (visualColumnsIndex === null) {
            visualColumnsIndex = col;
          }
          var th = rootDocument.createElement("th");
          var headerSettings = this.nestedHeaderSettingsGetter(row, visualColumnsIndex);
          if (headerSettings && (!headerSettings.isPlaceholder || headerSettings.isHidden)) {
            var label = headerSettings.label;
            if (isDropdownEnabled) {
              label += '<button class="changeType"></button>';
            }
            fastInnerHTML(th, label);
            th.colSpan = headerSettings.colspan;
            tr.appendChild(th);
          }
        }
        table.appendChild(tr);
      }
      fragment.appendChild(table);
      container.appendChild(fragment);
    }
  }, {
    key: "clear",
    value: function clear() {
      this.widthsMap.clear();
      this.container = null;
    }
  }]);
  return GhostTable2;
}();

function _typeof$Q(obj) {
  "@babel/helpers - typeof";
  return _typeof$Q = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$Q(obj);
}
var _templateObject$9, _templateObject2$2;
function _taggedTemplateLiteral$9(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {raw: {value: Object.freeze(raw)}}));
}
function _classCallCheck$1j(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1j(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1j(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1j(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1j(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$J() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$J = Reflect.get.bind();
  } else {
    _get$J = function _get2(target, property, receiver) {
      var base = _superPropBase$J(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$J.apply(this, arguments);
}
function _superPropBase$J(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$P(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$P(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$P(subClass, superClass);
}
function _setPrototypeOf$P(o, p) {
  _setPrototypeOf$P = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$P(o, p);
}
function _createSuper$P(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$P();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$P(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$P(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$P(this, result);
  };
}
function _possibleConstructorReturn$P(self, call) {
  if (call && (_typeof$Q(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$P(self);
}
function _assertThisInitialized$P(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$P() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$P(o) {
  _getPrototypeOf$P = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$P(o);
}
function _defineProperty$i(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classPrivateFieldInitSpec$7(obj, privateMap, value) {
  _checkPrivateRedeclaration$8(obj, privateMap);
  privateMap.set(obj, value);
}
function _checkPrivateRedeclaration$8(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classPrivateFieldSet$7(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor$7(receiver, privateMap, "set");
  _classApplyDescriptorSet$7(receiver, descriptor, value);
  return value;
}
function _classApplyDescriptorSet$7(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}
function _classPrivateFieldGet$7(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor$7(receiver, privateMap, "get");
  return _classApplyDescriptorGet$7(receiver, descriptor);
}
function _classExtractFieldDescriptor$7(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classApplyDescriptorGet$7(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
var PLUGIN_KEY$r = "nestedHeaders";
var PLUGIN_PRIORITY$q = 280;
var _stateManager = /* @__PURE__ */ new WeakMap();
var _hidingIndexMapObserver = /* @__PURE__ */ new WeakMap();
var NestedHeaders = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$P(NestedHeaders2, _BasePlugin);
  var _super = _createSuper$P(NestedHeaders2);
  function NestedHeaders2() {
    var _this;
    _classCallCheck$1j(this, NestedHeaders2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _classPrivateFieldInitSpec$7(_assertThisInitialized$P(_this), _stateManager, {
      writable: true,
      value: new StateManager()
    });
    _classPrivateFieldInitSpec$7(_assertThisInitialized$P(_this), _hidingIndexMapObserver, {
      writable: true,
      value: null
    });
    _defineProperty$i(_assertThisInitialized$P(_this), "ghostTable", new GhostTable$1(_this.hot, function(row, column) {
      return _this.getHeaderSettings(row, column);
    }));
    _defineProperty$i(_assertThisInitialized$P(_this), "detectedOverlappedHeaders", false);
    return _this;
  }
  _createClass$1j(NestedHeaders2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$r];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      var _this$hot$getSettings = this.hot.getSettings(), nestedHeaders = _this$hot$getSettings.nestedHeaders;
      if (!Array.isArray(nestedHeaders) || !Array.isArray(nestedHeaders[0])) {
        warn(toSingleLine(_templateObject$9 || (_templateObject$9 = _taggedTemplateLiteral$9(["Your Nested Headers plugin configuration is invalid. The settings has to be \n                        passed as an array of arrays e.q. [['A1', { label: 'A2', colspan: 2 }]]"], ["Your Nested Headers plugin configuration is invalid. The settings has to be\\x20\n                        passed as an array of arrays e.q. [['A1', { label: 'A2', colspan: 2 }]]"]))));
      }
      this.addHook("init", function() {
        return _this2.onInit();
      });
      this.addHook("afterLoadData", function() {
        return _this2.onAfterLoadData.apply(_this2, arguments);
      });
      this.addHook("beforeOnCellMouseDown", function() {
        return _this2.onBeforeOnCellMouseDown.apply(_this2, arguments);
      });
      this.addHook("afterOnCellMouseDown", function() {
        return _this2.onAfterOnCellMouseDown.apply(_this2, arguments);
      });
      this.addHook("beforeOnCellMouseOver", function() {
        return _this2.onBeforeOnCellMouseOver.apply(_this2, arguments);
      });
      this.addHook("afterGetColumnHeaderRenderers", function(array) {
        return _this2.onAfterGetColumnHeaderRenderers(array);
      });
      this.addHook("modifyColWidth", function() {
        return _this2.onModifyColWidth.apply(_this2, arguments);
      });
      this.addHook("beforeHighlightingColumnHeader", function() {
        return _this2.onBeforeHighlightingColumnHeader.apply(_this2, arguments);
      });
      this.addHook("afterViewportColumnCalculatorOverride", function() {
        return _this2.onAfterViewportColumnCalculatorOverride.apply(_this2, arguments);
      });
      _get$J(_getPrototypeOf$P(NestedHeaders2.prototype), "enablePlugin", this).call(this);
      this.updatePlugin();
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      var _this3 = this;
      if (!this.hot.view) {
        return;
      }
      var _this$hot$getSettings2 = this.hot.getSettings(), nestedHeaders = _this$hot$getSettings2.nestedHeaders;
      _classPrivateFieldGet$7(this, _stateManager).setColumnsLimit(this.hot.countCols());
      if (Array.isArray(nestedHeaders)) {
        this.detectedOverlappedHeaders = _classPrivateFieldGet$7(this, _stateManager).setState(nestedHeaders);
      }
      if (this.detectedOverlappedHeaders) {
        warn(toSingleLine(_templateObject2$2 || (_templateObject2$2 = _taggedTemplateLiteral$9(["Your Nested Headers plugin setup contains overlapping headers. This kind of configuration \n                        is currently not supported."], ["Your Nested Headers plugin setup contains overlapping headers. This kind of configuration\\x20\n                        is currently not supported."]))));
      }
      if (this.enabled) {
        this.hot.columnIndexMapper.hidingMapsCollection.getMergedValues().forEach(function(isColumnHidden, physicalColumnIndex) {
          var actionName = isColumnHidden === true ? "hide-column" : "show-column";
          _classPrivateFieldGet$7(_this3, _stateManager).triggerColumnModification(actionName, physicalColumnIndex);
        });
      }
      if (!_classPrivateFieldGet$7(this, _hidingIndexMapObserver) && this.enabled) {
        _classPrivateFieldSet$7(this, _hidingIndexMapObserver, this.hot.columnIndexMapper.createChangesObserver("hiding").subscribe(function(changes) {
          changes.forEach(function(_ref) {
            var op = _ref.op, columnIndex = _ref.index, newValue = _ref.newValue;
            if (op === "replace") {
              var actionName = newValue === true ? "hide-column" : "show-column";
              _classPrivateFieldGet$7(_this3, _stateManager).triggerColumnModification(actionName, columnIndex);
            }
          });
          _this3.ghostTable.buildWidthsMap();
        }));
      }
      this.ghostTable.setLayersCount(this.getLayersCount()).buildWidthsMap();
      _get$J(_getPrototypeOf$P(NestedHeaders2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.clearColspans();
      _classPrivateFieldGet$7(this, _stateManager).clear();
      _classPrivateFieldGet$7(this, _hidingIndexMapObserver).unsubscribe();
      _classPrivateFieldSet$7(this, _hidingIndexMapObserver, null);
      this.ghostTable.clear();
      _get$J(_getPrototypeOf$P(NestedHeaders2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "getStateManager",
    value: function getStateManager() {
      return _classPrivateFieldGet$7(this, _stateManager);
    }
  }, {
    key: "getLayersCount",
    value: function getLayersCount() {
      return _classPrivateFieldGet$7(this, _stateManager).getLayersCount();
    }
  }, {
    key: "getHeaderSettings",
    value: function getHeaderSettings(headerLevel, columnIndex) {
      return _classPrivateFieldGet$7(this, _stateManager).getHeaderSettings(headerLevel, columnIndex);
    }
  }, {
    key: "clearColspans",
    value: function clearColspans() {
      if (!this.hot.view) {
        return;
      }
      var wt = this.hot.view._wt;
      var headerLevels = wt.getSetting("columnHeaders").length;
      var mainHeaders = wt.wtTable.THEAD;
      var topHeaders = wt.wtOverlays.topOverlay.clone.wtTable.THEAD;
      var topLeftCornerHeaders = wt.wtOverlays.topInlineStartCornerOverlay ? wt.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null;
      for (var i = 0; i < headerLevels; i++) {
        var masterLevel = mainHeaders.childNodes[i];
        if (!masterLevel) {
          break;
        }
        var topLevel = topHeaders.childNodes[i];
        var topLeftCornerLevel = topLeftCornerHeaders ? topLeftCornerHeaders.childNodes[i] : null;
        for (var j = 0, masterNodes = masterLevel.childNodes.length; j < masterNodes; j++) {
          masterLevel.childNodes[j].removeAttribute("colspan");
          removeClass(masterLevel.childNodes[j], "hiddenHeader");
          if (topLevel && topLevel.childNodes[j]) {
            topLevel.childNodes[j].removeAttribute("colspan");
            removeClass(topLevel.childNodes[j], "hiddenHeader");
          }
          if (topLeftCornerHeaders && topLeftCornerLevel && topLeftCornerLevel.childNodes[j]) {
            topLeftCornerLevel.childNodes[j].removeAttribute("colspan");
            removeClass(topLeftCornerLevel.childNodes[j], "hiddenHeader");
          }
        }
      }
    }
  }, {
    key: "headerRendererFactory",
    value: function headerRendererFactory(headerLevel) {
      var _this4 = this;
      var fixedColumnsStart = this.hot.view._wt.getSetting("fixedColumnsStart");
      return function(renderedColumnIndex, TH) {
        var _classPrivateFieldGet2;
        var _this4$hot = _this4.hot, rootDocument = _this4$hot.rootDocument, columnIndexMapper = _this4$hot.columnIndexMapper, view = _this4$hot.view;
        var visualColumnsIndex = columnIndexMapper.getVisualFromRenderableIndex(renderedColumnIndex);
        if (visualColumnsIndex === null) {
          visualColumnsIndex = renderedColumnIndex;
        }
        TH.removeAttribute("colspan");
        removeClass(TH, "hiddenHeader");
        var _ref2 = (_classPrivateFieldGet2 = _classPrivateFieldGet$7(_this4, _stateManager).getHeaderSettings(headerLevel, visualColumnsIndex)) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : {
          label: ""
        }, colspan = _ref2.colspan, label = _ref2.label, isHidden = _ref2.isHidden, isPlaceholder = _ref2.isPlaceholder;
        if (isPlaceholder || isHidden) {
          addClass(TH, "hiddenHeader");
        } else if (colspan > 1) {
          var _wtOverlays$topInline, _wtOverlays$inlineSta;
          var wtOverlays = view._wt.wtOverlays;
          var isTopInlineStartOverlay = (_wtOverlays$topInline = wtOverlays.topInlineStartCornerOverlay) === null || _wtOverlays$topInline === void 0 ? void 0 : _wtOverlays$topInline.clone.wtTable.THEAD.contains(TH);
          var isInlineStartOverlay = (_wtOverlays$inlineSta = wtOverlays.inlineStartOverlay) === null || _wtOverlays$inlineSta === void 0 ? void 0 : _wtOverlays$inlineSta.clone.wtTable.THEAD.contains(TH);
          var correctedColspan = isTopInlineStartOverlay || isInlineStartOverlay ? Math.min(colspan, fixedColumnsStart - renderedColumnIndex) : colspan;
          if (correctedColspan > 1) {
            TH.setAttribute("colspan", correctedColspan);
          }
        }
        var divEl = rootDocument.createElement("div");
        var spanEl = rootDocument.createElement("span");
        addClass(divEl, "relative");
        addClass(spanEl, "colHeader");
        fastInnerHTML(spanEl, label);
        divEl.appendChild(spanEl);
        empty(TH);
        TH.appendChild(divEl);
        _this4.hot.runHooks("afterGetColHeader", visualColumnsIndex, TH);
      };
    }
  }, {
    key: "onBeforeHighlightingColumnHeader",
    value: function onBeforeHighlightingColumnHeader(visualColumn, headerLevel, highlightMeta) {
      var headerNodeData = _classPrivateFieldGet$7(this, _stateManager).getHeaderTreeNodeData(headerLevel, visualColumn);
      if (!headerNodeData) {
        return visualColumn;
      }
      var classNames = highlightMeta.classNames, columnCursor = highlightMeta.columnCursor, selectionType = highlightMeta.selectionType, selectionWidth = highlightMeta.selectionWidth;
      var _classPrivateFieldGet3 = _classPrivateFieldGet$7(this, _stateManager).getHeaderSettings(headerLevel, visualColumn), isRoot = _classPrivateFieldGet3.isRoot, colspan = _classPrivateFieldGet3.colspan;
      if (selectionType === HEADER_TYPE) {
        if (!isRoot) {
          return headerNodeData.columnIndex;
        }
      } else if (selectionType === ACTIVE_HEADER_TYPE) {
        if (colspan > selectionWidth - columnCursor || !isRoot) {
          classNames.length = 0;
        }
      }
      return visualColumn;
    }
  }, {
    key: "onBeforeOnCellMouseDown",
    value: function onBeforeOnCellMouseDown(event, coords, TD, controller) {
      var headerNodeData = this._getHeaderTreeNodeDataByCoords(coords);
      if (headerNodeData) {
        controller.column = true;
      }
    }
  }, {
    key: "onAfterOnCellMouseDown",
    value: function onAfterOnCellMouseDown(event, coords) {
      var headerNodeData = this._getHeaderTreeNodeDataByCoords(coords);
      if (!headerNodeData) {
        return;
      }
      var selection = this.hot.selection;
      var currentSelection = selection.isSelected() ? selection.getSelectedRange().current() : null;
      var columnsToSelect = [];
      var columnIndex = headerNodeData.columnIndex, origColspan = headerNodeData.origColspan;
      var allowRightClickSelection = !selection.inInSelection(coords);
      if (event.shiftKey && currentSelection) {
        if (coords.col < currentSelection.from.col) {
          columnsToSelect.push(currentSelection.getTopEndCorner().col, columnIndex, coords.row);
        } else if (coords.col > currentSelection.from.col) {
          columnsToSelect.push(currentSelection.getTopStartCorner().col, columnIndex + origColspan - 1, coords.row);
        } else {
          columnsToSelect.push(columnIndex, columnIndex + origColspan - 1, coords.row);
        }
      } else if (isLeftClick(event) || isRightClick(event) && allowRightClickSelection) {
        columnsToSelect.push(columnIndex, columnIndex + origColspan - 1, coords.row);
      }
      selection.selectColumns.apply(selection, columnsToSelect);
    }
  }, {
    key: "onBeforeOnCellMouseOver",
    value: function onBeforeOnCellMouseOver(event, coords, TD, controller) {
      var _this$hot;
      if (!this.hot.view.isMouseDown()) {
        return;
      }
      var headerNodeData = this._getHeaderTreeNodeDataByCoords(coords);
      if (!headerNodeData) {
        return;
      }
      var columnIndex = headerNodeData.columnIndex, origColspan = headerNodeData.origColspan;
      var selectedRange = this.hot.getSelectedRangeLast();
      var topStartCoords = selectedRange.getTopStartCorner();
      var bottomEndCoords = selectedRange.getBottomEndCorner();
      var from = selectedRange.from;
      controller.column = true;
      controller.cell = true;
      var columnsToSelect = [];
      if (coords.col < from.col) {
        columnsToSelect.push(bottomEndCoords.col, columnIndex);
      } else if (coords.col > from.col) {
        columnsToSelect.push(topStartCoords.col, columnIndex + origColspan - 1);
      } else {
        columnsToSelect.push(columnIndex, columnIndex + origColspan - 1);
      }
      (_this$hot = this.hot).selectColumns.apply(_this$hot, columnsToSelect);
    }
  }, {
    key: "onAfterGetColumnHeaderRenderers",
    value: function onAfterGetColumnHeaderRenderers(renderersArray) {
      if (renderersArray) {
        renderersArray.length = 0;
        for (var headerLayer = 0; headerLayer < _classPrivateFieldGet$7(this, _stateManager).getLayersCount(); headerLayer++) {
          renderersArray.push(this.headerRendererFactory(headerLayer));
        }
      }
    }
  }, {
    key: "onAfterViewportColumnCalculatorOverride",
    value: function onAfterViewportColumnCalculatorOverride(calc) {
      var headerLayersCount = _classPrivateFieldGet$7(this, _stateManager).getLayersCount();
      var newStartColumn = calc.startColumn;
      var nonRenderable = !!headerLayersCount;
      for (var headerLayer = 0; headerLayer < headerLayersCount; headerLayer++) {
        var startColumn = _classPrivateFieldGet$7(this, _stateManager).findLeftMostColumnIndex(headerLayer, calc.startColumn);
        var renderedStartColumn = this.hot.columnIndexMapper.getRenderableFromVisualIndex(startColumn);
        if (startColumn >= 0) {
          nonRenderable = false;
        }
        if (isNumeric(renderedStartColumn) && renderedStartColumn < calc.startColumn) {
          newStartColumn = renderedStartColumn;
          break;
        }
      }
      calc.startColumn = nonRenderable ? _classPrivateFieldGet$7(this, _stateManager).getHeaderTreeNodeData(0, newStartColumn).columnIndex : newStartColumn;
    }
  }, {
    key: "onModifyColWidth",
    value: function onModifyColWidth(width, column) {
      var cachedWidth = this.ghostTable.getWidth(column);
      return width > cachedWidth ? width : cachedWidth;
    }
  }, {
    key: "onInit",
    value: function onInit() {
      this.updatePlugin();
    }
  }, {
    key: "onAfterLoadData",
    value: function onAfterLoadData(sourceData, initialLoad) {
      if (!initialLoad) {
        this.updatePlugin();
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _classPrivateFieldSet$7(this, _stateManager, null);
      if (_classPrivateFieldGet$7(this, _hidingIndexMapObserver) !== null) {
        _classPrivateFieldGet$7(this, _hidingIndexMapObserver).unsubscribe();
        _classPrivateFieldSet$7(this, _hidingIndexMapObserver, null);
      }
      _get$J(_getPrototypeOf$P(NestedHeaders2.prototype), "destroy", this).call(this);
    }
  }, {
    key: "_getHeaderTreeNodeDataByCoords",
    value: function _getHeaderTreeNodeDataByCoords(coords) {
      if (coords.row >= 0 || coords.col < 0) {
        return;
      }
      return _classPrivateFieldGet$7(this, _stateManager).getHeaderTreeNodeData(coords.row, coords.col);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$r;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$q;
    }
  }]);
  return NestedHeaders2;
}(BasePlugin);

function _toConsumableArray$c(arr) {
  return _arrayWithoutHoles$c(arr) || _iterableToArray$e(arr) || _unsupportedIterableToArray$J(arr) || _nonIterableSpread$c();
}
function _nonIterableSpread$c() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$J(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$J(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$J(o, minLen);
}
function _iterableToArray$e(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$c(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$J(arr);
}
function _arrayLikeToArray$J(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _typeof$R(obj) {
  "@babel/helpers - typeof";
  return _typeof$R = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$R(obj);
}
function _classCallCheck$1k(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1k(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1k(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1k(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1k(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var DataManager = /* @__PURE__ */ function() {
  function DataManager2(nestedRowsPlugin, hotInstance) {
    _classCallCheck$1k(this, DataManager2);
    this.hot = hotInstance;
    this.data = null;
    this.plugin = nestedRowsPlugin;
    this.parentReference = new WeakMap();
    this.cache = {
      levels: [],
      levelCount: 0,
      rows: [],
      nodeInfo: new WeakMap()
    };
  }
  _createClass$1k(DataManager2, [{
    key: "setData",
    value: function setData(data) {
      this.data = data;
    }
  }, {
    key: "getData",
    value: function getData() {
      return this.data;
    }
  }, {
    key: "getRawSourceData",
    value: function getRawSourceData() {
      var rawSourceData = null;
      this.plugin.disableCoreAPIModifiers();
      rawSourceData = this.hot.getSourceData();
      this.plugin.enableCoreAPIModifiers();
      return rawSourceData;
    }
  }, {
    key: "updateWithData",
    value: function updateWithData(data) {
      this.setData(data);
      this.rewriteCache();
    }
  }, {
    key: "rewriteCache",
    value: function rewriteCache() {
      var _this = this;
      this.cache = {
        levels: [],
        levelCount: 0,
        rows: [],
        nodeInfo: new WeakMap()
      };
      rangeEach(0, this.data.length - 1, function(i) {
        _this.cacheNode(_this.data[i], 0, null);
      });
    }
  }, {
    key: "cacheNode",
    value: function cacheNode(node, level, parent) {
      var _this2 = this;
      if (!this.cache.levels[level]) {
        this.cache.levels[level] = [];
        this.cache.levelCount += 1;
      }
      this.cache.levels[level].push(node);
      this.cache.rows.push(node);
      this.cache.nodeInfo.set(node, {
        parent,
        row: this.cache.rows.length - 1,
        level
      });
      if (this.hasChildren(node)) {
        arrayEach(node.__children, function(elem) {
          _this2.cacheNode(elem, level + 1, node);
        });
      }
    }
  }, {
    key: "getDataObject",
    value: function getDataObject(row) {
      return row === null || row === void 0 ? null : this.cache.rows[row];
    }
  }, {
    key: "readTreeNodes",
    value: function readTreeNodes(parent, readCount, neededIndex, neededObject) {
      var _this3 = this;
      var rootLevel = false;
      var readNodesCount = readCount;
      if (isNaN(readNodesCount) && readNodesCount.end) {
        return readNodesCount;
      }
      var parentObj = parent;
      if (!parentObj) {
        parentObj = {
          __children: this.data
        };
        rootLevel = true;
        readNodesCount -= 1;
      }
      if (neededIndex !== null && neededIndex !== void 0 && readNodesCount === neededIndex) {
        return {
          result: parentObj,
          end: true
        };
      }
      if (neededObject !== null && neededObject !== void 0 && parentObj === neededObject) {
        return {
          result: readNodesCount,
          end: true
        };
      }
      readNodesCount += 1;
      if (parentObj.__children) {
        arrayEach(parentObj.__children, function(val) {
          _this3.parentReference.set(val, rootLevel ? null : parentObj);
          readNodesCount = _this3.readTreeNodes(val, readNodesCount, neededIndex, neededObject);
          if (isNaN(readNodesCount) && readNodesCount.end) {
            return false;
          }
        });
      }
      return readNodesCount;
    }
  }, {
    key: "mockParent",
    value: function mockParent() {
      var fakeParent = this.mockNode();
      fakeParent.__children = this.data;
      return fakeParent;
    }
  }, {
    key: "mockNode",
    value: function mockNode() {
      var fakeNode = {};
      objectEach(this.data[0], function(val, key) {
        fakeNode[key] = null;
      });
      return fakeNode;
    }
  }, {
    key: "getRowIndex",
    value: function getRowIndex(rowObj) {
      return rowObj === null || rowObj === void 0 ? null : this.cache.nodeInfo.get(rowObj).row;
    }
  }, {
    key: "getRowIndexWithinParent",
    value: function getRowIndexWithinParent(row) {
      var rowObj = null;
      if (isNaN(row)) {
        rowObj = row;
      } else {
        rowObj = this.getDataObject(row);
      }
      var parent = this.getRowParent(row);
      if (parent === null || parent === void 0) {
        return this.data.indexOf(rowObj);
      }
      return parent.__children.indexOf(rowObj);
    }
  }, {
    key: "countAllRows",
    value: function countAllRows() {
      var rootNodeMock = {
        __children: this.data
      };
      return this.countChildren(rootNodeMock);
    }
  }, {
    key: "countChildren",
    value: function countChildren(parent) {
      var _this4 = this;
      var rowCount = 0;
      var parentNode = parent;
      if (!isNaN(parentNode)) {
        parentNode = this.getDataObject(parentNode);
      }
      if (!parentNode || !parentNode.__children) {
        return 0;
      }
      arrayEach(parentNode.__children, function(elem) {
        rowCount += 1;
        if (elem.__children) {
          rowCount += _this4.countChildren(elem);
        }
      });
      return rowCount;
    }
  }, {
    key: "getRowParent",
    value: function getRowParent(row) {
      var rowObject;
      if (isNaN(row)) {
        rowObject = row;
      } else {
        rowObject = this.getDataObject(row);
      }
      return this.getRowObjectParent(rowObject);
    }
  }, {
    key: "getRowObjectParent",
    value: function getRowObjectParent(rowObject) {
      if (!rowObject || _typeof$R(rowObject) !== "object") {
        return null;
      }
      return this.cache.nodeInfo.get(rowObject).parent;
    }
  }, {
    key: "getRowLevel",
    value: function getRowLevel(row) {
      var rowObject = null;
      if (isNaN(row)) {
        rowObject = row;
      } else {
        rowObject = this.getDataObject(row);
      }
      return rowObject ? this.getRowObjectLevel(rowObject) : null;
    }
  }, {
    key: "getRowObjectLevel",
    value: function getRowObjectLevel(rowObject) {
      return rowObject === null || rowObject === void 0 ? null : this.cache.nodeInfo.get(rowObject).level;
    }
  }, {
    key: "hasChildren",
    value: function hasChildren(row) {
      var rowObj = row;
      if (!isNaN(rowObj)) {
        rowObj = this.getDataObject(rowObj);
      }
      return !!(rowObj.__children && rowObj.__children.length);
    }
  }, {
    key: "isChild",
    value: function isChild(index) {
      return this.getRowParent(index) !== null;
    }
  }, {
    key: "getChild",
    value: function getChild(parent, index) {
      var _parent$__children;
      return ((_parent$__children = parent.__children) === null || _parent$__children === void 0 ? void 0 : _parent$__children[index]) || null;
    }
  }, {
    key: "isRowHighestLevel",
    value: function isRowHighestLevel(index) {
      return !this.isChild(index);
    }
  }, {
    key: "isParent",
    value: function isParent(row) {
      var _rowObj$__children;
      var rowObj = row;
      if (!isNaN(rowObj)) {
        rowObj = this.getDataObject(rowObj);
      }
      return rowObj && !!rowObj.__children && ((_rowObj$__children = rowObj.__children) === null || _rowObj$__children === void 0 ? void 0 : _rowObj$__children.length) !== 0;
    }
  }, {
    key: "addChild",
    value: function addChild(parent, element) {
      var childElement = element;
      this.hot.runHooks("beforeAddChild", parent, childElement);
      var parentIndex = null;
      if (parent) {
        parentIndex = this.getRowIndex(parent);
      }
      this.hot.runHooks("beforeCreateRow", parentIndex + this.countChildren(parent) + 1, 1);
      var functionalParent = parent;
      if (!parent) {
        functionalParent = this.mockParent();
      }
      if (!functionalParent.__children) {
        functionalParent.__children = [];
      }
      if (!childElement) {
        childElement = this.mockNode();
      }
      functionalParent.__children.push(childElement);
      this.rewriteCache();
      var newRowIndex = this.getRowIndex(childElement);
      this.hot.rowIndexMapper.insertIndexes(newRowIndex, 1);
      this.hot.runHooks("afterCreateRow", newRowIndex, 1);
      this.hot.runHooks("afterAddChild", parent, childElement);
    }
  }, {
    key: "addChildAtIndex",
    value: function addChildAtIndex(parent, index, element) {
      var childElement = element;
      var flattenedIndex;
      if (!childElement) {
        childElement = this.mockNode();
      }
      this.hot.runHooks("beforeAddChild", parent, childElement, index);
      if (parent) {
        var parentIndex = this.getRowIndex(parent);
        var finalChildIndex = parentIndex + index + 1;
        this.hot.runHooks("beforeCreateRow", finalChildIndex, 1);
        parent.__children.splice(index, null, childElement);
        this.rewriteCache();
        this.plugin.disableCoreAPIModifiers();
        this.hot.setSourceDataAtCell(this.getRowIndexWithinParent(parent), "__children", parent.__children, "NestedRows.addChildAtIndex");
        this.hot.rowIndexMapper.insertIndexes(finalChildIndex, 1);
        this.plugin.enableCoreAPIModifiers();
        this.hot.runHooks("afterCreateRow", finalChildIndex, 1);
        flattenedIndex = finalChildIndex;
      } else {
        this.plugin.disableCoreAPIModifiers();
        this.hot.alter("insert_row", index, 1, "NestedRows.addChildAtIndex");
        this.plugin.enableCoreAPIModifiers();
        flattenedIndex = this.getRowIndex(this.data[index]);
      }
      childElement = this.getDataObject(flattenedIndex);
      this.hot.runHooks("afterAddChild", parent, childElement, index);
    }
  }, {
    key: "addSibling",
    value: function addSibling(index) {
      var where = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "below";
      var translatedIndex = this.translateTrimmedRow(index);
      var parent = this.getRowParent(translatedIndex);
      var indexWithinParent = this.getRowIndexWithinParent(translatedIndex);
      switch (where) {
        case "below":
          this.addChildAtIndex(parent, indexWithinParent + 1, null);
          break;
        case "above":
          this.addChildAtIndex(parent, indexWithinParent, null);
          break;
      }
    }
  }, {
    key: "detachFromParent",
    value: function detachFromParent(elements) {
      var _this5 = this;
      var forceRender = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var element = null;
      var rowObjects = [];
      if (Array.isArray(elements)) {
        rangeEach(elements[0], elements[2], function(i) {
          var translatedIndex = _this5.translateTrimmedRow(i);
          rowObjects.push(_this5.getDataObject(translatedIndex));
        });
        rangeEach(0, rowObjects.length - 2, function(i) {
          _this5.detachFromParent(rowObjects[i], false);
        });
        element = rowObjects[rowObjects.length - 1];
      } else {
        element = elements;
      }
      var childRowIndex = this.getRowIndex(element);
      var childCount = this.countChildren(element);
      var indexWithinParent = this.getRowIndexWithinParent(element);
      var parent = this.getRowParent(element);
      var grandparent = this.getRowParent(parent);
      var grandparentRowIndex = this.getRowIndex(grandparent);
      var movedElementRowIndex = null;
      this.hot.runHooks("beforeDetachChild", parent, element);
      if (indexWithinParent !== null && indexWithinParent !== void 0) {
        var removedRowIndexes = Array.from(new Array(childRowIndex + childCount + 1).keys()).splice(-1 * (childCount + 1));
        this.hot.runHooks("beforeRemoveRow", childRowIndex, childCount + 1, removedRowIndexes, this.plugin.pluginName);
        parent.__children.splice(indexWithinParent, 1);
        this.rewriteCache();
        this.hot.runHooks("afterRemoveRow", childRowIndex, childCount + 1, removedRowIndexes, this.plugin.pluginName);
        if (grandparent) {
          movedElementRowIndex = grandparentRowIndex + this.countChildren(grandparent);
          var lastGrandparentChild = this.getChild(grandparent, this.countChildren(grandparent) - 1);
          var lastGrandparentChildIndex = this.getRowIndex(lastGrandparentChild);
          this.hot.runHooks("beforeCreateRow", lastGrandparentChildIndex + 1, childCount + 1, this.plugin.pluginName);
          grandparent.__children.push(element);
        } else {
          movedElementRowIndex = this.hot.countRows() + 1;
          this.hot.runHooks("beforeCreateRow", movedElementRowIndex - 2, childCount + 1, this.plugin.pluginName);
          this.data.push(element);
        }
      }
      this.rewriteCache();
      this.hot.runHooks("afterCreateRow", movedElementRowIndex - 2, childCount + 1, this.plugin.pluginName);
      this.hot.runHooks("afterDetachChild", parent, element, this.getRowIndex(element));
      if (forceRender) {
        this.hot.render();
      }
    }
  }, {
    key: "filterData",
    value: function filterData(index, amount, logicRows) {
      var _this6 = this;
      var elementsToRemove = [];
      arrayEach(logicRows, function(elem) {
        elementsToRemove.push(_this6.getDataObject(elem));
      });
      arrayEach(elementsToRemove, function(elem) {
        var indexWithinParent = _this6.getRowIndexWithinParent(elem);
        var tempParent = _this6.getRowParent(elem);
        if (tempParent === null) {
          _this6.data.splice(indexWithinParent, 1);
        } else {
          tempParent.__children.splice(indexWithinParent, 1);
        }
      });
      this.rewriteCache();
    }
  }, {
    key: "spliceData",
    value: function spliceData(index, amount, elements) {
      var previousElement = this.getDataObject(index - 1);
      var newRowParent = null;
      var indexWithinParent = index;
      if (previousElement && previousElement.__children && previousElement.__children.length === 0) {
        newRowParent = previousElement;
        indexWithinParent = 0;
      } else if (index < this.countAllRows()) {
        newRowParent = this.getRowParent(index);
        indexWithinParent = this.getRowIndexWithinParent(index);
      }
      if (newRowParent) {
        if (elements) {
          var _newRowParent$__child;
          (_newRowParent$__child = newRowParent.__children).splice.apply(_newRowParent$__child, [indexWithinParent, amount].concat(_toConsumableArray$c(elements)));
        } else {
          newRowParent.__children.splice(indexWithinParent, amount);
        }
      } else if (elements) {
        var _this$data;
        (_this$data = this.data).splice.apply(_this$data, [indexWithinParent, amount].concat(_toConsumableArray$c(elements)));
      } else {
        this.data.splice(indexWithinParent, amount);
      }
      this.rewriteCache();
    }
  }, {
    key: "syncRowWithRawSource",
    value: function syncRowWithRawSource(rowElement) {
      var upmostParent = rowElement;
      var tempParent = null;
      do {
        tempParent = this.getRowParent(tempParent);
        if (tempParent !== null) {
          upmostParent = tempParent;
        }
      } while (tempParent !== null);
      this.plugin.disableCoreAPIModifiers();
      this.hot.setSourceDataAtCell(this.getRowIndex(upmostParent), "__children", upmostParent.__children, "NestedRows.syncRowWithRawSource");
      this.plugin.enableCoreAPIModifiers();
    }
  }, {
    key: "moveRow",
    value: function moveRow(fromIndex, toIndex, moveToCollapsed, moveToLastChild) {
      var moveToLastRow = toIndex === this.hot.countRows();
      var fromParent = this.getRowParent(fromIndex);
      var indexInFromParent = this.getRowIndexWithinParent(fromIndex);
      var elemToMove = fromParent.__children.slice(indexInFromParent, indexInFromParent + 1);
      var movingUp = fromIndex > toIndex;
      var toParent = moveToLastRow ? this.getRowParent(toIndex - 1) : this.getRowParent(toIndex);
      if (toParent === null || toParent === void 0) {
        toParent = this.getRowParent(toIndex - 1);
      }
      if (toParent === null || toParent === void 0) {
        toParent = this.getDataObject(toIndex - 1);
      }
      if (!toParent) {
        toParent = this.getDataObject(toIndex);
        toParent.__children = [];
      } else if (!toParent.__children) {
        toParent.__children = [];
      }
      var indexInTargetParent = moveToLastRow || moveToCollapsed || moveToLastChild ? toParent.__children.length : this.getRowIndexWithinParent(toIndex);
      var sameParent = fromParent === toParent;
      toParent.__children.splice(indexInTargetParent, 0, elemToMove[0]);
      fromParent.__children.splice(indexInFromParent + (movingUp && sameParent ? 1 : 0), 1);
      this.syncRowWithRawSource(fromParent);
      if (!sameParent) {
        this.syncRowWithRawSource(toParent);
      }
    }
  }, {
    key: "translateTrimmedRow",
    value: function translateTrimmedRow(row) {
      if (this.plugin.collapsingUI) {
        return this.plugin.collapsingUI.translateTrimmedRow(row);
      }
      return row;
    }
  }, {
    key: "untranslateTrimmedRow",
    value: function untranslateTrimmedRow(row) {
      if (this.plugin.collapsingUI) {
        return this.plugin.collapsingUI.untranslateTrimmedRow(row);
      }
      return row;
    }
  }]);
  return DataManager2;
}();

function _defineProperties$1l(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1l(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1l(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1l(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _classCallCheck$1l(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var BaseUI$3 = /* @__PURE__ */ _createClass$1l(function BaseUI2(pluginInstance, hotInstance) {
  _classCallCheck$1l(this, BaseUI2);
  this.hot = hotInstance;
  this.plugin = pluginInstance;
});

function _typeof$S(obj) {
  "@babel/helpers - typeof";
  return _typeof$S = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$S(obj);
}
function _classCallCheck$1m(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1m(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1m(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1m(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1m(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _inherits$Q(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$Q(subClass, superClass);
}
function _setPrototypeOf$Q(o, p) {
  _setPrototypeOf$Q = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$Q(o, p);
}
function _createSuper$Q(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$Q();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$Q(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$Q(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$Q(this, result);
  };
}
function _possibleConstructorReturn$Q(self, call) {
  if (call && (_typeof$S(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$Q(self);
}
function _assertThisInitialized$Q(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$Q() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$Q(o) {
  _getPrototypeOf$Q = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$Q(o);
}
var HeadersUI = /* @__PURE__ */ function(_BaseUI) {
  _inherits$Q(HeadersUI2, _BaseUI);
  var _super = _createSuper$Q(HeadersUI2);
  function HeadersUI2(nestedRowsPlugin, hotInstance) {
    var _this;
    _classCallCheck$1m(this, HeadersUI2);
    _this = _super.call(this, nestedRowsPlugin, hotInstance);
    _this.dataManager = _this.plugin.dataManager;
    _this.collapsingUI = _this.plugin.collapsingUI;
    _this.rowHeaderWidthCache = null;
    return _this;
  }
  _createClass$1m(HeadersUI2, [{
    key: "appendLevelIndicators",
    value: function appendLevelIndicators(row, TH) {
      var rowIndex = this.hot.toPhysicalRow(row);
      var rowLevel = this.dataManager.getRowLevel(rowIndex);
      var rowObject = this.dataManager.getDataObject(rowIndex);
      var innerDiv = TH.getElementsByTagName("DIV")[0];
      var innerSpan = innerDiv.querySelector("span.rowHeader");
      var previousIndicators = innerDiv.querySelectorAll('[class^="ht_nesting"]');
      arrayEach(previousIndicators, function(elem) {
        if (elem) {
          innerDiv.removeChild(elem);
        }
      });
      addClass(TH, HeadersUI2.CSS_CLASSES.indicatorContainer);
      if (rowLevel) {
        var rootDocument = this.hot.rootDocument;
        var initialContent = innerSpan.cloneNode(true);
        innerDiv.innerHTML = "";
        rangeEach(0, rowLevel - 1, function() {
          var levelIndicator = rootDocument.createElement("SPAN");
          addClass(levelIndicator, HeadersUI2.CSS_CLASSES.emptyIndicator);
          innerDiv.appendChild(levelIndicator);
        });
        innerDiv.appendChild(initialContent);
      }
      if (this.dataManager.hasChildren(rowObject)) {
        var buttonsContainer = this.hot.rootDocument.createElement("DIV");
        addClass(TH, HeadersUI2.CSS_CLASSES.parent);
        if (this.collapsingUI.areChildrenCollapsed(rowIndex)) {
          addClass(buttonsContainer, "".concat(HeadersUI2.CSS_CLASSES.button, " ").concat(HeadersUI2.CSS_CLASSES.expandButton));
        } else {
          addClass(buttonsContainer, "".concat(HeadersUI2.CSS_CLASSES.button, " ").concat(HeadersUI2.CSS_CLASSES.collapseButton));
        }
        innerDiv.appendChild(buttonsContainer);
      }
    }
  }, {
    key: "updateRowHeaderWidth",
    value: function updateRowHeaderWidth(deepestLevel) {
      var deepestLevelIndex = deepestLevel;
      if (!deepestLevelIndex) {
        deepestLevelIndex = this.dataManager.cache.levelCount;
      }
      this.rowHeaderWidthCache = Math.max(50, 11 + 10 * deepestLevelIndex + 25);
      this.hot.render();
    }
  }], [{
    key: "CSS_CLASSES",
    get: function get() {
      return {
        indicatorContainer: "ht_nestingLevels",
        parent: "ht_nestingParent",
        indicator: "ht_nestingLevel",
        emptyIndicator: "ht_nestingLevel_empty",
        button: "ht_nestingButton",
        expandButton: "ht_nestingExpand",
        collapseButton: "ht_nestingCollapse"
      };
    }
  }]);
  return HeadersUI2;
}(BaseUI$3);

function _typeof$T(obj) {
  "@babel/helpers - typeof";
  return _typeof$T = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$T(obj);
}
function _toConsumableArray$d(arr) {
  return _arrayWithoutHoles$d(arr) || _iterableToArray$f(arr) || _unsupportedIterableToArray$K(arr) || _nonIterableSpread$d();
}
function _nonIterableSpread$d() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$K(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$K(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$K(o, minLen);
}
function _iterableToArray$f(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$d(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$K(arr);
}
function _arrayLikeToArray$K(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _classCallCheck$1n(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1n(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1n(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1n(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1n(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _inherits$R(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$R(subClass, superClass);
}
function _setPrototypeOf$R(o, p) {
  _setPrototypeOf$R = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$R(o, p);
}
function _createSuper$R(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$R();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$R(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$R(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$R(this, result);
  };
}
function _possibleConstructorReturn$R(self, call) {
  if (call && (_typeof$T(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$R(self);
}
function _assertThisInitialized$R(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$R() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$R(o) {
  _getPrototypeOf$R = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$R(o);
}
var CollapsingUI = /* @__PURE__ */ function(_BaseUI) {
  _inherits$R(CollapsingUI2, _BaseUI);
  var _super = _createSuper$R(CollapsingUI2);
  function CollapsingUI2(nestedRowsPlugin, hotInstance) {
    var _this;
    _classCallCheck$1n(this, CollapsingUI2);
    _this = _super.call(this, nestedRowsPlugin, hotInstance);
    _this.dataManager = _this.plugin.dataManager;
    _this.collapsedRows = [];
    _this.collapsedRowsStash = {
      stash: function stash() {
        var forceRender = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
        _this.lastCollapsedRows = _this.collapsedRows.slice(0);
        _this.expandMultipleChildren(_this.lastCollapsedRows, forceRender);
      },
      shiftStash: function shiftStash(baseIndex, targetIndex) {
        var delta = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
        if (targetIndex === null || targetIndex === void 0) {
          targetIndex = Infinity;
        }
        arrayEach(_this.lastCollapsedRows, function(elem, i) {
          if (elem >= baseIndex && elem < targetIndex) {
            _this.lastCollapsedRows[i] = elem + delta;
          }
        });
      },
      applyStash: function applyStash() {
        var forceRender = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
        _this.collapseMultipleChildren(_this.lastCollapsedRows, forceRender);
        _this.lastCollapsedRows = void 0;
      },
      trimStash: function trimStash(realElementIndex, amount) {
        rangeEach(realElementIndex, realElementIndex + amount - 1, function(i) {
          var indexOfElement = _this.lastCollapsedRows.indexOf(i);
          if (indexOfElement > -1) {
            _this.lastCollapsedRows.splice(indexOfElement, 1);
          }
        });
      }
    };
    return _this;
  }
  _createClass$1n(CollapsingUI2, [{
    key: "collapseChildren",
    value: function collapseChildren(row) {
      var _this2 = this;
      var forceRender = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var doTrimming = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var rowsToCollapse = [];
      var rowObject = null;
      var rowIndex = null;
      var rowsToTrim = null;
      if (isNaN(row)) {
        rowObject = row;
        rowIndex = this.dataManager.getRowIndex(rowObject);
      } else {
        rowObject = this.dataManager.getDataObject(row);
        rowIndex = row;
      }
      if (this.dataManager.hasChildren(rowObject)) {
        arrayEach(rowObject.__children, function(elem) {
          rowsToCollapse.push(_this2.dataManager.getRowIndex(elem));
        });
      }
      rowsToTrim = this.collapseRows(rowsToCollapse, true, false);
      if (doTrimming) {
        this.trimRows(rowsToTrim);
      }
      if (forceRender) {
        this.renderAndAdjust();
      }
      if (this.collapsedRows.indexOf(rowIndex) === -1) {
        this.collapsedRows.push(rowIndex);
      }
      return rowsToTrim;
    }
  }, {
    key: "collapseMultipleChildren",
    value: function collapseMultipleChildren(rows) {
      var _this3 = this;
      var forceRender = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var doTrimming = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var rowsToTrim = [];
      arrayEach(rows, function(elem) {
        rowsToTrim.push.apply(rowsToTrim, _toConsumableArray$d(_this3.collapseChildren(elem, false, false)));
      });
      if (doTrimming) {
        this.trimRows(rowsToTrim);
      }
      if (forceRender) {
        this.renderAndAdjust();
      }
    }
  }, {
    key: "collapseRow",
    value: function collapseRow(rowIndex) {
      var recursive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      this.collapseRows([rowIndex], recursive);
    }
  }, {
    key: "collapseRows",
    value: function collapseRows(rowIndexes) {
      var _this4 = this;
      var recursive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var doTrimming = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var rowsToTrim = [];
      arrayEach(rowIndexes, function(elem) {
        rowsToTrim.push(elem);
        if (recursive) {
          _this4.collapseChildRows(elem, rowsToTrim);
        }
      });
      if (doTrimming) {
        this.trimRows(rowsToTrim);
      }
      return rowsToTrim;
    }
  }, {
    key: "collapseChildRows",
    value: function collapseChildRows(parentIndex) {
      var _this5 = this;
      var rowsToTrim = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      var doTrimming = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      if (this.dataManager.hasChildren(parentIndex)) {
        var parentObject = this.dataManager.getDataObject(parentIndex);
        arrayEach(parentObject.__children, function(elem) {
          var elemIndex = _this5.dataManager.getRowIndex(elem);
          rowsToTrim.push(elemIndex);
          _this5.collapseChildRows(elemIndex, rowsToTrim);
        });
      }
      if (doTrimming) {
        this.trimRows(rowsToTrim);
      }
    }
  }, {
    key: "expandRow",
    value: function expandRow(rowIndex) {
      var recursive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      this.expandRows([rowIndex], recursive);
    }
  }, {
    key: "expandRows",
    value: function expandRows(rowIndexes) {
      var _this6 = this;
      var recursive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var doTrimming = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var rowsToUntrim = [];
      arrayEach(rowIndexes, function(elem) {
        rowsToUntrim.push(elem);
        if (recursive) {
          _this6.expandChildRows(elem, rowsToUntrim);
        }
      });
      if (doTrimming) {
        this.untrimRows(rowsToUntrim);
      }
      return rowsToUntrim;
    }
  }, {
    key: "expandChildRows",
    value: function expandChildRows(parentIndex) {
      var _this7 = this;
      var rowsToUntrim = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      var doTrimming = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      if (this.dataManager.hasChildren(parentIndex)) {
        var parentObject = this.dataManager.getDataObject(parentIndex);
        arrayEach(parentObject.__children, function(elem) {
          if (!_this7.isAnyParentCollapsed(elem)) {
            var elemIndex = _this7.dataManager.getRowIndex(elem);
            rowsToUntrim.push(elemIndex);
            _this7.expandChildRows(elemIndex, rowsToUntrim);
          }
        });
      }
      if (doTrimming) {
        this.untrimRows(rowsToUntrim);
      }
    }
  }, {
    key: "expandChildren",
    value: function expandChildren(row) {
      var _this8 = this;
      var forceRender = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var doTrimming = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var rowsToExpand = [];
      var rowObject = null;
      var rowIndex = null;
      var rowsToUntrim = null;
      if (isNaN(row)) {
        rowObject = row;
        rowIndex = this.dataManager.getRowIndex(row);
      } else {
        rowObject = this.dataManager.getDataObject(row);
        rowIndex = row;
      }
      this.collapsedRows.splice(this.collapsedRows.indexOf(rowIndex), 1);
      if (this.dataManager.hasChildren(rowObject)) {
        arrayEach(rowObject.__children, function(elem) {
          var childIndex = _this8.dataManager.getRowIndex(elem);
          rowsToExpand.push(childIndex);
        });
      }
      rowsToUntrim = this.expandRows(rowsToExpand, true, false);
      if (doTrimming) {
        this.untrimRows(rowsToUntrim);
      }
      if (forceRender) {
        this.renderAndAdjust();
      }
      return rowsToUntrim;
    }
  }, {
    key: "expandMultipleChildren",
    value: function expandMultipleChildren(rows) {
      var _this9 = this;
      var forceRender = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var doTrimming = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var rowsToUntrim = [];
      arrayEach(rows, function(elem) {
        rowsToUntrim.push.apply(rowsToUntrim, _toConsumableArray$d(_this9.expandChildren(elem, false, false)));
      });
      if (doTrimming) {
        this.untrimRows(rowsToUntrim);
      }
      if (forceRender) {
        this.renderAndAdjust();
      }
    }
  }, {
    key: "collapseAll",
    value: function collapseAll() {
      var _this10 = this;
      var data = this.dataManager.getData();
      var parentsToCollapse = [];
      arrayEach(data, function(elem) {
        if (_this10.dataManager.hasChildren(elem)) {
          parentsToCollapse.push(elem);
        }
      });
      this.collapseMultipleChildren(parentsToCollapse);
      this.renderAndAdjust();
    }
  }, {
    key: "expandAll",
    value: function expandAll() {
      var _this11 = this;
      var data = this.dataManager.getData();
      var parentsToExpand = [];
      arrayEach(data, function(elem) {
        if (_this11.dataManager.hasChildren(elem)) {
          parentsToExpand.push(elem);
        }
      });
      this.expandMultipleChildren(parentsToExpand);
      this.renderAndAdjust();
    }
  }, {
    key: "trimRows",
    value: function trimRows(rows) {
      var _this12 = this;
      this.hot.batchExecution(function() {
        arrayEach(rows, function(physicalRow) {
          _this12.plugin.collapsedRowsMap.setValueAtIndex(physicalRow, true);
        });
      }, true);
    }
  }, {
    key: "untrimRows",
    value: function untrimRows(rows) {
      var _this13 = this;
      this.hot.batchExecution(function() {
        arrayEach(rows, function(physicalRow) {
          _this13.plugin.collapsedRowsMap.setValueAtIndex(physicalRow, false);
        });
      }, true);
    }
  }, {
    key: "areChildrenCollapsed",
    value: function areChildrenCollapsed(row) {
      var _this14 = this;
      var rowObj = isNaN(row) ? row : this.dataManager.getDataObject(row);
      var allCollapsed = true;
      if (rowObj === null) {
        rowObj = {
          __children: this.dataManager.data
        };
      }
      if (this.dataManager.hasChildren(rowObj)) {
        arrayEach(rowObj.__children, function(elem) {
          var rowIndex = _this14.dataManager.getRowIndex(elem);
          if (!_this14.plugin.collapsedRowsMap.getValueAtIndex(rowIndex)) {
            allCollapsed = false;
            return false;
          }
        });
      }
      return allCollapsed;
    }
  }, {
    key: "isAnyParentCollapsed",
    value: function isAnyParentCollapsed(rowObj) {
      var parent = rowObj;
      while (parent !== null) {
        parent = this.dataManager.getRowParent(parent);
        var parentIndex = this.dataManager.getRowIndex(parent);
        if (this.collapsedRows.indexOf(parentIndex) > -1) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: "toggleState",
    value: function toggleState(event, coords) {
      if (coords.col >= 0) {
        return;
      }
      var row = this.translateTrimmedRow(coords.row);
      if (hasClass(event.target, HeadersUI.CSS_CLASSES.button)) {
        if (this.areChildrenCollapsed(row)) {
          this.expandChildren(row);
        } else {
          this.collapseChildren(row);
        }
        stopImmediatePropagation(event);
      }
    }
  }, {
    key: "translateTrimmedRow",
    value: function translateTrimmedRow(row) {
      return this.hot.toPhysicalRow(row);
    }
  }, {
    key: "untranslateTrimmedRow",
    value: function untranslateTrimmedRow(row) {
      return this.hot.toVisualRow(row);
    }
  }, {
    key: "renderAndAdjust",
    value: function renderAndAdjust() {
      this.hot.render();
      this.hot.view.adjustElementsSize();
    }
  }]);
  return CollapsingUI2;
}(BaseUI$3);

function _typeof$U(obj) {
  "@babel/helpers - typeof";
  return _typeof$U = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$U(obj);
}
function _classCallCheck$1o(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1o(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1o(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1o(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1o(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _inherits$S(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$S(subClass, superClass);
}
function _setPrototypeOf$S(o, p) {
  _setPrototypeOf$S = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$S(o, p);
}
function _createSuper$S(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$S();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$S(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$S(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$S(this, result);
  };
}
function _possibleConstructorReturn$S(self, call) {
  if (call && (_typeof$U(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$S(self);
}
function _assertThisInitialized$S(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$S() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$S(o) {
  _getPrototypeOf$S = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$S(o);
}
var privatePool$g = new WeakMap();
var ContextMenuUI = /* @__PURE__ */ function(_BaseUI) {
  _inherits$S(ContextMenuUI2, _BaseUI);
  var _super = _createSuper$S(ContextMenuUI2);
  function ContextMenuUI2(nestedRowsPlugin, hotInstance) {
    var _this;
    _classCallCheck$1o(this, ContextMenuUI2);
    _this = _super.call(this, nestedRowsPlugin, hotInstance);
    privatePool$g.set(_assertThisInitialized$S(_this), {
      row_above: function row_above(key, selection) {
        var lastSelection = selection[selection.length - 1];
        _this.dataManager.addSibling(lastSelection.start.row, "above");
      },
      row_below: function row_below(key, selection) {
        var lastSelection = selection[selection.length - 1];
        _this.dataManager.addSibling(lastSelection.start.row, "below");
      }
    });
    _this.dataManager = _this.plugin.dataManager;
    return _this;
  }
  _createClass$1o(ContextMenuUI2, [{
    key: "appendOptions",
    value: function appendOptions(defaultOptions) {
      var _this2 = this;
      var newEntries = [{
        key: "add_child",
        name: function name() {
          return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD);
        },
        callback: function callback() {
          var translatedRowIndex = _this2.dataManager.translateTrimmedRow(_this2.hot.getSelectedLast()[0]);
          var parent = _this2.dataManager.getDataObject(translatedRowIndex);
          _this2.dataManager.addChild(parent);
        },
        disabled: function disabled() {
          var selected = _this2.hot.getSelectedLast();
          return !selected || selected[0] < 0 || _this2.hot.selection.isSelectedByColumnHeader() || _this2.hot.countRows() >= _this2.hot.getSettings().maxRows;
        }
      }, {
        key: "detach_from_parent",
        name: function name() {
          return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD);
        },
        callback: function callback() {
          _this2.dataManager.detachFromParent(_this2.hot.getSelectedLast());
        },
        disabled: function disabled() {
          var selected = _this2.hot.getSelectedLast();
          var translatedRowIndex = _this2.dataManager.translateTrimmedRow(selected[0]);
          var parent = _this2.dataManager.getRowParent(translatedRowIndex);
          return !parent || !selected || selected[0] < 0 || _this2.hot.selection.isSelectedByColumnHeader() || _this2.hot.countRows() >= _this2.hot.getSettings().maxRows;
        }
      }, {
        name: "---------"
      }];
      rangeEach(0, defaultOptions.items.length - 1, function(i) {
        if (i === 0) {
          arrayEach(newEntries, function(val, j) {
            defaultOptions.items.splice(i + j, 0, val);
          });
          return false;
        }
      });
      return this.modifyRowInsertingOptions(defaultOptions);
    }
  }, {
    key: "modifyRowInsertingOptions",
    value: function modifyRowInsertingOptions(defaultOptions) {
      var priv = privatePool$g.get(this);
      rangeEach(0, defaultOptions.items.length - 1, function(i) {
        var option = priv[defaultOptions.items[i].key];
        if (option !== null && option !== void 0) {
          defaultOptions.items[i].callback = option;
        }
      });
      return defaultOptions;
    }
  }]);
  return ContextMenuUI2;
}(BaseUI$3);

var _templateObject$a;
function _toConsumableArray$e(arr) {
  return _arrayWithoutHoles$e(arr) || _iterableToArray$g(arr) || _unsupportedIterableToArray$L(arr) || _nonIterableSpread$e();
}
function _nonIterableSpread$e() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$L(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$L(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$L(o, minLen);
}
function _iterableToArray$g(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$e(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$L(arr);
}
function _arrayLikeToArray$L(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _taggedTemplateLiteral$a(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {raw: {value: Object.freeze(raw)}}));
}
function _classCallCheck$1p(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1p(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1p(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1p(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1p(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var RowMoveController = /* @__PURE__ */ function() {
  function RowMoveController2(plugin) {
    _classCallCheck$1p(this, RowMoveController2);
    this.plugin = plugin;
    this.hot = plugin.hot;
    this.dataManager = plugin.dataManager;
    this.collapsingUI = plugin.collapsingUI;
  }
  _createClass$1p(RowMoveController2, [{
    key: "onBeforeRowMove",
    value: function onBeforeRowMove(rows, finalIndex, dropIndex, movePossible) {
      var _this = this;
      var improperUsage = this.displayAPICompatibilityWarning({
        rows,
        finalIndex,
        dropIndex,
        movePossible
      });
      if (improperUsage) {
        return false;
      }
      this.movedToCollapsed = false;
      var dropToLastRow = dropIndex === this.hot.countRows();
      var physicalDropIndex = dropToLastRow ? this.hot.countSourceRows() : this.dataManager.translateTrimmedRow(dropIndex);
      var allowMove = true;
      var physicalStartIndexes = rows.map(function(rowIndex) {
        if (!allowMove) {
          return false;
        }
        var physicalRowIndex = _this.dataManager.translateTrimmedRow(rowIndex);
        allowMove = _this.shouldAllowMoving(physicalRowIndex, physicalDropIndex);
        return physicalRowIndex;
      });
      var willDataChange = physicalStartIndexes.indexOf(physicalDropIndex) === -1;
      if (!allowMove || !willDataChange) {
        return false;
      }
      var baseParent = this.getBaseParent(physicalStartIndexes);
      var targetParent = this.getTargetParent(dropToLastRow, physicalDropIndex);
      var sameParent = baseParent === targetParent;
      this.movedToCollapsed = this.collapsingUI.areChildrenCollapsed(targetParent);
      this.collapsingUI.collapsedRowsStash.stash();
      this.shiftCollapsibleParentsLocations(physicalStartIndexes, physicalDropIndex, sameParent);
      this.moveRows(physicalStartIndexes, physicalDropIndex, targetParent);
      this.dataManager.rewriteCache();
      this.moveCellsMeta(physicalStartIndexes, physicalDropIndex);
      this.collapsingUI.collapsedRowsStash.applyStash(false);
      this.hot.runHooks("afterRowMove", rows, finalIndex, dropIndex, movePossible, movePossible && this.isRowOrderChanged(rows, finalIndex));
      this.hot.render();
      this.selectCells(rows, dropIndex);
      return false;
    }
  }, {
    key: "displayAPICompatibilityWarning",
    value: function displayAPICompatibilityWarning(beforeMoveRowHookArgs) {
      var rows = beforeMoveRowHookArgs.rows, finalIndex = beforeMoveRowHookArgs.finalIndex, dropIndex = beforeMoveRowHookArgs.dropIndex, movePossible = beforeMoveRowHookArgs.movePossible;
      var shouldTerminate = false;
      if (isUndefined(dropIndex)) {
        warn(toSingleLine(_templateObject$a || (_templateObject$a = _taggedTemplateLiteral$a(["Since version 8.0.0 of the Handsontable the 'moveRows' method isn't used for moving rows \n      when the NestedRows plugin is enabled. Please use the 'dragRows' method instead."], ["Since version 8.0.0 of the Handsontable the 'moveRows' method isn't used for moving rows\\x20\n      when the NestedRows plugin is enabled. Please use the 'dragRows' method instead."]))));
        this.hot.runHooks("afterRowMove", rows, finalIndex, dropIndex, movePossible, false);
        shouldTerminate = true;
      }
      return shouldTerminate;
    }
  }, {
    key: "shouldAllowMoving",
    value: function shouldAllowMoving(physicalRowIndex, physicalDropIndex) {
      return !(this.dataManager.isParent(physicalRowIndex) || this.dataManager.isRowHighestLevel(physicalRowIndex) || physicalRowIndex === physicalDropIndex || physicalDropIndex === 0);
    }
  }, {
    key: "getBaseParent",
    value: function getBaseParent(physicalStartIndexes) {
      return this.dataManager.getRowParent(physicalStartIndexes[0]);
    }
  }, {
    key: "getTargetParent",
    value: function getTargetParent(dropToLastRow, physicalDropIndex) {
      var targetParent = this.dataManager.getRowParent(dropToLastRow ? physicalDropIndex - 1 : physicalDropIndex);
      if (targetParent === null || targetParent === void 0) {
        targetParent = this.dataManager.getRowParent(physicalDropIndex - 1);
      }
      return targetParent;
    }
  }, {
    key: "shiftCollapsibleParentsLocations",
    value: function shiftCollapsibleParentsLocations(physicalStartIndexes, physicalDropIndex, sameParent) {
      if (!sameParent) {
        if (Math.max.apply(Math, _toConsumableArray$e(physicalStartIndexes)) <= physicalDropIndex) {
          this.collapsingUI.collapsedRowsStash.shiftStash(physicalStartIndexes[0], physicalDropIndex, -1 * physicalStartIndexes.length);
        } else {
          this.collapsingUI.collapsedRowsStash.shiftStash(physicalDropIndex, physicalStartIndexes[0], physicalStartIndexes.length);
        }
      }
    }
  }, {
    key: "moveRows",
    value: function moveRows(physicalStartIndexes, physicalDropIndex, targetParent) {
      var _this2 = this;
      var moveToLastChild = physicalDropIndex === this.dataManager.getRowIndex(targetParent) + this.dataManager.countChildren(targetParent) + 1;
      this.hot.batchRender(function() {
        physicalStartIndexes.forEach(function(physicalStartIndex) {
          _this2.dataManager.moveRow(physicalStartIndex, physicalDropIndex, _this2.movedToCollapsed, moveToLastChild);
        });
      });
    }
  }, {
    key: "moveCellsMeta",
    value: function moveCellsMeta(baseIndexes, targetIndex) {
      var _this3 = this, _this$hot;
      var rowsOfMeta = [];
      var movingDown = Math.max.apply(Math, _toConsumableArray$e(baseIndexes)) < targetIndex;
      baseIndexes.forEach(function(baseIndex) {
        rowsOfMeta.push(_this3.hot.getCellMetaAtRow(baseIndex));
      });
      this.hot.spliceCellsMeta(baseIndexes[0], baseIndexes.length);
      (_this$hot = this.hot).spliceCellsMeta.apply(_this$hot, [targetIndex - (movingDown ? rowsOfMeta.length : 0), 0].concat(rowsOfMeta));
    }
  }, {
    key: "selectCells",
    value: function selectCells(rows, dropIndex) {
      var rowsLen = rows.length;
      var startRow = 0;
      var endRow = 0;
      var selection = null;
      var lastColIndex = null;
      if (this.movedToCollapsed) {
        var physicalDropIndex = null;
        if (rows[rowsLen - 1] < dropIndex) {
          physicalDropIndex = this.dataManager.translateTrimmedRow(dropIndex - rowsLen);
        } else {
          physicalDropIndex = this.dataManager.translateTrimmedRow(dropIndex);
        }
        var parentObject = this.dataManager.getRowParent(physicalDropIndex === null ? this.hot.countSourceRows() - 1 : physicalDropIndex - 1);
        var parentIndex = this.dataManager.getRowIndex(parentObject);
        startRow = this.dataManager.untranslateTrimmedRow(parentIndex);
        endRow = startRow;
      } else if (rows[rowsLen - 1] < dropIndex) {
        endRow = dropIndex - 1;
        startRow = endRow - rowsLen + 1;
      } else {
        startRow = dropIndex;
        endRow = startRow + rowsLen - 1;
      }
      selection = this.hot.selection;
      lastColIndex = this.hot.countCols() - 1;
      selection.setRangeStart(this.hot._createCellCoords(startRow, 0));
      selection.setRangeEnd(this.hot._createCellCoords(endRow, lastColIndex), true);
    }
  }, {
    key: "isRowOrderChanged",
    value: function isRowOrderChanged(movedRows, finalIndex) {
      return movedRows.some(function(row, nrOfMovedElement) {
        return row - nrOfMovedElement !== finalIndex;
      });
    }
  }]);
  return RowMoveController2;
}();

function _typeof$V(obj) {
  "@babel/helpers - typeof";
  return _typeof$V = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$V(obj);
}
function _toConsumableArray$f(arr) {
  return _arrayWithoutHoles$f(arr) || _iterableToArray$h(arr) || _unsupportedIterableToArray$M(arr) || _nonIterableSpread$f();
}
function _nonIterableSpread$f() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$M(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$M(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$M(o, minLen);
}
function _iterableToArray$h(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$f(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$M(arr);
}
function _arrayLikeToArray$M(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _classCallCheck$1q(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1q(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1q(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1q(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1q(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$K() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$K = Reflect.get.bind();
  } else {
    _get$K = function _get2(target, property, receiver) {
      var base = _superPropBase$K(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$K.apply(this, arguments);
}
function _superPropBase$K(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$T(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$T(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$T(subClass, superClass);
}
function _setPrototypeOf$T(o, p) {
  _setPrototypeOf$T = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$T(o, p);
}
function _createSuper$T(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$T();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$T(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$T(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$T(this, result);
  };
}
function _possibleConstructorReturn$T(self, call) {
  if (call && (_typeof$V(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$T(self);
}
function _assertThisInitialized$T(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$T() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$T(o) {
  _getPrototypeOf$T = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$T(o);
}
var PLUGIN_KEY$s = "nestedRows";
var PLUGIN_PRIORITY$r = 300;
var privatePool$h = new WeakMap();
var WRONG_DATA_TYPE_ERROR = "The Nested Rows plugin requires an Array of Objects as a dataset to be provided. The plugin has been disabled.";
var NestedRows = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$T(NestedRows2, _BasePlugin);
  var _super = _createSuper$T(NestedRows2);
  function NestedRows2(hotInstance) {
    var _this;
    _classCallCheck$1q(this, NestedRows2);
    _this = _super.call(this, hotInstance);
    _this.dataManager = null;
    _this.headersUI = null;
    _this.collapsedRowsMap = null;
    privatePool$h.set(_assertThisInitialized$T(_this), {
      movedToCollapsed: false,
      skipRender: null,
      skipCoreAPIModifiers: false
    });
    return _this;
  }
  _createClass$1q(NestedRows2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$s];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.collapsedRowsMap = this.hot.rowIndexMapper.registerMap("nestedRows", new TrimmingMap());
      this.dataManager = new DataManager(this, this.hot);
      this.collapsingUI = new CollapsingUI(this, this.hot);
      this.headersUI = new HeadersUI(this, this.hot);
      this.contextMenuUI = new ContextMenuUI(this, this.hot);
      this.rowMoveController = new RowMoveController(this);
      this.addHook("afterInit", function() {
        return _this2.onAfterInit.apply(_this2, arguments);
      });
      this.addHook("beforeViewRender", function() {
        return _this2.onBeforeViewRender.apply(_this2, arguments);
      });
      this.addHook("modifyRowData", function() {
        return _this2.onModifyRowData.apply(_this2, arguments);
      });
      this.addHook("modifySourceLength", function() {
        return _this2.onModifySourceLength.apply(_this2, arguments);
      });
      this.addHook("beforeDataSplice", function() {
        return _this2.onBeforeDataSplice.apply(_this2, arguments);
      });
      this.addHook("filterData", function() {
        return _this2.onFilterData.apply(_this2, arguments);
      });
      this.addHook("afterContextMenuDefaultOptions", function() {
        return _this2.onAfterContextMenuDefaultOptions.apply(_this2, arguments);
      });
      this.addHook("afterGetRowHeader", function() {
        return _this2.onAfterGetRowHeader.apply(_this2, arguments);
      });
      this.addHook("beforeOnCellMouseDown", function() {
        return _this2.onBeforeOnCellMouseDown.apply(_this2, arguments);
      });
      this.addHook("beforeRemoveRow", function() {
        return _this2.onBeforeRemoveRow.apply(_this2, arguments);
      });
      this.addHook("afterRemoveRow", function() {
        return _this2.onAfterRemoveRow.apply(_this2, arguments);
      });
      this.addHook("beforeAddChild", function() {
        return _this2.onBeforeAddChild.apply(_this2, arguments);
      });
      this.addHook("afterAddChild", function() {
        return _this2.onAfterAddChild.apply(_this2, arguments);
      });
      this.addHook("beforeDetachChild", function() {
        return _this2.onBeforeDetachChild.apply(_this2, arguments);
      });
      this.addHook("afterDetachChild", function() {
        return _this2.onAfterDetachChild.apply(_this2, arguments);
      });
      this.addHook("modifyRowHeaderWidth", function() {
        return _this2.onModifyRowHeaderWidth.apply(_this2, arguments);
      });
      this.addHook("afterCreateRow", function() {
        return _this2.onAfterCreateRow.apply(_this2, arguments);
      });
      this.addHook("beforeRowMove", function() {
        return _this2.onBeforeRowMove.apply(_this2, arguments);
      });
      this.addHook("beforeLoadData", function(data) {
        return _this2.onBeforeLoadData(data);
      });
      _get$K(_getPrototypeOf$T(NestedRows2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.hot.rowIndexMapper.unregisterMap("nestedRows");
      _get$K(_getPrototypeOf$T(NestedRows2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      var currentSourceData = this.dataManager.getData();
      this.enablePlugin();
      this.dataManager.updateWithData(currentSourceData);
      _get$K(_getPrototypeOf$T(NestedRows2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "onBeforeRowMove",
    value: function onBeforeRowMove(rows, finalIndex, dropIndex, movePossible) {
      return this.rowMoveController.onBeforeRowMove(rows, finalIndex, dropIndex, movePossible);
    }
  }, {
    key: "disableCoreAPIModifiers",
    value: function disableCoreAPIModifiers() {
      var priv = privatePool$h.get(this);
      priv.skipCoreAPIModifiers = true;
    }
  }, {
    key: "enableCoreAPIModifiers",
    value: function enableCoreAPIModifiers() {
      var priv = privatePool$h.get(this);
      priv.skipCoreAPIModifiers = false;
    }
  }, {
    key: "onBeforeOnCellMouseDown",
    value: function onBeforeOnCellMouseDown(event, coords, TD) {
      this.collapsingUI.toggleState(event, coords, TD);
    }
  }, {
    key: "onModifyRowData",
    value: function onModifyRowData(row) {
      var priv = privatePool$h.get(this);
      if (priv.skipCoreAPIModifiers) {
        return;
      }
      return this.dataManager.getDataObject(row);
    }
  }, {
    key: "onModifySourceLength",
    value: function onModifySourceLength() {
      var priv = privatePool$h.get(this);
      if (priv.skipCoreAPIModifiers) {
        return;
      }
      return this.dataManager.countAllRows();
    }
  }, {
    key: "onBeforeDataSplice",
    value: function onBeforeDataSplice(index, amount, element) {
      var priv = privatePool$h.get(this);
      if (priv.skipCoreAPIModifiers || this.dataManager.isRowHighestLevel(index)) {
        return true;
      }
      this.dataManager.spliceData(index, amount, element);
      return false;
    }
  }, {
    key: "onFilterData",
    value: function onFilterData(index, amount, physicalRows) {
      var priv = privatePool$h.get(this);
      this.collapsingUI.collapsedRowsStash.stash();
      this.collapsingUI.collapsedRowsStash.trimStash(physicalRows[0], amount);
      this.collapsingUI.collapsedRowsStash.shiftStash(physicalRows[0], null, -1 * amount);
      this.dataManager.filterData(index, amount, physicalRows);
      priv.skipRender = true;
      return this.dataManager.getData().slice();
    }
  }, {
    key: "onAfterContextMenuDefaultOptions",
    value: function onAfterContextMenuDefaultOptions(defaultOptions) {
      return this.contextMenuUI.appendOptions(defaultOptions);
    }
  }, {
    key: "onAfterGetRowHeader",
    value: function onAfterGetRowHeader(row, TH) {
      this.headersUI.appendLevelIndicators(row, TH);
    }
  }, {
    key: "onModifyRowHeaderWidth",
    value: function onModifyRowHeaderWidth(rowHeaderWidth) {
      return this.headersUI.rowHeaderWidthCache || rowHeaderWidth;
    }
  }, {
    key: "onAfterRemoveRow",
    value: function onAfterRemoveRow(index, amount, logicRows, source) {
      var _this3 = this;
      if (source === this.pluginName) {
        return;
      }
      var priv = privatePool$h.get(this);
      setTimeout(function() {
        priv.skipRender = null;
        _this3.headersUI.updateRowHeaderWidth();
        _this3.collapsingUI.collapsedRowsStash.applyStash();
      }, 0);
    }
  }, {
    key: "onBeforeRemoveRow",
    value: function onBeforeRemoveRow(index, amount, physicalRows) {
      var _this4 = this;
      var modifiedPhysicalRows = Array.from(physicalRows.reduce(function(removedRows, physicalIndex) {
        if (_this4.dataManager.isParent(physicalIndex)) {
          var children = _this4.dataManager.getDataObject(physicalIndex).__children;
          removedRows.add(physicalIndex);
          if (Array.isArray(children)) {
            children.forEach(function(child) {
              return removedRows.add(_this4.dataManager.getRowIndex(child));
            });
          }
          return removedRows;
        }
        return removedRows.add(physicalIndex);
      }, new Set()));
      physicalRows.length = 0;
      physicalRows.push.apply(physicalRows, modifiedPhysicalRows);
    }
  }, {
    key: "onBeforeAddChild",
    value: function onBeforeAddChild() {
      this.collapsingUI.collapsedRowsStash.stash();
    }
  }, {
    key: "onAfterAddChild",
    value: function onAfterAddChild(parent, element) {
      this.collapsingUI.collapsedRowsStash.shiftStash(this.dataManager.getRowIndex(element));
      this.collapsingUI.collapsedRowsStash.applyStash();
      this.headersUI.updateRowHeaderWidth();
    }
  }, {
    key: "onBeforeDetachChild",
    value: function onBeforeDetachChild() {
      this.collapsingUI.collapsedRowsStash.stash();
    }
  }, {
    key: "onAfterDetachChild",
    value: function onAfterDetachChild(parent, element, finalElementRowIndex) {
      this.collapsingUI.collapsedRowsStash.shiftStash(finalElementRowIndex, null, -1);
      this.collapsingUI.collapsedRowsStash.applyStash();
      this.headersUI.updateRowHeaderWidth();
    }
  }, {
    key: "onAfterCreateRow",
    value: function onAfterCreateRow() {
      this.dataManager.rewriteCache();
    }
  }, {
    key: "onAfterInit",
    value: function onAfterInit() {
      var deepestLevel = Math.max.apply(Math, _toConsumableArray$f(this.dataManager.cache.levels));
      if (deepestLevel > 0) {
        this.headersUI.updateRowHeaderWidth(deepestLevel);
      }
    }
  }, {
    key: "onBeforeViewRender",
    value: function onBeforeViewRender(force, skipRender) {
      var priv = privatePool$h.get(this);
      if (priv.skipRender) {
        skipRender.skipRender = true;
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get$K(_getPrototypeOf$T(NestedRows2.prototype), "destroy", this).call(this);
    }
  }, {
    key: "onBeforeLoadData",
    value: function onBeforeLoadData(data) {
      if (!isArrayOfObjects(data)) {
        error(WRONG_DATA_TYPE_ERROR);
        this.hot.getSettings()[PLUGIN_KEY$s] = false;
        this.disablePlugin();
        return;
      }
      this.dataManager.setData(data);
      this.dataManager.rewriteCache();
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$s;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$r;
    }
  }]);
  return NestedRows2;
}(BasePlugin);

function _classCallCheck$1r(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1r(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1r(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1r(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1r(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
var Storage = /* @__PURE__ */ function() {
  function Storage2(prefix) {
    var rootWindow = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
    _classCallCheck$1r(this, Storage2);
    this.rootWindow = rootWindow;
    this.prefix = prefix;
    this.savedKeys = [];
    this.loadSavedKeys();
  }
  _createClass$1r(Storage2, [{
    key: "saveValue",
    value: function saveValue(key, value) {
      this.rootWindow.localStorage.setItem("".concat(this.prefix, "_").concat(key), JSON.stringify(value));
      if (this.savedKeys.indexOf(key) === -1) {
        this.savedKeys.push(key);
        this.saveSavedKeys();
      }
    }
  }, {
    key: "loadValue",
    value: function loadValue(key, defaultValue) {
      var itemKey = typeof key === "undefined" ? defaultValue : key;
      var value = this.rootWindow.localStorage.getItem("".concat(this.prefix, "_").concat(itemKey));
      return value === null ? void 0 : JSON.parse(value);
    }
  }, {
    key: "reset",
    value: function reset(key) {
      this.rootWindow.localStorage.removeItem("".concat(this.prefix, "_").concat(key));
    }
  }, {
    key: "resetAll",
    value: function resetAll() {
      var _this = this;
      arrayEach(this.savedKeys, function(value, index) {
        _this.rootWindow.localStorage.removeItem("".concat(_this.prefix, "_").concat(_this.savedKeys[index]));
      });
      this.clearSavedKeys();
    }
  }, {
    key: "loadSavedKeys",
    value: function loadSavedKeys() {
      var keysJSON = this.rootWindow.localStorage.getItem("".concat(this.prefix, "__persistentStateKeys"));
      var keys = typeof keysJSON === "string" ? JSON.parse(keysJSON) : void 0;
      this.savedKeys = keys || [];
    }
  }, {
    key: "saveSavedKeys",
    value: function saveSavedKeys() {
      this.rootWindow.localStorage.setItem("".concat(this.prefix, "__persistentStateKeys"), JSON.stringify(this.savedKeys));
    }
  }, {
    key: "clearSavedKeys",
    value: function clearSavedKeys() {
      this.savedKeys.length = 0;
      this.saveSavedKeys();
    }
  }]);
  return Storage2;
}();

function _typeof$W(obj) {
  "@babel/helpers - typeof";
  return _typeof$W = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$W(obj);
}
function _classCallCheck$1s(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1s(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1s(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1s(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1s(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$L() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$L = Reflect.get.bind();
  } else {
    _get$L = function _get2(target, property, receiver) {
      var base = _superPropBase$L(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$L.apply(this, arguments);
}
function _superPropBase$L(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$U(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$U(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$U(subClass, superClass);
}
function _setPrototypeOf$U(o, p) {
  _setPrototypeOf$U = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$U(o, p);
}
function _createSuper$U(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$U();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$U(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$U(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$U(this, result);
  };
}
function _possibleConstructorReturn$U(self, call) {
  if (call && (_typeof$W(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$U(self);
}
function _assertThisInitialized$U(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$U() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$U(o) {
  _getPrototypeOf$U = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$U(o);
}
Hooks.getSingleton().register("persistentStateSave");
Hooks.getSingleton().register("persistentStateLoad");
Hooks.getSingleton().register("persistentStateReset");
var PLUGIN_KEY$t = "persistentState";
var PLUGIN_PRIORITY$s = 0;
var PersistentState = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$U(PersistentState2, _BasePlugin);
  var _super = _createSuper$U(PersistentState2);
  function PersistentState2(hotInstance) {
    var _this;
    _classCallCheck$1s(this, PersistentState2);
    _this = _super.call(this, hotInstance);
    _this.storage = void 0;
    return _this;
  }
  _createClass$1s(PersistentState2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$t];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      if (!this.storage) {
        this.storage = new Storage(this.hot.rootElement.id, this.hot.rootWindow);
      }
      this.addHook("persistentStateSave", function(key, value) {
        return _this2.saveValue(key, value);
      });
      this.addHook("persistentStateLoad", function(key, saveTo) {
        return _this2.loadValue(key, saveTo);
      });
      this.addHook("persistentStateReset", function() {
        return _this2.resetValue();
      });
      _get$L(_getPrototypeOf$U(PersistentState2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.storage = void 0;
      _get$L(_getPrototypeOf$U(PersistentState2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      _get$L(_getPrototypeOf$U(PersistentState2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "loadValue",
    value: function loadValue(key, saveTo) {
      saveTo.value = this.storage.loadValue(key);
    }
  }, {
    key: "saveValue",
    value: function saveValue(key, value) {
      this.storage.saveValue(key, value);
    }
  }, {
    key: "resetValue",
    value: function resetValue(key) {
      if (typeof key === "undefined") {
        this.storage.resetAll();
      } else {
        this.storage.reset(key);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get$L(_getPrototypeOf$U(PersistentState2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$t;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$s;
    }
  }]);
  return PersistentState2;
}(BasePlugin);

function _typeof$X(obj) {
  "@babel/helpers - typeof";
  return _typeof$X = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$X(obj);
}
function _toConsumableArray$g(arr) {
  return _arrayWithoutHoles$g(arr) || _iterableToArray$i(arr) || _unsupportedIterableToArray$N(arr) || _nonIterableSpread$g();
}
function _nonIterableSpread$g() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$N(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$N(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$N(o, minLen);
}
function _iterableToArray$i(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$g(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$N(arr);
}
function _arrayLikeToArray$N(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _classCallCheck$1t(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1t(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1t(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1t(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1t(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$M() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$M = Reflect.get.bind();
  } else {
    _get$M = function _get2(target, property, receiver) {
      var base = _superPropBase$M(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$M.apply(this, arguments);
}
function _superPropBase$M(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$V(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$V(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$V(subClass, superClass);
}
function _setPrototypeOf$V(o, p) {
  _setPrototypeOf$V = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$V(o, p);
}
function _createSuper$V(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$V();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$V(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$V(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$V(this, result);
  };
}
function _possibleConstructorReturn$V(self, call) {
  if (call && (_typeof$X(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$V(self);
}
function _assertThisInitialized$V(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$V() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$V(o) {
  _getPrototypeOf$V = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$V(o);
}
var PLUGIN_KEY$u = "search";
var PLUGIN_PRIORITY$t = 190;
var DEFAULT_SEARCH_RESULT_CLASS = "htSearchResult";
var DEFAULT_CALLBACK = function DEFAULT_CALLBACK2(instance, row, col, data, testResult) {
  instance.getCellMeta(row, col).isSearchResult = testResult;
};
var DEFAULT_QUERY_METHOD = function DEFAULT_QUERY_METHOD2(query, value, cellProperties) {
  if (isUndefined(query) || query === null || !query.toLocaleLowerCase || query.length === 0) {
    return false;
  }
  if (isUndefined(value) || value === null) {
    return false;
  }
  return value.toString().toLocaleLowerCase(cellProperties.locale).indexOf(query.toLocaleLowerCase(cellProperties.locale)) !== -1;
};
var Search = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$V(Search2, _BasePlugin);
  var _super = _createSuper$V(Search2);
  function Search2(hotInstance) {
    var _this;
    _classCallCheck$1t(this, Search2);
    _this = _super.call(this, hotInstance);
    _this.callback = DEFAULT_CALLBACK;
    _this.queryMethod = DEFAULT_QUERY_METHOD;
    _this.searchResultClass = DEFAULT_SEARCH_RESULT_CLASS;
    return _this;
  }
  _createClass$1t(Search2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return this.hot.getSettings()[PLUGIN_KEY$u];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      var searchSettings = this.hot.getSettings()[PLUGIN_KEY$u];
      this.updatePluginSettings(searchSettings);
      this.addHook("beforeRenderer", function() {
        return _this2.onBeforeRenderer.apply(_this2, arguments);
      });
      _get$M(_getPrototypeOf$V(Search2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      var _this3 = this;
      var beforeRendererCallback = function beforeRendererCallback2() {
        return _this3.onBeforeRenderer.apply(_this3, arguments);
      };
      this.hot.addHook("beforeRenderer", beforeRendererCallback);
      this.hot.addHookOnce("afterViewRender", function() {
        _this3.hot.removeHook("beforeRenderer", beforeRendererCallback);
      });
      _get$M(_getPrototypeOf$V(Search2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.disablePlugin();
      this.enablePlugin();
      _get$M(_getPrototypeOf$V(Search2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "query",
    value: function query(queryStr) {
      var _this4 = this;
      var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getCallback();
      var queryMethod = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.getQueryMethod();
      var rowCount = this.hot.countRows();
      var colCount = this.hot.countCols();
      var queryResult = [];
      var instance = this.hot;
      rangeEach(0, rowCount - 1, function(rowIndex) {
        rangeEach(0, colCount - 1, function(colIndex) {
          var cellData = _this4.hot.getDataAtCell(rowIndex, colIndex);
          var cellProperties = _this4.hot.getCellMeta(rowIndex, colIndex);
          var cellCallback = cellProperties.search.callback || callback;
          var cellQueryMethod = cellProperties.search.queryMethod || queryMethod;
          var testResult = cellQueryMethod(queryStr, cellData, cellProperties);
          if (testResult) {
            var singleResult = {
              row: rowIndex,
              col: colIndex,
              data: cellData
            };
            queryResult.push(singleResult);
          }
          if (cellCallback) {
            cellCallback(instance, rowIndex, colIndex, cellData, testResult);
          }
        });
      });
      return queryResult;
    }
  }, {
    key: "getCallback",
    value: function getCallback() {
      return this.callback;
    }
  }, {
    key: "setCallback",
    value: function setCallback(newCallback) {
      this.callback = newCallback;
    }
  }, {
    key: "getQueryMethod",
    value: function getQueryMethod() {
      return this.queryMethod;
    }
  }, {
    key: "setQueryMethod",
    value: function setQueryMethod(newQueryMethod) {
      this.queryMethod = newQueryMethod;
    }
  }, {
    key: "getSearchResultClass",
    value: function getSearchResultClass() {
      return this.searchResultClass;
    }
  }, {
    key: "setSearchResultClass",
    value: function setSearchResultClass(newElementClass) {
      this.searchResultClass = newElementClass;
    }
  }, {
    key: "updatePluginSettings",
    value: function updatePluginSettings(searchSettings) {
      if (isObject(searchSettings)) {
        if (searchSettings.searchResultClass) {
          this.setSearchResultClass(searchSettings.searchResultClass);
        }
        if (searchSettings.queryMethod) {
          this.setQueryMethod(searchSettings.queryMethod);
        }
        if (searchSettings.callback) {
          this.setCallback(searchSettings.callback);
        }
      }
    }
  }, {
    key: "onBeforeRenderer",
    value: function onBeforeRenderer(TD, row, col, prop, value, cellProperties) {
      var className = cellProperties.className || [];
      var classArray = [];
      if (typeof className === "string") {
        classArray = className.split(" ");
      } else {
        var _classArray;
        (_classArray = classArray).push.apply(_classArray, _toConsumableArray$g(className));
      }
      if (this.isEnabled() && cellProperties.isSearchResult) {
        if (!classArray.includes(this.searchResultClass)) {
          classArray.push("".concat(this.searchResultClass));
        }
      } else if (classArray.includes(this.searchResultClass)) {
        classArray.splice(classArray.indexOf(this.searchResultClass), 1);
      }
      cellProperties.className = classArray.join(" ");
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get$M(_getPrototypeOf$V(Search2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$u;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$t;
    }
  }]);
  return Search2;
}(BasePlugin);

function _typeof$Y(obj) {
  "@babel/helpers - typeof";
  return _typeof$Y = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$Y(obj);
}
function _classCallCheck$1u(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1u(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1u(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1u(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1u(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$N() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$N = Reflect.get.bind();
  } else {
    _get$N = function _get2(target, property, receiver) {
      var base = _superPropBase$N(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$N.apply(this, arguments);
}
function _superPropBase$N(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$W(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$W(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$W(subClass, superClass);
}
function _setPrototypeOf$W(o, p) {
  _setPrototypeOf$W = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$W(o, p);
}
function _createSuper$W(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$W();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$W(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$W(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$W(this, result);
  };
}
function _possibleConstructorReturn$W(self, call) {
  if (call && (_typeof$Y(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$W(self);
}
function _assertThisInitialized$W(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$W() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$W(o) {
  _getPrototypeOf$W = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$W(o);
}
var PLUGIN_KEY$v = "touchScroll";
var PLUGIN_PRIORITY$u = 200;
var TouchScroll = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$W(TouchScroll2, _BasePlugin);
  var _super = _createSuper$W(TouchScroll2);
  function TouchScroll2(hotInstance) {
    var _this;
    _classCallCheck$1u(this, TouchScroll2);
    _this = _super.call(this, hotInstance);
    _this.scrollbars = [];
    _this.clones = [];
    _this.lockedCollection = false;
    _this.freezeOverlays = false;
    return _this;
  }
  _createClass$1u(TouchScroll2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return isTouchSupported();
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.addHook("afterViewRender", function() {
        return _this2.onAfterViewRender();
      });
      this.registerEvents();
      _get$N(_getPrototypeOf$W(TouchScroll2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      this.lockedCollection = false;
      _get$N(_getPrototypeOf$W(TouchScroll2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      _get$N(_getPrototypeOf$W(TouchScroll2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "registerEvents",
    value: function registerEvents() {
      var _this3 = this;
      this.addHook("beforeTouchScroll", function() {
        return _this3.onBeforeTouchScroll();
      });
      this.addHook("afterMomentumScroll", function() {
        return _this3.onAfterMomentumScroll();
      });
    }
  }, {
    key: "onAfterViewRender",
    value: function onAfterViewRender() {
      if (this.lockedCollection) {
        return;
      }
      var _this$hot$view$_wt$wt = this.hot.view._wt.wtOverlays, topOverlay = _this$hot$view$_wt$wt.topOverlay, bottomOverlay = _this$hot$view$_wt$wt.bottomOverlay, inlineStartOverlay = _this$hot$view$_wt$wt.inlineStartOverlay, topInlineStartCornerOverlay = _this$hot$view$_wt$wt.topInlineStartCornerOverlay, bottomInlineStartCornerOverlay = _this$hot$view$_wt$wt.bottomInlineStartCornerOverlay;
      this.lockedCollection = true;
      this.scrollbars.length = 0;
      this.scrollbars.push(topOverlay);
      if (bottomOverlay.clone) {
        this.scrollbars.push(bottomOverlay);
      }
      this.scrollbars.push(inlineStartOverlay);
      if (topInlineStartCornerOverlay) {
        this.scrollbars.push(topInlineStartCornerOverlay);
      }
      if (bottomInlineStartCornerOverlay && bottomInlineStartCornerOverlay.clone) {
        this.scrollbars.push(bottomInlineStartCornerOverlay);
      }
      this.clones = [];
      if (topOverlay.needFullRender) {
        this.clones.push(topOverlay.clone.wtTable.holder.parentNode);
      }
      if (bottomOverlay.needFullRender) {
        this.clones.push(bottomOverlay.clone.wtTable.holder.parentNode);
      }
      if (inlineStartOverlay.needFullRender) {
        this.clones.push(inlineStartOverlay.clone.wtTable.holder.parentNode);
      }
      if (topInlineStartCornerOverlay) {
        this.clones.push(topInlineStartCornerOverlay.clone.wtTable.holder.parentNode);
      }
      if (bottomInlineStartCornerOverlay && bottomInlineStartCornerOverlay.clone) {
        this.clones.push(bottomInlineStartCornerOverlay.clone.wtTable.holder.parentNode);
      }
    }
  }, {
    key: "onBeforeTouchScroll",
    value: function onBeforeTouchScroll() {
      this.freezeOverlays = true;
      arrayEach(this.clones, function(clone) {
        addClass(clone, "hide-tween");
      });
    }
  }, {
    key: "onAfterMomentumScroll",
    value: function onAfterMomentumScroll() {
      var _this4 = this;
      this.freezeOverlays = false;
      arrayEach(this.clones, function(clone) {
        removeClass(clone, "hide-tween");
        addClass(clone, "show-tween");
      });
      this.hot._registerTimeout(function() {
        arrayEach(_this4.clones, function(clone) {
          removeClass(clone, "show-tween");
        });
      }, 400);
      arrayEach(this.scrollbars, function(scrollbar) {
        scrollbar.refresh();
        scrollbar.resetFixedPosition();
      });
      this.hot.view._wt.wtOverlays.syncScrollWithMaster();
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$v;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$u;
    }
  }, {
    key: "SETTING_KEYS",
    get: function get() {
      return true;
    }
  }]);
  return TouchScroll2;
}(BasePlugin);

function _typeof$Z(obj) {
  "@babel/helpers - typeof";
  return _typeof$Z = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$Z(obj);
}
function _classCallCheck$1v(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1v(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1v(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1v(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1v(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _get$O() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get$O = Reflect.get.bind();
  } else {
    _get$O = function _get2(target, property, receiver) {
      var base = _superPropBase$O(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get$O.apply(this, arguments);
}
function _superPropBase$O(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf$X(object);
    if (object === null)
      break;
  }
  return object;
}
function _inherits$X(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$X(subClass, superClass);
}
function _setPrototypeOf$X(o, p) {
  _setPrototypeOf$X = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$X(o, p);
}
function _createSuper$X(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$X();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$X(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$X(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$X(this, result);
  };
}
function _possibleConstructorReturn$X(self, call) {
  if (call && (_typeof$Z(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$X(self);
}
function _assertThisInitialized$X(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$X() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$X(o) {
  _getPrototypeOf$X = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$X(o);
}
var PLUGIN_KEY$w = "trimRows";
var PLUGIN_PRIORITY$v = 330;
var TrimRows = /* @__PURE__ */ function(_BasePlugin) {
  _inherits$X(TrimRows2, _BasePlugin);
  var _super = _createSuper$X(TrimRows2);
  function TrimRows2(hotInstance) {
    var _this;
    _classCallCheck$1v(this, TrimRows2);
    _this = _super.call(this, hotInstance);
    _this.trimmedRowsMap = null;
    return _this;
  }
  _createClass$1v(TrimRows2, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.hot.getSettings()[PLUGIN_KEY$w];
    }
  }, {
    key: "enablePlugin",
    value: function enablePlugin() {
      var _this2 = this;
      if (this.enabled) {
        return;
      }
      this.trimmedRowsMap = this.hot.rowIndexMapper.registerMap("trimRows", new TrimmingMap());
      this.trimmedRowsMap.addLocalHook("init", function() {
        return _this2.onMapInit();
      });
      _get$O(_getPrototypeOf$X(TrimRows2.prototype), "enablePlugin", this).call(this);
    }
  }, {
    key: "updatePlugin",
    value: function updatePlugin() {
      var _this3 = this;
      var trimmedRows = this.hot.getSettings()[PLUGIN_KEY$w];
      if (Array.isArray(trimmedRows)) {
        this.hot.batchExecution(function() {
          _this3.trimmedRowsMap.clear();
          arrayEach(trimmedRows, function(physicalRow) {
            _this3.trimmedRowsMap.setValueAtIndex(physicalRow, true);
          });
        }, true);
      }
      _get$O(_getPrototypeOf$X(TrimRows2.prototype), "updatePlugin", this).call(this);
    }
  }, {
    key: "disablePlugin",
    value: function disablePlugin() {
      this.hot.rowIndexMapper.unregisterMap("trimRows");
      _get$O(_getPrototypeOf$X(TrimRows2.prototype), "disablePlugin", this).call(this);
    }
  }, {
    key: "getTrimmedRows",
    value: function getTrimmedRows() {
      return this.trimmedRowsMap.getTrimmedIndexes();
    }
  }, {
    key: "trimRows",
    value: function trimRows(rows) {
      var _this4 = this;
      var currentTrimConfig = this.getTrimmedRows();
      var isValidConfig = this.isValidConfig(rows);
      var destinationTrimConfig = currentTrimConfig;
      if (isValidConfig) {
        destinationTrimConfig = Array.from(new Set(currentTrimConfig.concat(rows)));
      }
      var allowTrimRow = this.hot.runHooks("beforeTrimRow", currentTrimConfig, destinationTrimConfig, isValidConfig);
      if (allowTrimRow === false) {
        return;
      }
      if (isValidConfig) {
        this.hot.batchExecution(function() {
          arrayEach(rows, function(physicalRow) {
            _this4.trimmedRowsMap.setValueAtIndex(physicalRow, true);
          });
        }, true);
      }
      this.hot.runHooks("afterTrimRow", currentTrimConfig, destinationTrimConfig, isValidConfig, isValidConfig && destinationTrimConfig.length > currentTrimConfig.length);
    }
  }, {
    key: "trimRow",
    value: function trimRow() {
      for (var _len = arguments.length, row = new Array(_len), _key = 0; _key < _len; _key++) {
        row[_key] = arguments[_key];
      }
      this.trimRows(row);
    }
  }, {
    key: "untrimRows",
    value: function untrimRows(rows) {
      var currentTrimConfig = this.getTrimmedRows();
      var isValidConfig = this.isValidConfig(rows);
      var destinationTrimConfig = currentTrimConfig;
      var trimmingMapValues = this.trimmedRowsMap.getValues().slice();
      var isAnyRowUntrimmed = rows.length > 0;
      if (isValidConfig && isAnyRowUntrimmed) {
        arrayEach(rows, function(physicalRow) {
          trimmingMapValues[physicalRow] = false;
        });
        destinationTrimConfig = arrayReduce(trimmingMapValues, function(trimmedIndexes, isTrimmed, physicalIndex) {
          if (isTrimmed) {
            trimmedIndexes.push(physicalIndex);
          }
          return trimmedIndexes;
        }, []);
      }
      var allowUntrimRow = this.hot.runHooks("beforeUntrimRow", currentTrimConfig, destinationTrimConfig, isValidConfig && isAnyRowUntrimmed);
      if (allowUntrimRow === false) {
        return;
      }
      if (isValidConfig && isAnyRowUntrimmed) {
        this.trimmedRowsMap.setValues(trimmingMapValues);
      }
      this.hot.runHooks("afterUntrimRow", currentTrimConfig, destinationTrimConfig, isValidConfig && isAnyRowUntrimmed, isValidConfig && destinationTrimConfig.length < currentTrimConfig.length);
    }
  }, {
    key: "untrimRow",
    value: function untrimRow() {
      for (var _len2 = arguments.length, row = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        row[_key2] = arguments[_key2];
      }
      this.untrimRows(row);
    }
  }, {
    key: "isTrimmed",
    value: function isTrimmed(physicalRow) {
      return this.trimmedRowsMap.getValueAtIndex(physicalRow) || false;
    }
  }, {
    key: "untrimAll",
    value: function untrimAll() {
      this.untrimRows(this.getTrimmedRows());
    }
  }, {
    key: "isValidConfig",
    value: function isValidConfig(trimmedRows) {
      var sourceRows = this.hot.countSourceRows();
      return trimmedRows.every(function(trimmedRow) {
        return Number.isInteger(trimmedRow) && trimmedRow >= 0 && trimmedRow < sourceRows;
      });
    }
  }, {
    key: "onMapInit",
    value: function onMapInit() {
      var _this5 = this;
      var trimmedRows = this.hot.getSettings()[PLUGIN_KEY$w];
      if (Array.isArray(trimmedRows)) {
        this.hot.batchExecution(function() {
          arrayEach(trimmedRows, function(physicalRow) {
            _this5.trimmedRowsMap.setValueAtIndex(physicalRow, true);
          });
        }, true);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get$O(_getPrototypeOf$X(TrimRows2.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function get() {
      return PLUGIN_KEY$w;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function get() {
      return PLUGIN_PRIORITY$v;
    }
  }]);
  return TrimRows2;
}(BasePlugin);

function _typeof$_(obj) {
  "@babel/helpers - typeof";
  return _typeof$_ = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$_(obj);
}
function _classCallCheck$1w(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties$1w(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass$1w(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties$1w(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties$1w(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {writable: false});
  return Constructor;
}
function _inherits$Y(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  Object.defineProperty(subClass, "prototype", {writable: false});
  if (superClass)
    _setPrototypeOf$Y(subClass, superClass);
}
function _setPrototypeOf$Y(o, p) {
  _setPrototypeOf$Y = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$Y(o, p);
}
function _createSuper$Y(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$Y();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$Y(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$Y(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$Y(this, result);
  };
}
function _possibleConstructorReturn$Y(self, call) {
  if (call && (_typeof$_(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$Y(self);
}
function _assertThisInitialized$Y(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct$Y() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf$Y(o) {
  _getPrototypeOf$Y = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$Y(o);
}
function _toConsumableArray$h(arr) {
  return _arrayWithoutHoles$h(arr) || _iterableToArray$j(arr) || _unsupportedIterableToArray$O(arr) || _nonIterableSpread$h();
}
function _nonIterableSpread$h() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray$j(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles$h(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$O(arr);
}
function _slicedToArray$y(arr, i) {
  return _arrayWithHoles$A(arr) || _iterableToArrayLimit$y(arr, i) || _unsupportedIterableToArray$O(arr, i) || _nonIterableRest$A();
}
function _nonIterableRest$A() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$O(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$O(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$O(o, minLen);
}
function _arrayLikeToArray$O(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$y(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$A(arr) {
  if (Array.isArray(arr))
    return arr;
}
var SHORTCUTS_GROUP$6 = "undoRedo";
var PLUGIN_KEY$x = "undoRedo";
function UndoRedo(instance) {
  var plugin = this;
  this.instance = instance;
  this.doneActions = [];
  this.undoneActions = [];
  this.ignoreNewActions = false;
  this.enabled = false;
  instance.addHook("afterChange", function(changes, source) {
    var _this = this;
    var changesLen = changes && changes.length;
    if (!changesLen) {
      return;
    }
    var hasDifferences = changes.find(function(change) {
      var _change = _slicedToArray$y(change, 4), oldValue = _change[2], newValue = _change[3];
      return oldValue !== newValue;
    });
    if (!hasDifferences) {
      return;
    }
    var wrappedAction = function wrappedAction2() {
      var clonedChanges = changes.reduce(function(arr, change) {
        arr.push(_toConsumableArray$h(change));
        return arr;
      }, []);
      arrayEach(clonedChanges, function(change) {
        change[1] = instance.propToCol(change[1]);
      });
      var selected = changesLen > 1 ? _this.getSelected() : [[clonedChanges[0][0], clonedChanges[0][1]]];
      return new UndoRedo.ChangeAction(clonedChanges, selected);
    };
    plugin.done(wrappedAction, source);
  });
  instance.addHook("afterCreateRow", function(index, amount, source) {
    plugin.done(function() {
      return new UndoRedo.CreateRowAction(index, amount);
    }, source);
  });
  instance.addHook("beforeRemoveRow", function(index, amount, logicRows, source) {
    var wrappedAction = function wrappedAction2() {
      var originalData = plugin.instance.getSourceDataArray();
      var rowIndex = (originalData.length + index) % originalData.length;
      var physicalRowIndex = instance.toPhysicalRow(rowIndex);
      var removedData = deepClone(originalData.slice(physicalRowIndex, physicalRowIndex + amount));
      return new UndoRedo.RemoveRowAction(rowIndex, removedData, instance.getSettings().fixedRowsBottom, instance.getSettings().fixedRowsTop);
    };
    plugin.done(wrappedAction, source);
  });
  instance.addHook("afterCreateCol", function(index, amount, source) {
    plugin.done(function() {
      return new UndoRedo.CreateColumnAction(index, amount);
    }, source);
  });
  instance.addHook("beforeRemoveCol", function(index, amount, logicColumns, source) {
    var wrappedAction = function wrappedAction2() {
      var originalData = plugin.instance.getSourceDataArray();
      var columnIndex = (plugin.instance.countCols() + index) % plugin.instance.countCols();
      var removedData = [];
      var headers = [];
      var indexes = [];
      rangeEach(originalData.length - 1, function(i) {
        var column = [];
        var origRow = originalData[i];
        rangeEach(columnIndex, columnIndex + (amount - 1), function(j) {
          column.push(origRow[instance.toPhysicalColumn(j)]);
        });
        removedData.push(column);
      });
      rangeEach(amount - 1, function(i) {
        indexes.push(instance.toPhysicalColumn(columnIndex + i));
      });
      if (Array.isArray(instance.getSettings().colHeaders)) {
        rangeEach(amount - 1, function(i) {
          headers.push(instance.getSettings().colHeaders[instance.toPhysicalColumn(columnIndex + i)] || null);
        });
      }
      var columnsMap = instance.columnIndexMapper.getIndexesSequence();
      var rowsMap = instance.rowIndexMapper.getIndexesSequence();
      return new UndoRedo.RemoveColumnAction(columnIndex, indexes, removedData, headers, columnsMap, rowsMap, instance.getSettings().fixedColumnsStart);
    };
    plugin.done(wrappedAction, source);
  });
  instance.addHook("beforeCellAlignment", function(stateBefore, range, type, alignment) {
    plugin.done(function() {
      return new UndoRedo.CellAlignmentAction(stateBefore, range, type, alignment);
    });
  });
  instance.addHook("beforeFilter", function(conditionsStack) {
    plugin.done(function() {
      return new UndoRedo.FiltersAction(conditionsStack);
    });
  });
  instance.addHook("beforeRowMove", function(rows, finalIndex) {
    if (rows === false) {
      return;
    }
    plugin.done(function() {
      return new UndoRedo.RowMoveAction(rows, finalIndex);
    });
  });
  instance.addHook("beforeMergeCells", function(cellRange, auto) {
    if (auto) {
      return;
    }
    plugin.done(function() {
      return new UndoRedo.MergeCellsAction(instance, cellRange);
    });
  });
  instance.addHook("afterUnmergeCells", function(cellRange, auto) {
    if (auto) {
      return;
    }
    plugin.done(function() {
      return new UndoRedo.UnmergeCellsAction(instance, cellRange);
    });
  });
  instance.addHook("afterInit", function() {
    plugin.init();
  });
}
UndoRedo.prototype.done = function(wrappedAction, source) {
  if (this.ignoreNewActions) {
    return;
  }
  var isBlockedByDefault = source === "UndoRedo.undo" || source === "UndoRedo.redo" || source === "auto";
  if (isBlockedByDefault) {
    return;
  }
  var doneActionsCopy = this.doneActions.slice();
  var continueAction = this.instance.runHooks("beforeUndoStackChange", doneActionsCopy, source);
  if (continueAction === false) {
    return;
  }
  var newAction = wrappedAction();
  var undoneActionsCopy = this.undoneActions.slice();
  this.doneActions.push(newAction);
  this.instance.runHooks("afterUndoStackChange", doneActionsCopy, this.doneActions.slice());
  this.instance.runHooks("beforeRedoStackChange", undoneActionsCopy);
  this.undoneActions.length = 0;
  this.instance.runHooks("afterRedoStackChange", undoneActionsCopy, this.undoneActions.slice());
};
UndoRedo.prototype.undo = function() {
  if (this.isUndoAvailable()) {
    var doneActionsCopy = this.doneActions.slice();
    this.instance.runHooks("beforeUndoStackChange", doneActionsCopy);
    var action = this.doneActions.pop();
    this.instance.runHooks("afterUndoStackChange", doneActionsCopy, this.doneActions.slice());
    var actionClone = deepClone(action);
    var continueAction = this.instance.runHooks("beforeUndo", actionClone);
    if (continueAction === false) {
      return;
    }
    this.ignoreNewActions = true;
    var that = this;
    var undoneActionsCopy = this.undoneActions.slice();
    this.instance.runHooks("beforeRedoStackChange", undoneActionsCopy);
    action.undo(this.instance, function() {
      that.ignoreNewActions = false;
      that.undoneActions.push(action);
    });
    this.instance.runHooks("afterRedoStackChange", undoneActionsCopy, this.undoneActions.slice());
    this.instance.runHooks("afterUndo", actionClone);
  }
};
UndoRedo.prototype.redo = function() {
  if (this.isRedoAvailable()) {
    var undoneActionsCopy = this.undoneActions.slice();
    this.instance.runHooks("beforeRedoStackChange", undoneActionsCopy);
    var action = this.undoneActions.pop();
    this.instance.runHooks("afterRedoStackChange", undoneActionsCopy, this.undoneActions.slice());
    var actionClone = deepClone(action);
    var continueAction = this.instance.runHooks("beforeRedo", actionClone);
    if (continueAction === false) {
      return;
    }
    this.ignoreNewActions = true;
    var that = this;
    var doneActionsCopy = this.doneActions.slice();
    this.instance.runHooks("beforeUndoStackChange", doneActionsCopy);
    action.redo(this.instance, function() {
      that.ignoreNewActions = false;
      that.doneActions.push(action);
    });
    this.instance.runHooks("afterUndoStackChange", doneActionsCopy, this.doneActions.slice());
    this.instance.runHooks("afterRedo", actionClone);
  }
};
UndoRedo.prototype.isUndoAvailable = function() {
  return this.doneActions.length > 0;
};
UndoRedo.prototype.isRedoAvailable = function() {
  return this.undoneActions.length > 0;
};
UndoRedo.prototype.clear = function() {
  this.doneActions.length = 0;
  this.undoneActions.length = 0;
};
UndoRedo.prototype.isEnabled = function() {
  return this.enabled;
};
UndoRedo.prototype.enable = function() {
  if (this.isEnabled()) {
    return;
  }
  var hot = this.instance;
  this.enabled = true;
  exposeUndoRedoMethods(hot);
  this.registerShortcuts();
  hot.addHook("afterChange", onAfterChange);
};
UndoRedo.prototype.disable = function() {
  if (!this.isEnabled()) {
    return;
  }
  var hot = this.instance;
  this.enabled = false;
  removeExposedUndoRedoMethods(hot);
  this.unregisterShortcuts();
  hot.removeHook("afterChange", onAfterChange);
};
UndoRedo.prototype.destroy = function() {
  this.clear();
  this.instance = null;
  this.doneActions = null;
  this.undoneActions = null;
};
UndoRedo.Action = function() {
};
UndoRedo.Action.prototype.undo = function() {
};
UndoRedo.Action.prototype.redo = function() {
};
UndoRedo.ChangeAction = function(changes, selected) {
  this.changes = changes;
  this.selected = selected;
  this.actionType = "change";
};
inherit(UndoRedo.ChangeAction, UndoRedo.Action);
UndoRedo.ChangeAction.prototype.undo = function(instance, undoneCallback) {
  var data = deepClone(this.changes);
  var emptyRowsAtTheEnd = instance.countEmptyRows(true);
  var emptyColsAtTheEnd = instance.countEmptyCols(true);
  for (var i = 0, len = data.length; i < len; i++) {
    data[i].splice(3, 1);
  }
  instance.addHookOnce("afterChange", undoneCallback);
  instance.setDataAtCell(data, null, null, "UndoRedo.undo");
  for (var _i2 = 0, _len = data.length; _i2 < _len; _i2++) {
    var _data$_i = _slicedToArray$y(data[_i2], 2), row = _data$_i[0], column = _data$_i[1];
    if (instance.getSettings().minSpareRows && row + 1 + instance.getSettings().minSpareRows === instance.countRows() && emptyRowsAtTheEnd === instance.getSettings().minSpareRows) {
      instance.alter("remove_row", parseInt(row + 1, 10), instance.getSettings().minSpareRows);
      instance.undoRedo.doneActions.pop();
    }
    if (instance.getSettings().minSpareCols && column + 1 + instance.getSettings().minSpareCols === instance.countCols() && emptyColsAtTheEnd === instance.getSettings().minSpareCols) {
      instance.alter("remove_col", parseInt(column + 1, 10), instance.getSettings().minSpareCols);
      instance.undoRedo.doneActions.pop();
    }
  }
  instance.selectCells(this.selected, false, false);
};
UndoRedo.ChangeAction.prototype.redo = function(instance, onFinishCallback) {
  var data = deepClone(this.changes);
  for (var i = 0, len = data.length; i < len; i++) {
    data[i].splice(2, 1);
  }
  instance.addHookOnce("afterChange", onFinishCallback);
  instance.setDataAtCell(data, null, null, "UndoRedo.redo");
  if (this.selected) {
    instance.selectCells(this.selected, false, false);
  }
};
UndoRedo.CreateRowAction = function(index, amount) {
  this.index = index;
  this.amount = amount;
  this.actionType = "insert_row";
};
inherit(UndoRedo.CreateRowAction, UndoRedo.Action);
UndoRedo.CreateRowAction.prototype.undo = function(instance, undoneCallback) {
  var rowCount = instance.countRows();
  var minSpareRows = instance.getSettings().minSpareRows;
  if (this.index >= rowCount && this.index - minSpareRows < rowCount) {
    this.index -= minSpareRows;
  }
  instance.addHookOnce("afterRemoveRow", undoneCallback);
  instance.alter("remove_row", this.index, this.amount, "UndoRedo.undo");
};
UndoRedo.CreateRowAction.prototype.redo = function(instance, redoneCallback) {
  instance.addHookOnce("afterCreateRow", redoneCallback);
  instance.alter("insert_row", this.index, this.amount, "UndoRedo.redo");
};
UndoRedo.RemoveRowAction = function(index, data, fixedRowsBottom, fixedRowsTop) {
  this.index = index;
  this.data = data;
  this.actionType = "remove_row";
  this.fixedRowsBottom = fixedRowsBottom;
  this.fixedRowsTop = fixedRowsTop;
};
inherit(UndoRedo.RemoveRowAction, UndoRedo.Action);
UndoRedo.RemoveRowAction.prototype.undo = function(instance, undoneCallback) {
  var settings = instance.getSettings();
  settings.fixedRowsBottom = this.fixedRowsBottom;
  settings.fixedRowsTop = this.fixedRowsTop;
  instance.alter("insert_row", this.index, this.data.length, "UndoRedo.undo");
  instance.addHookOnce("afterViewRender", undoneCallback);
  instance.populateFromArray(this.index, 0, this.data, void 0, void 0, "UndoRedo.undo");
};
UndoRedo.RemoveRowAction.prototype.redo = function(instance, redoneCallback) {
  instance.addHookOnce("afterRemoveRow", redoneCallback);
  instance.alter("remove_row", this.index, this.data.length, "UndoRedo.redo");
};
UndoRedo.CreateColumnAction = function(index, amount) {
  this.index = index;
  this.amount = amount;
  this.actionType = "insert_col";
};
inherit(UndoRedo.CreateColumnAction, UndoRedo.Action);
UndoRedo.CreateColumnAction.prototype.undo = function(instance, undoneCallback) {
  instance.addHookOnce("afterRemoveCol", undoneCallback);
  instance.alter("remove_col", this.index, this.amount, "UndoRedo.undo");
};
UndoRedo.CreateColumnAction.prototype.redo = function(instance, redoneCallback) {
  instance.addHookOnce("afterCreateCol", redoneCallback);
  instance.alter("insert_col", this.index, this.amount, "UndoRedo.redo");
};
UndoRedo.RemoveColumnAction = function(index, indexes, data, headers, columnPositions, rowPositions, fixedColumnsStart) {
  this.index = index;
  this.indexes = indexes;
  this.data = data;
  this.amount = this.data[0].length;
  this.headers = headers;
  this.columnPositions = columnPositions.slice(0);
  this.rowPositions = rowPositions.slice(0);
  this.actionType = "remove_col";
  this.fixedColumnsStart = fixedColumnsStart;
};
inherit(UndoRedo.RemoveColumnAction, UndoRedo.Action);
UndoRedo.RemoveColumnAction.prototype.undo = function(instance, undoneCallback) {
  var _this2 = this;
  var settings = instance.getSettings();
  settings.fixedColumnsStart = this.fixedColumnsStart;
  var ascendingIndexes = this.indexes.slice(0).sort();
  var sortByIndexes = function sortByIndexes2(elem, j, arr) {
    return arr[_this2.indexes.indexOf(ascendingIndexes[j])];
  };
  var removedDataLength = this.data.length;
  var sortedData = [];
  for (var rowIndex = 0; rowIndex < removedDataLength; rowIndex++) {
    sortedData.push(arrayMap(this.data[rowIndex], sortByIndexes));
  }
  var sortedHeaders = arrayMap(this.headers, sortByIndexes);
  var changes = [];
  instance.alter("insert_col", this.indexes[0], this.indexes.length, "UndoRedo.undo");
  arrayEach(instance.getSourceDataArray(), function(rowData, rowIndex2) {
    arrayEach(ascendingIndexes, function(changedIndex, contiquesIndex) {
      rowData[changedIndex] = sortedData[rowIndex2][contiquesIndex];
      changes.push([rowIndex2, changedIndex, rowData[changedIndex]]);
    });
  });
  instance.setSourceDataAtCell(changes, void 0, void 0, "UndoRedo.undo");
  instance.columnIndexMapper.insertIndexes(ascendingIndexes[0], ascendingIndexes.length);
  if (typeof this.headers !== "undefined") {
    arrayEach(sortedHeaders, function(headerData, columnIndex) {
      instance.getSettings().colHeaders[ascendingIndexes[columnIndex]] = headerData;
    });
  }
  instance.batchExecution(function() {
    instance.rowIndexMapper.setIndexesSequence(_this2.rowPositions);
    instance.columnIndexMapper.setIndexesSequence(_this2.columnPositions);
  }, true);
  instance.addHookOnce("afterViewRender", undoneCallback);
  instance.render();
};
UndoRedo.RemoveColumnAction.prototype.redo = function(instance, redoneCallback) {
  instance.addHookOnce("afterRemoveCol", redoneCallback);
  instance.alter("remove_col", this.index, this.amount, "UndoRedo.redo");
};
UndoRedo.CellAlignmentAction = function(stateBefore, range, type, alignment) {
  this.stateBefore = stateBefore;
  this.range = range;
  this.type = type;
  this.alignment = alignment;
};
UndoRedo.CellAlignmentAction.prototype.undo = function(instance, undoneCallback) {
  var _this3 = this;
  arrayEach(this.range, function(range) {
    range.forAll(function(row, col) {
      if (row >= 0 && col >= 0) {
        instance.setCellMeta(row, col, "className", _this3.stateBefore[row][col] || " htLeft");
      }
    });
  });
  instance.addHookOnce("afterViewRender", undoneCallback);
  instance.render();
};
UndoRedo.CellAlignmentAction.prototype.redo = function(instance, undoneCallback) {
  align(this.range, this.type, this.alignment, function(row, col) {
    return instance.getCellMeta(row, col);
  }, function(row, col, key, value) {
    return instance.setCellMeta(row, col, key, value);
  });
  instance.addHookOnce("afterViewRender", undoneCallback);
  instance.render();
};
UndoRedo.FiltersAction = function(conditionsStack) {
  this.conditionsStack = conditionsStack;
  this.actionType = "filter";
};
inherit(UndoRedo.FiltersAction, UndoRedo.Action);
UndoRedo.FiltersAction.prototype.undo = function(instance, undoneCallback) {
  var filters = instance.getPlugin("filters");
  instance.addHookOnce("afterViewRender", undoneCallback);
  filters.conditionCollection.importAllConditions(this.conditionsStack.slice(0, this.conditionsStack.length - 1));
  filters.filter();
};
UndoRedo.FiltersAction.prototype.redo = function(instance, redoneCallback) {
  var filters = instance.getPlugin("filters");
  instance.addHookOnce("afterViewRender", redoneCallback);
  filters.conditionCollection.importAllConditions(this.conditionsStack);
  filters.filter();
};
var MergeCellsAction = /* @__PURE__ */ function(_UndoRedo$Action) {
  _inherits$Y(MergeCellsAction2, _UndoRedo$Action);
  var _super = _createSuper$Y(MergeCellsAction2);
  function MergeCellsAction2(instance, cellRange) {
    var _this4;
    _classCallCheck$1w(this, MergeCellsAction2);
    _this4 = _super.call(this);
    _this4.cellRange = cellRange;
    var topStartCorner = _this4.cellRange.getTopStartCorner();
    var bottomEndCorner = _this4.cellRange.getBottomEndCorner();
    _this4.rangeData = instance.getData(topStartCorner.row, topStartCorner.col, bottomEndCorner.row, bottomEndCorner.col);
    return _this4;
  }
  _createClass$1w(MergeCellsAction2, [{
    key: "undo",
    value: function undo(instance, undoneCallback) {
      var mergeCellsPlugin = instance.getPlugin("mergeCells");
      instance.addHookOnce("afterViewRender", undoneCallback);
      mergeCellsPlugin.unmergeRange(this.cellRange, true);
      var topStartCorner = this.cellRange.getTopStartCorner();
      instance.populateFromArray(topStartCorner.row, topStartCorner.col, this.rangeData, void 0, void 0, "MergeCells");
    }
  }, {
    key: "redo",
    value: function redo(instance, redoneCallback) {
      var mergeCellsPlugin = instance.getPlugin("mergeCells");
      instance.addHookOnce("afterViewRender", redoneCallback);
      mergeCellsPlugin.mergeRange(this.cellRange);
    }
  }]);
  return MergeCellsAction2;
}(UndoRedo.Action);
UndoRedo.MergeCellsAction = MergeCellsAction;
var UnmergeCellsAction = /* @__PURE__ */ function(_UndoRedo$Action2) {
  _inherits$Y(UnmergeCellsAction2, _UndoRedo$Action2);
  var _super2 = _createSuper$Y(UnmergeCellsAction2);
  function UnmergeCellsAction2(instance, cellRange) {
    var _this5;
    _classCallCheck$1w(this, UnmergeCellsAction2);
    _this5 = _super2.call(this);
    _this5.cellRange = cellRange;
    return _this5;
  }
  _createClass$1w(UnmergeCellsAction2, [{
    key: "undo",
    value: function undo(instance, undoneCallback) {
      var mergeCellsPlugin = instance.getPlugin("mergeCells");
      instance.addHookOnce("afterViewRender", undoneCallback);
      mergeCellsPlugin.mergeRange(this.cellRange, true);
    }
  }, {
    key: "redo",
    value: function redo(instance, redoneCallback) {
      var mergeCellsPlugin = instance.getPlugin("mergeCells");
      instance.addHookOnce("afterViewRender", redoneCallback);
      mergeCellsPlugin.unmergeRange(this.cellRange, true);
      instance.render();
    }
  }]);
  return UnmergeCellsAction2;
}(UndoRedo.Action);
UndoRedo.UnmergeCellsAction = UnmergeCellsAction;
UndoRedo.RowMoveAction = function(rows, finalIndex) {
  this.rows = rows.slice();
  this.finalIndex = finalIndex;
  this.actionType = "row_move";
};
inherit(UndoRedo.RowMoveAction, UndoRedo.Action);
UndoRedo.RowMoveAction.prototype.undo = function(instance, undoneCallback) {
  var _this6 = this;
  var manualRowMove = instance.getPlugin("manualRowMove");
  var copyOfRows = [].concat(this.rows);
  var rowsMovedUp = copyOfRows.filter(function(a) {
    return a > _this6.finalIndex;
  });
  var rowsMovedDown = copyOfRows.filter(function(a) {
    return a <= _this6.finalIndex;
  });
  var allMovedRows = rowsMovedUp.sort(function(a, b) {
    return b - a;
  }).concat(rowsMovedDown.sort(function(a, b) {
    return a - b;
  }));
  instance.addHookOnce("afterViewRender", undoneCallback);
  for (var i = 0; i < allMovedRows.length; i += 1) {
    var newPhysicalRow = instance.toVisualRow(allMovedRows[i]);
    manualRowMove.moveRow(newPhysicalRow, allMovedRows[i]);
  }
  instance.render();
  instance.deselectCell();
  instance.selectRows(this.rows[0], this.rows[0] + this.rows.length - 1);
};
UndoRedo.RowMoveAction.prototype.redo = function(instance, redoneCallback) {
  var manualRowMove = instance.getPlugin("manualRowMove");
  instance.addHookOnce("afterViewRender", redoneCallback);
  manualRowMove.moveRows(this.rows.slice(), this.finalIndex);
  instance.render();
  instance.deselectCell();
  instance.selectRows(this.finalIndex, this.finalIndex + this.rows.length - 1);
};
UndoRedo.prototype.init = function() {
  var settings = this.instance.getSettings().undo;
  var pluginEnabled = typeof settings === "undefined" || settings;
  if (!this.instance.undoRedo) {
    this.instance.undoRedo = this;
  }
  if (pluginEnabled) {
    this.instance.undoRedo.enable();
  } else {
    this.instance.undoRedo.disable();
  }
};
UndoRedo.prototype.registerShortcuts = function() {
  var _this7 = this;
  var shortcutManager = this.instance.getShortcutManager();
  var gridContext = shortcutManager.getContext("grid");
  var runOnlyIf = function runOnlyIf2(event) {
    return !event.altKey;
  };
  var config = {
    runOnlyIf,
    group: SHORTCUTS_GROUP$6
  };
  gridContext.addShortcuts([{
    keys: [["Control/Meta", "z"]],
    callback: function callback() {
      _this7.undo();
    }
  }, {
    keys: [["Control/Meta", "y"], ["Control/Meta", "Shift", "z"]],
    callback: function callback() {
      _this7.redo();
    }
  }], config);
};
UndoRedo.prototype.unregisterShortcuts = function() {
  var shortcutManager = this.instance.getShortcutManager();
  var gridContext = shortcutManager.getContext("grid");
  gridContext.removeShortcutsByGroup(SHORTCUTS_GROUP$6);
};
function onAfterChange(changes, source) {
  var instance = this;
  if (source === "loadData") {
    return instance.undoRedo.clear();
  }
}
function exposeUndoRedoMethods(instance) {
  instance.undo = function() {
    return instance.undoRedo.undo();
  };
  instance.redo = function() {
    return instance.undoRedo.redo();
  };
  instance.isUndoAvailable = function() {
    return instance.undoRedo.isUndoAvailable();
  };
  instance.isRedoAvailable = function() {
    return instance.undoRedo.isRedoAvailable();
  };
  instance.clearUndo = function() {
    return instance.undoRedo.clear();
  };
}
function removeExposedUndoRedoMethods(instance) {
  delete instance.undo;
  delete instance.redo;
  delete instance.isUndoAvailable;
  delete instance.isRedoAvailable;
  delete instance.clearUndo;
}
var hook = Hooks.getSingleton();
hook.add("afterUpdateSettings", function() {
  var _this$getPlugin;
  (_this$getPlugin = this.getPlugin("undoRedo")) === null || _this$getPlugin === void 0 ? void 0 : _this$getPlugin.init();
});
hook.register("beforeUndo");
hook.register("afterUndo");
hook.register("beforeRedo");
hook.register("afterRedo");
UndoRedo.PLUGIN_KEY = PLUGIN_KEY$x;
UndoRedo.SETTING_KEYS = true;

function registerAllPlugins() {
  registerPlugin(AutoColumnSize);
  registerPlugin(Autofill);
  registerPlugin(AutoRowSize);
  registerPlugin(BindRowsWithHeaders);
  registerPlugin(CollapsibleColumns);
  registerPlugin(ColumnSorting);
  registerPlugin(ColumnSummary);
  registerPlugin(Comments);
  registerPlugin(ContextMenu);
  registerPlugin(CopyPaste);
  registerPlugin(CustomBorders);
  registerPlugin(DragToScroll);
  registerPlugin(DropdownMenu);
  registerPlugin(ExportFile);
  registerPlugin(Filters);
  registerPlugin(Formulas);
  registerPlugin(HiddenColumns);
  registerPlugin(HiddenRows);
  registerPlugin(ManualColumnFreeze);
  registerPlugin(ManualColumnMove);
  registerPlugin(ManualColumnResize);
  registerPlugin(ManualRowMove);
  registerPlugin(ManualRowResize);
  registerPlugin(MergeCells);
  registerPlugin(MultiColumnSorting);
  registerPlugin(MultipleSelectionHandles);
  registerPlugin(NestedHeaders);
  registerPlugin(NestedRows);
  registerPlugin(PersistentState);
  registerPlugin(Search);
  registerPlugin(TouchScroll);
  registerPlugin(TrimRows);
  registerPlugin(UndoRedo);
}

function registerAllModules() {
  registerAllEditors();
  registerAllRenderers();
  registerAllValidators();
  registerAllCellTypes();
  registerAllPlugins();
}

export { registerAllModules };
