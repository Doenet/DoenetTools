@top Document { topLevel+ }

entity {
  Text |
  EntityReference |
  CharacterReference |
  Element |
  Comment |
  MismatchedCloseTag |
  Macro |
  incompleteStartCloseTag
}

Element {
  OpenTag entity* (CloseTag | MissingCloseTag) |
  SelfClosingTag
}

topLevel {
  Text |
  Comment |
  Macro |
  Element
}

OpenTag[closedBy="CloseTag MissingCloseTag"] {
  StartTag TagName Attribute* endTag
}

SelfClosingTag {
  StartTag TagName Attribute* selfCloseEndTag
}

CloseTag[openedBy=OpenTag] {
  StartCloseTag TagName  endTag
}

MismatchedCloseTag {
  mismatchedStartCloseTag TagName endTag
}

Attribute {
  AttributeName |
  AttributeName Is AttributeValue
}

AttributeValue {singleQuoteAttributeValue | doubleQuoteAttributeValue}

Comment { "<!--" commentContent* "-->" }

@context elementContext from "./tokens.js"

@external tokens startTag from "./tokens.js" {
  StartTag[closedBy="SelfCloseEndTag EndTag"]
  StartCloseTag
  MissingCloseTag
  mismatchedStartCloseTag[@name=StartCloseTag]
  incompleteStartCloseTag[@name=StartCloseTag]
}

@external tokens commentContent from "./tokens.js" { commentContent }

singleQuoteAttributeValue { "'" (attributeContentSingleQuote | EntityReference | CharacterReference | Macro)* "'" }
doubleQuoteAttributeValue { "\"" (attributeContentDoubleQuote | EntityReference | CharacterReference | Macro)* "\"" }

@tokens {
  endTag { ">" }

  selfCloseEndTag { "/>" }

  nameChar {
    std.asciiLetter | "-" | "_" | std.digit 
  }

  identifier { nameChar+ }

  TagName { identifier }

  Macro { "$" "$"? identifier | "$" "$"? "(" identifier ")" }

  AttributeName { identifier }

  attributeContentSingleQuote { "$" |  !['&$ \t\r\n]  !['&$]* }

  attributeContentDoubleQuote { "$" |  !["&$ \t\r\n]  !["&$]* }

  EntityReference { "&" ![#; ]+ ";" }

  CharacterReference { "&#" ![; ]+ ";" }

  Is { "=" }

  Text { ![<&$] ![<&$]* }

  space { std.whitespace+ }

  @precedence {Macro, attributeContentSingleQuote}
  @precedence {Macro, attributeContentDoubleQuote}

  @precedence {attributeContentSingleQuote, space}
  @precedence {attributeContentDoubleQuote, space}

  @precedence {Text, space}

}
@skip { space }
@detectDelim
